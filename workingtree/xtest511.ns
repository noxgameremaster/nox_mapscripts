
int SafeZone;
int XtraUserCoins = 20;
int DunCnt = 6, BossCnt = 20, GOver;
int LastUnit, GlobalHeadNode;
int player[20], Dungeon[6], DGate[6];

int EnableMemoryReadWriteFunction(int t) {}


int GetScrDataField(int functionName)
{
    return GetMemory(GetMemory(0x75ae28) + (0x30 * functionName + 0x1c));
}

int GetScrCodeField(int functionName)
{
    return GetMemory(GetMemory(0x75ae28) + (0x30 * functionName + 0x20));
}

void ClientMain()
{
    int v0;

    if (!v0)
    {
        v0 = EnableMemoryReadWriteFunction(0);
        SetMemory(0x69ba98, 0x43de10);
        PlayerClassCommonWhenEntry();

        v0 ++;
    }
}

int NetClientExec()
{
    int arr[2];

    arr[0] = 0xdf;
    return GetScrDataField(NetClientExec);
}

void ClientSetMemory(int user, int targetAddr, int byte)
{
    int ptr = NetClientExec();

    SetMemory(ptr + 1, targetAddr - 0x6d495c);
    SetMemory(ptr + 5, byte);
    NetClientSend(user, ptr, 6);
}

void DelayLink(int pUnit)
{
    ClientSetMemory(pUnit, 0x69ba98 + 0, 0);
    ClientSetMemory(pUnit, 0x69ba98 + 1, 0x10);
    ClientSetMemory(pUnit, 0x69ba98 + 2, 0x75);
}

void ClientEntry(int cliUnit)
{
    int scrNumber;

    scrNumber = ClientMain & 0xff;
    //6A 00 6A 00/ 6A 7F E8 05/ 63 DB FF 83/ C4 0C 68 B0/ 95 4B 00 C3
    ClientSetMemory(cliUnit, 0x751000, 0x6a);
    ClientSetMemory(cliUnit, 0x751001, 0x00);
    ClientSetMemory(cliUnit, 0x751002, 0x6a);
    ClientSetMemory(cliUnit, 0x751003, 0x00);
    ClientSetMemory(cliUnit, 0x751004, 0x6a);
    ClientSetMemory(cliUnit, 0x751005, scrNumber);
    ClientSetMemory(cliUnit, 0x751006, 0xe8);
    ClientSetMemory(cliUnit, 0x751007, 0x05);
    ClientSetMemory(cliUnit, 0x751008, 0x63);
    ClientSetMemory(cliUnit, 0x751009, 0xdb);
    ClientSetMemory(cliUnit, 0x75100a, 0xff);
    ClientSetMemory(cliUnit, 0x75100b, 0x83);
    ClientSetMemory(cliUnit, 0x75100c, 0xc4);
    ClientSetMemory(cliUnit, 0x75100d, 0x0c);
    ClientSetMemory(cliUnit, 0x75100e, 0x68);
    ClientSetMemory(cliUnit, 0x75100f, 0x10);
    ClientSetMemory(cliUnit, 0x751010, 0xde);
    ClientSetMemory(cliUnit, 0x751011, 0x43);
    ClientSetMemory(cliUnit, 0x751012, 0x00);
    ClientSetMemory(cliUnit, 0x751013, 0xc3);
    FrameTimerWithArg(1, cliUnit, DelayLink);
}

void HealingBuff(int sUnit)
{
    int owner = GetOwner(sUnit), durate = GetDirection(sUnit);

    while (IsObjectOn(sUnit))
    {
        if (CurrentHealth(owner))
        {
            if (durate)
            {
                RestoreHealth(owner, 1);
                LookWithAngle(sUnit, durate - 1);
                MoveObject(sUnit, GetObjectX(owner), GetObjectY(owner));
                FrameTimerWithArg(1, sUnit, HealingBuff);
                break;
            }
            GreenSparkFx(GetObjectX(owner), GetObjectY(owner));
            UniPrint(owner, "힐링 포션의 효력이 사라졌습니다");
        }
        Delete(sUnit);
        break;
    }
}

void ItemUseClassTeleportAmulet()
{
    if (CurrentHealth(other))
    {
        Delete(self);
        Effect("SMOKE_BLAST", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        MoveObject(other, GetWaypointX(12), GetWaypointY(12));
        PlaySoundAround(other, 592);
        Effect("COUNTERSPELL_EXPLOSION", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        UniPrint(other, "시작 위치로 공간이동했습니다");
    }
}

void ItemUseFastHealingPotion()
{
    int unit;

    if (CurrentHealth(other))
    {
        Delete(self);
        unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(other), GetObjectY(other));
        SetOwner(other, unit);
        UnitNoCollide(unit);
        LookWithAngle(unit, 250);
        UnitSetEnchantTime(unit, 8, 0);
        UnitSetEnchantTime(unit, 26, 0);
        UnitSetEnchantTime(unit, 21, 0);
        FrameTimerWithArg(3, unit, HealingBuff);
        UniPrint(other, "힐링 포션을 사용했습니다. 잠시동안 체력이 빠르게 회복될 것입니다");
    }
}

void ItemUseShockEnchant()
{
    if (CurrentHealth(other))
    {
        Delete(self);
        UnitSetEnchantTime(other, 22, 30 * 70);
    }
}

void ItemUseOneCoin()
{
    Delete(self);
    if (XtraUserCoins)
    {
        XtraUserCoins ++;
        UniPrint(other, "코인 1개가 추가되어 모두 " + IntToString(XtraUserCoins) + "개를 보유하고 있습니다");
    }
}

int ImportGreenExplosionFunc()
{
    int arr[17], link;

    if (!link)
    {
        arr[0] = 0x32006856; arr[1] = 0x50680052; arr[2] = 0x68005072; arr[3] = 0x00403560; arr[4] = 0x54FF086A;
		arr[5] = 0xC4830424; arr[6] = 0xFFF08B04; arr[7] = 0x89042454; arr[8] = 0x2454FF06; arr[9] = 0x04468904;
		arr[10] = 0x0000C868; arr[11] = 0x54FF5600; arr[12] = 0xC4831024; arr[13] = 0x425D6814; arr[14] = 0xFF560040;
		arr[15] = 0x83042454; arr[16] = 0xC35E08C4;
        link = GetScrDataField(ImportGreenExplosionFunc);
    }
    return link;
}

void GreenExplosion(float x, float y)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportGreenExplosionFunc());
    Unused5a(ToInt(y), ToInt(x));
    SetMemory(0x5c31f4, temp);
}


/////PlayerHandlerClass/////////////////////

void ChangePlayerDeathSound(int handle, int soundNumber)
{
    SetMemory(handle + 0x258, soundNumber);
}

int OpcodeGetTargetAddr(int curAddr)
{
    return GetMemory(curAddr + 1) + curAddr + 5;
}

int DiePlayerHandlerCopiedCode()
{
    int arr[314], link;

    if (!link)
    {
        CallNode54d2b0();
        link = GetScrDataField(DiePlayerHandlerCopiedCode);
        OpcodeCopiesInvoke(link, GetScrDataField(CallNode54d2b0), 0x54d2b0, 0x54d794);
    }
    return link;
}

void DiePlayerHandlerEntry(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        SetMemory(ptr + 0x2d4, DiePlayerHandlerCopiedCode());
}

void CallNode54d2b0()
{
    int arr[40];

    if (!arr[0])
    {
        arr[0] = 0x54d2d1;
        arr[1] = 0x54d2e3;
        arr[2] = 0x54d2f3;
        arr[3] = 0x54d30a;
        arr[4] = 0x54d348;
        arr[5] = 0x54d375;
        arr[6] = 0x54d3aa;
        arr[7] = 0x54d45c;
        arr[8] = 0x54d47b;
        arr[9] = 0x54d513;
        arr[10] = 0x54d527;
        arr[11] = 0x54d566;
        arr[12] = 0x54d574;
        arr[13] = 0x54d588;
        arr[14] = 0x54d594;
        arr[15] = 0x54d5a6;
        arr[16] = 0x54d5b2;
        arr[17] = 0x54d5c4;
        arr[18] = 0x54d5d1;
        arr[19] = 0x54d5e2;
        arr[20] = 0x54d5f4;
        arr[21] = 0x54d610;
        arr[22] = 0x54d622;
        arr[23] = 0x54d62c;
        arr[24] = 0x54d639;
        arr[25] = 0x54d642;
        arr[26] = 0x54d65b;
        arr[27] = 0x54d662;
        arr[28] = 0x54d668;
        arr[29] = 0x54d67a;
        arr[30] = 0x54d680;
        arr[31] = 0x54d693;
        arr[32] = 0x54d6a6;
        arr[33] = 0x54d727;
        arr[34] = 0x54d72d;
        arr[35] = 0x54d733;
        arr[36] = 0x54d73d;
        arr[37] = 0x54d749;
        arr[38] = 0x54d782;
    }
}

/////PlayerHandlerClassEnd//////////////////


int CallNode4f37d0()
{
    int arr[21];

    if (!arr[0])
    {
        arr[0] = 0x4f37f1;
        arr[1] = 0x4f3806;
        arr[2] = 0x4f382e;
        arr[3] = 0x4f3841;
        arr[4] = 0x4f3852;
        arr[5] = 0x4f3862;
        arr[6] = 0x4f38d4;
        arr[7] = 0x4f38fb;
        arr[8] = 0x4f390a;
        arr[9] = 0x4f3973;
        arr[10] = 0x4f3992;
        arr[11] = 0x4f39a1;
        arr[12] = 0x4f39c8;
        arr[13] = 0x4f39d9;
        arr[14] = 0x4f39e2;
        arr[15] = 0x4f39eb;
        arr[16] = 0x4f3a06;
        arr[17] = 0x4f3a19;
        arr[18] = 0x4f3a2a;
        arr[19] = 0x4f3a43;
    }
    return 0;
}

int CallNode4f31e0()
{
    int arr[12];

    if (!arr[0])
    {
        arr[0] = 0x4f31e8;
        arr[1] = 0x4f3200;
        arr[2] = 0x4f3211;
        arr[3] = 0x4f3223;
        arr[4] = 0x4f325a;
        arr[5] = 0x4f32c8;
        arr[6] = 0x4f32e9;
        arr[7] = 0x4f32f5;
        arr[8] = 0x4f3315;
        arr[9] = 0x4f3324;
        arr[10] = 0x4f3330;
    }
    return 0;
}

int PotionPickupPart2Code()
{
    int arr[90], link;

    if (!link)
    {
        CallNode4f31e0();
        link = GetScrDataField(PotionPickupPart2Code);
        OpcodeCopiesInvoke(link, GetScrDataField(CallNode4f31e0), 0x4f31e0, 0x4f3344);
    }
    return link;
}

int PotionPickupPartCode()
{
    int arr[162], link;

    if (!link)
    {
        CallNode4f37d0();
        link = GetScrDataField(PotionPickupPartCode);
        OpcodeCopiesInvoke(link, GetScrDataField(CallNode4f37d0), 0x4f37d0, 0x4f3a54);
    }
    return link;
}

void PotionPickupCustomizing()
{
    int ptr1 = PotionPickupPartCode();
    int ptr2 = PotionPickupPart2Code();

    SetMemory(ptr1 + 0x68, (GetMemory(ptr1 + 0x68) & 0xffffff00) | 0xeb);
    SetMemory(ptr2 + 0x128, (GetMemory(ptr2 + 0x128) & 0xffffff00) | 0x09);
    SetMemory(ptr1 + 0x25a + 1, ptr2 - (ptr1 + 0x25a) - 5);
}

int PotionPickupRegist(int potion)
{
    int ptr = UnitToPtr(potion);

    if (ptr)
    {
        if (GetMemory(ptr + 0x2c4) == 0x4f37d0)
            SetMemory(ptr + 0x2c4, PotionPickupPartCode());
    }
    return potion;
}

////////////Impletmented ChainingList//////


int AddNewNode(int headNode, int data)
{
    int node = CreateObjectAt("ImaginaryCaster", GetObjectX(data), GetObjectY(data));

    SetUnit1C(node, data);
    SetNextNode(node, GetNextNode(headNode));
    SetPrevNode(node, headNode);
    SetPrevNode(GetNextNode(headNode), node);
    SetNextNode(headNode, node);
    LookWithAngle(headNode, GetDirection(headNode) + 1);

    return node;
}

///////////////////////////////////////////

int AirshipCaptainBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1936877889; arr[1] = 1131440488; arr[2] = 1635020897; arr[3] = 28265; arr[4] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 130; arr[18] = 100; arr[19] = 60; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 32768; arr[24] = 1067869798; 
		arr[25] = 0; arr[26] = 4; arr[27] = 0; arr[28] = 1077936128; arr[29] = 20; 
		arr[30] = 0; arr[31] = 8; arr[32] = 12; arr[33] = 20;
		arr[55] = 0; arr[56] = 0; arr[57] = 5547984; arr[58] = 5546320; arr[59] = 5542432; 
        link = GetScrDataField(AirshipCaptainBinTable);
	}
	return link;
}

int WizardRedBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1635412311; arr[1] = 1699898482; arr[2] = 100;
		arr[15] = 0; arr[16] = 80000; arr[17] = 300; arr[18] = 100; arr[19] = 50; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 40; arr[24] = 1067869798; 
		arr[25] = 0; arr[26] = 4; arr[27] = 0; arr[28] = 1106247680; arr[29] = 20; 
		arr[30] = 0; arr[31] = 0; arr[32] = 12; arr[33] = 20; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 1952539972; arr[38] = 1818313320; arr[39] = 1634879084; 
		arr[40] = 1852140903; arr[41] = 116; arr[42] = 0;
		arr[53] = 1128792064; arr[54] = 0; 
		arr[55] = 15; arr[56] = 21; arr[57] = 0; arr[58] = 0; arr[59] = 5542784;
        link = GetScrDataField(WizardRedBinTable);
	}
	return link;
}

int CreateYellowPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 639); //YellowPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateBlackPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 641); //BlackPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateWhitePotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 640); //WhitePotion
    SetMemory(ptr + 12, GetMemory(ptr + 12) ^ 0x20);
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

void TeleportAmulet(int sUnit)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
    {
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, ItemUseClassTeleportAmulet);
    }
}

void HealingPotion(int sUnit)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
    {
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, ItemUseFastHealingPotion);
    }
}

void ElectricAmulet(int sUnit)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
    {
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, ItemUseShockEnchant);
    }
}

void AddOneCoin(int sUnit)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
    {
        SetMemory(ptr + 0x2c4, 0x4f31e0);
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, ItemUseOneCoin);
    }
}

int CheckPotionThingID(int unit)
{
    int thingID = GetUnitThingID(unit), x = unit;

    if (thingID == 639)
        x = CreateYellowPotion(125, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 640)
        x = CreateWhitePotion(100, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 641)
        x = CreateBlackPotion(85, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 1184)
        TeleportAmulet(unit);
    else if (thingID == 239)
        ElectricAmulet(unit);
    else if (thingID == 1185)
        HealingPotion(unit);
    else if (thingID == 2689)
        AddOneCoin(unit);

    if (x ^ unit) Delete(unit);
    PotionPickupRegist(x);
    return x;
}

int WeirdlingBeastBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1919509847; arr[1] = 1852402788; arr[2] = 1634026087; arr[3] = 29811;
		arr[17] = 85; arr[18] = 50; arr[19] = 55; 
		arr[21] = 1065353216; arr[23] = 32776; arr[24] = 1068708659; 
		arr[26] = 4; arr[28] = 1082130432; arr[29] = 20; 
		arr[31] = 8; arr[32] = 8; arr[33] = 16; arr[57] = 5548112; arr[59] = 5542784;
        link = GetScrDataField(WeirdlingBeastBinTable);
	}
	return link;
}

int HecubahBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1969448264; arr[1] = 6840674; arr[17] = 600; arr[19] = 100; arr[21] = 1065353216; 
		arr[24] = 1065353216; arr[25] = 1; arr[26] = 4; arr[27] = 7; arr[28] = 1092616192; 
		arr[29] = 50; arr[31] = 11; arr[57] = 5548288; arr[59] = 5542784;
        link = GetScrDataField(HecubahBinTable);
	}
	return link;
}

int LichLordBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1751345484; arr[1] = 1685221196; arr[17] = 20; arr[19] = 100; 
		arr[21] = 1065353216; arr[24] = 1065353216; 
		arr[25] = 1; arr[26] = 4; arr[27] = 7; arr[28] = 1108082688; arr[29] = 50; 
		arr[30] = 1092616192; arr[32] = 9; arr[33] = 17; arr[57] = 5548288; arr[59] = 5542784;
        link = GetScrDataField(LichLordBinTable);
	}
	return link;
}

int BomberGreenBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1651339074; arr[1] = 1917284965; arr[2] = 7234917;
		arr[17] = 20; arr[19] = 80; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 0; arr[24] = 1065353216; 
		arr[31] = 4; arr[32] = 0; arr[33] = 0; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 1801545047; arr[38] = 1701996870; arr[39] = 1819042146; 
		arr[53] = 1128792064;
		arr[55] = 3; arr[56] = 6; arr[57] = 5548112; arr[58] = 5545344; arr[59] = 5543344;
        link = GetScrDataField(BomberGreenBinTable);
	}
	return link;
}

int FireSpriteBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1701996870; arr[1] = 1769107539; arr[2] = 25972; arr[17] = 85; arr[18] = 25; arr[19] = 90; 
		arr[21] = 1065353216; arr[23] = 65544; arr[24] = 1065353216; 
		arr[37] = 1801545047; arr[38] = 1701996870; arr[39] = 1819042146; 
		arr[53] = 1128792064;
		arr[55] = 15; arr[56] = 21; arr[58] = 5545472;
        link = GetScrDataField(FireSpriteBinTable);
	}
	return link;
}

int MaidenBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1684627789; arr[1] = 28261; arr[17] = 30; arr[18] = 92; arr[19] = 60; 
		arr[21] = 1065353216; arr[22] = 0; arr[23] = 32776; arr[24] = 1065688760; 
		arr[25] = 0; arr[26] = 0; arr[27] = 1; arr[28] = 1106247680; arr[29] = 22; 
		arr[30] = 1101004800; arr[31] = 2; arr[32] = 22; arr[33] = 30; arr[58] = 5546320; arr[59] = 5542784; 
        link = GetScrDataField(MaidenBinTable);
	}
	return link;
}

int GoonBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1852796743; arr[17] = 85; arr[19] = 80; 
		arr[21] = 1065353216; arr[22] = 0; arr[23] = 32776; arr[24] = 1066192077; 
		arr[26] = 4; arr[27] = 0; arr[28] = 1106247680; arr[29] = 25; 
		arr[30] = 1092616192; arr[31] = 4; arr[32] = 20; arr[33] = 28; arr[34] = 2; 
		arr[35] = 3; arr[36] = 20; arr[57] = 5548176; arr[58] = 5546608; arr[59] = 5543680;
        link = GetScrDataField(GoonBinTable);
	}
	return link;
}

int BlackWidowBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1667329090; arr[1] = 1684625259; arr[2] = 30575;
		arr[17] = 130; arr[18] = 45; arr[19] = 85; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 4; arr[24] = 1069547520; 
		arr[25] = 0; arr[26] = 4; arr[27] = 3; arr[28] = 1097859072; arr[29] = 25; 
		arr[30] = 0; arr[31] = 8; arr[32] = 13; arr[33] = 21; arr[34] = 50; 
		arr[35] = 3; arr[36] = 6; arr[37] = 1684631635; arr[38] = 1884516965; arr[39] = 29801; 
		arr[53] = 1128792064;
		arr[55] = 20; arr[56] = 28; arr[59] = 5544896; 
		arr[61] = 45071360;
        link = GetScrDataField(BlackWidowBinTable);
	}
	return link;
}

int Bear2BinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1918985538; arr[1] = 50;
		arr[15] = 0; arr[16] = 20000; arr[17] = 90; arr[18] = 100; arr[19] = 40; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 65545; arr[24] = 1067450368; 
		arr[27] = 1; arr[28] = 1106247680; arr[29] = 50; 
		arr[30] = 1103626240; arr[31] = 2; arr[32] = 20; arr[33] = 30; arr[58] = 5547856; arr[59] = 5542784;
        link = GetScrDataField(Bear2BinTable);
	}
	return link;
}

int NecromancerBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1919116622; arr[1] = 1851878767; arr[2] = 7497059; arr[17] = 350; arr[19] = 93; 
		arr[21] = 1065353216; arr[23] = 32768; arr[24] = 1065353216; arr[25] = 1; arr[26] = 2; 
		arr[28] = 1103626240; arr[29] = 80; arr[30] = 1092616192; arr[31] = 11; arr[32] = 7; 
		arr[33] = 15; arr[34] = 1; arr[35] = 2; arr[36] = 30; arr[59] = 5542784;
        link = GetScrDataField(NecromancerBinTable);
	}
	return link;
}

void NecromancerSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1077055324);
		SetMemory(ptr + 0x224, 1077055324);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 32768);
		SetMemory(GetMemory(ptr + 0x22c), 350);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 350);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, NecromancerBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 1065353216);
	}
}

void HecubahSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1077936128);
		SetMemory(ptr + 0x224, 1077936128);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 0);
		SetMemory(GetMemory(ptr + 0x22c), 600);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 600);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, HecubahBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 1065353216);
	}
}

void UnitZeroFleeRange(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0); //Flee Range set to 0
}

void UnitLinkBinScript(int unit, int binAddr)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, binAddr);
}

void SetUnitVoice(int unit, int voiceIndex)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(voiceIndex));
}

int GetMemory(int addr)
{
    return Unknownb9(addr);
}

void SetMemory(int addr, int value)
{
    Unused59(addr, value);
}

int GetOwner(int unit)
{
    int ptr = UnitToPtr(unit), res;

    if (ptr)
    {
        res = GetMemory(ptr + 0x1fc);
        if (res)
            return GetMemory(res + 0x2c);
    }
    return 0;
}

int DummyUnitCreate(string name, float locX, float locY)
{
    int unit = CreateObjectAt(name, locX, locY);

    Damage(unit, 0, MaxHealth(unit) + 1, -1);
    ObjectOff(unit);
    Frozen(unit, 1);
    return unit;
}

void MoneyImage() {}

void BuldakImage() {}

void KeepOutMonsterHere()
{
    if (IsOwnedBy(other, GetMaster()))
    {
        PushObjectTo(other, UnitRatioX(other, SafeZone, 100.0), UnitRatioY(other, SafeZone, 100.0));
    }
}

int HealingWishWell(int wp)
{
    int unit = CreateObject("WizardWhite", wp);

    Enchant(CreateObject("InvisibleLightBlueHigh", wp), "ENCHANT_SHIELD", 0.0);
    LookWithAngle(unit, 64);
    ObjectOff(unit);
    Damage(unit, 0, MaxHealth(unit) + 1, -1);
    Frozen(unit, 1);
    SetDialog(unit, "a", StartUnitHealing, StartUnitHealing);

    return unit;
}

void StartUnitHealing()
{
    int unit;

    if (!HasEnchant(other, "ENCHANT_CROWN"))
    {
        Enchant(other, "ENCHANT_CROWN", 8.0);
        MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
        AudioEvent("ProtectionFromPoisonEffect", 1);
        AudioEvent("LongBellsDown", 1);
        unit = CreateObject("InvisibleLightBlueHigh", 1);
        SetOwner(other, unit);
        Enchant(unit, "ENCHANT_RUN", 0.0);
        FrameTimerWithArg(1, unit, UnitHealingHandler);
        UniPrint(other, "힐링버프 감지됨, 잠시동안 당신의 체력이 지속적으로 회복됩니다");
    }
}

void UnitHealingHandler(int ptr)
{
    int owner = GetOwner(ptr);

    if (HasEnchant(owner, "ENCHANT_CROWN") && IsObjectOn(ptr))
    {
        RestoreHealth(owner, 1);
        MoveObject(ptr, GetObjectX(owner), GetObjectY(owner));
        FrameTimerWithArg(1, ptr, UnitHealingHandler);
    }
    else
        Delete(ptr);
}

void TestFunction()
{
    UniPrintToAll("***        던전 레이드하기_____ 제작. Rainbow Company                   ***");
    UniPrintToAll("*** 주 임무: 6개의 던전을 다 털고나서 열리는 마지막 던전을 털면 승리합니다 ***");
    UniPrintToAll("초반 20라이프가 제공됩니다, 라이프는 돈으로 추가할 수 있으며 라이프가 모두 소모되면 게임오버됩니다");
}

int GetPrevNode(int cur)
{
    return GetOwner(cur);
}

int GetNextNode(int cur)
{
    return ToInt(GetObjectZ(cur));
}

void SetPrevNode(int cur, int tg)
{
    SetOwner(tg, cur);
}

void SetNextNode(int cur, int tg)
{
    Raise(cur, ToFloat(tg));
}

int NewList(int data)
{
    int cur = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(data), GetObjectY(data));
    Raise(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(cur), GetObjectY(cur)), ToFloat(data));

    SetPrevNode(cur, GetPrevNode(GlobalHeadNode + 1));
	SetNextNode(cur, GlobalHeadNode + 1);
	SetNextNode(GetPrevNode(GlobalHeadNode + 1), cur);
	SetPrevNode(GlobalHeadNode + 1, cur);

    return cur;
}

int RemoveList(int cur)
{
    int next = GetNextNode(cur);
    SetNextNode(GetPrevNode(cur), GetNextNode(cur));
    SetPrevNode(GetNextNode(cur), GetPrevNode(cur));
    Delete(cur);
    Delete(cur + 1);
    return next;
}

void RemoveMagicSword(int unit)
{
    if (IsObjectOn(unit))
        Delete(unit);
    Delete(unit + 1);
}

void MagicWeaponLoop()
{
    int cur = GetNextNode(GlobalHeadNode);

    while (IsObjectOn(cur))
    {
        if (ToInt(GetObjectZ(cur + 1)))
        {
            if (MagicWeaponProperty(ToInt(GetObjectZ(cur + 1))))
                cur = GetNextNode(cur);
            else
            {
                RemoveMagicSword(ToInt(GetObjectZ(cur + 1)));
                cur = RemoveList(cur);
            }
        }
        else
            break;
    }
    if (GOver)  return;
    else        FrameTimer(1, MagicWeaponLoop);
}

int MagicWeaponProperty(int unit)
{
    int owner = GetOwner(unit);

    if (CurrentHealth(owner))
    {
        if (PlayerEquipedWeapon(owner) == unit)
        {
            if (CheckWeaponStrike(owner))
            {
                CallFunctionWithArg(MWeaponFuncPtr() + GetDirection(unit + 1), owner);
            }
        }
    }
    return IsObjectOn(unit);
}

int CheckWeaponStrike(int unit)
{
    int inv = PlayerEquipedWeapon(unit);

    if (IsObjectOn(inv))
        return ((CheckPlayerInput(unit) == 6) && !HasEnchant(unit, "ENCHANT_PROTECT_FROM_MAGIC"));
    return 0;
}

int MWeaponFuncPtr()
{
    StopScript(LaiserSword);
}

void LaiserSword(int owner)     //TODO: SpecialProperty - Laiser Sword
{
    float x_vect = UnitAngleCos(owner, 30.0), y_vect = UnitAngleSin(owner, 30.0);
    int k, ptr = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner), GetObjectY(owner)) + 1;

    Enchant(owner, EnchantList(19), 0.9);
    Delete(ptr - 1);
    MoveWaypoint(1, GetObjectX(owner) + x_vect, GetObjectY(owner) + y_vect);
    for (k = 0 ; k < 11 ; k ++)
    {
        Frozen(CreateObject("Maiden", 1), 1);
        SetOwner(owner, ptr + k);
        DeleteObjectTimer(ptr + k, 1);
        SetCallback(ptr + k, 9, LaiserLifleTouched);
        Effect("SENTRY_RAY", GetObjectX(owner), GetObjectY(owner), GetObjectX(ptr + k), GetObjectY(ptr + k));
        MoveWaypoint(1, GetWaypointX(1) + x_vect, GetWaypointY(1) + y_vect);
        if (!IsVisibleTo(owner, ptr + k))
            break;
    }
}

void WhiteOutHammer(int owner)      //TODO: SpecialProperty - Whiteout Hammer
{
    int unit;

    UnitSetEnchantTime(owner, 19, 33);
    SplashDamageAt(owner, 225, GetObjectX(owner), GetObjectY(owner), 200.0);
    unit = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner), GetObjectY(owner));
    CastSpellObjectObject("SPELL_TURN_UNDEAD", unit, unit);
    DeleteObjectTimer(unit, 30);
}

void EnergyParHammer(int owner)     //TODO: SpecialProperty - 
{
    float xVect = UnitAngleCos(owner, 23.0), yVect = UnitAngleSin(owner, 23.0);
    int unit = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner) + xVect, GetObjectY(owner) + yVect);

    Raise(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner) - xVect, GetObjectY(owner) - yVect), yVect);
    Raise(unit, xVect);

    SetOwner(owner, unit);
    LookWithAngle(unit, 150);
    UnitSetEnchantTime(owner, 19, 50);
    FrameTimerWithArg(1, unit, EnergyParHandler);
}

void TripleArrowHammer(int owner)       //TODO: SpecialProperty -
{
    int unit = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner), GetObjectY(owner));

    SetOwner(owner, unit);
    UnitSetEnchantTime(owner, 19, 45);
    FrameTimerWithArg(1, unit, TripleArrowShot);
}

void DeathraySword(int owner)       //TODO: SpecialProperty -
{
    float xVect = UnitAngleCos(owner, 23.0), yVect = UnitAngleSin(owner, 23.0);
    int unit = CreateObjectAt("WeirdlingBeast", GetObjectX(owner) + xVect, GetObjectY(owner) + yVect);

    MoveWaypoint(1, GetObjectX(owner), GetObjectY(owner));
    AudioEvent("TripleChime", 1);
    AudioEvent("FirewalkOn", 1);
    Effect("WHITE_FLASH", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
    DeleteObjectTimer(CreateObjectAt("ManaBombCharge", GetObjectX(owner), GetObjectY(owner)), 18);
    SetOwner(owner, unit);
    SetUnitScanRange(unit, 450.0);
    LookWithAngle(unit, GetDirection(owner));
    SetCallback(unit, 3, DeathrayDetectedTarget);
    DeleteObjectTimer(unit, 1);
    Enchant(owner, "ENCHANT_PROTECT_FROM_MAGIC", 0.8);
}

void ShurikenSword(int owner)       //TODO: SpecialProperty -
{
    int unit = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner) + UnitAngleCos(owner, 21.0), GetObjectY(owner) + UnitAngleSin(owner, 21.0));
    LookWithAngle(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit)), GetDirection(owner));
    Raise(unit, 250.0);
    SetOwner(owner, unit);
    LookWithAngle(unit, 35);
    UnitSetEnchantTime(owner, 19, 60);
    FrameTimerWithArg(1, unit, AutoTrackingMissile);
}

void WolfShooting(int owner)        //TODO: SpecialProperty - NEW
{
    int unit = DummyUnitCreate("WhiteWolf", GetObjectX(owner) + UnitAngleCos(owner, 23.0), GetObjectY(owner) + UnitAngleSin(owner, 23.0));

    SetOwner(owner, CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)));
    Raise(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)), UnitAngleSin(owner, 21.0));
    Raise(unit + 1, UnitAngleCos(owner, 21.0));
    LookWithAngle(unit + 1, 30);
    LookWithAngle(unit, GetDirection(owner));
    SetCallback(unit, 9, FlyingWolfCollideHandler);
    FrameTimerWithArg(1, unit + 1, FlyingWolf);
    Enchant(owner, "ENCHANT_PROTECT_FROM_MAGIC", 0.8);
}

void BomberSummon(int owner)        //TODO: SpecialProperty - NEW
{
    int unit = CreateObjectAt("BomberGreen", GetObjectX(owner) + UnitAngleCos(owner, 23.0), GetObjectY(owner) + UnitAngleSin(owner, 23.0));

    LookWithAngle(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)), 180); //TODO: Duration 6 seconds
    Enchant(unit, "ENCHANT_INVULNERABLE", 0.0);
    SetOwner(owner, unit);
    SetOwner(owner, unit + 1);
    SetCallback(unit, 9, BomberCollideHandler);
    FrameTimerWithArg(1, unit + 1, BomberLifeTime);
    Enchant(owner, "ENCHANT_PROTECT_FROM_MAGIC", 1.8);
}

void CollideHandlerEnergyPar()
{
    int owner = GetOwner(self);

    if (CurrentHealth(other) && IsAttackedBy(other, owner))
    {
        Damage(other, owner, 200, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.5);
        Effect("SPARK_EXPLOSION", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    }
}

void EnergyParHandler(int sUnit)
{
    int owner = GetOwner(sUnit), durate = GetDirection(sUnit), unit;

    while (IsObjectOn(sUnit))
    {
        if (CurrentHealth(owner) && IsVisibleTo(sUnit, sUnit + 1))
        {
            if (durate)
            {
                unit = DummyUnitCreate("Demon", GetObjectX(sUnit), GetObjectY(sUnit));
                DeleteObjectTimer(CreateObjectAt("Explosion", GetObjectX(unit), GetObjectY(unit)), 9);
                MoveObject(sUnit, GetObjectX(sUnit) + GetObjectZ(sUnit), GetObjectY(sUnit) + GetObjectZ(sUnit + 1));
                MoveObject(sUnit + 1, GetObjectX(sUnit + 1) + GetObjectZ(sUnit), GetObjectY(sUnit + 1) + GetObjectZ(sUnit + 1));
                SetOwner(owner, unit);
                DeleteObjectTimer(unit, 1);
                SetCallback(unit, 9, CollideHandlerEnergyPar);
                FrameTimerWithArg(1, sUnit, EnergyParHandler);
                LookWithAngle(sUnit, durate - 1);
                break;
            }
        }
        Delete(sUnit);
        Delete(sUnit + 1);
        break;
    }
}

void LaiserLifleTouched()
{
    int owner = GetOwner(self);

    if (CurrentHealth(other) && IsAttackedBy(other, owner))
    {
        MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
        AudioEvent("SentryRayHit", 1);
        Damage(other, owner, 185, 16);
        Enchant(other, "ENCHANT_CHARMING", 0.1);
        Enchant(other, "ENCHANT_FREEZE", 1.0);
        Effect("VIOLET_SPARKS", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
    }
}

void TripleArrowShot(int ptr)
{
    int owner = GetOwner(ptr), unit = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(ptr), GetObjectY(ptr)) + 1, i;

    if (CurrentHealth(owner))
    {
        LookWithAngle(ptr, GetDirection(owner) - 15);
        for (i = 0 ; i < 11 ; i ++)
        {
            SpawnBullet(owner, GetObjectX(unit - 1) + UnitAngleCos(ptr, 21.0), GetObjectY(unit - 1) + UnitAngleSin(ptr, 21.0), 175, 38.0);
            LookWithAngle(ptr, GetDirection(ptr) + 3);
        }
    }
    Delete(ptr);
}

void TripleArrowCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, owner, 175, 9);
            UnitSetEnchantTime(other, 25, 35);
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int SpawnBullet(int owner, float x, float y, int dam, float force)
{
    int unit = CreateObjectAt("LightningBolt", x, y);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, TripleArrowCollide);
    LookAtObject(unit, owner);
    LookWithAngle(unit, GetDirection(unit) + 128);
    PushObjectTo(unit, UnitRatioX(unit, owner, force), UnitRatioY(unit, owner, force));
    SetOwner(owner, unit);
    return unit;
}

void DeathrayDetectedTarget()
{
    Effect("GREATER_HEAL", GetObjectX(other), GetObjectX(other), GetObjectX(self), GetObjectY(self));
    CastSpellObjectObject("SPELL_DEATH_RAY", self, other);
    RestoreHealth(GetOwner(self), 2);
}

void AutoTrackingMissile(int sUnit)
{
    int owner = GetOwner(sUnit), durate = GetDirection(sUnit), unit;

    while (1)
    {
        if (CurrentHealth(owner))
        {
            if (durate && IsVisibleTo(sUnit, sUnit + 1))
            {
                unit = CreateObjectAt("AirshipCaptain", GetObjectX(sUnit), GetObjectY(sUnit));
                Frozen(CreateObjectAt("HarpoonBolt", GetObjectX(unit), GetObjectY(unit)), 1);
                SetOwner(sUnit, unit);
                LookWithAngle(unit, GetDirection(sUnit + 1));
                LookWithAngle(unit + 1, GetDirection(sUnit + 1));
                DeleteObjectTimer(unit, 1);
                DeleteObjectTimer(unit + 1, 3);
                SetCallback(unit, 3, DetectTrackingMissile);
                SetCallback(unit, 9, CollideTrackingMissile);
                MoveObject(sUnit + 1, GetObjectX(sUnit), GetObjectY(sUnit));
                MoveObject(sUnit, GetObjectX(sUnit) + UnitAngleCos(sUnit + 1, 21.0), GetObjectY(sUnit) + UnitAngleSin(sUnit + 1, 21.0));
                LookWithAngle(sUnit, durate - 1);
                FrameTimerWithArg(1, sUnit, AutoTrackingMissile);
                break;
            }
        }
        Delete(sUnit);
        Delete(sUnit + 1);
        break;
    }
}

void DetectTrackingMissile()
{
    int ptr = GetOwner(self);
    int tg = ToInt(GetObjectZ(ptr + 1));

    if (CurrentHealth(tg))
    {
        if (IsVisibleTo(tg, ptr))
        {
            LookAtObject(self, tg);
            LookWithAngle(ptr + 1, GetDirection(self));
        }
        else
            Raise(ptr + 1, ToFloat(0));
    }
    else
    {
        if (Distance(GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other)) < GetObjectZ(ptr))
            Raise(ptr + 1, ToFloat(GetCaller()));
    }
}

void CollideTrackingMissile()
{
    int ptr = GetOwner(self);
    int owner = GetOwner(ptr);

    if (CurrentHealth(other) && IsAttackedBy(other, owner))
    {
        Effect("SPARK_EXPLOSION", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        Damage(other, owner, 750, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.5);
        Delete(self);
        Delete(ptr);
    }
}

void FlyingWolfCollideHandler()
{
    int owner = GetOwner(GetTrigger() + 1);

    if (CurrentHealth(other) && CurrentHealth(owner) && IsAttackedBy(other, owner) && MaxHealth(self))
    {
        MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
        LookWithAngle(GetTrigger() + 2, 1); //TODO: Start Explosion
        Delete(self);
    }
}

void FlyingWolfExplosion(int sUnit)
{
    float xProfile = GetObjectX(sUnit), yProfile = GetObjectY(sUnit);
    int owner = GetOwner(sUnit);

    PlaySoundAround(sUnit, 594);
    PlaySoundAround(sUnit, 487);
    SplashDamageAt(owner, 170, xProfile, yProfile, 120.0);
    GreenExplosion(xProfile, yProfile);
    DeleteObjectTimer(CreateObjectAt("ForceOfNatureCharge", xProfile, yProfile), 30);
    Effect("JIGGLE", xProfile, yProfile, 20.0, 0.0);
}

void FlyingWolf(int ptr)
{
    int count = GetDirection(ptr), owner = GetOwner(ptr), explo = GetDirection(ptr + 1);

    while (1)
    {
        if (CurrentHealth(owner) && count)
        {
            if (explo)
                FlyingWolfExplosion(ptr);
            else if (IsVisibleTo(ptr, ptr - 1))
            {
                MoveObject(ptr - 1, GetObjectX(ptr - 1) + GetObjectZ(ptr), GetObjectY(ptr - 1) + GetObjectZ(ptr + 1));
                LookWithAngle(ptr, count - 1);
                FrameTimerWithArg(1, ptr, FlyingWolf);
                break;
            }
        }
        Delete(ptr);
        Delete(ptr + 1);
        if (MaxHealth(ptr - 1))
            Delete(ptr - 1);
        break;
    }
}

void ReleaseForceofNature(int ptr)
{
    int owner = GetOwner(ptr), mis;

    if (CurrentHealth(owner))
    {
        MoveWaypoint(1, GetObjectX(ptr), GetObjectY(ptr));
        mis = CreateObject("DeathBall", 1);
        SetOwner(owner, mis);
        DeleteObjectTimer(mis, 85);
        AudioEvent("ForceOfNatureRelease", 1);
    }
    Delete(ptr);
    Delete(ptr + 1);
}

void BomberExplosion(int unit)
{
    int owner = GetOwner(unit), ptr;

    if (CurrentHealth(unit))
    {
        if (CurrentHealth(owner))
        {
            MoveWaypoint(1, GetObjectX(unit), GetObjectY(unit));
            ptr = CreateObject("InvisibleLightBlueLow", 1);
            SetOwner(owner, CreateObject("ForceOfNatureCharge", 1) - 1);
            AudioEvent("ForceOfNatureCast", 1);
            FrameTimerWithArg(25, ptr, ReleaseForceofNature);
        }
        Delete(unit);
    }
    Delete(unit + 1);
}

void BomberCollideHandler()
{
    if (CurrentHealth(self) && CurrentHealth(other) && IsAttackedBy(other, self))
    {
        Enchant(other, "ENCHANT_FREEZE", 1.0);
        BomberExplosion(GetTrigger());
        LookWithAngle(GetTrigger(), 0); //TODO: LifeTime SetTo 0
    }
}

void BomberLifeTime(int ptr)
{
    int count = GetDirection(ptr), owner = GetOwner(ptr);

    while (1)
    {
        if (CurrentHealth(owner))
        {
            if (count)
            {
                LookWithAngle(ptr, count - 1);
                FrameTimerWithArg(1, ptr, BomberLifeTime);
                break;
            }
            else
                BomberExplosion(ptr - 1);
        }
        if (MaxHealth(ptr - 1))
            Delete(ptr - 1);
        Delete(ptr);
        break;
    }
}

void InitList()
{
    GlobalHeadNode = CreateObject("InvisibleLightBlueHigh", 1);
    CreateObject("InvisibleLightBlueHigh", 1);
    CreateObject("InvisibleLightBlueHigh", 1);
    SetNextNode(GlobalHeadNode, GlobalHeadNode + 1);
    SetPrevNode(GlobalHeadNode + 1, GlobalHeadNode);
    FrameTimer(100, MagicWeaponLoop);
}

void YellowLightningFx(float x1, float y1, float x2, float y2, int dur)
{
	int unit = CreateObjectAt("InvisibleLightBlueHigh", x1, y1) + 2, count, i;
	float vectX, vectY;

	CreateObjectAt("InvisibleLightBlueHigh", x2, y2);
	vectX = UnitRatioX(unit - 1, unit - 2, 32.0);
	vectY = UnitRatioY(unit - 1, unit - 2, 32.0);
	count = FloatToInt(DistanceUnitToUnit(unit - 2, unit - 1) / 32.0);
	DeleteObjectTimer(CreateObjectAt("InvisibleLightBlueHigh", x1, y1), dur);
	for (i = 0 ; i < count ; i ++)
	{
		MoveObject(unit - 2, GetObjectX(unit - 2) + vectX, GetObjectY(unit - 2) + vectY);
		DeleteObjectTimer(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit - 2), GetObjectY(unit - 2)), dur);
		if (IsVisibleTo(unit + i, unit + i + 1))
			LookWithAngle(unit, i + 1);
		else break;
	}
	Delete(unit - 1);
	Delete(unit - 2);
	FrameTimerWithArg(1, unit, DelayYellowLightning);
}

void DelayYellowLightning(int ptr)
{
	int i, max = GetDirection(ptr);

	if (IsObjectOn(ptr))
	{
		for (i = 0 ; i < max ; i ++)
			CastSpellObjectObject("SPELL_LIGHTNING", ptr + i, ptr + i + 1);
	}
}

void BerserkerNoDelayCore(int plr)
{
    int arr[10];

    if (!MaxHealth(arr[plr]))
    {
        arr[plr] = CreateObject("Bear2", 22 + plr);
        UnitLinkBinScript(CreateObjectAt("Rat", GetObjectX(arr[plr]), GetObjectY(arr[plr]) + 20.0) - 1, Bear2BinTable());
        SetOwner(player[plr], arr[plr]);
        LookAtObject(arr[plr], arr[plr] + 1);
        HitLocation(arr[plr], GetObjectX(arr[plr]), GetObjectY(arr[plr]));
        FrameTimerWithArg(3, arr[plr], RemoveCoreUnits);
    }
}

void RemoveCoreUnits(int ptr)
{
    Delete(ptr);
    Delete(ptr + 1);
}

int FloatToInt(float x)
{
    int i, result = 0;
    float pos = x;

    if (pos < 0.0) pos = -pos;
    pos = pos / 2147483648.0;
    if (pos < 2.0)
    { 
        for (i = 0 ; i < 32 ; i ++)
        {
            if (pos >= 1.0)
            {
                result ++;
                pos -= 1.0;
            }
            if (i != 31) result = result << 1;
            pos *= 2.0;
        }
    }
    else result = 0x7fffffff;
    if (x < 0.0) return -result;
    else return result;
}

void SetDirectWeaponProperty(int unit, int propertyOffs1, int propertyOffs2, int propertyOffs3, int propertyOffs4)
{
    int i, ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2b4), propertyOffs1);
        SetMemory(GetMemory(ptr + 0x2b4) + 4, propertyOffs2);
        SetMemory(GetMemory(ptr + 0x2b4) + 8, propertyOffs3);
        SetMemory(GetMemory(ptr + 0x2b4) + 12, propertyOffs4);
        for (i = 31 ; i >= 0 ; i --)
            SetMemory(ptr + 0x230 + (i * 4), 0x200);
    }
}

void SetWeaponProperties(int ptr, int power, int mt_lv, int wfx1, int wfx2)
{
    int k;

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2b4), WeaponPower(power));
        SetMemory(GetMemory(ptr + 0x2b4) + 4, MaterialList(mt_lv));
        SetMemory(GetMemory(ptr + 0x2b4) + 8, WeaponEffect(wfx1));
        SetMemory(GetMemory(ptr + 0x2b4) + 12, WeaponEffect(wfx2));
        for (k = 31 ; k >= 0 ; k --)
            SetMemory(ptr + 0x230 + (k * 4), 0x200);
    }
}

void SetArmorProperties(int ptr, int qual, int mt_lv, int afx1, int afx2)
{
    int k;

    SetMemory(GetMemory(ptr + 0x2b4), ArmorQuality(qual));
    SetMemory(GetMemory(ptr + 0x2b4) + 4, MaterialList(mt_lv));
    SetMemory(GetMemory(ptr + 0x2b4) + 8, ArmorEffect(afx1));
    SetMemory(GetMemory(ptr + 0x2b4) + 12, ArmorEffect(afx2));
    for (k = 31 ; k >= 0 ; k --)
        SetMemory(ptr + 0x230 + (k * 4), 0x200);
}

int ImportAllowAllDrop()
{
	int arr[19], link;

	if (!link)
	{
		arr[0] = 0x550CEC83; arr[1] = 0x14246C8B; arr[2] = 0x24748B56; arr[3] = 0xECAE391C; arr[4] = 0x74000001; arr[5] = 0xC0315E08; arr[6] = 0x0CC4835D;
		arr[7] = 0x0845F6C3; arr[8] = 0x68207404; arr[9] = 0x0053EBF0; arr[10] = 0x2454FF56; arr[11] = 0x08C48304; arr[12] = 0x0F74C085; arr[13] = 0x53EC8068;
		arr[14] = 0x56016A00; arr[15] = 0x082454FF; arr[16] = 0x680CC483; arr[17] = 0x004ED301; arr[18] = 0x909090C3;
        link = GetScrDataField(ImportAllowAllDrop);
	}
	return link;
}

void InitInvPropertiesSet()
{
    WeaponEffect(0);
    ArmorEffect(0);
    WeaponPower(0);
    ArmorQuality(0);
    MaterialList(0);
    ImportAllowAllDrop();
}

void CheckSpecialItem(int ptr)
{
    int id = GetMemory(ptr + 0x04);

    if (id >= 222 && id <= 225)
    {
        SetMemory(ptr + 0x2c4, 0x53a720);
        SetMemory(ptr + 0x2c8, ImportAllowAllDrop());
    }
    else if (id == 1178)
        SetMemory(GetMemory(ptr + 0x2e0), 0xffff);
    else if (id == 1168)
        SetMemory(GetMemory(ptr + 0x2e0), 0xffff);
}

int WeaponPower(int num)
{
    int addr[6];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4; addr[1] = 0x5BA714; addr[2] = 0x5BA72C; addr[3] = 0x5BA744; addr[4] = 0x5BA75C; addr[5] = 0x5BA774;
        return 0;
    }
    return GetMemory(addr[num]);
}

int ArmorQuality(int num)
{
    int addr[6];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4; addr[1] = 0x5BA7A4; addr[2] = 0x5BA7BC; addr[3] = 0x5BA7D4; addr[4] = 0x5BA7EC; addr[5] = 0x5BA804;
        return 0;
    }
    return GetMemory(addr[num]);
}

int MaterialList(int num)
{
    int addr[6];

    if (!addr[0])
    {
        //Lv.3 ~ 7, null
        addr[0] = 0x5a00a4; addr[1] = 0x5ba834; addr[2] = 0x5ba84c; addr[3] = 0x5ba864; addr[4] = 0x5ba87c; addr[5] = 0x5ba894;
        return 0;
    }
    return GetMemory(addr[num]);
}

int WeaponEffect(int num)
{
    int addr[37];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4;
        addr[1] = 0x5BA1BC; addr[2] = 0x5BA1D4; addr[3] = 0x5BA1EC; addr[4] = 0x5BA204; addr[5] = 0x5BA21C; addr[6] = 0x5BA234; addr[7] = 0x5BA24C; addr[8] = 0x5BA264;
        addr[9] = 0x5BA27C; addr[10] = 0x5BA294; addr[11] = 0x5BA2AC; addr[12] = 0x5BA2C4; addr[13] = 0x5BA2DC; addr[14] = 0x5BA2F4; addr[15] = 0x5BA30C; addr[16] = 0x5BA324;
        addr[17] = 0x5BA33C; addr[18] = 0x5BA354; addr[19] = 0x5BA36C; addr[20] = 0x5BA384; addr[21] = 0x5BA39C; addr[22] = 0x5BA3B4; addr[23] = 0x5BA3CC; addr[24] = 0x5BA3E4;
        addr[25] = 0x5BA3FC; addr[26] = 0x5BA414; addr[27] = 0x5BA42C; addr[28] = 0x5BA444;
        addr[29] = 0x5BA63C; addr[30] = 0x5BA654; addr[31] = 0x5BA66C; addr[32] = 0x5BA684;
        addr[33] = 0x5BA69C; addr[34] = 0x5BA6B4; addr[35] = 0x5BA6CC; addr[36] = 0x5BA6E4;
        return 0;
    }
    return GetMemory(addr[num]);
}

int ArmorEffect(int num)
{
    int addr[21];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4;
        addr[1] = 0x5BA45C; addr[2] = 0x5BA474; addr[3] = 0x5BA48C; addr[4] = 0x5BA4A4; addr[5] = 0x5BA4BC; addr[6] = 0x5BA4D4; addr[7] = 0x5BA4EC; addr[8] = 0x5BA504;
        addr[9] = 0x5BA51C; addr[10] = 0x5BA534; addr[11] = 0x5BA54C; addr[12] = 0x5BA564; addr[13] = 0x5BA57C; addr[14] = 0x5BA594; addr[15] = 0x5BA5AC; addr[16] = 0x5BA5C4;
        addr[17] = 0x5BA5DC; addr[18] = 0x5BA5F4; addr[19] = 0x5BA60C; addr[20] = 0x5BA624;
        return 0;
    }
    return GetMemory(addr[num]);
}

void NormalMonsterItemRelease(int unit)
{
    MoveWaypoint(1, GetObjectX(unit), GetObjectY(unit));
    CallFunctionWithArgInt(FieldItemFuncPtr() + Random(0, 4), 1);
}

void DungeonMonsterItemRelease(int unit)
{
    MoveWaypoint(1, GetObjectX(unit), GetObjectY(unit));
    CallFunctionWithArgInt(EFieldItemFuncPtr() + Random(0, 7), 1);
}

int FieldItemFuncPtr()
{
    StopScript(LittleMoneyDrop);
}

int EFieldItemFuncPtr()
{
    StopScript(HotPotion);
}

int LittleMoneyDrop(int wp)
{
    int money = CreateObject("Gold", wp);

    SetMemory(GetMemory(GetMemory(0x750710) + 0x2b4), Random(1000, 4000));
    return money;
}

int HotPotion(int wp)
{
    return PotionPickupRegist(CreateObject("RedPotion", wp));
}

int PotionItemDrop(int wp)
{
    return CheckPotionThingID(CreateObject(ToStr(SToInt(PotionList()) + Random(0, 19)), 1));
}

int NormalWeaponItemDrop(int wp)
{
    int unit = CreateObject(ToStr(SToInt(WeaponList()) + Random(0, 7)), 1);
    int ptr = GetMemory(0x750710);

    CheckSpecialItem(ptr);
    return unit;
}

int NormalArmorItemDrop(int wp)
{
    return CreateObject(ToStr(SToInt(ArmorList()) + Random(0, 17)), 1);
}

int MoneyDrop(int wp)
{
    int money = CreateObject("Gold", wp);
    SetMemory(GetMemory(GetMemory(0x750710) + 0x2b4), Random(1000, 7000));
    return money;
}

int SomeGermDrop(int wp)
{
    string name = {"Ruby", "Emerald", "Diamond"};
    return CreateObject(ToStr(SToInt(name) + Random(0, 2)), wp);
}

int WeaponItemDrop(int wp)
{
    int unit = CreateObject(ToStr(SToInt(WeaponList()) + Random(0, 12)), 1);
    int ptr = GetMemory(0x750710);

    CheckSpecialItem(ptr);
    SetWeaponProperties(ptr, Random(0, 5), Random(0, 5), Random(0, 36), Random(0, 36));
    return unit;
}

int ArmorItemDrop(int wp)
{
    int unit = CreateObject(ToStr(SToInt(ArmorList()) + Random(0, 17)), 1);
    int ptr = GetMemory(0x750710);

    SetArmorProperties(ptr, Random(0, 5), Random(0, 5), Random(0, 20), Random(0, 20));
    return unit;
}

string PotionList()
{
    string name = {
        "RedPotion", "CurePoisonPotion", "YellowPotion", "BlackPotion",
        "VampirismPotion", "Mushroom", "PoisonProtectPotion", "ShockProtectPotion",
        "FireProtectPotion", "HastePotion", "ShieldPotion", "InfravisionPotion",
        "InvisibilityPotion", "InvulnerabilityPotion", "AmuletofManipulation", "AmuletofNature",
        "Fear", "WhitePotion", "BluePotion", "AnkhTradable"
    };
    return name;
}

string WeaponList()
{
    string name = {
        "GreatSword", "Longsword", "Sword", "MorningStar",
        "OgreAxe", "StaffWooden", "BattleAxe", "FanChakram",
        "RoundChakram", "WarHammer", "OblivionHalberd", "OblivionWierdling",
        "OblivionHeart"
    };
    return name;
}

string ArmorList()
{
    string name = {
        "OrnateHelm", "Breastplate", "PlateArms", "PlateBoots",
        "PlateLeggings", "MedievalCloak", "ChainCoif", "ChainLeggings",
        "ChainTunic", "SteelHelm", "LeatherArmbands", "LeatherArmor",
        "LeatherArmoredBoots", "LeatherBoots", "LeatherHelm", "LeatherLeggings",
        "MedievalPants", "MedievalShirt"
    };
    return name;
}

int CallFunctionWithArgInt(int func, int arg)
{
    int link;

    if (!link)
        link = GetScrCodeField(CalleeArgInt);
    SetMemory(link + 0x10, func);
    return CalleeArgInt(arg);
}

int CalleeArgInt(int arg)
{
    return CalleeArgInt(arg);
}

int GetMaster()
{
    int unit;
    
    if (!unit)
    {
        unit = CreateObjectAt("Hecubah", 5500.0, 100.0);
        MoveWaypoint(1, GetObjectX(unit), GetObjectY(unit));
        CreateObject("BlackPowder", 1);
        Frozen(unit, 1);
        //SetCallback(unit, 9, DisplayLadderBoard);
    }
    return unit;
}

void DisplayLadderBoard()
{
    string txt = "플레이어 킬 스코어:\n";
    int scd, min, hor;

    if (IsCaller(GetTrigger() + 1))
    {
        if (GetDirection(self) < 30)
            LookWithAngle(self, GetDirection(self) + 1);
        else
        {
            LookWithAngle(self, 0);
            //txt += (IntToString(GenCnt) + "\n\n데스: \n" + IntToString(PlrDeadCnt) + "\n\n경과시간:\n");
            scd ++;
            if (scd == 60)
            {
                scd = 0;
                min ++;
                if (min == 60)
                {
                    min = 0;
                    hor ++;
                }
            }
            txt += (IntToString(hor) + "시간 " + IntToString(min) + "분 " + IntToString(scd) + "초");
            UniChatMessage(self, txt, 30);
        }
    }
}

int IsPoisonedUnit(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x21c) & 0xff;
    return 0;
}

int GetUnitParent(int sUnit)
{
    int cur = sUnit, res;

    while (1)
    {
        res = cur;
        cur = GetOwner(cur);
        if (!cur) break;
    }
    return res;
}

void FieldMonsterHurt()
{
    int enemy;

    if (GetCaller())
    {
        enemy = GetUnitParent(other);
        if (CurrentHealth(enemy))
            Attack(self, enemy);
    }
    else
    {
        if (IsPoisonedUnit(self))
        {
            Damage(self, 0, IsPoisonedUnit(self) * 2, 5);
            DeleteObjectTimer(CreateObjectAt("OldPuff", GetObjectX(self), GetObjectY(self)), 15);
        }
    }
}

void SpawnMarkerMonster(int cur)
{
    int mob = CallFunctionWithArgInt(MonsterFuncPtr() + Random(0, 25), cur);

    SetCallback(mob, 7, FieldMonsterHurt);
    Delete(cur);
}

void SpawnReward(int cur)
{
    MoveWaypoint(1, GetObjectX(cur), GetObjectY(cur));
    CallFunctionWithArgInt(EFieldItemFuncPtr() + Random(0, 4), 1);
    Delete(cur);
}

void SpawnRewardPlus(int cur)
{
    MoveWaypoint(1, GetObjectX(cur), GetObjectY(cur));
    CallFunctionWithArgInt(EFieldItemFuncPtr() + Random(0, 7), 1);
    Delete(cur);
}

int ThingIDCheckingProcess(int cur)
{
    int thingId = GetUnitThingID(cur);

    if (thingId == 2675)
    {
        SpawnMarkerMonster(cur);
        return 1;
    }
    else if (thingId == 2672)
    {
        SpawnReward(cur);
        return 1;
    }
    else if (thingId == 2673)
    {
        SpawnRewardPlus(cur);
        return 1;
    }
    return 0;
}

void InitMarkerScan(int cur)
{
    int count, k;

    if (cur < LastUnit)
    {
        for (k = 0 ; k < 30 ; k ++)
        {
            if (ThingIDCheckingProcess(cur + (k * 2)))
                count ++;
        }
        FrameTimerWithArg(1, cur + 60, InitMarkerScan);
    }
    else
        EndScan(count);
}

void StartMarkerScan(int unit)
{
    if (IsObjectOn(unit))
    {
        InitMarkerScan(unit);
    }
}

void EndScan(int count)
{
    MonsterStrikeHandlerCopiedCode(MonsterStrikeCallback);
    FrameTimerWithArg(180, 180, SpawnLowLevelMonsters);
    UniPrintToAll("스캔완료!: " + IntToString(count) + " 개 유닛을 처리완료 하였습니다");
}

void SpawnLowLevelMonsters(int count)
{
    int unit;

    if (count > 0)
    {
        RhombusPut(1, 2981.0, 3320.0, 3353.0, 4106.0);
        unit = CreateObject("InvisibleLightBlueHigh", 1);
        SetCallback(CallFunctionWithArgInt(LowLevelMobFuncPtr() + Random(0, 5), unit), 7, FieldMonsterHurt);
        Enchant(unit, "ENCHANT_ANCHORED", 0.0);
        DeleteObjectTimer(unit, 60);
        FrameTimerWithArg(1, count - 1, SpawnLowLevelMonsters);
    }
}

int AbilityButton(string name, int wp, int idx, int flag, int pay)
{
    int unit = CreateObject(name, wp);

    Raise(CreateObject("InvisibleLightBlueHigh", wp), ToFloat(pay));
    LookWithAngle(unit + 1, flag);
    Damage(unit, 0, MaxHealth(unit) + 1, -1);
    LookWithAngle(unit, idx);
    ObjectOff(unit);
    Frozen(unit, 1);
    return unit;
}

int SpecialWeaponShop(string name, int wp, int idx, int pay)
{
    int unit = AbilityButton(name, wp, idx, 0, pay);

    Enchant(CreateObjectAt("RoundChakramInMotion", GetObjectX(unit), GetObjectY(unit)), "ENCHANT_FREEZE", 0.0);
    Enchant(unit + 2, "ENCHANT_SHOCK", 0.0);
    Frozen(unit + 2, 1);
    return unit;
}

int SpecialWeaponFuncPtr()
{
    StopScript(SpecialSword1);
}

int SpecialSword1(int wp)
{
    int unit = CreateObject("GreatSword", wp);

    LookWithAngle(CreateObject("InvisibleLightBlueHigh", wp), 0);
    SetDirectWeaponProperty(unit, WeaponPower(5), GetMemory(0x5BA24C), GetMemory(0x005BA264), GetMemory(0x5BA30C));
    NewList(unit);
    Enchant(unit, "ENCHANT_ANCHORED", 0.0);

    return unit;
}

int SpecialSword2(int wp)
{
    int unit = CreateObject("WarHammer", wp);

    LookWithAngle(CreateObject("InvisibleLightBlueHigh", wp), 1);
    SetDirectWeaponProperty(unit, WeaponPower(5), GetMemory(0x005BA354), GetMemory(0x5BA384), GetMemory(0x5BA42C));
    NewList(unit);
    Enchant(unit, "ENCHANT_FREEZE", 0.0);
    Enchant(unit, "ENCHANT_RUN", 0.0);
    return unit;
}

int SpecialSword3(int wp)
{
    int unit = CreateObject("GreatSword", wp);

    LookWithAngle(CreateObject("InvisibleLightBlueHigh", wp), 2);
    SetDirectWeaponProperty(unit, WeaponPower(5), GetMemory(0x005BA354), GetMemory(0x5BA384), GetMemory(0x5BA42C));
    NewList(unit);
    Enchant(unit, "ENCHANT_PROTECT_FROM_FIRE", 0.0);
    Enchant(unit, "ENCHANT_RUN", 0.0);
    return unit;
}

int SpecialSword4(int wp)
{
    int unit = CreateObject("WarHammer", wp);

    LookWithAngle(CreateObject("InvisibleLightBlueHigh", wp), 3);
    SetDirectWeaponProperty(unit, WeaponPower(5), GetMemory(0x5BA2AC), GetMemory(0x005BA30C), GetMemory(0x5BA3CC));
    NewList(unit);
    Enchant(unit, "ENCHANT_AFRAID", 0.0);
    return unit;
}

int SpecialSword5(int wp)
{
    int unit = CreateObject("GreatSword", wp);

    LookWithAngle(CreateObject("InvisibleLightBlueHigh", wp), 4);
    NewList(unit);
    SetDirectWeaponProperty(unit, WeaponPower(5), GetMemory(0x5BA60C), GetMemory(0x5BA204), GetMemory(0x5BA36C));
    Enchant(unit, "ENCHANT_AFRAID", 0.0);
    return unit;
}

int SpecialSword6(int wp)
{
    int unit = CreateObject("GreatSword", wp);

    SetDirectWeaponProperty(unit, WeaponPower(5), GetMemory(0x5BA42C), GetMemory(0x5BA444), GetMemory(0x5BA24C)); //Venom+fire
    LookWithAngle(CreateObject("InvisibleLightBlueHigh", wp), 5);
    NewList(unit);
    Enchant(unit, "ENCHANT_SLOWED", 0.0);
    return unit;
}

int SpecialSword7(int wp)
{
    int unit = CreateObject("GreatSword", wp);

    SetDirectWeaponProperty(unit, WeaponPower(5), WeaponEffect(21), GetMemory(0x5BA2C4), GetMemory(0x5BA36C)); //Impact+light
    LookWithAngle(CreateObject("InvisibleLightBlueHigh", wp), 6);
    NewList(unit);
    Enchant(unit, "ENCHANT_REFLECTIVE_SHIELD", 0.0);
    return unit;
}

int SpecialSword8(int wp)
{
    int unit = CreateObject("WarHammer", wp);
    int ptr = GetMemory(0x750710);

    SetDirectWeaponProperty(unit, WeaponPower(5), WeaponEffect(21), WeaponEffect(20), WeaponEffect(15));
    LookWithAngle(CreateObject("InvisibleLightBlueHigh", wp), 7);
    NewList(unit);
    Enchant(unit, "ENCHANT_PROTECT_FROM_POISON", 0.0);
    return unit;
}

void PutSpecialShop()
{
    //LifeShop
    //DamageUpgradeShop
    //etc...
    int ptr = CreateObject("Maiden", 21);

    Frozen(CreateObject("Ankh", 21), 1);
    SetDialog(AbilityButton("Swordsman", 67, 0, 2, 15000), "a", BuyNewSkill, BuyNewSkill);
    SetDialog(AbilityButton("Swordsman", 32, 1, 4, 80000), "a", BuyNewSkill, BuyNewSkill);
    SetDialog(AbilityButton("Swordsman", 33, 2, 8, 30000), "a", BuyNewSkill, BuyNewSkill);
    SetDialog(AbilityButton("Swordsman", 49, 3, 0x10, 80000), "a", BuyNewSkill, BuyNewSkill);

    SetDialog(SpecialWeaponShop("Maiden", 34, 0, 85000), "a", BuySpecialWeapon, BuySpecialWeapon);
    SetDialog(SpecialWeaponShop("Maiden", 35, 1, 80000), "a", BuySpecialWeapon, BuySpecialWeapon);
    SetDialog(SpecialWeaponShop("Maiden", 36, 2, 80000), "a", BuySpecialWeapon, BuySpecialWeapon);
    SetDialog(SpecialWeaponShop("Maiden", 37, 3, 87000), "a", BuySpecialWeapon, BuySpecialWeapon);
    SetDialog(SpecialWeaponShop("Maiden", 38, 4, 90000), "a", BuySpecialWeapon, BuySpecialWeapon);
    SetDialog(SpecialWeaponShop("Maiden", 39, 5, 75000), "a", BuySpecialWeapon, BuySpecialWeapon);
    SetDialog(SpecialWeaponShop("Maiden", 40, 6, 75000), "a", BuySpecialWeapon, BuySpecialWeapon);
    SetDialog(SpecialWeaponShop("Maiden", 41, 7, 75000), "a", BuySpecialWeapon, BuySpecialWeapon);
    SetDialog(AbilityButton("Necromancer", 43, 0, 0, 0), "a", RepairShoppingNet, RhombusPut);
    Frozen(ptr, 1);
    SetDialog(ptr, "YESNO", TakeNewLifeDesc, TakeNewLifeTrade);
}

void AbilityAwardEvent(int unit)
{
    MoveWaypoint(1, GetObjectX(unit), GetObjectY(unit));
    Effect("WHITE_FLASH", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
    GreenSparkFx(GetWaypointX(1), GetWaypointY(1));
    AudioEvent("AwardSpell", 1);
}

string SkillDescript(int num)
{
    string name = 
    "[스킬설명] 순보: 짧은 거리를 빠르게 이동한다. 조심스럽게 걷기 시전을 통해 발동된다";
    "[스킬설명] 피카츄의 백만볼트: 피카 츄~~~~~~. 발동키: J";
    "[스킬설명] 버저커차지 시전 쿨다운을 없앱니다. 조심스럽게 걷기 시전을 통해 발동되며 순보 마술과 중복됨에 유의하세요";
    "[패시브] 캐릭터의 체력회복과 이동속도 모두 눈에띄게 빨라집니다";

    return ToStr(SToInt(name) + num);
}

string DescriptSpecialWeapon(int num)
{
    string name =
    "[스페셜 무기] 광선검: 스타워즈에서 나오는 그 광선검이다";
    "[스페셜 무기] 백야 혼동망치: 내리치면 흰색 오로라가 생기며 주위에 200의 피해를 준다";
    "[스페셜 무기] 에너지파 소드: 손오공의 에너지파가 발사되는 검이다";
    "[스페셜 무기] 수리검해머: 해머를 내리치면 해머 파편이 사방으로 튀면서 적에게 피해를 준다";
    "[스페셜 무기] 죽음의 흡혈소드: 전방 적에게 데스레이 한방을 쏘고 맞은 적으로 부터 체력을 2씩 회복한다";
    "[스페셜 무기] 극사 소드: 적을 끝까지 추적하며 대상은 무조건 죽는다";
    "[스페셜 무기] 하이에나 소드: 전방으로 하이에나를 돌진시키며 적과 닿으면 폭발한다";
    "[스페셜 무기] 봄버 소환 해머: 해머를 내리칠 때 마다 봄버가 소환된다. 이 봄버는 6 초 후 사라진다";
    return ToStr(SToInt(name) + num);
}

void RepairShoppingNet()
{
    int res;
    if (HasEnchant(other, "ENCHANT_AFRAID"))
    {
        EnchantOff(other, "ENCHANT_AFRAID");
        if (GetGold(other) >= 3000)
        {
            res = RepairAll(other);
            if (res)
            {
                MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
                DeleteObjectTimer(CreateObjectAt("BigSmoke", GetObjectX(self), GetObjectY(self)), 12);
                Effect("SPARK_EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
                AudioEvent("ShopRepairItem", 1);
                ChangeGold(other, -3000);
                UniPrint(other, "결제성공! 모두 " + IntToString(res) + "개의 인벤토리가 수리되었습니다");
            }
        }
        else
            UniPrint(other, "금액이 부족합니다");
    }
    else
    {
        Enchant(other, "ENCHANT_AFRAID", 0.3);
        UniPrint(other, "자신이 소유한 모든 인벤토리를 수리합니다, 이 작업은 3000원이 필요하며 계속 진행하려면 더블클릭 하세요");
    }
}

void BuySpecialWeapon()
{
    int plr, pay = ToInt(GetObjectZ(GetTrigger() + 1)), idx = GetDirection(self);

    if (HasEnchant(other, "ENCHANT_AFRAID"))
    {
        EnchantOff(other, "ENCHANT_AFRAID");
        if (GetGold(other) >= pay)
        {
            ChangeGold(other, -pay);
            MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
            AudioEvent("TreasureDrop", 1);
            CallFunctionWithArg(SpecialWeaponFuncPtr() + idx, 1);
            UniPrint(other, "결제완료");
        }
        else
            UniPrint(other, "잔액이 부족합니다!");
    }
    else
    {
        Enchant(other, "ENCHANT_AFRAID", 0.3);
        UniPrint(other, DescriptSpecialWeapon(idx));
        UniPrint(other, "이 작업은 당신에게 " + IntToString(pay) + "원을 요구합니다. 계속하려면 더블클릭 하세요");
    }
}

void BuyNewSkill()
{
    int plr, pay = ToInt(GetObjectZ(GetTrigger() + 1)), byte = GetDirection(GetTrigger() + 1);

    if (HasEnchant(other, "ENCHANT_AFRAID"))
    {
        EnchantOff(other, "ENCHANT_AFRAID");
        if (GetGold(other) >= pay)
        {
            plr = CheckPlayer();
            if (plr + 1)
            {
                if (player[plr + 10] & byte)
                {
                    UniPrint(other, "오류_ 이미 습득한 상태 입니다!");
                }
                else
                {
                    player[plr + 10] = player[plr + 10] ^ byte;
                    ChangeGold(other, -pay);
                    AbilityAwardEvent(GetCaller());
                    UniPrint(other, "성공_ 마법 습득완료");
                }
            }
        }
    }
    else
    {
        Enchant(other, "ENCHANT_AFRAID", 0.3);
        UniPrint(other, SkillDescript(GetDirection(self)));
        UniPrint(other, "이 작업은 당신에게 " + IntToString(pay) + "원을 요구합니다. 계속하려면 더블클릭 하세요");
    }
}

void TakeNewLifeDesc()
{
    int coin = XtraUserCoins;
    PlaySoundAround(other, 801);
    UniChatMessage(self, "원활한 게임 진행을 위해 필요한 코인 1개를 구입하시겠어요?", 150);
    UniPrint(other, "코인 1개 구입은 3만 골드가 요구됩니다. 거래를 계속하려면 '예'를 누르세요");
    UniPrint(other, "현재 " + IntToString(coin) + " 개 코인을 보유 중 입니다");
    TellStoryUnitName("aa", "Con10B.scr:HecubahLine3", "코인1개 구입");
}

void TakeNewLifeTrade()
{
    int coin = XtraUserCoins;
    if (GetAnswer(self) ^ 1) return;
    if (GetGold(other) >= 30000)
    {
        if (coin < 100)
        {
            PlaySoundAround(other, 1004);
            ChangeGold(other, -30000);
            XtraUserCoins ++;
            Effect("YELLOW_SPARKS", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        }
        else
            UniPrint(other, "소유 가능한 최대 라이프 수에 도달했기 때문에 더 이상 라이프를 추가할 수 없습니다");
    }
    else
        UniPrint(other, "금액이 부족합니다");
    UniPrint(other, "현재 보유중인 코인: " + IntToString(XtraUserCoins));
}

void Nothing()
{
    return;
}

void MapDecorations()
{
    BackRow();
    Frozen(CreateObjectAt("DunMirScaleTorch2", 2588.0, 4635.0), 1);
    Frozen(CreateObjectAt("DunMirScaleTorch2", 2771.0, 4446.0), 1);
    Frozen(CreateObjectAt("DunMirScaleTorch2", 3197.0, 3820.0), 1);
    Frozen(CreateObject("DunMirScaleTorch1", 42), 1);
    HealingWishWell(58);
    HealingWishWell(59);
    HealingWishWell(60);
    InitDungeonGates(DunCnt);
    InitInvPropertiesSet();
    FrameTimer(1, InitMapSigns);
    FrameTimer(1, PutSpecialShop);
    FrameTimer(2, SetGameTypeCoopMode);
    //FrameTimer(3, PutDungeonNameStampString);
    FrameTimer(15, InitStampStrings);
    FrameTimer(220, TestFunction);
    FrameTimer(31, InitList);
    ShopClassInit(68);
    FrameTimer(50, InitUpLevelSecretZone);
}

void MapExit()
{
    MusicEvent();
    RemoveCoopTeamMode();
    SelfDamageClassMapExit();
}

void PoisonZombieDeathHandler()
{
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    AudioEvent("BurnCast", 1);
    Effect("SPARK_EXPLOSION", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
    DeleteObjectTimer(CreateObject("MediumFlame", 1), 90);
    DeleteObjectTimer(CreateObject("ReleasedSoul", 1), 30);
    DungeonUnitDeathHandler();
}

void BlackSpiderDeathHandler()
{
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    AudioEvent("BeholderDie", 1);
    DeleteObjectTimer(CreateObject("BigSmoke", 1), 9);
    DeleteObjectTimer(CreateObject("WaterBarrelBreaking", 1), 9);
    CreateObject("ArachnaphobiaFocus", 1);
    DungeonUnitDeathHandler();
}

void UnitDeathHandler()
{
    NormalMonsterItemRelease(self);
    DeleteObjectTimer(self, 90);
}

void DungeonUnitDeathHandler()
{
    DungeonMonsterItemRelease(self);
    DeleteObjectTimer(self, 90);
}

void WeirdlingDie()
{
    CreateObjectAt("BreakingSoup", GetObjectX(self), GetObjectY(self));
    DungeonUnitDeathHandler();
}

int LowLevelMobFuncPtr()
{
    StopScript(SpawnUrchin);
}

int MonsterFuncPtr()
{
    StopScript(SpawnSwordman);
}

int SpawnUrchin(int ptr)
{
    int unit = CreateObjectAt("Urchin", GetObjectX(ptr), GetObjectY(ptr));

    UnitZeroFleeRange(unit);
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 64);
    SetCallback(unit, 5, UnitDeathHandler);
    return unit;
}

int SpawnBat(int ptr)
{
    int unit = CreateObjectAt("Bat", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 64);
    SetCallback(unit, 5, UnitDeathHandler);
    return unit;
}

int SpawnSmallWhiteSpider(int ptr)
{
    int unit = CreateObjectAt("SmallAlbinoSpider", GetObjectX(ptr), GetObjectY(ptr));

    Enchant(unit, "ENCHANT_SLOWED", 0.0);
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 74);
    SetCallback(unit, 5, UnitDeathHandler);
    return unit;
}

int SpawnLeech(int ptr)
{
    int unit = CreateObjectAt("GiantLeech", GetObjectX(ptr), GetObjectY(ptr));

    Enchant(unit, "ENCHANT_VAMPIRISM", 0.0);
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 120);
    SetCallback(unit, 5, UnitDeathHandler);
    return unit;
}

int SpawnSwordman(int ptr)
{
    int unit = CreateObjectAt("Swordsman", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    RetreatLevel(unit, 0.0);
    SetUnitMaxHealth(unit, 180);
    SetCallback(unit, 5, UnitDeathHandler);
    return unit;
}

int SpawnArcher(int ptr)
{
    int unit = CreateObjectAt("Archer", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 98);
    RetreatLevel(unit, 0.0);
    SetCallback(unit, 5, UnitDeathHandler);
    return unit;
}

int SpawnEmberDemon(int ptr)
{
    int unit = CreateObjectAt("EmberDemon", GetObjectX(ptr), GetObjectY(ptr));
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 170);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnGargoyle(int ptr)
{
    int unit = CreateObjectAt("EvilCherub", GetObjectX(ptr), GetObjectY(ptr));
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 98);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnBlackSpider(int ptr)
{
    int unit = CreateObjectAt("BlackWidow", GetObjectX(ptr), GetObjectY(ptr));

    UnitLinkBinScript(unit, BlackWidowBinTable());
    SetUnitVoice(unit, 19);
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 275);
    SetCallback(unit, 5, BlackSpiderDeathHandler);
    return unit;
}

int SpawnWolf(int ptr)
{
    int unit = CreateObjectAt("Wolf", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    RetreatLevel(unit, 0.0);
    SetUnitMaxHealth(unit, 135);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnBlackWolf(int ptr)
{
    int unit = CreateObjectAt("BlackWolf", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    RetreatLevel(unit, 0.0);
    SetUnitMaxHealth(unit, 225);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnOgre(int ptr)
{
    int unit = CreateObjectAt("OgreBrute", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    RetreatLevel(unit, 0.0);
    SetUnitMaxHealth(unit, 295);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnOgreAxe(int ptr)
{
    int unit = CreateObjectAt("GruntAxe", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    RetreatLevel(unit, 0.0);
    SetUnitMaxHealth(unit, 225);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnDarkBear(int ptr)
{
    int unit = CreateObjectAt("BlackBear", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    RetreatLevel(unit, 0.0);
    SetUnitMaxHealth(unit, 306);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnBrownBear(int ptr)
{
    int unit = CreateObjectAt("Bear", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    RetreatLevel(unit, 0.0);
    SetUnitMaxHealth(unit, 400);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnSkeleton(int ptr)
{
    int unit = CreateObjectAt("Skeleton", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 250);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnSkeletonLord(int ptr)
{
    int unit = CreateObjectAt("SkeletonLord", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 295);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnGhost(int ptr)
{
    int unit = CreateObjectAt("Ghost", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    Enchant(unit, "ENCHANT_ANCHORED", 0.0);
    SetUnitMaxHealth(unit, 98);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnScorpion(int ptr)
{
    int unit = CreateObjectAt("Scorpion", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 260);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnGoon(int ptr)
{
    int unit = CreateObjectAt("Goon", GetObjectX(ptr), GetObjectY(ptr));

    UnitLinkBinScript(unit, GoonBinTable());
    SetUnitVoice(unit, 63);
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 128);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnOgreLord(int ptr)
{
    int unit = CreateObjectAt("OgreWarlord", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 325);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnRedGirl(int ptr)
{
    int unit = ColorMaidenAt(0, 225, 64, ptr);

    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 225);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnWhiteSpider(int ptr)
{
    int unit = CreateObjectAt("AlbinoSpider", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 128);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnPoisonZombie(int ptr)
{
    int unit = CreateObjectAt("VileZombie", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 275);
    SetUnitSpeed(unit, 3.0);
    SetCallback(unit, 5, PoisonZombieDeathHandler);
    return unit;
}

int SpawnMeleeLich(int ptr)
{
    int unit = CreateObjectAt("Lich", GetObjectX(ptr), GetObjectY(ptr));

    UnitLinkBinScript(unit, LichLordBinTable());
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 260);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    UnitZeroFleeRange(unit);
    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x20);
    AggressionLevel(unit, 1.0);
    RetreatLevel(unit, 0.0);
    return unit;
}

int SpawnMeleeNecromancer(int ptr)
{
    int unit = CreateObjectAt("Necromancer", GetObjectX(ptr), GetObjectY(ptr));

    NecromancerSubProcess(unit);
    SetOwner(GetMaster(), unit);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    return unit;
}

int SpawnDeadWizard(int ptr)
{
    int unit = CreateObjectAt("WizardRed", GetObjectX(ptr), GetObjectY(ptr));

    UnitLinkBinScript(unit, WizardRedBinTable());
    UnitZeroFleeRange(unit);
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 225);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    AggressionLevel(unit, 1.0);
    RetreatLevel(unit, 0.0);
    return unit;
}

int SpawnCaptain(int ptr)
{
    int unit = CreateObjectAt("AirshipCaptain", GetObjectX(ptr), GetObjectY(ptr));

    UnitLinkBinScript(unit, AirshipCaptainBinTable());
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 325);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    AggressionLevel(unit, 1.0);
    RetreatLevel(unit, 0.0);
    return unit;
}

int SpawnPlant(int ptr)
{
    int unit = CreateObjectAt("CarnivorousPlant", GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 300);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    SetUnitSpeed(unit, 1.6);
    RetreatLevel(unit, 0.0);
    ResumeLevel(unit, 1.0);
    AggressionLevel(unit, 1.0);
    return unit;
}

int SpawnBeast(int ptr)
{
    int unit = CreateObjectAt("WeirdlingBeast", GetObjectX(ptr), GetObjectY(ptr));

    UnitLinkBinScript(unit, WeirdlingBeastBinTable());
    SetOwner(GetMaster(), unit);
    SetUnitMaxHealth(unit, 175);
    //SetCallback(unit, 5, DungeonUnitDeathHandler);
    SetCallback(unit, 5, WeirdlingDie);
    UnitZeroFleeRange(unit);
    RetreatLevel(unit, 0.0);
    ResumeLevel(unit, 1.0);
    AggressionLevel(unit, 1.0);
    return unit;
}

int ColorMaidenAt(int red, int grn, int blue, int ptr)
{
    int unit = CreateObjectAt("Bear2", GetObjectX(ptr), GetObjectY(ptr));
    int ptr1 = GetMemory(0x750710), k, num;

    UnitLinkBinScript(unit, MaidenBinTable());
    SetMemory(ptr1 + 4, 1385);
    for (k = 0 ; k < 32 ; k ++)
        SetMemory(ptr1 + 0x230 + (k * 4), 0x400);
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x178, 0xa0);
    // R  G  B  R    G  B  R  G    B  R  G  B    R  G  B  R    G  B 
    // 00 ff 00 00 / ff 00 00 ff / 00 00 ff 00 / 00 ff 00 00 / ff 00 00
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 4, grn | (blue << 8) | (red << 16) | (grn << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 8, blue | (red << 8) | (grn << 16) | (blue << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 12, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 16, grn | (blue << 8));
    SetUnitVoice(unit, 7);

    return unit;
}

int VoiceList(int num)
{
    int list[75], addr, k;

    if (!list[0])
    {
        addr = GetMemory(0x663eec);
        for (k = 0 ; k < 75 ; k ++)
        {
            list[k] = addr;
            addr = GetMemory(addr + 0x4c);
        }
    }
    return list[num];
}

void ImportLibrary()
{
    UploadConsoleParse();
    ImportCreateAtFunc();
    ImportUnitToPtrFunc();
    ImportGetSpellNumber();
    ImportCheckSelfDamage();
    ImportUniChatCore();
    ImportUniPrintCore();
    ImportGreenExplosionFunc();
    ImportGreenLightningFunc();
    VoiceList(0);
}

void TeleportAllPlayer(int wp)
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        if (CurrentHealth(player[i]))
            MoveObject(player[i], GetWaypointX(wp), GetWaypointY(wp));
    }
}

void ShutdownThisGame(int wp)
{
    ObjectOff(Object("MainProcBeacon"));
    TeleportAllPlayer(wp);
    MoveObject(StartLocationWithPlayer(), GetWaypointX(wp), GetWaypointY(wp));
}

void PlayerDeath()
{
    if (XtraUserCoins)
    {
        XtraUserCoins --;
        UniPrintToAll("누군가 죽었습니다, 라이프가 하나 차감되며 더 이상 라이프가 없을 시 패배처리가 됩니다, 남은 라이프: " + IntToString(XtraUserCoins));
    }
    else
    {
        DefeatMission();
    }
}

void DefeatMission()
{
    if (!GOver)
    {
        GOver = 1;
        ShutdownThisGame(20);
        AudioEvent("StaffOblivionAchieve1", 20);
        UniPrintToAll("미션실패! 라이프가 모두 소모되었습니다!!");

        FrameTimer(30, StrMissionFail);
    }
}

string PlayerName(int unit)
{
    int ptr = UnitToPtr(unit);
    int addr = GetMemory(0x97bb40), xwis_id;
    
    if (ptr)
    {
        xwis_id = GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x830;

        SetMemory(addr, GetMemory(xwis_id));
        SetMemory(addr + 4, GetMemory(xwis_id + 4));
        SetMemory(addr + 8, GetMemory(xwis_id + 8));
        StopScript(0);
    }
    return "NULL";
}

float MathSine(int angle, float size)
{
    float var_0[91];
    int i, k;
 
    if (!ToInt(var_0[90]))
    {
        MoveWaypoint(angle + 1, GetWaypointX(angle), GetWaypointY(angle) - 1.0);
        for (i = 0 ; i <= 90 ; i ++)
        {
            var_0[i] = GetSineValue(angle, size);
            Delete(k + i + 1);
        }
        return var_0[0];
    }
    k = angle / 90;
    i = angle - (k * 90);

    if (k % 2) i = 90 - i;
    if ((angle / 180) % 2) return -var_0[i] * size;
	else return var_0[i] * size;
}

float GetSineValue(int wp, float c)
{
    float x_ratio = WayRatioX(wp, wp + 1), y_ratio = WayRatioY(wp, wp + 1), res;

    res = GetWaypointX(wp) - GetWaypointX(wp + 1);
    MoveWaypoint(wp + 1, GetWaypointX(wp) - (c * y_ratio) - x_ratio, GetWaypointY(wp) + (c * x_ratio) - y_ratio);
    return res;
}

float WayRatioX(int wp1, int wp2)
{
    return (GetWaypointX(wp1) - GetWaypointX(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float WayRatioY(int wp1, int wp2)
{
    return (GetWaypointY(wp1) - GetWaypointY(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float UnitAngleCos(int unit, float size)
{
    return MathSine((GetDirection(unit) * 45 / 32) + 90, size);
}

float UnitAngleSin(int unit, float size)
{
    return MathSine(GetDirection(unit) * 45 / 32, size);
}

int SToInt(string x)
{
    StopScript(x);
}

string ToStr(int x)
{
    StopScript(x);
}

float UnitRatioX(int unit, int target, float size)
{
    return (GetObjectX(unit) - GetObjectX(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float UnitRatioY(int unit, int target, float size)
{
    return (GetObjectY(unit) - GetObjectY(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float ToFloat(int x)
{
    StopScript(x);
}

int ToInt(float x)
{
    StopScript(x);
}

void CharToWideChar(string x)
{
    int ptr = GetMemory(0x97bb40 + (4 * SToInt(x))), dump = 0x751030, arr[2], read, sh = 0xff, end = 0;

    while (1)
    {
        read = GetMemory(ptr);
        if (!(read & 0xff) || !((read >> 8) &0xff) || !((read >> 16) &0xff) || !((read >> 24) &0xff))
            end = 1;
        arr[0] = (read & sh) | (((read >> 8) & sh) << 16);
        arr[1] = ((read >> 16) & sh) | (((read >> 24) & sh) << 16);
        SetMemory(dump, arr[0]);
        SetMemory(dump + 4, arr[1]);
        dump += 8;
        ptr += 4;
        if (end)
            break;
    }
    SetMemory(dump, 0);
}

void UploadConsoleParse()
{
    int arr[7], link;

    if (!link)
    {
        arr[0] = 0;
        arr[1] = 0x443c8068; arr[2] = 0x68016a00; arr[3] = 0x751030; arr[4] = 0x82454ff;
        arr[5] = 0x310cc483; arr[6] = 0x90c3c0;
        link = GetScrDataField(UploadConsoleParse);
    }
    SetMemory(0x5c31cc, link + 4);
}

void CmdLine(string x)
{
    CharToWideChar(x);
    UploadConsoleParse();
    Unused50();
    SetMemory(0x5c31cc, 0x513c60);
}

int ImportCreateAtFunc()
{
    int arr[20], link;

    if (!link)
    {
        arr[0] = 0xAA506856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xFF502414; arr[4] = 0x50042454;
        arr[5] = 0x082454FF; arr[6] = 0x4085048B; arr[7] = 0x680097BB; arr[8] = 0x004E3810; arr[9] = 0x2454FF50;
        arr[10] = 0x08C48304; arr[11] = 0xF685F08B; arr[12] = 0x006A0A74; arr[13] = 0x2454FF56; arr[14] = 0x08C48314;
        arr[15] = 0x50723068; arr[16] = 0x54FF5600; arr[17] = 0xC4830424; arr[18] = 0x5EC03118; arr[19] = 0x909090C3;
        link = GetScrDataField(ImportCreateAtFunc);
    }
    return link;
}

int CreateObjectAt(string name, float x, float y)
{
    int temp = GetMemory(0x5c3160), res;

    SetMemory(0x5c3160, ImportCreateAtFunc());
    res = CreateMover(SToInt(name), ToInt(x), y);
    SetMemory(0x5c3160, temp);
    if (res) return GetMemory(res + 0x2c);
    else return 0;
}

int ImportUnitToPtrFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x511B6068; arr[3] = 0x54FF5000; arr[4] = 0xC4830424;
        arr[5] = 0x7230680C; arr[6] = 0xFF500050; arr[7] = 0x83042454; arr[8] = 0xC03108C4; arr[9] = 0x909090C3; 
        link = GetScrDataField(ImportUnitToPtrFunc);
    }
    return link;
}

int UnitToPtr(int unit)
{
    int temp = GetMemory(0x5c336c), res;
    SetMemory(0x5c336c, ImportUnitToPtrFunc());
    res = Unknownb8(unit);
    SetMemory(0x5c336c, temp);
	return res;
}

int PlayerClassCheckDeathFlag(int plr)
{
    return player[plr + 10] & 0x80;
}

void PlayerClassSetDeathFlag(int plr)
{
    player[plr + 10] = player[plr + 10] ^ 0x80;
}

int VaildPlayerCheck(int plrUnit)
{
    int plrArr[32], pIndex = GetPlayerIndex(plrUnit);

    if (pIndex >= 0)
    {
        if (plrUnit ^ plrArr[pIndex])
        {
            plrArr[pIndex] = plrUnit;
            return 1;
        }
    }
    return 0;
}

void PlayerClassOnInit(int plrIdx, int plrUnit)
{
    player[plrIdx] = plrUnit;
    player[plrIdx + 10] = 1;
    ChangeGold(plrUnit, -GetGold(plrUnit));
    SelfDamageClassEntry(plrUnit);
    DiePlayerHandlerEntry(plrUnit);
    if (VaildPlayerCheck(plrUnit))
    {
        if (plrUnit ^ GetHost())
            ClientEntry(plrUnit);
        else
            PlayerClassCommonWhenEntry();
    }
    UniPrintToAll(PlayerIngameNick(plrUnit) + " 님께서 게임에 참가하셨습니다");
}

void PlayerEntryPoint()
{
    int plr, i;

    while (1)
    {
        if (CurrentHealth(other))
        {
            if (MaxHealth(other) == 150)
            {
                plr = CheckPlayer();
                for (i = 9 ; i >= 0 && plr < 0 ; i --)
                {
                    if (!MaxHealth(player[i]))
                    {
                        PlayerClassOnInit(i, GetCaller());
                        plr = i;
                        break;
                    }
                }
                if (plr + 1)
                {
                    PlayerJoin(plr);
                    break;
                }
            }
        }
        PlayerCantJoin();
        break;
    }
}

int PlayerClassItemTable()
{
    int picker;
    int itemTable[1300];
}

void EmptyAll(int unit)
{
    while (GetLastItem(unit))
        Delete(GetLastItem(unit));
}

void PlayerJoin(int plr)
{
    EmptyAll(player[plr]);
    if (PlayerClassCheckDeathFlag(plr))
    {
        PlayerClassPickAll(player[plr], GetScrDataField(PlayerClassItemTable) + 4, PlayerClassItemIndexTable(plr));
        PlayerClassSetDeathFlag(plr);
    }
    MoveObject(player[plr], GetWaypointX(12), GetWaypointY(12));
    Effect("TELEPORT", GetWaypointX(12), GetWaypointY(12), 0.0, 0.0);
    DeleteObjectTimer(CreateObject("BlueRain", 12), 10);
    AudioEvent("BlindOff", 12);
}

void PlayerCantJoin()
{
    Enchant(other, "ENCHANT_FREEZE", 0.0);
    Enchant(other, "ENCHANT_ANCHORED", 0.0);
    Enchant(other, "ENCHANT_ANTI_MAGIC", 0.0);
    Enchant(other, "ENCHANT_BLINDED", 0.0);
    MoveObject(other, GetWaypointX(11), GetWaypointY(11));
    UniPrintToAll("맵 입장에 실패했습니다");
}

void PlayerClassOnFree(int plr)
{
    CancelPlayerDialog(player[plr]);
    player[plr] = 0;
    player[plr + 10] = 0;
}

int PlayerClassItemIndexTable(int arg0)
{
    int plr = arg0 & 0xff, isSave = (arg0 >> 0x8) & 0xff, table[10];

    if (isSave)
        table[plr] = arg0 >> 0x10;
    return table[plr];
}

int PlayerClassPickAll(int pUnit, int tablePtr4, int startIndex)
{
    int count = GetMemory(tablePtr4 + (startIndex * 4)), i;

    if (count > GetHost()) return 0;
    for (i = count ; i ; i --)
        Pickup(pUnit, GetMemory(tablePtr4 + (((startIndex + i) % 1300) * 4)));
    return 1;
}

int PlayerClassDropAll(int pUnit, int tablePtr)
{
    int cntPtr = tablePtr, inv = GetLastItem(pUnit), headIndex = GetMemory(tablePtr), count = 0;

    tablePtr += 4;
    while (inv)
    {
        count ++;
        SetMemory(cntPtr, (GetMemory(cntPtr) + 1) % 1300);
        SetMemory(tablePtr + (GetMemory(cntPtr) * 4), inv);
        Drop(pUnit, inv);
        inv = GetLastItem(pUnit);
    }
    SetMemory(tablePtr + (headIndex * 4), count);
    return headIndex;
}

void PlayerClassOnDeath(int plr)
{
    PlayerClassItemIndexTable((PlayerClassDropAll(player[plr], GetScrDataField(PlayerClassItemTable)) << 0x10) | (1 << 0x08) | plr);
    UniPrintToAll(PlayerIngameNick(player[plr]) + " 님께서 적에게 격추되었습니다");
}

void PlayerPreserveHandler()
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        while (1)
        {
            if (MaxHealth(player[i]))
            {
                if (GetUnitFlags(player[i]) & 0x40)
                    1;
                else if (CurrentHealth(player[i]))
                {
                    CheckUseSkill(i);
                    break;
                }
                else
                {
                    if (PlayerClassCheckDeathFlag(i)) break;
                    else
                    {
                        PlayerClassSetDeathFlag(i);
                        PlayerClassOnDeath(i);
                    }
                    break;
                }
            }
            if (player[i + 10])
                PlayerClassOnFree(i);
            break;
        }
    }
    FrameTimer(1, PlayerPreserveHandler);
}

void CheckUseSkill(int plr)
{
    if (HasEnchant(player[plr], "ENCHANT_SNEAK"))
    {
        EnchantOff(player[plr], "ENCHANT_SNEAK");
        RemoveTreadLightly(player[plr]);
        if (player[plr + 10] & 0x2)
            PlayerWindBoost(player[plr]);
        else if (player[plr + 10] & 8)
        {
            BerserkerNoDelayCore(plr);
            GreenSparkFx(GetObjectX(player[plr]), GetObjectY(player[plr]));
        }
    }
    if (player[plr + 10] & 0x04)
    {
        if (CheckPlayerInput(player[plr]) == 47)
        {
            if (!HasEnchant(player[plr], "ENCHANT_LIGHT"))
                ThunderBolt(player[plr]);
        }
    }
    if (player[plr + 10] & 0x10)
    {
        AdvancedStat(player[plr]);
    }
}

int StartLocationWithPlayer()
{
    int start;

    if (!start)
        start = Object("PlayerStartLocation");
    return start;
}

void PlayerFastJoin()
{
    int plr = CheckPlayer();

    if (CurrentHealth(other))
    {
        if (plr < 0)
            MoveObject(other, GetWaypointX(90), GetWaypointY(90));
        else
        {
            MoveObject(other, GetWaypointX(89), GetWaypointY(89));
            UniPrint(other, "패스트 조인되었습니다");
        }
    }
}

void AdvancedStat(int unit)
{
    if (!GOver)
    {
        if (!HasEnchant(unit, "ENCHANT_BURNING"))
        {
            Enchant(unit, "ENCHANT_BURNING", 0.1);
            RestoreHealth(unit, 1);
            Effect("GREATER_HEAL", GetObjectX(unit), GetObjectY(unit), GetObjectX(unit), GetObjectY(unit) - 180.0);
        }
        if (GetPlayerAction(unit) == 5)
            PushObjectTo(unit, UnitAngleCos(unit, 1.3), UnitAngleSin(unit, 1.3));
    }
}

void PlayerWindBoost(int unit)
{
    Effect("RICOCHET", GetObjectX(unit), GetObjectY(unit), 0.0, 0.0);
    PushObjectTo(unit, UnitAngleCos(unit, 60.0), UnitAngleSin(unit, 60.0));
}

void ThunderBolt(int unit)
{
    float vectX = UnitAngleCos(unit, 38.0), vectY = UnitAngleSin(unit, 38.0);
    int ptr = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit) + vectX, GetObjectY(unit) + vectY);

    Enchant(unit, "ENCHANT_LIGHT", 8.0);
    Raise(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(ptr), GetObjectY(ptr)), vectY);
    Raise(ptr, vectX);
    SetOwner(unit, ptr);
    FrameTimerWithArg(3, ptr, ThunderBoltCritical);
}

void ThunderBoltCritical(int ptr)
{
    float vectX = GetObjectZ(ptr), vectY = GetObjectZ(ptr + 1);
    int owner = GetOwner(ptr), i, unit;

    if (CurrentHealth(owner))
    {
        unit = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(ptr), GetObjectY(ptr)) + 1;
        Raise(unit - 1, ToFloat(owner));
        for (i = 0 ; i < 13 ; i ++)
        {
            Frozen(CreateObjectAt("ShopkeeperConjurerRealm", GetObjectX(ptr), GetObjectY(ptr)), 1);
            SetOwner(unit - 1, unit + i);
            DeleteObjectTimer(unit + i, 1);
            SetUnitFlags(unit + i, GetUnitFlags(unit + i) ^ 0x2000);
            SetCallback(unit + i, 9, ThunderBoltCollideHandler);
            MoveObject(ptr, GetObjectX(ptr) + vectX, GetObjectY(ptr) + vectY);
            if (!IsVisibleTo(ptr, ptr + 1))
                break;
        }
        YellowLightningFx(GetObjectX(ptr + 1), GetObjectY(ptr + 1), GetObjectX(ptr), GetObjectY(ptr), 24);
        DeleteObjectTimer(unit - 1, 3);
    }
    Delete(ptr);
    Delete(ptr + 1);
}

void ThunderBoltCollideHandler()
{
    int owner = ToInt(GetObjectZ(GetOwner(self)));

    if (CurrentHealth(other) && IsAttackedBy(other, owner))
    {
        Damage(other, owner, 200, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.09);
    }
}

int CheckPlayerInput(int plr_unit)
{
    int ptr = UnitToPtr(plr_unit), temp;

    if (ptr)
    {
        temp = GetMemory(GetMemory(ptr + 0x2ec) + 0x114);
        if (temp)
            return GetMemory(0x81b960 + (GetMemory(temp + 0x810) * 3072));
    }
    return 0;
}

int CheckPlayer()
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        if (IsCaller(player[i]))
            return i;
    }
    return -1;
}

void SetUnitFlags(int unit, int flag)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x10, flag);
}

int GetUnitFlags(int unit)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x10);
    return 0;
}

int PlayerEquipedWeapon(int unit)
{
    int ptr = UnitToPtr(unit), pic;
    
    if (ptr)
    {
        pic = GetMemory(GetMemory(ptr + 0x2ec) + 0x68);
        if (pic)
            return GetMemory(pic + 0x2c);
    }
    return 0;
}

int UnitEquipedWeapon(int unit)
{
    int ptr = UnitToPtr(unit), pic;
    
    if (ptr)
    {
        pic = GetMemory(GetMemory(ptr + 0x2ec) + 0x810);
        if (pic)
            return GetMemory(pic + 0x2c);
    }
    return 0;
}

void CheckResetSight(int unit, int delay)
{
    if (!UnitCheckEnchant(unit, GetLShift(6)))
    {
        Enchant(unit, EnchantList(6), 0.0);
        FrameTimerWithArg(delay, unit, ResetUnitSight);
    }
}

void ResetUnitSight(int unit)
{
    EnchantOff(unit, EnchantList(6));
    Enchant(unit, EnchantList(2), 0.06);
    AggressionLevel(unit, 1.0);
}

void Callee()
{
    Callee();
}

void CallFunction(int func)
{
    int link;

    if (!link)
        link = GetScrCodeField(Callee);
    SetMemory(link + 4, func);
    Callee();
}

void UnitNoCollide(int unit)
{
    SetUnitFlags(unit, GetUnitFlags(unit) ^ 0x40);
}

void CalleeArg(int arg)
{
    CalleeArg(arg);
}

void CallFunctionWithArg(int func, int arg)
{
    int link;

    if (!link)
        link = GetScrCodeField(CalleeArg);
    SetMemory(link + 0x10, func);
    CalleeArg(arg);
}

void UserMapSetting()
{
    SetMemory(0x5d5330, 0x2000);
    SetMemory(0x5d5394, 1);
}

void MapInitialize()
{
    int var0 = EnableMemoryReadWriteFunction(0);

    LastUnit = CreateObject("RedPotion", 1);
    Delete(LastUnit);
    PotionPickupCustomizing();
    StartLocationWithPlayer();
    ImportStreamCopy();
    MusicEvent();
    SafeZone = CreateObject("InvisibleLightBlueHigh", 12);
    Enchant(CreateObject("InvisibleLightBlueHigh", 12), "ENCHANT_SHIELD", 0.0);
    Enchant(CreateObject("InvisibleLightBlueHigh", 12), "ENCHANT_VAMPIRISM", 0.0);
    MathSine(1, 1.0 / 57.3);
    ImportLibrary();
    GetMaster();
    FrameTimer(10, UserMapSetting);
    FrameTimer(8, MapDecorations);
    FrameTimerWithArg(3, Object("FirstMonsterMarker"), StartMarkerScan);
    FrameTimer(10, PlayerPreserveHandler);
    FrameTimerWithArg(20, Object("UndergroundElev"), DisableObject);
}

int GetUnitThingID(int unit)
{
    int ptr = UnitToPtr(unit);
    if (ptr)
        return GetMemory(ptr + 0x04);
    return 0;
}

void SetUnitSpeed(int unit, float amount)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x224, ToInt(amount));
}

void SetUnitMaxHealth(int unit, int amount)
{
    int ptr = UnitToPtr(unit);
    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x22c), amount);
        SetMemory(GetMemory(ptr + 0x22c) + 0x4, amount);
    }
}

int SummonPowerGhost(int ptr)
{
    int unit = CreateObjectAt("Ghost", GetObjectX(ptr), GetObjectY(ptr));

    SetUnitScanRange(unit, 450.0);
    SetUnitMaxHealth(unit, 170);
    SetCallback(unit, 3, GhostStrike);
    SetCallback(unit, 13, WhenRunout);

    return unit;
}

int SummonPowerPurpleGirl(int ptr)
{
    int unit = CreateObjectAt("TalkingSkull", GetObjectX(ptr), GetObjectY(ptr));

    UnitNoCollide(CreateObjectAt("MovableStatueVictory1W", GetObjectX(unit), GetObjectY(unit)));
    SetUnitScanRange(unit, 400.0);
    BullDakSubProcess(unit);
    RegistUnitStrikeHook(unit);
    FrameTimerWithArg(1, unit + 1, BullDakImageLoop);
    return unit;
}

int SummonPowerMonster3(int ptr)
{
    int unit = CreateObjectAt("Demon", GetObjectX(ptr), GetObjectY(ptr));

    CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit));
    SetCallback(unit, 3, DemonSightEvent);
    SetCallback(unit, 13, DemonResetSight);
    SetUnitScanRange(unit, 400.0);
    SetUnitMaxHealth(unit, 500);
    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x8020); //ALWAYS_RUN

    return unit;
}

int SummonGWizard(int ptr)
{
    int unit = CreateObjectAt("WizardGreen", GetObjectX(ptr), GetObjectY(ptr));

    CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit));
    SetCallback(unit, 3, GWizSightEvent);
	SetCallback(unit, 13, GWizResetSight);
    SetUnitScanRange(unit, 400.0);
    SetUnitMaxHealth(unit, 420);
    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x8020); //ALWAYS_RUN

    return unit;
}

int SummonPowerMonster5(int ptr)
{
    int unit = CreateObjectAt("FireSprite", GetObjectX(ptr), GetObjectY(ptr));

    UnitLinkBinScript(unit, FireSpriteBinTable());
    SetUnitScanRange(unit, 400.0);
    SetUnitMaxHealth(unit, 420);
    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x10000); //ALWAYS_RUN
    SetCallback(unit, 3, FireSpritEnemyFind);
    SetCallback(unit, 13, WhenRunout);
    SetUnitSpeed(unit, ToFloat(1076426178));

    return unit;
}

int SummonPowerMecaGolem(int ptr)
{
    int unit = CreateObjectAt("StoneGolem", GetObjectX(ptr), GetObjectY(ptr));

    SetUnitScanRange(unit, 450.0);
    SetUnitMaxHealth(unit, 800);
    SetCallback(unit, 3, MecaGolemStrike);
    SetCallback(unit, 13, WhenRunout);

    return unit;
}

int SummonHecubah(int target)
{
    int unit = CreateObjectAt("Hecubah", GetObjectX(target), GetObjectY(target));
    
    HecubahSubProcess(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)) - 1);
    SetUnitScanRange(unit, 500.0);
    SetUnitMaxHealth(unit, 1350);
    SetCallback(unit, 3, HecubahSight);
    SetCallback(unit, 13, HecubahLostEnemy);

    return unit;
}

int SummonBomber(int target)
{
    string name = {"Bomber", "BomberBlue", "BomberGreen", "BomberYellow"};
    int unit = CreateObjectAt(ToStr(SToInt(name) + Random(0, 3)), GetObjectX(ptr), GetObjectY(ptr));
    int ptr = GetMemory(0x750710);

    UnitLinkBinScript(unit, BomberGreenBinTable());
    SetUnitVoice(unit, 57);
    SetUnitMaxHealth(unit, 600);
    SetMemory(ptr + 0x2b8, 0x4e83b0);
    SetUnitScanRange(unit, 450.0);
    RetreatLevel(unit, 0.0);
    ResumeLevel(unit, 1.0);
    AggressionLevel(unit, 1.0);

    return unit;
}

void SetUnitScanRange(int unit, float range)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x520, ToInt(range));
    }
}

int ImportMonsterActionPush()
{
    int arr[12], link;

    if (!link)
    {
        arr[0] = 0x50685650; arr[1] = 0xFF005072; arr[2] = 0x708D2414; arr[3] = 0xA2606804; arr[4] = 0x36FF0050; arr[5] = 0x54FF30FF;
        arr[6] = 0xC4830824; arr[7] = 0x7230680C; arr[8] = 0xFF500050; arr[9] = 0x83042454; arr[10] = 0x585E0CC4; arr[11] = 0x909090C3;
        link = GetScrDataField(ImportMonsterActionPush);
    }
    return link;
}

int MonsterActionPush(int sUnit, int sActType)
{
    int ptr = UnitToPtr(sUnit), link, temp = GetMemory(0x5c31bc), res = 0;

    if (!link)
        link = GetScrDataField(MonsterActionPush);
    if (ptr)
    {
        sUnit = ptr;
        SetMemory(0x5c31bc, ImportMonsterActionPush());
        res = GetHolder(link);
        SetMemory(0x5c31bc, temp);
    }
    return res;
}

void ForceCastSpell(int sUnit, int sSpellNumber, float xProfile, float yProfile)
{
	int act = MonsterActionPush(sUnit, 19);

	if (act)
	{
		SetMemory(act + 4, sSpellNumber);
		SetMemory(act + 12, ToInt(xProfile));
		SetMemory(act + 16, ToInt(yProfile));
	}
}

void HecubahImpactDamage(int sUnit)
{
    int owner = GetOwner(sUnit), durate = GetDirection(sUnit), target = ToInt(GetObjectZ(sUnit));

    while (IsObjectOn(sUnit))
    {
        if (CurrentHealth(target))
        {
            if (CheckWallAtUnitPos(target))
            {
                Damage(target, 0, 120, 11);
                PlaySoundAround(target, 42);
                Effect("SPARK_EXPLOSION", GetObjectX(target), GetObjectY(target), 0.0, 0.0);
            }
            else if (durate)
            {
                FrameTimerWithArg(1, sUnit, HecubahImpactDamage);
                LookWithAngle(sUnit, durate - 1);
                MoveObject(sUnit + 1, GetObjectX(target) + UnitAngleCos(sUnit + 1, 8.0), GetObjectY(target) + UnitAngleSin(sUnit + 1, 8.0));
                if (!ToInt(GetObjectZ(sUnit + 1)))
                {
                    Raise(sUnit + 1, 6.0);
                    Damage(target, 0, 20, 11);
                }
                PlaySoundAround(target, 171);
                DeleteObjectTimer(CreateObjectAt("OldSmoke", GetObjectX(sUnit + 1), GetObjectY(sUnit + 1)), 12);
                break;
            }
        }
        Delete(sUnit);
        Delete(sUnit + 1);
        break;
    }
}

void HecubahMeleeAttack(int caster, int target)
{
    int unit = CreateObjectAt("ImaginaryCaster", GetObjectX(caster), GetObjectY(caster));

    Frozen(CreateObjectAt("Maiden", GetObjectX(target) + UnitRatioX(caster, target, 3.0), GetObjectY(target) + UnitRatioY(caster, target, 3.0)), 1);
    LookAtObject(unit + 1, caster);
    Raise(unit, target);
    SetOwner(caster, unit);
    LookWithAngle(unit, 128);
    Enchant(target, EnchantList(25), 3.0);
    FrameTimerWithArg(1, unit, HecubahImpactDamage);
}

void BlueCrystalCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, owner, 200, 9);
            Effect("VIOLET_SPARKS", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int ThrowBlueCrystal(int sUnit, int sTarget)
{
    int mis = CreateObjectAt("Gameball", GetObjectX(sUnit) + UnitRatioX(sTarget, sUnit, 19.0), GetObjectY(sUnit) + UnitRatioY(sTarget, sUnit, 19.0));
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, BlueCrystalCollide);
    SetOwner(sUnit, mis);
    DeleteObjectTimer(mis, 240);

    return mis;
}

void DelayShootToTarget(int sUnit)
{
    int durate = GetDirection(sUnit);
    int mis = sUnit + 1, target = ToInt(GetObjectZ(sUnit));
    
    while (1)
    {
        if (IsObjectOn(mis) && CurrentHealth(target))
        {
            if (durate)
            {
                PushObjectTo(mis, UnitRatioX(target, mis, 0.6), UnitRatioY(target, mis, 0.6));
                LookWithAngle(sUnit, durate - 1);
                FrameTimerWithArg(1, sUnit, DelayShootToTarget);
                break;
            }
        }
        Delete(sUnit);
        break;
    }
}

void HecubahSight()
{
    int delay = 30, unit;

    if (!UnitCheckEnchant(self, GetLShift(30)))
    {
        if (Distance(GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other)) < 200.0)
        {
            LookAtObject(self, other);
            HitLocation(self, GetObjectX(self), GetObjectY(self));
            HecubahMeleeAttack(GetTrigger(), GetCaller());
        }
        else
        {
            unit = CreateObjectAt("ImaginaryCaster", GetObjectX(self), GetObjectY(self));
            Raise(unit, GetCaller());
            LookWithAngle(unit, 250);
            FrameTimerWithArg(1, unit, DelayShootToTarget);
            CreatureIdle(self);
            ForceCastSpell(self, 0, GetObjectX(self) + UnitRatioX(other, self, 30.0), GetObjectY(self) + UnitRatioY(other, self, 30.0));
            PushObject(ThrowBlueCrystal(self, other), -1.5, GetObjectX(other), GetObjectY(other));
            delay = 20;
        }
        Enchant(self, EnchantList(30), 0.5);
    }
    if (GetCaller() ^ GetUnit1C(GetTrigger() + 1))
    {
        SetUnit1C(GetTrigger() + 1, GetCaller());
        AggressionLevel(self, 1.0);
    }
    CheckResetSight(GetTrigger(), delay);
}

void HecubahLostEnemy()
{
    int enemy = GetUnit1C(GetTrigger() + 1);

    if (CurrentHealth(enemy))
        Attack(self, enemy);
}

void WhenRunout()
{
    EnchantOff(self, EnchantList(2));
}

void GhostStrike()
{
    int ptr;

    LookAtObject(self, other);
    if (DistanceUnitToUnit(self, other) > 50.0)
        PushObjectTo(self, UnitRatioX(other, self, 13.0), UnitRatioY(other, self, 13.0));
    else
    {
        HitLocation(self, GetObjectX(self), GetObjectY(self));
        ptr = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(self), GetObjectY(self));
        SetOwner(self, ptr);
        Raise(ptr, ToFloat(GetCaller()));
        RemoveGhostHitDelay(ptr);
    }
    Enchant(self, "ENCHANT_BLINDED", 0.0);
}

void RemoveGhostHitDelay(int ptr)
{
    int unit = GetOwner(ptr), target = ToInt(GetObjectZ(ptr));
    int hp = CurrentHealth(unit), mxHp = MaxHealth(unit), pic, func;

    if (hp)
    {
        if (DistanceUnitToUnit(unit, target) > 28.0)
            MoveObject(ptr, GetObjectX(unit) + UnitRatioX(target, unit, 1.0), GetObjectY(unit) + UnitRatioY(target, unit, 1.0));
        else
            MoveObject(ptr, GetObjectX(unit), GetObjectY(unit));
        func = GetUnitDeathFunc(unit);
        Delete(unit);
        pic = SummonPowerGhost(ptr);
        SetCallback(pic, 5, func);
        Damage(pic, 0, mxHp - hp, -1);
        LookAtObject(pic, target);
        MoveWaypoint(1, GetObjectX(ptr), GetObjectY(ptr));
        DeleteObjectTimer(CreateObject("ReleasedSoul", 1), 9);
        AudioEvent("DeathRayKill", 1);
    }
    Delete(ptr);
}

void MecaGolemStrike()
{
    int ptr;
    float dist = DistanceUnitToUnit(self, other);

    LookAtObject(self, other);
    if (dist > 39.0)
        PushObjectTo(self, UnitRatioX(other, self, 21.0), UnitRatioY(other, self, 21.0));
    if (!HasEnchant(self, "ENCHANT_BURNING") && dist < 110.0)
    {
        Enchant(self, "ENCHANT_BURNING", 0.3);
        HitLocation(self, GetObjectX(self), GetObjectY(self));
        ptr = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(self), GetObjectY(self));
        SetOwner(self, ptr);
        Raise(ptr, ToFloat(GetCaller()));
        FrameTimerWithArg(6, ptr, RemoveMecaGolemHitDelay);
    }
    Enchant(self, "ENCHANT_BLINDED", 0.0);
}

void RemoveMecaGolemHitDelay(int ptr)
{
    int unit = GetOwner(ptr), target = ToInt(GetObjectZ(ptr));
    int hp = CurrentHealth(unit), mxHp = MaxHealth(unit), pic, func;

    if (hp)
    {
        if (DistanceUnitToUnit(unit, target) > 27.0)
            MoveObject(ptr, GetObjectX(unit) + UnitRatioX(target, unit, 4.0), GetObjectY(unit) + UnitRatioY(target, unit, 4.0));
        else
            MoveObject(ptr, GetObjectX(unit), GetObjectY(unit));
        func = GetUnitDeathFunc(unit);
        Delete(unit);
        pic = SummonPowerMecaGolem(ptr);
        SetCallback(pic, 5, func);
        Damage(pic, 0, mxHp - hp, -1);
        LookAtObject(pic, target);
        HitLocation(pic, GetObjectX(pic), GetObjectY(pic));
        MoveWaypoint(1, GetObjectX(ptr), GetObjectY(ptr));
        DeleteObjectTimer(CreateObject("ReleasedSoul", 1), 9);
        AudioEvent("HitStoneBreakable", 1);
    }
    Delete(ptr);
}

void DemonSightEvent()
{
    if (Distance(GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other)) < 98.0)
	{
		DeleteObjectTimer(CreateObjectAt("MeteorExplode", GetObjectX(other), GetObjectY(other)), 9);
		Damage(other, self, 30, 14);
	}
	if (GetCaller() ^ ToInt(GetObjectZ(GetTrigger() + 1)))
	{
		CreatureFollow(self, other);
		Raise(GetTrigger() + 1, ToFloat(GetCaller()));
	}
	MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
	Enchant(self, "ENCHANT_BLINDED", 0.0);
}

void DemonResetSight()
{
	int target = ToInt(GetObjectZ(GetTrigger() + 1));

	EnchantOff(self, "ENCHANT_BLINDED");
	if (!IsVisibleTo(self, target) || !CurrentHealth(target))
	{
		Raise(GetTrigger() + 1, ToFloat(0));
		CreatureIdle(self);
	}
}

void GWizSightEvent()
{
	LookAtObject(self, other);
	SummonFrog(GetTrigger(), GetCaller());
	if (GetCaller() ^ ToInt(GetObjectZ(GetTrigger() + 1)))
	{
		CreatureFollow(self, other);
		Raise(GetTrigger() + 1, ToFloat(GetCaller()));
	}
	MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
	Enchant(self, "ENCHANT_BLINDED", 0.0);
}

void GWizResetSight()
{
	int target = ToInt(GetObjectZ(GetTrigger() + 1));

	EnchantOff(self, "ENCHANT_BLINDED");
	if (!IsVisibleTo(self, target) || !CurrentHealth(target))
	{
		Raise(GetTrigger() + 1, ToFloat(0));
		CreatureIdle(self);
	}
}

void SummonFrog(int owner, int target)
{
	int unit = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner), GetObjectY(owner));

	UnitNoCollide(CreateObjectAt("GreenFrog", GetObjectX(unit), GetObjectY(unit)));
	ObjectOff(unit + 1);
	SetOwner(owner, unit);
	Raise(unit, ToFloat(target));
	FrameTimerWithArg(1, unit, FrogFlyingHandler);
}

void FrogFlyingHandler(int ptr)
{
	int owner = GetOwner(ptr), target = ToInt(GetObjectZ(ptr)), count = GetDirection(ptr);

	if (CurrentHealth(owner) && CurrentHealth(target) && count < 50)
	{
		if (IsVisibleTo(ptr + 1, target))
		{
			if (Distance(GetObjectX(ptr + 1), GetObjectY(ptr + 1), GetObjectX(target), GetObjectY(target)) > 29.0)
			{
				MoveObject(ptr + 1, GetObjectX(ptr + 1) + UnitRatioX(target, ptr + 1, 11.0), GetObjectY(ptr + 1) + UnitRatioY(target, ptr + 1, 11.0));
				LookAtObject(ptr + 1, target);
				Walk(ptr + 1, GetObjectX(ptr + 1), GetObjectY(ptr + 1));
				LookWithAngle(ptr, count + 1);
			}
			else
			{
				DeleteObjectTimer(CreateObjectAt("GreenPuff", GetObjectX(target), GetObjectY(target)), 9);
				Damage(target, owner, 10, 14);
				ObjectOn(ptr + 1);
				Damage(ptr + 1, 0, MaxHealth(ptr + 1) + 1, -1);
				LookWithAngle(ptr, 100);
			}
		}
		else
			LookWithAngle(ptr, 100);
		FrameTimerWithArg(1, ptr, FrogFlyingHandler);
	}
	else
	{
		Delete(ptr);
		Delete(ptr + 1);
	}
}

float DistanceUnitToUnit(int unit1, int unit2)
{
    return Distance(GetObjectX(unit1), GetObjectY(unit1), GetObjectX(unit2), GetObjectY(unit2));
}

void AbsoluteTargetStrike(int owner, int target, float threshold, int func)
{
    int unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(target), GetObjectY(target));
    Raise(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(owner), GetObjectY(owner)), threshold);

    SetOwner(owner, unit);
    Raise(unit, ToFloat(target));
    FrameTimerWithArg(1, unit, func);
}

void FireSpritEnemyFind()
{
    AbsoluteTargetStrike(GetTrigger(), GetCaller(), DistanceUnitToUnit(self, other) / 42.0, SpitImpShot);
    UnitSetEnchantTime(self, 2, 60);
}

int ImportGetSpellNumber()
{
	int arr[11], link;

	if (!link)
	{
		arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x4085048B; arr[3] = 0x680097BB; arr[4] = 0x004243F0; arr[5] = 0x2454FF50;
		arr[6] = 0x08C48304; arr[7] = 0x50723068; arr[8] = 0x54FF5000; arr[9] = 0xC4830424; arr[10] = 0xC3C0310C;
        link = GetScrDataField(ImportGetSpellNumber);
	}
	return link;
}

int GetSpellNumber(string spell)
{
	int temp = GetMemory(0x5c3204), res;

	SetMemory(0x5c3204, ImportGetSpellNumber());
	res = Unused5e(spell);
	SetMemory(0x5c3204, temp);
	return res * 4;
}

void WizRunAway()
{
	if (HasEnchant(self, "ENCHANT_ANTI_MAGIC"))
	{
		EnchantOff(self, "ENCHANT_ANTI_MAGIC");
	}
}

int ThrowSmallFist(int owner, int target)
{
    int fistTrap = CreateObjectAt("ImaginaryCaster", GetObjectX(target), GetObjectY(target)) + 1;

    Delete(fistTrap - 1);
    CastSpellLocationObject("SPELL_FIST", GetObjectX(owner), GetObjectY(owner), target);
    SetOwner(owner, fistTrap);
    return fistTrap;
}

void SingleMissileShooter(int owner, int target)
{
    int unit = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner), GetObjectY(owner));

    SetOwner(owner, unit);
    ShotSingleMagicMissile(unit, target);
    DeleteObjectTimer(unit, 60);
}

void ShotSingleMagicMissile(int unit, int target)
{
    int ptr = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit));

    CastSpellObjectLocation("SPELL_MAGIC_MISSILE", unit, GetObjectX(target), GetObjectY(target));
    Delete(ptr);
    Delete(ptr + 2);
    Delete(ptr + 3);
    Delete(ptr + 4);
}

void OpenBossGate()
{
    int key, count;

    count ++;
    ObjectOff(self);
    if (count ^ 6)
    {
        MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
        key = CreateObjectAt("RedOrbKeyOfTheLich", 200.0, 200.0);
        MoveObject(key, GetObjectX(other), GetObjectY(other));
        Raise(key, 225.0);
        AudioEvent("KeyDrop", 1);
        Enchant(key, "ENCHANT_FREEZE", 0.0);
    }
    else
    {
        UnlockDoor(Object("BossGate1"));
        UnlockDoor(Object("BossGate11"));
        FrameTimerWithArg(30, BossCnt, StartBossMonsterSummons);
        UniPrint(other, "보스 방 게이트를 열었다");
        UniPrintToAll("방금 " + PlayerIngameNick(other) + " 님께서 보스 방 출입문의 잠금을 해제시켰습니다");
    }
}

void WallsLineOpen(int x, int y, int count, int dir)
{
    int i;

    for (i = 0 ; i < count ; i ++)
        WallOpen(Wall(x + i, y + (i*dir)));
}

int DungeonMobDeathFunc()
{
    StopScript(DungeonMonster1Death);
}

void DungeonMonster1Death()
{
    int ptr = Dungeon[0] + 1;
    int count = GetDirection(ptr);

    LookWithAngle(ptr, count - 1);
    DungeonUnitDeathHandler();
    if (!GetDirection(ptr))
    {
        WallsLineOpen(49, 129, 7, -1);
        UniPrintToAll("던전1 의 비밀벽이 열립니다");
    }
}

void DungeonMonster2Death()
{
    int ptr = Dungeon[1] + 1;
    int count = GetDirection(ptr);

    LookWithAngle(ptr, count - 1);
    DungeonUnitDeathHandler();
    if (!GetDirection(ptr))
    {
        WallsLineOpen(62, 116, 7, -1);
        UniPrintToAll("던전2 의 비밀벽이 열립니다");
    }
}

void DungeonMonster3Death()
{
    int ptr = Dungeon[2] + 1;
    int count = GetDirection(ptr);

    LookWithAngle(ptr, count - 1);
    Delete(GetTrigger() + 1);
    DungeonUnitDeathHandler();
    if (!GetDirection(ptr))
    {
        WallsLineOpen(77, 101, 7, -1);
        UniPrintToAll("던전3 의 비밀벽이 열립니다");
    }
}

void DungeonMonster4Death()
{
    int ptr = Dungeon[3] + 1;
    int count = GetDirection(ptr);

    LookWithAngle(ptr, count - 1);
    Delete(GetTrigger() + 1);
    DungeonUnitDeathHandler();
    if (!GetDirection(ptr))
    {
        WallsLineOpen(142, 98, 6, 1);
        UniPrintToAll("던전4 의 비밀벽이 열립니다");
    }
}

void DungeonMonster5Death()
{
    int ptr = Dungeon[4] + 1;
    int count = GetDirection(ptr);

    LookWithAngle(ptr, count - 1);
    DungeonUnitDeathHandler();
    if (!GetDirection(ptr))
    {
        WallsLineOpen(151, 107, 6, 1);
        UniPrintToAll("던전5 의 비밀벽이 열립니다");
    }
}

void DungeonMonster6Death()
{
    int ptr = Dungeon[5] + 1;
    int count = GetDirection(ptr);

    LookWithAngle(ptr, count - 1);
    DungeonUnitDeathHandler();
    if (!GetDirection(ptr))
    {
        WallsLineOpen(169, 125, 6, 1);
        UniPrintToAll("던전6 의 비밀벽이 열립니다");
    }
}

void StartDungeon(int idx)
{
    Dungeon[idx] = CallFunctionWithArgInt(DunFuncptr() + idx, 80);
    UnlockDoor(Object("DunGate" + IntToString(idx + 1)));
    UnlockDoor(Object("DunGate" + IntToString(idx + 1) + "1"));
    UniPrintToAll(IntToString(idx + 1) + " 번째 던전 출입문이 열렸습니다");
}

int DunFuncptr()
{
    StopScript(SpawnDungeon1Monsters);
}

int SpawnDungeon1Monsters(int count)
{
    int unit = CreateObject("InvisibleLightBlueHigh", 13);
    CreateObject("InvisibleLightBlueHigh", 13);
    LookWithAngle(unit, count);
    LookWithAngle(unit + 1, count);
    Raise(unit, ToFloat(0));
    FrameTimerWithArg(1, unit, SpawnDungeonMonster);
    return unit;
}

int SpawnDungeon2Monsters(int count)
{
    int unit = CreateObject("InvisibleLightBlueHigh", 14);
    CreateObject("InvisibleLightBlueHigh", 14);
    LookWithAngle(unit, count);
    LookWithAngle(unit + 1, count);
    Raise(unit, ToFloat(1));
    FrameTimerWithArg(1, unit, SpawnDungeonMonster);
    return unit;
}

int SpawnDungeon3Monsters(int count)
{
    int unit = CreateObject("InvisibleLightBlueHigh", 15);
    CreateObject("InvisibleLightBlueHigh", 15);
    LookWithAngle(unit, count);
    LookWithAngle(unit + 1, count);
    Raise(unit, ToFloat(2));
    FrameTimerWithArg(1, unit, SpawnDungeonMonster);
    return unit;
}

int SpawnDungeon4Monsters(int count)
{
    int unit = CreateObject("InvisibleLightBlueHigh", 16);
    CreateObject("InvisibleLightBlueHigh", 16);
    LookWithAngle(unit, count);
    LookWithAngle(unit + 1, count);
    Raise(unit, ToFloat(3));
    FrameTimerWithArg(1, unit, SpawnDungeonMonster);
    return unit;
}

int SpawnDungeon5Monsters(int count)
{
    int unit = CreateObject("InvisibleLightBlueHigh", 17);
    CreateObject("InvisibleLightBlueHigh", 17);
    LookWithAngle(unit, count);
    LookWithAngle(unit + 1, count);
    Raise(unit, ToFloat(4));
    FrameTimerWithArg(1, unit, SpawnDungeonMonster);
    return unit;
}

int SpawnDungeon6Monsters(int count)
{
    int unit = CreateObject("InvisibleLightBlueHigh", 18);
    CreateObject("InvisibleLightBlueHigh", 18);
    LookWithAngle(unit, count);
    LookWithAngle(unit + 1, count);
    Raise(unit, ToFloat(5));
    FrameTimerWithArg(1, unit, SpawnDungeonMonster);
    return unit;
}

void SpawnDungeonMonster(int ptr)
{
    int count = GetDirection(ptr), type = ToInt(GetObjectZ(ptr)), unit;

    if (count)
    {
        unit = CallFunctionWithArgInt(SummonPowerGhost + type, ptr);
        SetCallback(unit, 5, DungeonMobDeathFunc() + type);
        LookWithAngle(ptr, count - 1);
        FrameTimerWithArg(1, ptr, SpawnDungeonMonster);
    }
}

void EnableObject(int disUnit)
{
    if (ToInt(GetObjectX(disUnit)))
    {
        if (IsObjectOn(disUnit))
            return;
        else
            ObjectOn(disUnit);
    }
}

void OpenDungenGate()
{
    int key = HasGateKey(other), dun;

    ObjectOff(self);
    if (IsObjectOn(key))
    {
        dun = CheckDungeon(other);
        if (dun + 1)
        {
            StartDungeon(dun);
            Delete(key);
        }
    }
    else
    {
        FrameTimerWithArg(70, GetTrigger(), EnableObject);
        UniPrint(other, "[!] 이 던전 게이트를 열려면 리치의 붉은색 열쇠가 필요합니다");
    }
}

int CheckDungeon(int unit)
{
    float temp = 5138.0, dist;
    int i, res = -1;

    for (i = 0 ; i < DunCnt ; i ++)
    {
        dist = DistanceUnitToUnit(unit, DGate[i]);
        if (dist < temp)
        {
            temp = dist;
            res = i;
        }
    }
    return res;
}

int HasGateKey(int unit)
{
    int inv = GetLastItem(unit);

    while (IsObjectOn(inv))
    {
        if (GetUnitThingID(inv) ^ 2182)
            inv = GetPreviousItem(inv);
        else
            return inv;
    }
    return 0;
}

void InitDungeonGates(int max)
{
    int i;

    for (i = 0 ; i < max ; i ++)
        DGate[i] = Object("DunGate" + IntToString(i + 1));
}

void BossMonsterDeath()
{
    int count;

    count ++;
    if (count == BossCnt)
    {
        VictoryEvent();
    }
    DungeonUnitDeathHandler();
}

void StartBossMonsterSummons(int count)
{
    int unit = CreateObject("InvisibleLightBlueHigh", 19);

    LookWithAngle(unit, count);
    FrameTimerWithArg(3, unit, SummonBossMonster);
}

void SummonBossMonster(int sUnit)
{
    int count = GetDirection(sUnit);

    if (count)
    {
        SetCallback(SummonHecubah(sUnit), 5, BossMonsterDeath);
        LookWithAngle(sUnit, count - 1);
        FrameTimerWithArg(1, sUnit, SummonBossMonster);
    }
}

void VictoryEvent()
{
    if (!GOver)
    {
        GOver = 1;
        TeleportAllPlayer(48);
        FrameTimer(30, StrMissionClear);
        UniPrintToAll("승리하셨습니다! 모든 보스 몬스터를 물리쳤습니다!");
    }
}

void SetUnitStatus(int unit, int stat)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            SetMemory(temp + 0x5a0, stat);
    }
}

int GetUnitStatus(int unit)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            return GetMemory(temp + 0x5a0);
    }
    return 0;
}

int GetPlayerAction(int unit)
{
    int ptr = UnitToPtr(unit);
    //01- berserker, 05- run, 1a- laugh
    if (ptr)
        return GetMemory(GetMemory(ptr + 0x2ec) + 0x58) & 0xff;
    return 0;
}

void ImpShotCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, 0, 40, 1);
            break;
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int ImpMissile(int sOwner, int sTarget, float gap)
{
    int mis = CreateObjectAt("RoundChakramInMotion", GetObjectX(sOwner) + UnitRatioX(sTarget, sOwner, gap), GetObjectY(sOwner) + UnitRatioY(sTarget, sOwner, gap));
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2e8, 5483536); //projectile update
    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, ImpShotCollide);
    SetOwner(sOwner, mis);
    return mis;
}

void SpitImpShot(int ptr)
{
    int owner = GetOwner(ptr), target = ToInt(GetObjectZ(ptr)), mis;
    float dt = Distance(GetObjectX(ptr), GetObjectY(ptr), GetObjectX(target), GetObjectY(target));
    float vectX = UnitRatioX(target, ptr, dt), vectY = UnitRatioY(target, ptr, dt);

    if (CurrentHealth(owner) && CurrentHealth(target))
    {
        mis = ImpMissile(owner, target, 14.0);
        SetOwner(owner, mis);
        UnitSetEnchantTime(mis, 8, 90);
        MoveObject(ptr, GetObjectX(target) + (vectX * GetObjectZ(ptr + 1)), GetObjectY(target) + (vectY * GetObjectZ(ptr + 1)));
        if (IsVisibleTo(ptr, owner))
            PushObject(mis, -35.0, GetObjectX(ptr), GetObjectY(ptr));
        else
            PushObject(mis, -35.0, GetObjectX(target), GetObjectY(target));
    }
    Delete(ptr);
    Delete(ptr + 1);
}

void RhombusPut(int wp, float x_low, float x_high, float y_low, float y_high)
{
    float var0 = RandomFloat(y_low, y_high);
    float var1 = RandomFloat(0.0, x_high - x_low);
    MoveWaypoint(wp, x_high - y_high + var0 - var1, var0 + var1);
}

void SplashHandler(int owner, int func, float x, float y, float range)
{
    int ptr = CreateObjectAt("InvisibleLightBlueHigh", range, y) + 1, k;

    SetOwner(owner, ptr - 1);
    Raise(ptr - 1, ToFloat(func));
    for (k = 0 ; k < 8 ; k ++)
    {
        DeleteObjectTimer(CreateObjectAt("WeirdlingBeast", x, y), 1);
        UnitNoCollide(ptr + k);
        LookWithAngle(ptr + k, k * 32);
        SetOwner(ptr - 1, ptr + k);
        SetCallback(ptr + k, 3, UnitVisibleSplash);
    }
    DeleteObjectTimer(ptr - 1, 2);
}

void UnitVisibleSplash()
{
    int parent;

    if (!HasEnchant(other, "ENCHANT_VILLAIN"))
    {
        parent = GetOwner(self);
        if (CurrentHealth(GetOwner(parent)))
        {
            if (Distance(GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other)) <= GetObjectX(parent))
            {
                Enchant(other, "ENCHANT_VILLAIN", 0.1);
                CallFunction(ToInt(GetObjectZ(parent)));
            }
        }
    }
}

void GreenSparkFx(float x, float y)
{
    int ptr = CreateObjectAt("MonsterGenerator", x, y);

    Damage(ptr, 0, 10, 100);
    Delete(ptr);
}

void UpdateRepairItem(int plrIndex, int item)
{
    int arr[9], link, temp = GetMemory(0x5c3108), ptr = UnitToPtr(item);

    if (!link)
    {
        arr[0] = 0x50685056; arr[1] = 0xFF005072; arr[2] = 0x708B2414; arr[3] = 0x04C48304; arr[4] = 0x4D87A068; arr[5] = 0x30FF5600; arr[6] = 0x082454FF;
        arr[7] = 0x580CC483; arr[8] = 0x9090C35E;
		link = GetScrDataField(UpdateRepairItem);
    }
    if (ptr)
    {
        item = ptr;
        SetMemory(0x5c3108, link + 8);
        Unused1f(link);
        SetMemory(0x5c3108, temp);
    }
}

int GetPlayerIndex(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        return GetMemory(GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x810);
    return -1;
}

int RepairAll(int unit)
{
    int inv = GetLastItem(unit), count = 0, plrIndex = GetPlayerIndex(unit);

    if (plrIndex < 0)
        return 0;
    while (IsObjectOn(inv))
    {
        if (MaxHealth(inv) ^ CurrentHealth(inv))
        {
            RestoreHealth(inv, MaxHealth(inv) - CurrentHealth(inv));
            UpdateRepairItem(plrIndex, inv);
            count ++;
        }
        inv = GetPreviousItem(inv);
    }
    return count;
}

int GetUnitDeathFunc(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        return GetMemory(GetMemory(ptr + 0x2ec) + 0x4f4);
    }
    return 0;
}

void InitStampStrings()
{
    StrWarSkill();
    StrSpecialWeapon();
}

void StrWarSkill()
{
	int arr[26], i, count = 0;
	string name = "ManaBombOrb";
	float pos_x = GetWaypointX(45), pos_y = GetWaypointY(45);

	arr[0] = 1075905278; arr[1] = 133713856; arr[2] = 67649679; arr[3] = 18874881; arr[4] = 956449312; arr[5] = 2080900128; arr[6] = 151552009; arr[7] = 1343258900; 
	arr[8] = 570434048; arr[9] = 1107595336; arr[10] = 8881216; arr[11] = 337714704; arr[12] = 6344232; arr[13] = 1073750020; arr[14] = 565376; arr[15] = 603922400; 
	arr[16] = 608305184; arr[17] = 4194304; arr[18] = 1081601; arr[19] = 2113929506; arr[20] = 1140589571; arr[21] = 2143618048; arr[22] = 269484049; arr[23] = 268566032; 
	arr[24] = 1077919744; arr[25] = 32640; 
	for (i = 0 ; i < 26 ; i ++)
		count = DrawStrWarSkill(arr[i], name, count);
	MoveWaypoint(45, pos_x, pos_y);
}

int DrawStrWarSkill(int arg, string name, int count)
{
	int i;

	for (i = 1 ; i > 0 && count < 806 ; i <<= 1)
	{
		if (i & arg)
			CreateObject(name, 45);
		if (count % 72 == 71)
			MoveWaypoint(45, GetWaypointX(45) - 140.0, GetWaypointY(45) + 144.0);
		else
			MoveWaypoint(45, GetWaypointX(45) + 2.0, GetWaypointY(45) - 2.0);
		count ++;
	}
	return count;
}

void StrSpecialWeapon()
{
	int arr[32], i, count = 0;
	string name = "ManaBombOrb";
	float pos_x = GetWaypointX(46), pos_y = GetWaypointY(46);

	arr[0] = 271310912; arr[1] = 1338505220; arr[2] = 9375728; arr[3] = 478232578; arr[4] = 37756992; arr[5] = 134513728; arr[6] = 8784464; arr[7] = 1179906; 
	arr[8] = 1084236834; arr[9] = 134697042; arr[10] = 134254600; arr[11] = 2047377697; arr[12] = 1069556802; arr[13] = 2017461376; arr[14] = 173114120; arr[15] = 257; 
	arr[16] = 65570; arr[17] = 2018672640; arr[18] = 134217743; arr[19] = 16924657; arr[20] = 537039872; arr[21] = 69271488; arr[22] = 528400; arr[23] = 33428640; 
	arr[24] = 1075871808; arr[25] = 1341947776; arr[26] = 4271; arr[27] = 33620738; arr[28] = 516; arr[29] = 134250373; arr[30] = 1880098816; arr[31] = 31; 
	
	for (i = 0 ; i < 32 ; i ++)
		count = DrawStrSpecialWeapon(arr[i], name, count);
	MoveWaypoint(46, pos_x, pos_y);
}

int DrawStrSpecialWeapon(int arg, string name, int count)
{
	int i;

	for (i = 1 ; i > 0 && count < 992 ; i <<= 1)
	{
		if (i & arg)
			CreateObject(name, 46);
		if (count % 88 == 87)
			MoveWaypoint(46, GetWaypointX(46) - 172.0, GetWaypointY(46) + 176.0);
		else
			MoveWaypoint(46, GetWaypointX(46) + 2.0, GetWaypointY(46) - 2.0);
		count ++;
	}
	return count;
}

void StrMissionFail()
{
	int arr[17], i, count = 0;
	string name = "ManaBombOrb";
	float pos_x = GetWaypointX(47), pos_y = GetWaypointY(47);

	arr[0] = 272613948; arr[1] = 75782084; arr[2] = 537411713; arr[3] = 1090654737; arr[4] = 606245922; arr[5] = 675873800; arr[6] = 267423498; arr[7] = 1352002; 
	arr[8] = 1073872898; arr[9] = 114; arr[10] = 1889865712; arr[11] = 268697375; arr[12] = 1075856020; arr[13] = 86540160; arr[14] = 16842881; arr[15] = 33428976; 
	arr[16] = 671349764; 
	for (i = 0 ; i < 17 ; i ++)
		count = DrawStrMissionFail(arr[i], name, count);
	MoveWaypoint(47, pos_x, pos_y);
}

int DrawStrMissionFail(int arg, string name, int count)
{
	int i;

	for (i = 1 ; i > 0 && count < 527 ; i <<= 1)
	{
		if (i & arg)
			CreateObject(name, 47);
		if (count % 48 == 47)
			MoveWaypoint(47, GetWaypointX(47) - 92.0, GetWaypointY(47) + 96.0);
		else
			MoveWaypoint(47, GetWaypointX(47) + 2.0, GetWaypointY(47) - 2.0);
		count ++;
	}
	return count;
}

void StrMissionClear()
{
	int arr[23], i, count = 0;
	string name = "ManaBombOrb";
	float pos_x = GetWaypointX(48), pos_y = GetWaypointY(48);

	arr[0] = 1008796286; arr[1] = 1338015748; arr[2] = 142870536; arr[3] = 537002002; arr[4] = 571482146; arr[5] = 3539016; arr[6] = 144933001; arr[7] = 50725153; 
	arr[8] = 612564516; arr[9] = 1073742968; arr[10] = 554172575; arr[11] = 1072697345; arr[12] = 33554946; arr[13] = 16388; arr[14] = 8259592; arr[15] = 2080440336; 
	arr[16] = 1107566625; arr[17] = 134740992; arr[18] = 135299208; arr[19] = 537919490; arr[20] = 528678432; arr[21] = 4196344; arr[22] = 524414; 
	for (i = 0 ; i < 23 ; i ++)
		count = DrawStrMissionClear(arr[i], name, count);
	MoveWaypoint(48, pos_x, pos_y);
}

int DrawStrMissionClear(int arg, string name, int count)
{
	int i;

	for (i = 1 ; i > 0 && count < 713 ; i <<= 1)
	{
		if (i & arg)
			CreateObject(name, 48);
		if (count % 64 == 63)
			MoveWaypoint(48, GetWaypointX(48) - 124.0, GetWaypointY(48) + 128.0);
		else
			MoveWaypoint(48, GetWaypointX(48) + 2.0, GetWaypointY(48) - 2.0);
		count ++;
	}
	return count;
}

void StrDungeonBoss()
{
	int arr[18], i, count = 0;
	string name = "ManaBombOrb";
	float pos_x = GetWaypointX(50), pos_y = GetWaypointY(50);

	arr[0] = 1076879998; arr[1] = 1077968960; arr[2] = 135268416; arr[3] = 1209012256; arr[4] = 67369987; arr[5] = 4523908; arr[6] = 8552577; arr[7] = 270537281; 
	arr[8] = 69214480; arr[9] = 1099429893; arr[10] = 8424441; arr[11] = 32; arr[12] = 67117058; arr[13] = 134250496; arr[14] = 65536; arr[15] = 131104; 
	arr[16] = 2088757246; arr[17] = 32647; 
	for (i = 0 ; i < 18 ; i ++)
		count = DrawStrDungeonBoss(arr[i], name, count);
	MoveWaypoint(50, pos_x, pos_y);
}

int DrawStrDungeonBoss(int arg, string name, int count)
{
	int i;

	for (i = 1 ; i > 0 && count < 558 ; i <<= 1)
	{
		if (i & arg)
			CreateObject(name, 50);
		if (count % 52 == 51)
			MoveWaypoint(50, GetWaypointX(50) - 104.0, GetWaypointY(50) - 100.0);
		else
			MoveWaypoint(50, GetWaypointX(50) + 2.0, GetWaypointY(50) + 2.0);
		count ++;
	}
	return count;
}

void PutDungeonNameStampString()
{
    int count;

    if (count < 6)
    {
        MoveWaypoint(1, GetWaypointX(51 + count), GetWaypointY(51 + count));
        if (count < 3)
            StrDungeonName();
        else
            StrDungeonNameRev();
        count ++;
        FrameTimer(1, PutDungeonNameStampString);
    }
}

void StrDungeonName()
{
	int arr[17], i, count = 0;
	string name = "ManaBombOrb";
	float pos_x = GetWaypointX(1), pos_y = GetWaypointY(1);

	arr[0] = 1009771134; arr[1] = 67403652; arr[2] = 592004; arr[3] = 298323985; arr[4] = 1008861220; arr[5] = 4736080; arr[6] = 153125000; arr[7] = 17826078; 
	arr[8] = 10306; arr[9] = 1078328352; arr[10] = 33523728; arr[11] = 270598160; arr[12] = 67125312; arr[13] = 8421248; arr[14] = 16781313; arr[15] = 1644036609; 
	arr[16] = 67370047; 
	for (i = 0 ; i < 17 ; i ++)
		count = DrawStrDungeonName(arr[i], name, count);
	MoveWaypoint(1, pos_x, pos_y);
}

int DrawStrDungeonName(int arg, string name, int count)
{
	int i;

	for (i = 1 ; i > 0 && count < 527 ; i <<= 1)
	{
		if (i & arg)
			CreateObject(name, 1);
		if (count % 48 == 47)
			MoveWaypoint(1, GetWaypointX(1) - 92.0, GetWaypointY(1) + 96.0);
		else
			MoveWaypoint(1, GetWaypointX(1) + 2.0, GetWaypointY(1) - 2.0);
		count ++;
	}
	return count;
}

void StrDungeonNameRev()
{
	int arr[17], i, count = 0;
	string name = "ManaBombOrb";
	float pos_x = GetWaypointX(1), pos_y = GetWaypointY(1);

	arr[0] = 1009771134; arr[1] = 67403652; arr[2] = 592004; arr[3] = 298323985; arr[4] = 1008861220; arr[5] = 4736080; arr[6] = 153125000; arr[7] = 17826078; 
	arr[8] = 10306; arr[9] = 1078328352; arr[10] = 33523728; arr[11] = 270598160; arr[12] = 67125312; arr[13] = 8421248; arr[14] = 16781313; arr[15] = 1644036609; 
	arr[16] = 67370047; 
	for (i = 0 ; i < 17 ; i ++)
		count = DrawStrDungeonNameRev(arr[i], name, count);
	MoveWaypoint(1, pos_x, pos_y);
}

int DrawStrDungeonNameRev(int arg, string name, int count)
{
	int i;

	for (i = 1 ; i > 0 && count < 527 ; i <<= 1)
	{
		if (i & arg)
			CreateObject(name, 1);
		if (count % 48 == 47)
			MoveWaypoint(1, GetWaypointX(1) - 96.0, GetWaypointY(1) - 92.0);
		else
			MoveWaypoint(1, GetWaypointX(1) + 2.0, GetWaypointY(1) + 2.0);
		count ++;
	}
	return count;
}

int BackRow()
{
    int ptr;

    if (!ptr)
    {
        ptr = CreateObject("IronBlock", 61);
        Frozen(CreateObject("IronBlock", 62), 1);
        Frozen(CreateObject("IronBlock", 63), 1);
        Frozen(CreateObject("IronBlock", 64), 1);
        Frozen(CreateObject("IronBlock", 65), 1);
        Frozen(CreateObject("IronBlock", 66), 1);
        Frozen(ptr, 1);
    }
    return ptr;
}

void MovingBackEntranceRow(int ptr)
{
    int count = GetDirection(ptr);

    if (count < 92)
    {
        MoveObject(ptr, GetObjectX(ptr) + 2.0, GetObjectY(ptr) - 2.0);
        MoveObject(ptr + 1, GetObjectX(ptr + 1) + 2.0, GetObjectY(ptr + 1) - 2.0);
        MoveObject(ptr + 2, GetObjectX(ptr + 2) + 2.0, GetObjectY(ptr + 2) - 2.0);
        MoveObject(ptr + 3, GetObjectX(ptr + 3) - 2.0, GetObjectY(ptr + 3) + 2.0);
        MoveObject(ptr + 4, GetObjectX(ptr + 4) - 2.0, GetObjectY(ptr + 4) + 2.0);
        MoveObject(ptr + 5, GetObjectX(ptr + 5) - 2.0, GetObjectY(ptr + 5) + 2.0);
        LookWithAngle(ptr, count + 1);
        FrameTimerWithArg(1, ptr, MovingBackEntranceRow);
    }
    else
    {
        WallOpen(Wall(145, 185));
        WallOpen(Wall(144, 186));
        WallOpen(Wall(137, 193));
        WallOpen(Wall(136, 194));
    }
}

void OpenCastleBackEntrance()
{
    ObjectOff(self);
    MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
    AudioEvent("CreatureCageAppears", 1);
    AudioEvent("BoulderMove", 1);
    AudioEvent("ChainPull", 1);
    ObjectOn(Object("CastleGear1"));
    ObjectOn(Object("CastleGear2"));
    ObjectOn(Object("CastleGear3"));
    WallOpen(Wall(130, 202));
    WallOpen(Wall(132, 204));
    WallOpen(Wall(153, 179));
    FrameTimerWithArg(12, BackRow(), MovingBackEntranceRow);
    Enchant(CreateObjectAt("RedOrbKeyOfTheLich", GetObjectX(other), GetObjectY(other)), "ENCHANT_FREEZE", 0.0);
    UniPrint(other, "후문 출입구가 열립니다");
}

int ImportPlayerAutoTeamSign()
{
    int arr[17], link;

    if (!link)
    {
        arr[0] = 0x4191D068; arr[1] = 0x50515600; arr[2] = 0x000020B9; arr[3] = 0xF9E0B800; arr[4] = 0xC9850062;
        arr[5] = 0x8B492774; arr[6] = 0x12DC0530; arr[7] = 0xF6850000; arr[8] = 0x5150F074; arr[9] = 0x8D24468B;
        arr[10] = 0x016A304E; arr[11] = 0x51016A50; arr[12] = 0x54FF016A; arr[13] = 0xC4832824; arr[14] = 0xEB585914;
        arr[15] = 0x5E5958D5; arr[16] = 0xC304C483;
        link = GetScrDataField(ImportPlayerAutoTeamSign);
    }
    return link;
}

void PlayerAutoTeamSign()
{
    int temp = GetMemory(0x5c3178);

    SetMemory(0x5c3178, ImportPlayerAutoTeamSign());
    GetHost();
    SetMemory(0x5c3178, temp);
}

void MakeCoopTeam()
{
    int arr[3];
    int teamCount = GetMemory(0x654D5C), temp, link;

    if (!teamCount && !link)
    {
        arr[0] = 0x417E1068; arr[1] = 0x2414FF00; arr[2] = 0xC304C483;
        link = GetScrDataField(MakeCoopTeam);
        temp = GetMemory(0x5c3178);
        SetMemory(0x5c3178, link);
        GetHost();
        SetMemory(0x5c3178, temp);
        SetMemory(0x5d53a4, 268640519);
    }
}

void RemoveCoopTeamMode()
{
    int arr[6], link, temp;

    if (!link && GetMemory(0x654d5c) == 1)
    {
        arr[0] = 0x4DB8BE56; arr[1] = 0x20680065; arr[2] = 0x6A00418F; arr[3] = 0x54FF5600; arr[4] = 0xC4830824; arr[5] = 0x90C35E0C;
        link = GetScrDataField(RemoveCoopTeamMode);
        temp = GetMemory(0x5c3178);
        SetMemory(0x5c3178, link);
        GetHost();
        SetMemory(0x5c3178, temp);
    }
}

void SetGameTypeCoopMode()
{
    MakeCoopTeam();
    PlayerAutoTeamSign();
}

int GetWordValue(int num)
{
	return num & 0xffff;
}

void WriteAddressByteValue(int addr, int byt)
{
	int temp = GetMemory(addr) & 0xffffff00;
	SetMemory(addr, temp | byt);
}

int NoxUnicodeToUtf8(int src, int destPtr)
{
	int i, byt, dest = destPtr;

	for (i = 0 ; i < 20 ; i ++)
	{
		byt = GetWordValue(GetMemory(src));
        if (!byt) break;
		if (byt < 0x80)
		{
			WriteAddressByteValue(dest, byt);
			dest ++;
		}
		else if (byt < 0x800)
		{
			WriteAddressByteValue(dest, ((byt >> 6) & 0x1f) | 0xc0);
			WriteAddressByteValue(dest + 1, (byt & 0x3f) | 0x80);
			dest += 2;
		}
		else
		{
			WriteAddressByteValue(dest, ((byt >> 12) & 0x0f) | 0xe0);
			WriteAddressByteValue(dest + 1, ((byt >> 6) & 0x3f) | 0x80);
			WriteAddressByteValue(dest + 2, (byt & 0x3f) | 0x80);
			dest += 3;
		}
        src += 2;
	}
    WriteAddressByteValue(dest, 0);
	return dest - destPtr;
}

string PlayerIngameNick(int sUnit)
{
    string emptyName = {
        "00:01234567890123456789abcd0123456789abxyz", "01:01234567890123456789abcd0123456789abxyz",
        "02:01234567890123456789abcd0123456789abxyz", "03:01234567890123456789abcd0123456789abxyz",
        "04:01234567890123456789abcd0123456789abxyz", "05:01234567890123456789abcd0123456789abxyz",
        "06:01234567890123456789abcd0123456789abxyz", "07:01234567890123456789abcd0123456789abxyz",
        "08:01234567890123456789abcd0123456789abxyz", "09:01234567890123456789abcd0123456789abxyz",
        "10:01234567890123456789abcd0123456789abxyz", "11:01234567890123456789abcd0123456789abxyz",
        "12:01234567890123456789abcd0123456789abxyz", "13:01234567890123456789abcd0123456789abxyz",
        "14:01234567890123456789abcd0123456789abxyz", "15:01234567890123456789abcd0123456789abxyz",
        "16:01234567890123456789abcd0123456789abxyz", "17:01234567890123456789abcd0123456789abxyz",
        "18:01234567890123456789abcd0123456789abxyz", "19:01234567890123456789abcd0123456789abxyz",
        "20:01234567890123456789abcd0123456789abxyz", "21:01234567890123456789abcd0123456789abxyz",
        "22:01234567890123456789abcd0123456789abxyz", "23:01234567890123456789abcd0123456789abxyz",
        "24:01234567890123456789abcd0123456789abxyz", "25:01234567890123456789abcd0123456789abxyz",
        "26:01234567890123456789abcd0123456789abxyz", "27:01234567890123456789abcd0123456789abxyz",
        "28:01234567890123456789abcd0123456789abxyz", "29:01234567890123456789abcd0123456789abxyz",
        "30:01234567890123456789abcd0123456789abxyz", "31:01234567890123456789abcd0123456789abxyz"};
    int ptr = UnitToPtr(sUnit), plrIndex, destPtr, srcPtr;
    
    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 4)
        {
            plrIndex = GetMemory(GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x810);
            destPtr = GetMemory(0x97bb40 + ((SToInt(emptyName) + plrIndex) * 4));
            srcPtr = GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x889;
            NoxUnicodeToUtf8(srcPtr, destPtr);
            return ToStr(SToInt(emptyName) + plrIndex);
        }
    }
    return "NULL";
}

int ImportCheckSelfDamage()
{
    int arr[14], link;

    if (!link)
    {
        arr[0] = 0x4C8B5651; arr[1] = 0xC9850C24; arr[2] = 0x748B2374; arr[3] = 0xF6851024; arr[4] = 0xF1391B74; arr[5] = 0x8B501374; arr[6] = 0x0001FC86;
        arr[7] = 0x74C08500; arr[8] = 0x58F08B05; arr[9] = 0xEB58ECEB; arr[10] = 0xC3595E04; arr[11] = 0x68595E90; arr[12] = 0x004E17B0; arr[13] = 0x909090C3;
        link = GetScrDataField(ImportCheckSelfDamage);
    }
    return link;
}

void SelfDamageClassEntry(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        SetMemory(ptr + 0x2cc, ImportCheckSelfDamage());
}

void SelfDamageClassMapExit()
{
    int pTable = 0x62f9e0, i;

    for (i = 31 ; i >= 0 ; i --)
    {
        if (GetMemory(pTable))
        {
            SetMemory(GetMemory(pTable) + 0x2cc, 0x4e17b0);
            SetMemory(GetMemory(pTable) + 0x2d4, 0x54d2b0);
            CancelPlayerDialogWithPTR(GetMemory(pTable));
        }
        pTable += 0x12dc;
    }
}

int ImportUniChatCore()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0xC0685657; arr[1] = 0x6800528A; arr[2] = 0x00507250; arr[3] = 0x8B2414FF; arr[4] = 0x2414FFF8;
        arr[5] = 0x14FFF08B; arr[6] = 0x56505724; arr[7] = 0x102454FF; arr[8] = 0x5E14C483; arr[9] = 0x9090C35F;
        link = GetScrDataField(ImportUniChatCore);
    }
    return link;
}

void UniChatCore(int plrPtr, int sPtr, int sTime)
{
    int temp = GetMemory(0x5c3320);

    SetMemory(0x5c3320, ImportUniChatCore());
    GroupRunAway(sPtr, plrPtr, sTime);
    SetMemory(0x5c3320, temp);
}

int ImportUniPrintCore()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x9EB06856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x502414FF;
        arr[5] = 0x2454FF56; arr[6] = 0x10C4830C; arr[7] = 0x9090C35E; 
        link = GetScrDataField(ImportUniPrintCore);
    }
    return link;
}

void UniPrintCore(int plrPtr, int sPtr)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportUniPrintCore());
    Unused5a(sPtr, plrPtr);
    SetMemory(0x5c31f4, temp);
}

int GetByteValue(int ptr)
{
    return GetMemory(ptr) & 0xff;
}

void WriteAddressWordValue(int addr, int word)
{
    int temp = GetMemory(addr) & 0xffff0000;
    SetMemory(addr, temp | word);
}

void NoxUtf8ToUnicode(int src, int dest)
{
    int i = 0, byt;

    while (1)
    {
        byt = GetByteValue(src + i);
        if (!byt) break;
        if (!(byt & 0x80))
        {
            WriteAddressWordValue(dest, byt);
            i ++;
        }
        else if ((byt & 0xe0) == 0xc0)
        {
            WriteAddressWordValue(dest, ((byt & 0x1f) <<6) | (GetByteValue(src + i + 1) & 0x3f));
            i += 2;
        }
        else if ((byt & 0xf0) == 0xe0)
        {
            WriteAddressWordValue(dest, ((byt & 0xf) << 12) | ((GetByteValue(src + i + 1) & 0x3f) << 6) | (GetByteValue(src + i + 2) & 0x3f));
            i += 3;
        }
        dest += 2;
    }
    WriteAddressWordValue(dest, 0);
}

void UniPrint(int sUnit, string sMsg)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
            link = GetScrDataField(UniPrint);
        NoxUtf8ToUnicode(str, link + 8);
        UniPrintCore(ptr, link + 8);
    }
}

void UniChatMessage(int sUnit, string sMsg, int duration)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
            link = GetScrDataField(UniChatMessage);
        NoxUtf8ToUnicode(str, link + 12);
        UniChatCore(ptr, link + 12, duration);
    }
}

void UniPrintToAll(string sMsg)
{
    int wDest[200];
    int plrPtr = 0x62f9e0, link, str = SToInt(sMsg), i;

    if (!link)
        link = GetScrDataField(UniPrint) + 4;
    str = GetMemory(0x97bb40 + (str * 4));
    NoxUtf8ToUnicode(str, link);
    for (i = 0 ; i < 32 ; i ++)
    {
        if (GetMemory(plrPtr))
            UniPrintCore(GetMemory(plrPtr), link);
        plrPtr += 0x12dc;
    }
}

int MathAbs(int num)
{
    if (num < 0)
        num = -num;
    return num;
}

int CheckSignDelay(int sPtr, int gap)
{
    int cFps = GetMemory(0x84ea04);

    if (MathAbs(cFps - GetMemory(sPtr)) > gap)
    {
        SetMemory(sPtr, cFps);
        return 1;
    }
    return 0;
}

void SignNotification()
{
    int otPtr = GetMemory(0x979720), sePtr = GetMemory(0x979724);

    if (otPtr && sePtr)
    {
        if (CheckSignDelay(GetMemory(sePtr + 0x2e0) + 100, 60))
        {
            UniPrint(other, ToStr(GetMemory(sePtr + 0x2f0)));
            //UniPrintCore(otPtr, GetMemory(sePtr + 0x2e0));
        }
    }
}

void RegistSignMessage(int sUnit, string sMsg)
{
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg);

    if (ptr)
    {
        SetMemory(ptr + 0x2f0, str);
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, SignNotification);
    }
}

int ImportUniBroadcast()
{
    int arr[6], link;

    if (!link)
    {
        arr[0] = 0x4D9FD068; arr[1] = 0x72506800; arr[2] = 0x14FF0050; arr[3] = 0x106A5024;
        arr[4] = 0x0C2454FF; arr[5] = 0xC310C483;
        link = GetScrDataField(ImportUniBroadcast);
    }
    return link;
}

void UniBroadcast(string sMsg)
{
    int wDest[100];
    int temp = GetMemory(0x5c3108), link, str = GetMemory(0x97bb40 + (SToInt(sMsg) * 4));

    if (!link)
        link = GetScrDataField(UniBroadcast);
    NoxUtf8ToUnicode(str, link + 4);
    SetMemory(0x5c3108, ImportUniBroadcast());
    Unused1f(link + 4);
    SetMemory(0x5c3108, temp);
}

int ImportUseItemFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x1424748B; arr[3] = 0x18246C8B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        link = GetScrDataField(ImportUseItemFunc);
    }
    return link;
}

int ImportUnitCollideFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x14246C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        link = GetScrDataField(ImportUnitCollideFunc);
    }
    return link;
}

void InitMapSigns()
{
    RegistSignMessage(Object("UniSign1"), "베이스 캠프 마켓: 없는 것 빼고는 여기에 다 있다");
    RegistSignMessage(Object("UniSign2"), "슬리피우드 던전 입구: 무기와 갑옷 빡세게 챙길 것");
    RegistSignMessage(Object("UniSign3"), "아테네 신전 후문 입구: 원래는 여기가 정문이었음");
    RegistSignMessage(Object("UniSign4"), "세상에서 가장 강한 몬스터가 이 방안에 서식하고 있음");
    RegistSignMessage(Object("UniSign5"), "비밀 휴게실: 호바스를 클릭하면 힐링 버프를 시전해 줍니다");
    RegistSignMessage(Object("UniSign6"), "마법 무기마켓: 각 무기에 대한 설명을 보려면 클릭, 구입하려면 더블클릭하세요");
    RegistSignMessage(Object("UniSign7"), "전사 신규능력을 구입할 수 있습니다");
    RegistSignMessage(Object("UniSign8"), "이곳은 아테네 신전 입니다. 강력했던 고대 괴물들이 이곳에서 여전히 살아 숨쉬고 있습니다");
    RegistSignMessage(Object("UniSign9"), "-신전2층- 특수한 아이템을 판매하고 있으니 지갑 빵빵한 사람이라면 언제든 환영!");
    RegistSignMessage(Object("UniSign10"), "가운데 NPC 는 3천 골드만으로 모든 아이템을 수리해줍니다");
    RegistSignMessage(Object("UniSign11"), "-고대괴물- 투명인간: 투명인간 손 끝에 한번만 스쳐도 당신은 죽음이다");
    RegistSignMessage(Object("UniSign12"), "-고대괴물- 키러리언: 이동속도가 매우 빠르며 근접한 거리에서 화염을 내뿜는다");
    RegistSignMessage(Object("UniSign13"), "타락한 여신: 빠른 속도로 무수히 많은 개구리를 토해낸다");
    RegistSignMessage(Object("UniSign14"), "주인없는 별장: 이제 이곳은 먼지만 가득하다...");
    RegistSignMessage(Object("UniSign15"), "스톤골렘: 이 녀석을 깨우는 순간 공포게임 된다");
    RegistSignMessage(Object("UniSign16"), "불닭 볶음면: 불닭의 매운맛을 느껴봐라");
    RegistSignMessage(Object("UniSign17"), "불의 영혼: 용광로에 빠져죽은 자가 불의 괴물로 부활했다는 소문이 있다");
}

int ImportRemoveSneakDelay()
{
    int arr[7], link;

    if (!link)
    {
        arr[0] = 0x72506850; arr[1] = 0x14FF0050; arr[2] = 0xC3006824; arr[3] = 0x046A004F; arr[4] = 0x2454FF50; arr[5] = 0x10C48308; arr[6] = 0x9090C358;
        link = GetScrDataField(ImportRemoveSneakDelay);
    }
    return link;
}

void RemoveTreadLightly(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit), temp = GetMemory(0x5c336c);

    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 0x04)
        {
            SetMemory(0x5c336c, ImportRemoveSneakDelay());
            Unknownb8(ptr);
            SetMemory(0x5c336c, temp);
        }
    }
}

int HorrendousBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1920102216; arr[1] = 1868852837; arr[2] = 29557; arr[17] = 400; arr[18] = 400; 
		arr[19] = 95; arr[23] = 32768; arr[24] = 1065437102; arr[25] = 1; arr[26] = 9; 
		arr[27] = 5; arr[28] = 1137180672; arr[31] = 17; arr[54] = 4; arr[59] = 5542784; 
		arr[60] = 1386; arr[61] = 46907648; 
        link = GetScrDataField(HorrendousBinTable);
	}
	return link;
}

void HorrendousSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1077306982);
		SetMemory(ptr + 0x224, 1077306982);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 32768);
		SetMemory(GetMemory(ptr + 0x22c), 400);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 400);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, HorrendousBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 0);
	}
}

void DestroyWallAtUnitPos(int sUnit)
{
    int xPos = FloatToInt(GetObjectX(sUnit)), yPos = FloatToInt(GetObjectY(sUnit));
    int spX, spY, tx, ty, rx;

    if (xPos > yPos) xPos += 23;
    else             yPos += 23;
    spX = (xPos + yPos - 22) / 46;
    spY = (xPos - yPos) / 46;
    tx = spX * 46;
    ty = spY * 46;
    rx = (tx + ty) / 2;
    WallBreak(Wall(rx / 23, (rx - ty) / 23));
}

void HorrendousHarpoonCollide()
{
    int owner = GetOwner(self);

    while (IsObjectOn(self))
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, owner, 12, 1);
            Effect("DAMAGE_POOF", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int HorrendousHarpoon(int sUnit, int sTarget)
{
    int mis = CreateObjectAt("HarpoonBolt", GetObjectX(sUnit) + UnitRatioX(sTarget, sUnit, 16.0), GetObjectY(sUnit) + UnitRatioY(sTarget, sUnit, 16.0));
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2e8, 5483536); //projectile update
    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, HorrendousHarpoonCollide);
    SetOwner(sUnit, mis);
    LookAtObject(mis, sTarget);
    return mis;
}

void GuardianHitShuriken(int ptr)
{
    int owner = GetOwner(ptr), target = ToInt(GetObjectZ(ptr)), mis;
    float dt = Distance(GetObjectX(ptr), GetObjectY(ptr), GetObjectX(target), GetObjectY(target));
    float vectX = UnitRatioX(target, ptr, dt), vectY = UnitRatioY(target, ptr, dt);
    float thresHold;

    if (CurrentHealth(owner) && CurrentHealth(target) && IsObjectOn(owner))
    {
        mis = HorrendousHarpoon(owner, target);
        thresHold = DistanceUnitToUnit(mis, target) / GetObjectZ(ptr + 1);
        MoveObject(ptr, GetObjectX(target) + UnitRatioX(target, ptr, dt * thresHold), GetObjectY(target) + UnitRatioY(target, ptr, dt * thresHold));
        if (IsVisibleTo(ptr, owner))
            PushObject(mis, -42.0, GetObjectX(ptr), GetObjectY(ptr));
        else
            PushObject(mis, -42.0, GetObjectX(target), GetObjectY(target));
    }
    Delete(ptr);
    Delete(ptr + 1);
}

void HorrendousMissileAttack()
{
    AbsoluteTargetStrike(GetTrigger(), GetCaller(), 72.0, GuardianHitShuriken);
}

int SummonHorrendous(float xProfile, float yProfile)
{
    int unit = CreateObjectAt("Horrendous", xProfile, yProfile);

    HorrendousSubProcess(unit);
    RegistUnitStrikeHook(unit);
    SetCallback(unit, 5, DungeonUnitDeathHandler);
    SetCallback(unit, 7, FieldMonsterHurt);
    return unit;
}

void RespectThreeHorrendous(int sUnit)
{
    int enemy = ToInt(GetObjectZ(sUnit)), cre;

    if (IsObjectOn(sUnit))
    {
        if (!GetDirection(sUnit))
        {
            cre = SummonHorrendous(GetObjectX(sUnit), GetObjectY(sUnit));
            LookAtObject(cre, enemy);
            Raise(sUnit + 1, enemy);
            FrameTimerWithArg(1, sUnit + 1, RespectThreeHorrendous);
            DeleteObjectTimer(CreateObjectAt("OldSmoke", GetObjectX(cre), GetObjectY(cre)), 15);
            UniChatMessage(cre, "너의 그 자존심! 내가 박살내주지", 150);
        }
        Delete(sUnit);
    }
}

void RespectSixHorrendous()
{
    ObjectOff(self);

    FrameTimerWithArg(5, CreateObject("InvisibleLightBlueLow", 69), RespectThreeHorrendous);
    Raise(CreateObject("InvisibleLightBlueLow", 70) - 1, GetCaller());
    CreateObject("InvisibleLightBlueLow", 71);
    LookWithAngle(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(self), GetObjectY(self)), 1);
    FrameTimerWithArg(5, CreateObject("InvisibleLightBlueLow", 72), RespectThreeHorrendous);
    Raise(CreateObject("InvisibleLightBlueLow", 73) - 1, GetCaller());
    CreateObject("InvisibleLightBlueLow", 74);
    LookWithAngle(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(self), GetObjectY(self)), 1);
}

int GetUnit1C(int sUnit)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        return GetMemory(ptr + 0x1c);
    return 0;
}

void SetUnit1C(int sUnit, int sData)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        SetMemory(ptr + 0x1c, sData);
}

int ImportPlaySoundAround()
{
	int arr[17], link;

	if (!link)
	{
		arr[0] = 0x50196068; arr[1] = 0x72506800; arr[2] = 0x50560050; arr[3] = 0x082454FF;
		arr[4] = 0x54FFF08B; arr[5] = 0x006A0824; arr[6] = 0x5650006A; arr[7] = 0x1C2454FF;
		arr[8] = 0x5810C483; arr[9] = 0x08C4835E; arr[10] = 0x909090C3;
        link = GetScrDataField(ImportPlaySoundAround);
	}
	return link;
}

void PlaySoundAround(int sUnit, int sNumber)
{
	int unitPtr = UnitToPtr(sUnit), temp = GetMemory(0x5c325c);

	if (unitPtr)
	{
		SetMemory(0x5c325c, ImportPlaySoundAround());
		Unused74(unitPtr, sNumber);
		SetMemory(0x5c325c, temp);
	}
}

void UnitVisibleSplashA()
{
    int parent = GetOwner(self);
    int spIdx = ToInt(GetObjectZ(parent + 1));

    if (CurrentHealth(GetOwner(parent)))
    {
        if (GetUnit1C(other) ^ spIdx)
        {
            if (Distance(GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other)) <= GetObjectX(parent))
            {
                Damage(other, GetOwner(parent), ToInt(GetObjectZ(parent)), 14);
                SetUnit1C(other, spIdx);
            }
        }
    }
}

void SplashDamageAt(int owner, int dam, float x, float y, float range)
{
    int ptr = CreateObjectAt("InvisibleLightBlueHigh", range, y) + 2, k, SplashIdx;

    SplashIdx ++;
    Raise(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(ptr), GetObjectY(ptr)), SplashIdx);
    SetOwner(owner, ptr - 2);
    Raise(ptr - 2, ToFloat(dam));
    for (k = 0 ; k < 4 ; k ++)
    {
        DeleteObjectTimer(CreateObjectAt("WeirdlingBeast", x, y), 1);
        UnitNoCollide(ptr + k);
        LookWithAngle(ptr + k, k * 64);
        SetOwner(ptr - 2, ptr + k);
        SetCallback(ptr + k, 3, UnitVisibleSplashA);
    }
    DeleteObjectTimer(ptr - 1, 2);
    DeleteObjectTimer(ptr - 2, 2);
}

void FONCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, owner, 255, 1);
            GreenSparkFx(GetObjectX(self), GetObjectY(self));
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int ForceOfNature(int sUnit, float gap)
{
    int mis = CreateObjectAt("DeathBall", GetObjectX(sUnit) + UnitAngleCos(sUnit, gap), GetObjectY(sUnit) + UnitAngleSin(sUnit, gap));
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2e8, 5483536); //projectile update
    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, FONCollide);
    SetOwner(sUnit, mis);
    return mis;
}

void FONStaffClassUse()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self);

    if (MathAbs(cFps - cTime) < 10)
        return;
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        PushObject(ForceOfNature(other, 16.0), 18.0, GetObjectX(other), GetObjectY(other));
        PlaySoundAround(other, 560);
    }
}

int FallingMeteor(float sX, float sY, int sDamage, float sSpeed)
{
    int mUnit = CreateObjectAt("Meteor", sX, sY);
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec), sDamage);
        SetMemory(ptr + 0x14, GetMemory(ptr + 0x14) | 0x20);
        Raise(mUnit, 255.0);
        SetMemory(ptr + 0x6c, ToInt(sSpeed));
    }
    return mUnit;
}

void MeteorWandClassStrike(int sGlow)
{
    int owner = GetOwner(sGlow);

    if (CurrentHealth(owner))
    {
        if (IsVisibleTo(owner, sGlow))
        {
            SetOwner(owner, FallingMeteor(GetObjectX(sGlow), GetObjectY(sGlow), 220, -8.0));
            PlaySoundAround(sGlow, 85);
        }
        else
            UniPrint(owner, "마법 시전을 실패하였습니다. 현재의 마우스 포인터 위치는 캐릭터가 볼 수 없는 지역입니다");
    }
    Delete(sGlow);
}

void MeteorWandClassUse()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self), glow;

    if (MathAbs(cFps - cTime) < 25)
    {
        UniPrint(other, "메테오 완드 재사용 대기중 입니다");
        return;
    }
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        glow = CreateObjectAt("Moonglow", GetObjectX(other), GetObjectY(other));
        SetOwner(other, glow);
        FrameTimerWithArg(1, glow, MeteorWandClassStrike);
    }
}

void MagicMissileCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, owner, 150, 9);
            GreenSparkFx(GetObjectX(self), GetObjectY(self));
            break;
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int MagicMissileCreate(int sUnit, float gap)
{
    int mis = CreateObjectAt("Magic", GetObjectX(sUnit) + UnitAngleCos(sUnit, gap), GetObjectY(sUnit) + UnitAngleSin(sUnit, gap));
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2e8, 5483536); //projectile update
    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, MagicMissileCollide);
    SetOwner(sUnit, mis);
    return mis;
}

void MagicMissileWandClassUse()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self);

    if (MathAbs(cFps - cTime) < 30)
        return;
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        PushObject(MagicMissileCreate(other, 16.0), 24.0, GetObjectX(other), GetObjectY(other));
        PlaySoundAround(other, 480);
    }
}

int ZombieBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1651339098; arr[1] = 25961; arr[17] = 75; arr[19] = 150; arr[23] = 32768; 
		arr[24] = 1065353216; arr[25] = 1; arr[26] = 5; arr[27] = 5; arr[28] = 1106247680; 
		arr[31] = 10; arr[59] = 5542784; arr[60] = 1360; arr[61] = 46895440;
		link = GetScrDataField(ZombieBinTable);
	}
	return link;
}

void ZombieSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1083179008);
		SetMemory(ptr + 0x224, 1083179008);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 32768);
		SetMemory(GetMemory(ptr + 0x22c), 75);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 75);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, ZombieBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 0);
	}
}

void RunningZombieLifeTime(int sUnit)
{
    int durate = GetDirection(sUnit), owner;

    while (IsObjectOn(sUnit))
    {
        if (MaxHealth(sUnit - 1))
        {
            if (durate && CurrentHealth(sUnit - 1))
            {
                LookWithAngle(sUnit, durate - 1);
                FrameTimerWithArg(1, sUnit, RunningZombieLifeTime);
                break;
            }
            owner = GetOwner(sUnit - 1);
            MoveObject(sUnit, GetObjectX(sUnit - 1), GetObjectY(sUnit - 1));
            Damage(sUnit - 1, 0, CurrentHealth(sUnit - 1) + 1, 14);
            DeleteObjectTimer(CreateObjectAt("MediumFlame", GetObjectX(sUnit - 1), GetObjectY(sUnit - 1)), 12);
            DeleteObjectTimer(CreateObjectAt("Explosion", GetObjectX(sUnit - 1), GetObjectY(sUnit - 1)), 12);
            Effect("SPARK_EXPLOSION", GetObjectX(sUnit - 1), GetObjectY(sUnit - 1), 0.0, 0.0);
            if (CurrentHealth(owner))
                SplashDamageAt(owner, 98, GetObjectX(sUnit), GetObjectY(sUnit), 84.0);
        }
        Delete(sUnit);
        break;
    }
}

void ZombieAttackReportComplete()
{
    Damage(other, self, 100, 5);
    if (GetDirection(GetTrigger() + 1))
        LookWithAngle(GetTrigger() + 1, 0);
}

int RunningZombieSpawn(int owner, float gap)
{
    int zomb = CreateObjectAt("Zombie", GetObjectX(owner) + UnitAngleCos(owner, gap), GetObjectY(owner) + UnitAngleSin(owner, gap));
    LookWithAngle(CreateObjectAt("ImaginaryCaster", GetObjectX(zomb), GetObjectY(zomb)), 120);

    SetOwner(owner, zomb);
    FrameTimerWithArg(1, zomb + 1, RunningZombieLifeTime);
    ZombieSubProcess(zomb);
    RegistUnitStrikeHook(zomb);
    LookWithAngle(zomb, GetDirection(owner));
    return zomb;
}

int ImportGreenLightningFunc()
{
    int arr[21], link;

    if (!link)
    {
		arr[0] = 0x5D685657; arr[1] = 0x68004042; arr[2] = 0x00523790; arr[3] = 0x50725068; arr[4] = 0x35606800;
		arr[5] = 0x106A0040; arr[6] = 0x042454FF; arr[7] = 0x8B08C483; arr[8] = 0x2414FFF0; arr[9] = 0x14FFF88B;
		arr[10] = 0x0C468924; arr[11] = 0x892414FF; arr[12] = 0x14FF0846; arr[13] = 0x04468924; arr[14] = 0x892414FF;
		arr[15] = 0xFF565706; arr[16] = 0x830C2454; arr[17] = 0xFF5608C4; arr[18] = 0x830C2454; arr[19] = 0x5F5E10C4; arr[20] = 0x909090C3; 
		link = GetScrDataField(ImportGreenLightningFunc);
    }
    return link;
}

void GreenLightningFx(int x1, int y1, int x2, int y2, int time)
{
    int temp = GetMemory(0x5c321c);

    SetMemory(0x5c321c, ImportGreenLightningFunc());
    Effect(ToStr(x1), ToFloat(y1), ToFloat(x2), ToFloat(y2), ToFloat(time));
    SetMemory(0x5c321c, temp);
}

void RunningZombieSummonWandClassUse()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self), zomb;

    if (MathAbs(cFps - cTime) < 40)
    {
        UniPrint(other, "쿨다운 입니다... 잠시만 기다려 주세요");
        return;
    }
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        zomb = RunningZombieSpawn(other, 23.0);
        GreenLightningFx(FloatToInt(GetObjectX(other)), FloatToInt(GetObjectY(other)), FloatToInt(GetObjectX(zomb)), FloatToInt(GetObjectY(zomb)), 24);
        CreatureGuard(zomb, GetObjectX(zomb), GetObjectY(zomb), GetObjectX(zomb) + UnitAngleCos(zomb, 128.0), GetObjectY(zomb) + UnitAngleSin(zomb, 128.0), 600.0);
        PlaySoundAround(other, 591);
    }
}

string StringOverflow(int t)
{
	return ToStr((t - 0x97bb40) / 4);
}

string EnchantList(int sNumber)
{
	return StringOverflow(0x596f24 + (sNumber * 4));
}

int UnitCheckEnchant(int sUnit, int sMagicFlag)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        return GetMemory(ptr + 0x154) & sMagicFlag;
    return 0;
}

int GetLShift(int sCount)
{
    return (1 << sCount);
}

void SetUnitEnchantCopy(int sUnit, int sMagicFlag)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		Enchant(sUnit, EnchantList(6), 0.0);
		SetMemory(ptr + 0x154, GetMemory(ptr + 0x154) | sMagicFlag);
	}
}

void UnitSetEnchantTime(int unit, int enchantNumber, int durateTime)
{
	int ptr = UnitToPtr(unit), temp, tempPtr;

	if (ptr)
	{
		SetUnitEnchantCopy(unit, GetLShift(enchantNumber));
		tempPtr = ptr + 0x158 + ((enchantNumber / 2) * 4);
		temp = GetMemory(tempPtr);
		if (enchantNumber % 2)
		{
			SetMemory(tempPtr, (GetMemory(tempPtr) & 0xffff) | (durateTime << 0x10));
		}
		else
			SetMemory(tempPtr, ((GetMemory(tempPtr) >> 0x10) << 0x10) | durateTime);
	}
}

void ChainLightningProc(int cur)
{
    int unit = GetUnit1C(cur), owner = GetOwner(cur + 1), next;

    if (IsObjectOn(cur))
    {
        next = GetNextNode(cur);
        if (IsObjectOn(next))
            GreenLightningFx(FloatToInt(GetObjectX(cur)), FloatToInt(GetObjectY(cur)), FloatToInt(GetObjectX(next)), FloatToInt(GetObjectY(next)), 24);
            //Effect("SENTRY_RAY", GetObjectX(cur), GetObjectY(cur), GetObjectX(next), GetObjectY(next));
            //GreenLightningFx(FloatToInt(GetObjectX(cur)), FloatToInt(GetObjectY(cur)), FloatToInt(GetObjectX(next)), FloatToInt(GetObjectY(next)), 20);
        if (CurrentHealth(unit) && CurrentHealth(owner))
            Damage(unit, owner, 80, 9);
        //FrameTimerWithArg(1, next, ChainLightningProc);
        Delete(cur);
        Delete(cur + 1);
        ChainLightningProc(next);
    }
}

void StartChain(int headNode)
{
    FrameTimerWithArg(1, GetNextNode(headNode), ChainLightningProc);
    Delete(headNode);
}

void MultiAutoRayInSight()
{
    AddNewNode(GetTrigger() + 1, GetCaller());
    SetOwner(GetOwner(self), CreateObjectAt("InvisibleLightBlueLow", GetObjectX(other), GetObjectY(other)));
}

void DeathRayCasting(int sUnit)
{
    int owner = GetOwner(sUnit + 1);
    int sightMonster = CreateObjectAt("WeirdlingBeast", GetObjectX(sUnit), GetObjectY(sUnit));

    AddNewNode(CreateObjectAt("ImaginaryCaster", GetObjectX(sightMonster), GetObjectY(sightMonster)), sightMonster + 1);
    SetOwner(owner, CreateObjectAt("ImaginaryCaster", GetObjectX(sightMonster + 1), GetObjectY(sightMonster + 1)));
    SetOwner(owner, sightMonster);
    UnitNoCollide(sightMonster);
    SetCallback(sightMonster, 3, MultiAutoRayInSight);
    LookWithAngle(sightMonster, GetDirection(sUnit));
    DeleteObjectTimer(sightMonster, 1);
    FrameTimerWithArg(1, sightMonster + 1, StartChain);

    Delete(sUnit);
}

void DeathRayWandClassUse()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self), caster;

    if (MathAbs(cFps - cTime) < 68)
    {
        UniPrint(other, "쿨다운 입니다... 잠시만 기다려 주세요");
        return;
    }
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        caster = CreateObjectAt("ImaginaryCaster", GetObjectX(other) + UnitAngleCos(other, 21.0), GetObjectY(other) + UnitAngleSin(other, 21.0));
        UnitSetEnchantTime(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(caster), GetObjectY(caster)), 13, 60);
        SetOwner(other, caster + 1);
        DeleteObjectTimer(caster + 1, 48);
        LookWithAngle(caster, GetDirection(other));
        PlaySoundAround(other, 44);
        FrameTimerWithArg(3, caster, DeathRayCasting);
    }
}

int ImportTellStoryUniNamePartB()
{
    int arr[84], link;

    if (!link)
    {
        arr[0] = 0x0424448B; arr[1] = 0x0824548B; arr[2] = 0x008CEC81; arr[3] = 0xC0850000; arr[4] = 0xEC9A8B53; arr[5] = 0x55000002; arr[6] = 0x02ECA88B;
        arr[7] = 0x0F570000; arr[8] = 0x00012184; arr[9] = 0x0840F600; arr[10] = 0x17840F04; arr[11] = 0x8B000001; arr[12] = 0x00A824BC; arr[13] = 0xFF850000;
        arr[14] = 0x0108840F; arr[15] = 0xC9830000; arr[16] = 0x89C033FF; arr[17] = 0x00011C95; arr[18] = 0xAEF25600; arr[19] = 0x748DD1F7; arr[20] = 0xF92B1624;
        arr[21] = 0x7489C18B; arr[22] = 0xF78B1024; arr[23] = 0x10247C8B; arr[24] = 0xC602E9C1; arr[25] = 0xD0142444; arr[26] = 0x152444C6; arr[27] = 0x8BA5F303;
        arr[28] = 0x5CC868C8; arr[29] = 0x1F6A0056; arr[30] = 0xF303E183; arr[31] = 0xC9C8B8A4; arr[32] = 0x4C8D0069; arr[33] = 0x51503E24; arr[34] = 0x0C2454FF;
        arr[35] = 0xB824848B; arr[36] = 0x66000000; arr[37] = 0x842484C7; arr[38] = 0x00000000; arr[39] = 0x38938A00; arr[40] = 0x8D000008; arr[41] = 0x00083ABB;
        arr[42] = 0x24948800; arr[43] = 0x000000AA; arr[44] = 0x86248489; arr[45] = 0x8A000000; arr[46] = 0x10C48307; arr[47] = 0x2374C084; arr[48] = 0x31FFC983;
        arr[49] = 0xF7AEF2C0; arr[50] = 0x8DCF29D1; arr[51] = 0x8B7A2454; arr[52] = 0x8BF78BC1; arr[53] = 0x02E9C1FA; arr[54] = 0xC88BA5F3; arr[55] = 0xF303E183;
        arr[56] = 0x8B2FEBA4; arr[57] = 0x5CD1640D; arr[58] = 0x68158B00; arr[59] = 0xA1005CD1; arr[60] = 0x005CD16C; arr[61] = 0x7A244C89; arr[62] = 0x700D8B66;
        arr[63] = 0x89005CD1; arr[64] = 0x897E2454; arr[65] = 0x00822484; arr[66] = 0x89660000; arr[67] = 0x0086248C; arr[68] = 0x858B0000; arr[69] = 0x00000114;
        arr[70] = 0x4E542068; arr[71] = 0x31016A00; arr[72] = 0x8A006AC9; arr[73] = 0x00081088; arr[74] = 0x24548D00; arr[75] = 0x00876820; arr[76] = 0x51520000;
        arr[77] = 0x142454FF; arr[78] = 0xB424948B; arr[79] = 0x6A000000; arr[80] = 0xC4835200; arr[81] = 0x5D5F5E20; arr[82] = 0x8CC4815B; arr[83] = 0xC3000000;
		link = GetScrDataField(ImportTellStoryUniNamePartB);
    }
    return link;
}

int ImportTellStoryUniNamePartA()
{
    int arr[19], link;

    if (!link)
    {
        arr[0] = 0x8DE06856; arr[1] = 0x50680054; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x8B2414FF; 
        arr[5] = 0xBB40B50C; arr[6] = 0x148B0097; arr[7] = 0x97BB4085; arr[8] = 0x50685100; arr[9] = 0x520040AF; 
        arr[10] = 0x042454FF; arr[11] = 0x97200D8B; arr[12] = 0xC4830097; arr[13] = 0x24A15008; arr[14] = 0x50009797; 
        arr[15] = 0x2454FF51; arr[16] = 0x10C48314; arr[17] = 0xC483C031; arr[18] = 0x90C35E08;
		link = GetScrDataField(ImportTellStoryUniNamePartA);
        SetMemory(link + 2, ImportTellStoryUniNamePartB());
    }
    return link;
}

void TellStoryUnitName(string sAudio, string sDesc, string sUnitName)
{
    int temp = GetMemory(0x5c3290), src = GetMemory(0x97bb40 + (SToInt(sUnitName) * 4));

    SetMemory(0x5c3290, ImportTellStoryUniNamePartA());
    NoxUtf8ToUnicode(src, 0x69C9C8);
    TellStory(sAudio, sDesc);
    SetMemory(0x5c3290, temp);
}

void CancelPlayerDialogWithPTR(int plrPtr)
{
    if (GetMemory(GetMemory(plrPtr + 0x2ec)) + 0x11c)
    {
        SetMemory(GetMemory(plrPtr + 0x2ec) + 0x11c, 0);
        SetMemory(GetMemory(GetMemory(plrPtr + 0x2ec) + 0x114) + 0xe60, 0x10);
    }
}

void CancelPlayerDialog(int plrUnit)
{
    int temp = UnitToPtr(plrUnit);

    if (temp)
        CancelPlayerDialogWithPTR(temp);
}

int ImportAbsoluteWPickup()
{
    int arr[100], link;

    if (!link)
    {
        arr[0] = 0x8B565553; arr[1] = 0x31102474; arr[2] = 0x468A57ED; arr[3] = 0x247C8B08; arr[4] = 0x6804A818; arr[5] = 0x0040A5C0; arr[6] = 0x00080068; arr[7] = 0x2454FF00;
        arr[8] = 0x08C48304; arr[9] = 0xC068C085; arr[10] = 0x680040A5; arr[11] = 0x00000800; arr[12] = 0x042454FF; arr[13] = 0x8508C483; arr[14] = 0x245C8BC0;
        arr[15] = 0x24548B20; arr[16] = 0x31E0681C; arr[17] = 0x5253004F; arr[18] = 0x54FF5657; arr[19] = 0xC4831024; arr[20] = 0x01F88314; arr[21] = 0x0122850F;
        arr[22] = 0x46F60000; arr[23] = 0x840F0408; arr[24] = 0x000000FA; arr[25] = 0x02EC868B; arr[26] = 0xED310000; arr[27] = 0x14244489; arr[28] = 0x8568488B;
        arr[29] = 0x683575C9; arr[30] = 0x00419E60; arr[31] = 0x2454FF56; arr[32] = 0x08C48304; arr[33] = 0x2475C085; arr[34] = 0x41582068; arr[35] = 0x54FF5700;
        arr[36] = 0xC4830424; arr[37] = 0x02F88308; arr[38] = 0x20681274; arr[39] = 0x550053A4; arr[40] = 0xFF565753; arr[41] = 0x83102454; arr[42] = 0xE88B14C4;
        arr[43] = 0x419E6068; arr[44] = 0x54FF5600; arr[45] = 0xC4830424; arr[46] = 0x75C08508; arr[47] = 0x5820683A; arr[48] = 0xFF570041; arr[49] = 0x83042454;
        arr[50] = 0xF88308C4; arr[51] = 0x8B287502; arr[52] = 0x8B142444; arr[53] = 0x00011488; arr[54] = 0x04418B00; arr[55] = 0x17740CA8; arr[56] = 0x137502A8;
        arr[57] = 0x53A42068; arr[58] = 0x53006A00; arr[59] = 0x54FF5657; arr[60] = 0xC4831024; arr[61] = 0x85E88B14; arr[62] = 0x8B6775ED; arr[63] = 0xC4F60847;
        arr[64] = 0xF7217410; arr[65] = 0x00000C47; arr[66] = 0x1874047F; arr[67] = 0x02E0878B; arr[68] = 0xD2310000; arr[69] = 0x508AC931; arr[70] = 0x6C488A6D;
        arr[71] = 0x4D82B068; arr[72] = 0x22EB5200; arr[73] = 0x000000A9; arr[74] = 0xF6377401; arr[75] = 0x74820C47; arr[76] = 0xE0878B31; arr[77] = 0x31000002;
        arr[78] = 0x8AC931D2; arr[79] = 0x01488A10; arr[80] = 0x4D82B068; arr[81] = 0x548B5200; arr[82] = 0x31511C24; arr[83] = 0x828B57C9; arr[84] = 0x00000114;
        arr[85] = 0x0810888A; arr[86] = 0xFF510000; arr[87] = 0x83102454; arr[88] = 0xF06814C4; arr[89] = 0x68005116; arr[90] = 0x0053A6C0; arr[91] = 0x54FF5657;
        arr[92] = 0xFF570824; arr[93] = 0x83102454; arr[94] = 0x01B814C4; arr[95] = 0x5F000000; arr[96] = 0xC35B5D5E; arr[97] = 0x315D5E5F; arr[98] = 0x90C35BC0;
        link = GetScrDataField(ImportAbsoluteWPickup);
    }
    return link;
}

int ImportAbsoluteWRun()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x90909068; arr[1] = 0x72506890; arr[2] = 0x016A0050; arr[3] = 0x54FF016A; arr[4] = 0xFF500824;
        arr[5] = 0x500C2454; arr[6] = 0x142454FF; arr[7] = 0xC318C483; arr[8] = 0x90909090;
        link = GetScrDataField(ImportAbsoluteWRun);
        SetMemory(link + 1, ImportAbsoluteWPickup());
    }
    return link;
}

void AbsoluteWeaponPick(int sOwner, int sWeapon)
{
    int temp = GetMemory(0x5c31f4);
    int ownerPtr = UnitToPtr(sOwner), wPtr = UnitToPtr(sWeapon);

    if (ownerPtr && wPtr)
    {
        SetMemory(0x5c31f4, ImportAbsoluteWRun());
        Unused5a(ownerPtr, wPtr);
        SetMemory(0x5c31f4, temp);
    }
}

int ImportEquipWeapon()
{
    int arr[170], link;

    if (!link)
    {
        arr[0] = 0x8B565553; arr[1] = 0x57142474; arr[2] = 0x41582068; arr[3] = 0x54FF5600; arr[4] = 0xD88B0424; arr[5] = 0x8308468B; arr[6] = 0x00A908C4;
        arr[7] = 0x0F010010; arr[8] = 0x0000AD84; arr[9] = 0x10468B00; arr[10] = 0x0F01C4F6; arr[11] = 0x0000A185; arr[12] = 0x247C8B00; arr[13] = 0x08478B14;
        arr[14] = 0x137402A8; arr[15] = 0x53A2C068; arr[16] = 0xFF575600; arr[17] = 0x83082454; arr[18] = 0x5E5F0CC4; arr[19] = 0xA8C35B5D; arr[20] = 0x8B7F7404;
        arr[21] = 0x0002ECAF; arr[22] = 0xC3E06800; arr[23] = 0x026A004F; arr[24] = 0x2454FF57; arr[25] = 0x0CC48308; arr[26] = 0x6675C085; arr[27] = 0x4FC3E068;
        arr[28] = 0x57016A00; arr[29] = 0x082454FF; arr[30] = 0x850CC483; arr[31] = 0x8B5375C0; arr[32] = 0x00011485; arr[33] = 0x8AC93100; arr[34] = 0x0008CB88;
        arr[35] = 0xB3D06800; arr[36] = 0x56510057; arr[37] = 0x082454FF; arr[38] = 0x850CC483; arr[39] = 0x683A75C0; arr[40] = 0x004DA2C0; arr[41] = 0xABD86850;
        arr[42] = 0xFF57005C; arr[43] = 0x8B0C2454; arr[44] = 0x83302444; arr[45] = 0xC08510C4; arr[46] = 0x578B1874; arr[47] = 0x19606824; arr[48] = 0x6A520050;
        arr[49] = 0x9D685702; arr[50] = 0xFF000003; arr[51] = 0x83102454; arr[52] = 0x5E5F14C4; arr[53] = 0x5BC0315D; arr[54] = 0x318068C3; arr[55] = 0x5756004F;
        arr[56] = 0x082454FF; arr[57] = 0x850CC483; arr[58] = 0x682175C0; arr[59] = 0x004DA2C0; arr[60] = 0xABF86850; arr[61] = 0xFF57005C; arr[62] = 0x8B0C2454;
        arr[63] = 0x83302444; arr[64] = 0xC08510C4; arr[65] = 0x478BCC74; arr[66] = 0xB7EB5024; arr[67] = 0x01F8878B; arr[68] = 0xC0850000; arr[69] = 0xF039BC74;
        arr[70] = 0x808B0F74; arr[71] = 0x000001F0; arr[72] = 0xF275C085; arr[73] = 0x5B5D5E5F; arr[74] = 0x74C085C3; arr[75] = 0x587D80A5; arr[76] = 0x680F7501;
        arr[77] = 0x004FA020; arr[78] = 0xFF570D6A; arr[79] = 0x83082454; arr[80] = 0xFB830CC4; arr[81] = 0x8B3B7502; arr[82] = 0x0001148D; arr[83] = 0x0441F600;
        arr[84] = 0x681E750C; arr[85] = 0x0053A680; arr[86] = 0x2454FF57; arr[87] = 0x08C48304; arr[88] = 0x0D75C085; arr[89] = 0x4DA2C068; arr[90] = 0x1C685000;
        arr[91] = 0xEB005CAC; arr[92] = 0xA0F06885; arr[93] = 0x016A0053; arr[94] = 0xFF57016A; arr[95] = 0x830C2454; arr[96] = 0x458B10C4; arr[97] = 0x74C08568;
        arr[98] = 0x02FB831F; arr[99] = 0x40681A74; arr[100] = 0x6A0053A1; arr[101] = 0x50016A01; arr[102] = 0x2454FF57; arr[103] = 0x14C48310; arr[104] = 0x840FC085;
        arr[105] = 0xFFFFFF2A; arr[106] = 0x8010568B; arr[107] = 0x568901CE; arr[108] = 0x14858B10; arr[109] = 0x31000001; arr[110] = 0x04488BD2; arr[111] = 0x4889D909;
        arr[112] = 0x148D8B04; arr[113] = 0x8B000001; arr[114] = 0x8A1C2444; arr[115] = 0x00081091; arr[116] = 0x85406800; arr[117] = 0x5650004D; arr[118] = 0x2454FF52;
        arr[119] = 0x10C4830C; arr[120] = 0x7402FB83; arr[121] = 0x68758903; arr[122] = 0xF608468B; arr[123] = 0x397410C4; arr[124] = 0x000C46F7; arr[125] = 0x74047F00;
        arr[126] = 0xE0868B30; arr[127] = 0x31000002; arr[128] = 0x8AD231C9; arr[129] = 0x508A6D48; arr[130] = 0x14858B6C; arr[131] = 0x68000001; arr[132] = 0x004D82B0;
        arr[133] = 0x52C93151; arr[134] = 0x0810888A; arr[135] = 0x51560000; arr[136] = 0x102454FF; arr[137] = 0xEB14C483; arr[138] = 0x0000A949; arr[139] = 0x42740100;
        arr[140] = 0x7482C3F6; arr[141] = 0xE0868B2F; arr[142] = 0x31000002; arr[143] = 0x8AC931D2; arr[144] = 0x01488A10; arr[145] = 0x4D82B068; arr[146] = 0x958B5200;
        arr[147] = 0x00000114; arr[148] = 0x8A51C031; arr[149] = 0x00081082; arr[150] = 0xFF505600; arr[151] = 0x83102454; arr[152] = 0x0EEB14C4; arr[153] = 0x740CC3F6;
        arr[154] = 0xE08E8B09; arr[155] = 0xC6000002; arr[156] = 0xF0680001; arr[157] = 0x57004F2F; arr[158] = 0x2454FF56; arr[159] = 0x0CC48308; arr[160] = 0xE40CC3F7;
        arr[161] = 0x0D7407FF; arr[162] = 0x53A3D068; arr[163] = 0x54FF5700; arr[164] = 0xC4830424; arr[165] = 0x5D5E5F08; arr[166] = 0x000001B8; arr[167] = 0x90C35B00;
        
        arr[39] = 0x683aebc0;
        link = GetScrDataField(ImportEquipWeapon);
    }
    return link;
}

int ImportEquipWeaponRun()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x90909068; arr[1] = 0x72506890; arr[2] = 0x016A0050; arr[3] = 0x54FF016A; arr[4] = 0xFF500824;
        arr[5] = 0x500C2454; arr[6] = 0x142454FF; arr[7] = 0xC318C483; arr[8] = 0x90909090;
        link = GetScrDataField(ImportEquipWeaponRun);
        SetMemory(link + 1, ImportEquipWeapon());
    }
    return link;
}

void PlayerEquipWeapon(int sOwner, int sWeapon)
{
    int temp = GetMemory(0x5c31f4);
    int ownerPtr = UnitToPtr(sOwner), wPtr = UnitToPtr(sWeapon);

    if (ownerPtr && wPtr)
    {
        SetMemory(0x5c31f4, ImportEquipWeaponRun());
        Unused5a(ownerPtr, wPtr);
        SetMemory(0x5c31f4, temp);
    }
}

void DelayForcePickItemToOwner(int sItem)
{
    int owner = GetOwner(sItem);

    if (IsObjectOn(sItem))
    {
        if (CurrentHealth(owner))
        {
            AbsoluteWeaponPick(owner, sItem);
            PlayerEquipWeapon(owner, sItem);
        }
        else
            ClearOwner(sItem);
    }
}

int ShopClassMagicStaffShopData(int index)
{
    int pay[5];

    if (!pay[0])
    {
        pay[0] = 51000;
        pay[1] = 55000;
        pay[2] = 48000;
        pay[3] = 65000;
        pay[4] = 60000;
    }
    return pay[index];
}

int ImportUnitPickupFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x55565300; arr[2] = 0x14245C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02E4AE8B; arr[5] = 0x53560000; arr[6] = 0x2454FF55; arr[7] = 0x0CC48318;
        arr[8] = 0x835B5E5D; arr[9] = 0x90C304C4;
        link = GetScrDataField(ImportUnitPickupFunc);
    }
    return link;
}

void MagicStaffClassPick()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self);

    if (MathAbs(cFps - cTime) < 10)
        return;
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        AbsoluteWeaponPick(other, self);
        PlayerEquipWeapon(other, self);
        UniPrint(other, "무기를 바꾼 상태에서 이 마법 지팡이를 장착하려면 버렸다가 다시 주워야 합니다");
    }
}

void MagicStaffPreProc(int ptr, int useFunc)
{
    SetMemory(ptr + 0x2c4, ImportUnitPickupFunc());
    SetMemory(ptr + 0x2e4, MagicStaffClassPick);
    SetMemory(ptr + 0x2dc, ImportUseItemFunc());
    SetMemory(ptr + 0x2fc, useFunc);
}

int WandCreateFunctionPtr()
{
    StopScript(FONStaffClassCreate);
}

int FONStaffClassCreate(int owner)
{
    int stf = CreateObjectAt("InfinitePainWand", GetObjectX(owner), GetObjectY(owner));
    int ptr = GetMemory(0x750710);

    MagicStaffPreProc(ptr, FONStaffClassUse);
    return stf;
}

int MeteorWandClassCreate(int owner)
{
    int wnd = CreateObjectAt("FireStormWand", GetObjectX(owner), GetObjectY(owner));
    int ptr = GetMemory(0x750710);

    MagicStaffPreProc(ptr, MeteorWandClassUse);
    return wnd;
}

int MagicMissileWandClassCreate(int owner)
{
    int stf = CreateObjectAt("SulphorousFlareWand", GetObjectX(owner), GetObjectY(owner));
    int ptr = GetMemory(0x750710);

    MagicStaffPreProc(ptr, MagicMissileWandClassUse);
    return stf;
}

int RunningZombieSumStaffCreate(int owner)
{
    int stf = CreateObjectAt("ForceWand", GetObjectX(owner), GetObjectY(owner));
    int ptr = GetMemory(0x750710);

    MagicStaffPreProc(ptr, RunningZombieSummonWandClassUse);
    return stf;
}

int AutoTargetRayStaffCreate(int owner)
{
    int stf = CreateObjectAt("DeathRayWand", GetObjectX(owner), GetObjectY(owner));
    int ptr = GetMemory(0x750710);

    MagicStaffPreProc(ptr, DeathRayWandClassUse);
    return stf;
}

void ShopClassMagicStaffDescr()
{
    int curIndex = GetDirection(self);
    string descMessage = 
    "포스오브네이쳐 지팡이";
    "메테오 완드";
    "매직 미사일 완드";
    "러닝 좀비서먼 완드";
    "오토 타겟팅 데스레이 지팡이";

    //CancelDialog(self);
    UniPrint(other, ToStr(SToInt(descMessage) + curIndex) + " 을 구입하시겠어요? 그것의 가격은 " + IntToString(ShopClassMagicStaffShopData(curIndex)) + "골드 입니다");
    UniPrint(other, "구입하려면 '예' 를 누르시고 다른 아이템을 보시려면 '아니오' 를 누르세요. 거래를 취소하려면 '떠나기' 를 누르세요");
    Raise(GetTrigger() + 1, SToInt(descMessage));
    TellStoryUnitName("AA", "thing.db:IdentifyDescription", ToStr(SToInt(descMessage) + curIndex));
}

void ShopClassMagicStaffTrade()
{
    int dlgRes = GetAnswer(self), curIndex = GetDirection(self), staff;
    string staffName = ToStr(ToInt(GetObjectZ(GetTrigger() + 1)) + curIndex);

    if (dlgRes == 1)
    {
        if (GetGold(other) >= ShopClassMagicStaffShopData(curIndex))
        {
            ChangeGold(other, -ShopClassMagicStaffShopData(curIndex));
            PlaySoundAround(other, 308);
            staff = CallFunctionWithArgInt(WandCreateFunctionPtr() + curIndex, other);
            SetOwner(other, staff);
            FrameTimerWithArg(1, staff, DelayForcePickItemToOwner);
            UniPrint(other, staffName + "구입 거래가 완료되었습니다. " + staffName + "이 캐릭터에게 장착되었습니다");
            UniPrintToAll(PlayerIngameNick(other) + " 님께서 " + staffName + "을 구입하셨습니다");
        }
        else
            UniPrint(other, "거래가 취소되었습니다. 잔액이 부족합니다 (금화" + IntToString(ShopClassMagicStaffShopData(curIndex) - GetGold(other)) + " 이 더 필요함)");
    }
    else if (dlgRes == 2)
    {
        UniPrint(other, "'아니오' 를 누르셨습니다. 다음 판매 품목을 보여드립니다");
        LookWithAngle(self, (curIndex + 1) % 5);
        ShopClassMagicStaffDescr();
    }
}

int ShopClassMagicalStaffCreate(int location)
{
    int shop = DummyUnitCreate("Horrendous", GetWaypointX(location), GetWaypointY(location));

    LookWithAngle(CreateObjectAt("ImaginaryCaster", GetObjectX(shop), GetObjectY(shop)) - 1, 0);
    SetDialog(shop, "YESNO", ShopClassMagicStaffDescr, ShopClassMagicStaffTrade);
    return shop;
}

void ShopClassInit(int location)
{
    ImportAbsoluteWPickup();
    ImportEquipWeapon();
    ImportUnitPickupFunc();
    ImportTellStoryUniNamePartB();
    ImportTellStoryUniNamePartA();
    ShopClassMagicStaffShopData(0);
    ShopClassMagicalStaffCreate(location);
}

int CheckWallAtUnitPos(int sUnit)
{
    int xPos = FloatToInt(GetObjectX(sUnit)), yPos = FloatToInt(GetObjectY(sUnit));
    int spX, spY, tx, ty, rx;

    if (xPos > yPos) xPos += 23;
    else             yPos += 23;
    spX = (xPos + yPos - 22) / 46;
    spY = (xPos - yPos) / 46;
    tx = spX * 46;
    ty = spY * 46;
    rx = (tx + ty) / 2;
    return Wall(rx / 23, (rx - ty) / 23);
}

int GetWallCoor(int sUnit)
{
    int xPos = FloatToInt(GetObjectX(sUnit)), yPos = FloatToInt(GetObjectY(sUnit));
    int spX, spY, tx, ty, rx;

    if (xPos > yPos) xPos += 23;
    else             yPos += 23;
    spX = (xPos + yPos - 22) / 46;
    spY = (xPos - yPos) / 46;
    tx = spX * 46;
    ty = spY * 46;
    rx = (tx + ty) / 2;
    return (rx / 23) | (((rx - ty) / 23) << 0x10);
}

void RemoveWallAtUnitPos(int sUnit)
{
    int xPos = FloatToInt(GetObjectX(sUnit)), yPos = FloatToInt(GetObjectY(sUnit));
    int spX, spY, tx, ty, rx;

    if (xPos > yPos) xPos += 23;
    else             yPos += 23;
    spX = (xPos + yPos - 22) / 46;
    spY = (xPos - yPos) / 46;
    tx = spX * 46;
    ty = spY * 46;
    rx = (tx + ty) / 2;
    WallOpen(Wall(rx / 23, (rx - ty) / 23));
}

int GetWallCoorByXY(float xProfile, float yProfile)
{
    int xPos = FloatToInt(xProfile), yPos = FloatToInt(yProfile);
    int spX, spY, tx, ty, rx;

    if (xPos > yPos) xPos += 23;
    else             yPos += 23;
    spX = (xPos + yPos - 22) / 46;
    spY = (xPos - yPos) / 46;
    tx = spX * 46;
    ty = spY * 46;
    rx = (tx + ty) / 2;
    return (rx / 23) | (((rx - ty) / 23) << 0x10);
}

void SlideSecretCase(int sUnit)
{
    int durate = GetDirection(sUnit), wallCoor;

    if (durate)
    {
        MoveObject(sUnit, GetObjectX(sUnit) + 1.0, GetObjectY(sUnit) - 1.0);
        LookWithAngle(sUnit, durate - 1);
        FrameTimerWithArg(1, sUnit, SlideSecretCase);
    }
    else
    {
        wallCoor = GetWallCoor(sUnit + 1);
        WallOpen(Wall(wallCoor & 0xffff, wallCoor >> 0x10));
        Delete(sUnit + 1);
        FrameTimer(1, InitCandleRoom);
    }
}

void MikyDeadTouched()
{
    int ptr;

    if (CurrentHealth(other) && MaxHealth(self))
    {
        ptr = UnitToPtr(other);
        if (ptr)
        {
            if (GetMemory(ptr + 8) & 0x04)
            {
                FrameTimerWithArg(3, GetTrigger() + 1, SlideSecretCase);
                Delete(self);
                UniPrint(other, "뒤쪽에서 뭔가가 움직이고 있습니다");
            }
        }
    }
}

void RemoveSecretEntranceWalls(int sUnit)
{
    int i;

    for (i = 0 ; i < 4 ; i ++)
        RemoveWallAtUnitPos(sUnit + i);
}

void HiddenCandleTouch()
{
    if (IsObjectOn(self) && CurrentHealth(other))
    {
        Frozen(CreateObjectAt("DunMirScaleTorch1", GetObjectX(self), GetObjectY(self)), 1);
        UniChatMessage(other, "근처에서 비밀의 벽이 열렸습니다", 150);
        FrameTimerWithArg(3, GetTrigger() + 1, RemoveSecretEntranceWalls);
        Delete(self);
    }
}

int HiddenCandle(int location)
{
    int candle = CreateObject("DunMirScaleTorch1", location);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, HiddenCandleTouch);
    Frozen(candle, 1);
    return candle;
}

int IsPlayerUnit(int sUnit)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        return GetMemory(ptr + 0x08) & 0x04;
    return 0;
}

void RemoveSecretExitWalls(int sUnit)
{
    int i;

    for (i = 0 ; i < 5 ; i ++)
        RemoveWallAtUnitPos(sUnit + i);
}

void PressExitSecretZoneBeacon()
{
    if (CurrentHealth(other) && MaxHealth(self))
    {
        if (IsPlayerUnit(other))
        {
            FrameTimerWithArg(3, GetTrigger() + 1, RemoveSecretExitWalls);
            UniPrint(other, "전방에 있는 비밀벽이 열립니다");
            Delete(self);
        }
    }
}

void InitSecretExitWalls(int location)
{
    int beacon = CreateObject("CarnivorousPlant", location), i;

    for (i = 0 ; i < 5 ; i ++)
        CreateObject("InvisibleLightBlueLow", location + 1 + i);
    Damage(beacon, 0, CurrentHealth(beacon) + 1, -1);
    SetCallback(beacon, 9, PressExitSecretZoneBeacon);
}

void InitCandleRoom()
{
    int unit;
    
    if (!unit)
    {
        unit = HiddenCandle(77);
        CreateObject("InvisibleLightBlueLow", 78);
        CreateObject("InvisibleLightBlueLow", 79);
        CreateObject("InvisibleLightBlueLow", 80);
        CreateObject("InvisibleLightBlueLow", 81);
        FrameTimerWithArg(1, 82, InitSecretExitWalls);
    }
}

void InitUpLevelSecretZone()
{
    int dam = CreateObject("Rat", 75);

    Frozen(CreateObject("MovableBookcase1", 76), 1);
    SetCallback(CreateObject("InvisibleLightBlueLow", 76) - 2, 9, MikyDeadTouched);
    LookWithAngle(dam + 1, 48);
    Damage(dam, 0, 100, 14);
}

void RemoveEntranceFence(int sUnit)
{
    int i, count = GetDirection(sUnit);

    for (i = 0 ; i < count ; i ++)
        RemoveWallAtUnitPos(sUnit + i);
}

void RemoveDungeonEntranceWalls()
{
    int unit = CreateObject("ImaginaryCaster", 88), i, ptr;

    ObjectOff(self);
    FrameTimerWithArg(3, unit, RemoveEntranceFence);
    LookWithAngle(unit, 6);
    for (i = 0 ; i < 5 ; i ++)
        CreateObjectAt("ImaginaryCaster", GetObjectX(unit + i) - 23.0, GetObjectY(unit + i) + 23.0);
    ptr = DiePlayerHandlerCopiedCode();
    ChangePlayerDeathSound(ptr, 913);
    SetMemory(ptr + 0x386, (GetMemory(ptr + 0x386) & 0xffff0000) | 0x9eb);
    UniPrint(other, "던전 입구 앞 철조망을 걷어내었습니다. 행운을 빕니다 후보생!");
}

int FixCallOpcode(int curAddr, int targetAddr)
{
    SetMemory(curAddr + 1, targetAddr - curAddr - 5);
}

int ImportDataSetWordNumber()
{
    StopScript(ImportDataSetWord);
}

int ImportDataSetWord()
{
    int arr[7], link;

    if (!link)
    {
        arr[0] = 0x50575156; arr[1] = 0xDB6247E8; arr[2] = 0x04788BFF; arr[3] = 0x8B08488B; arr[4] = 0xAB66F300; arr[5] = 0x5E595F58; arr[6] = 0x909090C3;
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * ImportDataSetWordNumber() + 0x1c));
        FixCallOpcode(link + 4, 0x507250);
    }
    return link;
}

void MemSetWordPtr(int wordValue, int destPtr, int len)
{
    int temp = GetMemory(0x5c3108), argPtr;

    SetMemory(0x5c3108, ImportDataSetWord());
    argPtr = GetMemory(GetMemory(0x75ae28) + (0x30 * (ImportDataSetWordNumber() + 1) + 0x1c));
    Unused1f(argPtr);
    SetMemory(0x5c3108, temp);
}

int Get16BitColor(int rgb)
{
    int red = rgb & 0xff, grn = (rgb >> 8) & 0xff, blu = (rgb >> 0x10) & 0xff;
    //(red << 11) + (green << 5) + blue

    return ((red << 11) + (grn << 5) + blu) & 0xffff;
}

int GetTileImgData(int tilePtr, int tileVar)
{
    int ptr = GetMemory(GetMemory(tilePtr + 32) + (tileVar * 4));
    int offset = GetMemory(ptr);
    int section = GetMemory(ptr + 8);

    return (section << 0x10) | offset;
}

int TileSetFillSolidColor(int color16, int tilePtr, int tileVar)
{
    int imgSect = GetMemory(0x694860), imgPtr, section = GetTileImgData(tilePtr, tileVar), offset;

    if (imgSect)
    {
        offset = section & 0xffff;
        section = section >> 0x10;
        imgPtr = GetMemory(imgSect + (36 * section));
        if (imgPtr)
        {
            imgPtr += offset;
            MemSetWordPtr(color16, imgPtr, 1058); //2116 / 2
            return 1;
        }
    }
    return 0;
}

void FillTransparentFloorTile()
{
    TileSetFillSolidColor(0xf800, 0x864d5c, 0); //Red
    TileSetFillSolidColor(0x2f4f, 0x864d5c, 1); //cyan
    TileSetFillSolidColor(0xffff, 0x864d5c, 2); //white
    TileSetFillSolidColor(0xff00, 0x864d5c, 3); //blue
    TileSetFillSolidColor(0xf601, 0x864d5c, 4); //orange
    TileSetFillSolidColor(0xf00f, 0x864d5c, 5); //pink
    TileSetFillSolidColor(0xf00, 0x864d5c, 6); //green
}

int ImportNetSendClient()
{
    int arr[15], link;

    if (!link)
    {
        arr[0] = 0x40EBC068; arr[1] = 0x72506800; arr[2] = 0x83500050; arr[3] = 0x54FF10EC; arr[4] = 0x44891424;
        arr[5] = 0x54FF0C24; arr[6] = 0x44891424; arr[7] = 0x54FF0824; arr[8] = 0x44891424; arr[9] = 0x54FF0424;
        arr[10] = 0x04891424; arr[11] = 0x2454FF24; arr[12] = 0x10C48318; arr[13] = 0x08C48358; arr[14] = 0x909090C3;
        link = GetScrDataField(ImportNetSendClient);
    }
    return link;
}

void NetClientSend(int plrUnit, int buffPtr, int buffSize)
{
    //netClientSend,0x0040EBC0
    int plrPtr = UnitToPtr(plrUnit), plrIdx;
    int temp = GetMemory(0x5c31ac);

    if (plrPtr)
    {
        if (GetMemory(plrPtr + 0x08) & 0x04)
        {
            plrIdx = GetMemory(GetMemory(GetMemory(plrPtr + 0x2ec) + 0x114) + 0x810);
            //5c31ac
            SetMemory(0x5c31ac, ImportNetSendClient());
            PushObject(plrIdx, ToFloat(1), ToFloat(buffPtr), ToFloat(buffSize));
            SetMemory(0x5c31ac, temp);
        }
    }
}

void DungeonNameLeft() {}
void DungeonNameRight() {}

void RedPotionImage() {}
void PoisonPotionImage() {}

void BossHereImage() {}
void VampPotionImage() {}
void YellowPotionImage() {}
void MagicPotionImage() {}
void DungeonPicketImage() {}
void ProtossNexusImage() {}

int ImportStreamCopy()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x50515756; arr[1] = 0xDB6247E8; arr[2] = 0xE8C88BFF; arr[3] = 0xFFDB6240; arr[4] = 0x39E8F88B; arr[5] = 0x8BFFDB62; arr[6] = 0x58A5F3F0; arr[7] = 0xC35E5F59;
        link = GetScrDataField(ImportStreamCopy);
        FixCallOpcode(link + 4, 0x507250);
        FixCallOpcode(link + 0xb, 0x507250);
        FixCallOpcode(link + 0x12, 0x507250);
    }
    return link;
}

void StreamCopy(int src, int dst, int len)
{
    int temp = GetMemory(0x5c3320);

    SetMemory(0x5c3320, ImportStreamCopy());
    GroupRunAway(src, dst, len);
    SetMemory(0x5c3320, temp);
}

int ImageResourceDrawFunctionFix(int bptr)
{
    int arr[58];

    arr[0] = 0x83EC8B55; arr[1] = 0x8B5608EC; arr[2] = 0x358B0845; arr[3] = 0x0069F224; arr[4] = 0x8BFC4589; arr[5] = 0x348B6C40; arr[6] = 0xF8758986;
    arr[7] = 0x5D5350A1; arr[8] = 0x60768B00; arr[9] = 0x1374F039; arr[10] = 0xB8F8758B; arr[11] = 0x004BCC20; arr[12] = 0x8B584689; arr[13] = 0x4689FC75;
    arr[14] = 0x5EC03158; arr[15] = 0x5D08C483; arr[16] = 0x909090C3; arr[17] = 0x83EC8B55; arr[18] = 0x8B5620EC; arr[19] = 0xE8560C75; arr[20] = 0xFFFFFFAC;
    arr[21] = 0x8504C483; arr[22] = 0x8B2274C0; arr[23] = 0xC0850846; arr[24] = 0x31561B74; arr[25] = 0x708B66F6; arr[26] = 0x4860A108; arr[27] = 0x348D0069;
    arr[28] = 0xB0048DF6; arr[29] = 0x8BF04589; arr[30] = 0xEC458900; arr[31] = 0xE445895E; arr[32] = 0x3474C085; arr[33] = 0x896C468B; arr[34] = 0xB68BF445;
    arr[35] = 0x00000130; arr[36] = 0x8904768B; arr[37] = 0x068BFC75; arr[38] = 0x8BF84589; arr[39] = 0x69F22435; arr[40] = 0xF4458B00; arr[41] = 0x8B86348D;
    arr[42] = 0x74468B36; arr[43] = 0x89F0758B; arr[44] = 0xFC458B06; arr[45] = 0x3089F631; arr[46] = 0x8B08758D; arr[47] = 0xFF500446; arr[48] = 0xBA96E836;
    arr[49] = 0xC483FFD6; arr[50] = 0x458B5008; arr[51] = 0x74C085E4; arr[52] = 0xFC458B10; arr[53] = 0x89F8758B; arr[54] = 0xF0458B30; arr[55] = 0x89EC758B;
    arr[56] = 0x835E5830; arr[57] = 0xC35D20C4;
    StreamCopy(GetScrDataField(ImageResourceDrawFunctionFix) + 4, bptr, 58);
    return bptr + 0x44;
}

void ApplyImageResourceFix(int thingId, int rscPtr, int drawF)
{
    int chandle = GetMemory(0x5d5350);
    int tPtr = GetMemory(GetMemory(0x69f224) + (thingId * 4));

    SetMemory(tPtr + 0x60, chandle);
    SetMemory(tPtr + 0x58, drawF);
    SetMemory(tPtr + 0x74, rscPtr);
}

void PlayerClassCommonWhenEntry()
{
    int drawF = ImageResourceDrawFunctionFix(0x7510c4);

    ApplyImageResourceFix(636, GetScrCodeField(RedPotionImage) + 4, drawF);
    ApplyImageResourceFix(2682, GetScrCodeField(VampPotionImage) + 4, drawF);
    ApplyImageResourceFix(631, GetScrCodeField(PoisonPotionImage) + 4, drawF);
    ApplyImageResourceFix(2686, GetScrCodeField(MagicPotionImage) + 4, drawF);
    ApplyImageResourceFix(639, GetScrCodeField(YellowPotionImage) + 4, drawF);
    ApplyImageResourceFix(544, GetScrCodeField(DungeonPicketImage) + 4, drawF);
    ApplyImageResourceFix(365, GetScrCodeField(ProtossNexusImage) + 4, drawF);
    ApplyImageResourceFix(472, GetScrCodeField(DungeonNameLeft) + 4, drawF);
    ApplyImageResourceFix(470, GetScrCodeField(DungeonNameRight) + 4, drawF);
    ApplyImageResourceFix(471, GetScrCodeField(BossHereImage) + 4, drawF);
    ApplyImageResourceFix(979, GetScrCodeField(MoneyImage) + 4, drawF);
    ApplyImageResourceFix(476, GetScrCodeField(BuldakImage) + 4, drawF);
}

void OpcodeLoadEffectiveAddr(int loadAddr, int codeAddr, int offset)
{
    int targetAddr = OpcodeGetTargetAddr(codeAddr + offset);

    SetMemory(loadAddr + offset + 1, targetAddr - (loadAddr + offset) - 5);
}

void ReculsiveOpcodeCopies(int destPtr, int callNodePtr, int curAddr)
{
    int paramPtr = GetScrDataField(OpcodeCopiesInvoke);

    if (curAddr <= GetMemory(paramPtr + 12))
    {
        SetMemory(destPtr, GetMemory(curAddr));
        if (GetMemory(callNodePtr))
        {
            if (GetMemory(callNodePtr) + 1 <= curAddr)
            {
                OpcodeLoadEffectiveAddr(GetMemory(paramPtr), GetMemory(paramPtr + 8), GetMemory(callNodePtr) - GetMemory(paramPtr + 8));
                callNodePtr += 4;
            }
        }
        ReculsiveOpcodeCopies(destPtr + 4, callNodePtr, curAddr + 4);
    }
}

void OpcodeCopiesInvoke(int destPtr, int callNodePtr, int startAddr, int endAddr)
{
    ReculsiveOpcodeCopies(destPtr, callNodePtr, startAddr);
}

int CallNode00549380()
{
    int link, node[4];

    if (!link)
    {
        node[0] = 0x549394;
        node[1] = 0x5493d0;
        node[2] = 0x52df80;
        node[3] = 0;    //nullptr
        link = GetScrDataField(CallNode00549380) + 4;
    }
    return link;
}

int MonsterStrikeHookSub()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x02CC96FF; arr[1] = 0x51500000; arr[2] = 0x0000FFB8; arr[3] = 0x50565700; arr[4] = 0xDB623BE8; arr[5] = 0x0CC483FF; arr[6] = 0xFB685859; arr[7] = 0xC3005493;

        link = GetScrDataField(MonsterStrikeHookSub);
    }
    return link;
}

int MonsterStrikeHandlerCopiedCode(int callback)
{
    int code[48], link;

    if (!link)
    {
        link = GetScrDataField(MonsterStrikeHandlerCopiedCode) + 4;
        OpcodeCopiesInvoke(link, CallNode00549380(), 0x549380, 0x549434);
        int subPart = MonsterStrikeHookSub();
        SetMemory(subPart + 27, link + 0x7b);
        SetMemory(subPart + 9, callback);
        FixCallOpcode(subPart + 16, 0x507310);

        SetMemory(link + 0x75, (GetMemory(link + 0x75) & (~0xff)) ^ 0x68);  //e8 xx xx xx xx
        SetMemory(link + 0x7a, (GetMemory(link + 0x7a) & (~0xff)) ^ 0xc3);
        SetMemory(link + 0x76, subPart);
    }
    return link;
}

void RegistUnitStrikeHook(int sUnit)
{
    int ptr = UnitToPtr(sUnit), temp, binScrPtr;

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
        {
            binScrPtr = GetMemory(GetMemory(ptr + 0x2ec) + 0x1e4);
            if (binScrPtr)
                SetMemory(binScrPtr + 0xec, MonsterStrikeHandlerCopiedCode(0));
        }
    }
}

void MonsterStrikeCallback()
{
    int thingId = GetUnitThingID(self);

    if (CurrentHealth(other))
    {
        if (thingId == 1386)
            HorrendousMissileAttack();
        else if (thingId == 1360)
            ZombieAttackReportComplete();
        else if (thingId == 2303)
            BullDakStrike();
    }
}

int BullDakBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1918985538; arr[1] = 50; arr[17] = 430; arr[19] = 200; arr[21] = 1065353216; 
		arr[23] = 32769; arr[24] = 1065353216; arr[28] = 1117782016; arr[29] = 10; arr[31] = 4; 
		arr[32] = 18; arr[33] = 26; arr[34] = 5; arr[35] = 5; arr[36] = 50; 
		arr[58] = 5545472; arr[59] = 5542784; 
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * BullDakBinTable + 0x1c));
	}
	return link;
}

void BullDakSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1086324736);
		SetMemory(ptr + 0x224, 1086324736);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 32769);
		SetMemory(GetMemory(ptr + 0x22c), 430);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 430);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, BullDakBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 1065353216);
	}
}

void BullDakStrike()
{
    Damage(other, self, 160, 8);
    DeleteObjectTimer(CreateObjectAt("Explosion", GetObjectX(other), GetObjectY(other)), 18);
}

void BullDakImageLoop(int imgUnit)
{
    int parent = imgUnit - 1;
    if (CurrentHealth(parent))
    {
        if (ToInt(DistanceUnitToUnit(imgUnit, parent)))
            MoveObject(imgUnit, GetObjectX(parent), GetObjectY(parent));
        FrameTimerWithArg(2, imgUnit, BullDakImageLoop);
    }
    else
        Delete(imgUnit);
}

void DisableObject(int obj)
{
    ObjectOff(obj);
}

void UnderGroundElevOn()
{
    ObjectOff(self);
    ObjectOn(Object("UndergroundElev"));
    UniPrint(other, "엘리베이터가 작동을 시작했습니다!");
}

void SecretWallOpen()
{
    ObjectOff(self);
    WallOpen(Wall(118, 204));
    WallOpen(Wall(119, 203));
    WallOpen(Wall(120, 202));

    WallOpen(Wall(122, 200));
    WallOpen(Wall(123, 199));
    WallOpen(Wall(124, 198));

    WallOpen(Wall(126, 198));
    WallOpen(Wall(127, 199));
    WallOpen(Wall(128, 200));

}