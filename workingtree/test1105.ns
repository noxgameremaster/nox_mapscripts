
#import "unitutil"
#import "printutil"

#define NULLPTR    0

int player[20];
int g_total;
int g_source = 30;

int GetMemory(int a){}
void SetMemory(int a, int b){}

int CreateObjectAt(string name, float x, float y){}
int UnitToPtr(int unit){}

void UniPrint(int plrUnit, string msg){}

void SetValueTesting()
{
    int y;

    PrintToAll("yyyy");
    y = 255;
    PrintToAll(IntToString(y));


    PrintToAll("what?");

}

int g_masterUnit = NULLPTR;

void TestChecking(int vOffset, int value)
{
    PrintToAll(IntToString(vOffset));
    PrintToAll(IntToString(value));
}

string ToStr(int x)
{
    StopScript(x);
}

string ReadStringAddress(int t)
{
    return ToStr((t - 0x97bb40) / 4);
}

void DisplayMapVersion(string sArg)
{
    int sPtr = 0x974ac0;

    PrintToAll("Map Version:::");
    PrintToAll(sArg);
}

int g_another = 5;

void GlobalVarTesting()
{
    UniPrint(other, "테스팅이여유");
    Print("g_source?=" + IntToString(++g_source));

    if (g_another > 0)
        Print("g_another?=" + IntToString(--g_another));

    int versionInfo = 0x974ac0;

    FrameTimerWithArg(60, ReadStringAddress(&versionInfo), DisplayMapVersion);
}

void TestFunction()
{
    int x;
    float xProfile = GetObjectX(other), yProfile = GetObjectY(other);
    int arr[] = {x, xProfile, yProfile, 30, 40, GetHost() + Random(0, 10)};

    PrintToAll("TestValueSet" + IntToString(x++));
    // LookWithAngle(x ++, 255);
    // PrintToAll("Hooll");
    // x = 60;
    PrintToAll("xpos:" + FloatToString(xProfile) + ", ypos:" + FloatToString(yProfile));

    int u, dest;
    float locationX = GetWaypointX(2), locationY = GetWaypointY(2);

    for (u = 0 ; u < 300 ; u += 1)
    {
        CreateObjectAt("Diamond", locationX, locationY);
    }
}

void AssignOpTest()
{
    CreateObjectAt("Diamond", GetObjectX(other), GetObjectY(other));
}

int Multiply(int value)
{
    return value * 2;
}

void ValuePrint(int value)
{
    Print("value:" + IntToString(value));
}

void IncreaseOpTest()
{
    int arr[3];

    ValuePrint(arr[1]++);

    Print("after: " + IntToString(arr[1]));
}

void PointerTesting()
{
    int x = 30, *p = &x;

    p[0] = 444;

    Print(IntToString(p[0]));
    Print(IntToString(x));
}

void TestValueSet()
{
    int arr[3];

    // x++;

    // OperatorSetVar(&x, 0x1111);
    // SetMemory(&x, 0x1111);

    PrintToAll("TestValueSet" + IntToString(arr[1]++));
}

int CreateEmerald(int location)
{
    int germ = CreateObject("Emerald", location);

    return germ;
}

int CreateRuby(int location)
{
    int ruby = CreateObject("Ruby", location);

    return ruby;
}

#define MY_RUBY_COUNT   32

void MyRubyExplosion(int __pointer p)
{
    int u;

    for (u = 0 ; u < MY_RUBY_COUNT ; u += 1)
    {
        if (IsObjectOn(p[u]))
        {
            Effect("LESSER_EXPLOSION", GetObjectX(p[u]), GetObjectY(p[u]), 0.0, 0.0);
            Delete(p[u]);
        }
    }
}

void MyRuby()
{
    int u, arr[MY_RUBY_COUNT];

    for (u = 0 ; u < MY_RUBY_COUNT ; u += 1)
    {
        arr[u] = CreateRuby(3);
    }
    FrameTimerWithArg(200, &arr, MyRubyExplosion);
}

void GetPointerFunction(int __pointer p)
{
    p[0] = 464;

}

void SetUnitMaxHealth(int unit, int amount)
{
    int *ptr = UnitToPtr(unit);

    if (ptr != NULLPTR)
    {
        int *hp_ptr = ptr[139];

        hp_ptr[0] = amount;
        hp_ptr[1] = amount;
    }
}

void SummonEmeralds()
{
    int unit = CreateObject("Troll", 2);

    SetUnitMaxHealth(unit, 250);
}

int ImportUnitCollideFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x14246C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        link = &arr;
    }
    return link;
}

int MagicAnkh(int location)
{
    int ankh = CreateObject("Ankh", 1);
    int *ptr = 0x750710;
}

void MapInitialize()
{
    g_total = 666;
    // ImportCreateAtFunc();
}

void MapEntry()
{
    MusicEvent();
}

int ItemDropGold(int sUnit)
{
    string gName[] = {"QuestGoldChest", "QuestGoldPile", "Gold"};
    int gUnit = CreateObjectAt(gName[Random(0, 2)], GetObjectX(sUnit), GetObjectY(sUnit));
    int *ptr = 0x750710;
    int *vptr = ptr[0];
    int *goldValue = vptr[173];

    goldValue[0] = Random(1000, 5000);

    return gUnit;
}

