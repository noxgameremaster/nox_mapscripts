//@ignore_object_type

int EnableMemoryReadWriteFunction(int t) { }

int GetMemory(int addr) { return Unknownb9(addr); }
void SetMemory(int addr, int value) { Unused59(addr, value); }

int GetScrDataField(int functionName)
{
    return GetMemory(GetMemory(0x75ae28) + (0x30 * functionName + 0x1c));
}

int GetScrCodeField(int functionName)
{
    return GetMemory(GetMemory(0x75ae28) + (0x30 * functionName + 0x20));
}

int FixCallOpcode(int curAddr, int targetAddr)
{
    SetMemory(curAddr + 1, targetAddr - curAddr - 5);
}

int ImportCreateAtFunc()
{
    int arr[20], link;

    if (!link)
    {
        arr[0] = 0xAA506856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xFF502414; arr[4] = 0x50042454;
        arr[5] = 0x082454FF; arr[6] = 0x4085048B; arr[7] = 0x680097BB; arr[8] = 0x004E3810; arr[9] = 0x2454FF50;
        arr[10] = 0x08C48304; arr[11] = 0xF685F08B; arr[12] = 0x006A0A74; arr[13] = 0x2454FF56; arr[14] = 0x08C48314;
        arr[15] = 0x50723068; arr[16] = 0x54FF5600; arr[17] = 0xC4830424; arr[18] = 0x5EC03118; arr[19] = 0x909090C3; 
        link = GetScrDataField(ImportCreateAtFunc);
    }
    return link;
}

int CreateObjectAt(string name, float x, float y)
{
    int temp = GetMemory(0x5c3160), res;

    SetMemory(0x5c3160, ImportCreateAtFunc());
    res = CreateMover(SToInt(name), ToInt(x), y);
    SetMemory(0x5c3160, temp);
    if (res) return GetMemory(res + 0x2c);
    else return 0;
}

int GetOwner(int unit)
{
    int ptr = UnitToPtr(unit), res;

    if (ptr)
    {
        res = GetMemory(ptr + 0x1fc);
        if (res)
            return GetMemory(res + 0x2c);
    }
    return 0;
}

int ImportUnitToPtrFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x511B6068; arr[3] = 0x54FF5000; arr[4] = 0xC4830424;
        arr[5] = 0x7230680C; arr[6] = 0xFF500050; arr[7] = 0x83042454; arr[8] = 0xC03108C4; arr[9] = 0x909090C3;
        link = GetScrDataField(ImportUnitToPtrFunc);
    }
    return link;
}

int UnitToPtr(int unit)
{
    int temp = GetMemory(0x5c336c), res;
    SetMemory(0x5c336c, ImportUnitToPtrFunc());
    res = Unknownb8(unit);
    SetMemory(0x5c336c, temp);
	return res;
}

int GetUnitThingID(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x4);
    return 0;
}

void MapInitialize()
{
    int k = EnableMemoryReadWriteFunction(0);

    ImportUnitCollideFunc();
    ImportUnitToPtrFunc();
    ImportCreateAtFunc();
    MathSine(17, 1.0 / 57.3);
    SpawnPotion(9);
    SpawnPotion(10);
    SpawnPotion(11);
    FrameTimerWithArg(1, 12, SpawnPotion);
    FrameTimerWithArg(1, 13, SpawnPotion);
    FrameTimerWithArg(2, 14, SpawnPotion);
    FrameTimerWithArg(2, 15, SpawnPotion);
    FrameTimerWithArg(2, 16, SpawnPotion);
    FrameTimerWithArg(3, SpawnFanchakram, PutWeapons);
}

void SpawnPotion(int wp)
{
    int unit = CreateObject("RedPotion", wp);
    
    CreateObject("InvisibleLightBlueHigh", wp);
    LookWithAngle(unit + 1, wp);
    FrameTimerWithArg(1, unit, RespawnPotions);
}

void RespawnPotions(int unit)
{
    int wp;

    if (!IsObjectOn(unit))
    {
        wp = GetDirection(unit + 1);
        Delete(unit + 1);
        unit = CreateObject("RedPotion", wp);
        CreateObject("InvisibleLightBlueLow", wp);
        LookWithAngle(unit + 1, wp);
        Effect("VIOLET_SPARKS", GetWaypointX(wp), GetWaypointY(wp), 0.0, 0.0);
        AudioEvent("ManaClick", wp);
    }
    SecondTimerWithArg(30, unit, RespawnPotions);
}

void PlayerRelease()
{
    int rnd;
    if (CurrentHealth(other))
    {
        rnd = Random(1, 4);
        Enchant(other, "ENCHANT_ANCHORED", 0.0);
        MoveObject(other, GetWaypointX(rnd), GetWaypointY(rnd));
        DeleteObjectTimer(CreateObject("VortexSource", rnd), 35);
        AudioEvent("ShellClick", rnd);
    }
}

void PutWeapons(int func)
{
    int row;
    int k;

    if (row < 15)
    {
        MoveWaypoint(8, GetWaypointX(7), GetWaypointY(7));
        for (k = 12 ; k >= 0 ; k --)
        {
            FrameTimerWithArg(1, 8, func + Random(0, 4));
            FrameTimerWithArg(1, 8, LocationMoving);
        }
        MoveWaypoint(7, GetWaypointX(7) - 23.0, GetWaypointY(7) + 23.0);
        row ++;
        FrameTimerWithArg(2, func, PutWeapons);
    }
    else
        LoopSearchIndex();
}

void LocationMoving(int wp)
{
    MoveWaypoint(wp, GetWaypointX(wp) + 23.0, GetWaypointY(wp) + 23.0);
}

void SpawnFanchakram(int wp)
{
    int unit = CreateObject("FanChakram", wp);
    int ptr = GetMemory(0x750710);

    SetMemory(GetMemory(ptr + 0x2e0), 0xc8c8);
}

void SpawnChakram(int wp)
{
    CreateObject("RoundChakram", wp);
}

void SpawnFlareWand(int wp)
{
    CreateObject("SulphorousFlareWand", wp);
}

void SpawnBowSet(int wp)
{
    CreateObject("Quiver", wp);
    SetMemory(GetMemory(GetMemory(0x750710) + 0x2e0), 0x6464);
    CreateObject("Bow", wp);
}

void SpawnFireballStaff(int wp)
{
    CreateObject("LesserFireballWand", wp);
}

int GetMissileThingID(int missile)
{
    int ptr = UnitToPtr(missile);

    if (ptr)
    {
        if (GetMemory(ptr + 8) & 1)
            return GetMemory(ptr + 4);
    }
    return 0;
}

void DetectedSpecificIndex(int curId)
{
    int thingId = GetMissileThingID(curId);

    if (!thingId)
        return;

    if (thingId == 709)
    {
        MagicMisWand(GetOwner(curId));
        Delete(curId);
    }
    else if (thingId == 1179)
    {
        ShurikenEvent(GetOwner(curId));
        Delete(curId);
    }
    else if (thingId == 526)
    {
        HarpoonEvent(GetOwner(curId));
        Delete(curId);
    }
    else if (thingId == 1177)
    {
        CheckChakramTracking(GetOwner(curId), curId);
        Delete(curId);
    }
    else if (thingId == 695)
    {
        LightningBoltThrowing(GetOwner(curId));
        Delete(curId);
    }
}

void LoopSearchIndex()
{
    int curId, tempId;
    int link;

    if (!link)
        link = GetScrDataField(LoopSearchIndex);
    while (Unknownb9(0x750710))
    {
        Unused59(link + 4, Unknownb9(Unknownb9(0x750710) + 0x2c));
        if (curId)
        {
            while (curId < tempId)
            {
                Unused59(link, curId + 1);
                DetectedSpecificIndex(curId);
            }
            break;
        }
        curId = tempId;
        break;
    }
    FrameTimer(1, LoopSearchIndex);
}

void MagicMisWand(int owner)
{
    int ptr;

    if (CurrentHealth(owner))
    {
        ptr = CreateObject("InvisibleLightBlueHigh", 6);
        CastSpellObjectLocation("SPELL_MAGIC_MISSILE", owner, GetObjectX(owner) + UnitAngleCos(owner, 20.0), GetObjectY(owner) + UnitAngleSin(owner, 20.0));
        Delete(ptr);
        Delete(ptr + 2);
        Delete(ptr + 3);
        Delete(ptr + 4);
    }
}

void ShurikenEvent(int owner)
{
    if (CurrentHealth(owner))
    {
        int scrPt = MakeMagicMissileScrPt("DeathBallFragment", owner);
        int mis = GetMemory(scrPt), ptr = GetMemory(scrPt + 4);

        SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
        SetMemory(ptr + 0x2fc, GreenTeaCollide);
    }
}

void HarpoonEvent(int owner)
{
    if (CurrentHealth(owner))
    {
        int mis = CreateObjectAt("ArcherBolt", GetObjectX(owner) + UnitAngleCos(owner, 17.0), GetObjectY(owner) + UnitAngleSin(owner, 17.0));
        SetOwner(owner, mis);
        LookWithAngle(mis, GetDirection(owner));
        PushObject(mis, 53.0, GetObjectX(owner), GetObjectY(owner));
    }
}

void ArrowShot(int owner)
{
    int mis;

    if (CurrentHealth(owner))
    {
        MoveWaypoint(6, GetObjectX(owner) + UnitAngleCos(owner, 17.0), GetObjectY(owner) + UnitAngleSin(owner, 17.0));
        mis = CreateObject("Fireball", 6);
        Enchant(mis, "ENCHANT_FREEZE", 0.0);
        Enchant(mis, "ENCHANT_RUN", 0.0);
        LookWithAngle(mis, GetDirection(owner));
        SetOwner(owner, mis);
        PushObjectTo(mis, UnitAngleCos(owner, 50.0), UnitAngleSin(owner, 50.0));
    }
}

void ChakramThrowing(int cur)
{
    int owner = GetOwner(cur);
    int mis = CreateObjectAt("TitanFireball", GetObjectX(owner) + UnitRatioX(cur, owner, 9.0), GetObjectY(owner) + UnitRatioY(cur, owner, 9.0));
    int ptr = GetMemory(0x750710);

    SetOwner(owner, mis);
    LookWithAngle(mis, GetDirection(owner));
    PushObjectTo(mis, UnitRatioX(cur, owner, 31.0), UnitRatioY(cur, owner, 31.0));
    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, ChakramExplosion);
}

void LightningBoltThrowing(int owner)
{
    int mis;
    float pos_x, pos_y;

    if (CurrentHealth(owner))
    {
        pos_x = UnitAngleCos(owner, 13.0);
        pos_y = UnitAngleSin(owner, 13.0);
        mis = CreateObjectAt("LightningBolt", GetObjectX(owner) + pos_x, GetObjectY(owner) + pos_y);
        CreateObject("LightningBolt", 6);
        CreateObject("LightningBolt", 6);
        Enchant(mis, "ENCHANT_HASTED", 0.0);
        SetOwner(owner, mis);
        SetOwner(owner, mis + 1);
        SetOwner(owner, mis + 2);
        LookWithAngle(mis, GetDirection(owner));
        LookWithAngle(mis + 1, GetDirection(owner));
        LookWithAngle(mis + 2, GetDirection(owner));
        PushObjectTo(mis, pos_x * 4.0, pos_y * 4.0);
        PushObjectTo(mis + 1, pos_x * 4.0, pos_y * 4.0);
        PushObjectTo(mis + 2, pos_x * 4.0, pos_y * 4.0);
    }
}

void DelayGiveUnit(int ptr)
{
    int inv = ToInt(GetObjectZ(ptr)), owner = GetOwner(ptr);

    if (CurrentHealth(owner) && IsObjectOn(inv))
    {
        Pickup(owner, inv);
        ChakramThrowing(ptr);
    }
    Delete(ptr);
}

void CheckChakramTracking(int owner, int cur)
{
    int inv = GetLastItem(cur), buffer = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(cur), GetObjectY(cur));

    Delete(cur);
    SetOwner(owner, buffer);
    Raise(buffer, ToFloat(inv));
    FrameTimerWithArg(2, buffer, DelayGiveUnit);
}

float UnitAngleCos(int unit, float size)
{
    return MathSine((GetDirection(unit) * 45 / 32) + 90, size);
}

float UnitAngleSin(int unit, float size)
{
    return MathSine(GetDirection(unit) * 45 / 32, size);
}

float MathSine(int angle, float size)
{
    float var_0[91];
    int i, k;
 
    if (!ToInt(var_0[90]))
    {
        MoveWaypoint(angle + 1, GetWaypointX(angle), GetWaypointY(angle) - 1.0);
        for (i = 0 ; i <= 90 ; i ++)
        {
            var_0[i] = GetSineValue(angle, size);
            Delete(k + i + 1);
        }
        return var_0[0];
    }
    k = angle / 90;
    i = angle - (k * 90);

    if (k % 2) i = 90 - i;
    if ((angle / 180) % 2) return -var_0[i] * size;
	else return var_0[i] * size;
}

float GetSineValue(int wp, float c)
{
    float x_ratio = WayRatioX(wp, wp + 1), y_ratio = WayRatioY(wp, wp + 1), res;

    res = GetWaypointX(wp) - GetWaypointX(wp + 1);
    MoveWaypoint(wp + 1, GetWaypointX(wp) - (c * y_ratio) - x_ratio, GetWaypointY(wp) + (c * x_ratio) - y_ratio);
    return res;
}

float WayRatioX(int wp1, int wp2)
{
    return (GetWaypointX(wp1) - GetWaypointX(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float WayRatioY(int wp1, int wp2)
{
    return (GetWaypointY(wp1) - GetWaypointY(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

int ToInt(float x)
{
    StopScript(x);
}

float ToFloat(int x)
{
    StopScript(x);
}

string ToStr(int x)
{
    StopScript(x);
}

int SToInt(string x)
{
    StopScript(x);
}

float UnitRatioX(int unit, int target, float size)
{
    return (GetObjectX(unit) - GetObjectX(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float UnitRatioY(int unit, int target, float size)
{
    return (GetObjectY(unit) - GetObjectY(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

int MakeMagicMissileScrPt(string misName, int owner)
{
    float xVect = UnitAngleCos(owner, 18.0), yVect = UnitAngleSin(owner, 18.0);
    int target = CreateObjectAt("ImaginaryCaster", GetObjectX(owner) + (xVect * 10.0), GetObjectY(owner) + (yVect * 10.0));
    int mis = CreateObjectAt(misName, GetObjectX(owner) + xVect, GetObjectY(owner) + yVect);
    int ptr = GetMemory(0x750710);
    int ecPtr;
    int casterPtr = UnitToPtr(target);

    DeleteObjectTimer(target, 3);
    if (ptr)
    {
        SetOwner(owner, mis);
        SetMemory(ptr + 0x220, ToInt(4.7)); //Speed
        SetMemory(ptr + 0x224, 0); //accel
        ecPtr = MemAlloc(20);
        SetMemory(ecPtr, UnitToPtr(owner));
        SetMemory(ecPtr + 4, casterPtr);
        SetMemory(ptr + 0x2ec, ecPtr);
        SetMemory(ptr + 0x2e8, 5488032);
    }
    return GetScrDataField(MakeMagicMissileScrPt) + 0x14;
}

void GreenSparkFx(float xProfile, float yProfile)
{
    int fxTarget = CreateObjectAt("MonsterGenerator", xProfile, yProfile);

    Damage(fxTarget, 0, 1, -1);
    Delete(fxTarget);
}

void GreenTeaCollide()
{
    int owner = GetOwner(self);

    while (owner)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, owner, 40, 1);
            GreenSparkFx(GetObjectX(self), GetObjectY(self));
        }
        else if (!GetCaller())
            1;
        else
            break;
        Delete(self);
        break;
    }
}

void ChakramExplosion()
{
    int owner = GetOwner(self);

    while (owner && GetTrigger())
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
            Damage(other, owner, 80, 1);
        else if (!GetCaller())
            1;
        else
            break;
        DeleteObjectTimer(CreateObjectAt("Explosion", GetObjectX(self), GetObjectY(self)), 18);
        Delete(self);
        break;
    }
}

int ImportUnitCollideFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x14246C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        link = GetScrDataField(ImportUnitCollideFunc);
    }
    return link;
}

int ImportMemAlloc()
{
    int arr[7], link;

    if (!link)
    {
        arr[0] = 0x49E85055; arr[1] = 0x50FFDB62; arr[2] = 0xCB2553E8; arr[3] = 0x1DE850FF; arr[4] = 0x83FFDB62; arr[5] = 0x5D5808C4; arr[6] = 0x909090C3;
        link = GetScrDataField(ImportMemAlloc);
        FixCallOpcode(link + 2, 0x507250);
        FixCallOpcode(link + 8, 0x403560);
        FixCallOpcode(link + 0x0e, 0x507230);
    }
    return link;
}

int MemAlloc(int size)
{
    int temp = GetMemory(0x5c3208), ptr;

    SetMemory(0x5c3208, ImportMemAlloc());
    ptr = GetCharacterData(size);
    SetMemory(0x5c3208, temp);
    return ptr;
}