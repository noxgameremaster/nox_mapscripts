//@ignore_object_type

int player[20];
int GAME_MODE = 2; //game_mode (0: auto_pick, 1: all_pick)
int MODEL[10]; //character
int FAN_CHAK[10]; //chakrum
int MAGIC_ORB[80]; //heal_orb, charm_orb, mana_orb , white_orb
int COOLDOWN[40]; //skill_complete_value (0-9: R, 10-19: S, 20-29: D, 30-39: J)

int EnableMemoryReadWriteFunction(int t) { }

float ToFloat(int arg) { StopScript(arg); }
int ToInt(float arg) { StopScript(arg); }
string ToStr(int arg) { StopScript(arg); }
int SToInt(string arg) { StopScript(arg); }
int GetMemory(int addr) { return Unknownb9(addr); }
float GetMemoryFloat(int addr) { StopScript(Unknownb9(addr)); }
void SetMemory(int addr, int value) { Unused59(addr, value); }

int GetScrDataField(int functionName)
{
    return GetMemory(GetMemory(0x75ae28) + (0x30 * functionName + 0x1c));
}

int GetScrCodeField(int functionName)
{
    return GetMemory(GetMemory(0x75ae28) + (0x30 * functionName + 0x20));
}

void SetUnitMaxHealth(int unit, int amount)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x22c), amount);
        SetMemory(GetMemory(ptr + 0x22c) + 0x4, amount);
    }
}

int WizardRedBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1635412311; arr[1] = 1699898482; arr[2] = 100;
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 80000; arr[17] = 300; arr[18] = 100; arr[19] = 50; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 40; arr[24] = 1067869798; 
		arr[25] = 0; arr[26] = 4; arr[27] = 4;
		arr[53] = 1128792064; arr[54] = 4; 
		link = GetScrDataField(WizardRedBinTable);
	}
	return link;
}

int FireSpriteBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1701996870; arr[1] = 1769107539; arr[2] = 25972; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 85; arr[18] = 25; arr[19] = 70; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 65544; arr[24] = 1065353216; 
		arr[25] = 0; arr[26] = 0; arr[27] = 0; arr[28] = 0; arr[29] = 0; 
		arr[30] = 0; arr[31] = 0; arr[32] = 0; arr[33] = 0; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 1801545047; arr[38] = 1701996870; arr[39] = 1819042146; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 1128792064; arr[54] = 0; 
		arr[55] = 15; arr[56] = 21; arr[57] = 0; arr[58] = 5545472; arr[59] = 0; 
		link = GetScrDataField(FireSpriteBinTable);
	}
	return link;
}

void RedWizardInit(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, WizardRedBinTable());
}

int VoiceList(int num)
{
    int list[75], addr, k;

    if (!list[0])
    {
        addr = GetMemory(0x663eec);
        for (k = 0 ; k < 75 ; k ++)
        {
            list[k] = addr;
            addr = GetMemory(addr + 0x4c);
        }
    }
    return list[num];
}

int ImportCreateAtFunc()
{
    int arr[20], link;

    if (!link)
    {
        arr[0] = 0xAA506856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xFF502414; arr[4] = 0x50042454;
        arr[5] = 0x082454FF; arr[6] = 0x4085048B; arr[7] = 0x680097BB; arr[8] = 0x004E3810; arr[9] = 0x2454FF50;
        arr[10] = 0x08C48304; arr[11] = 0xF685F08B; arr[12] = 0x006A0A74; arr[13] = 0x2454FF56; arr[14] = 0x08C48314;
        arr[15] = 0x50723068; arr[16] = 0x54FF5600; arr[17] = 0xC4830424; arr[18] = 0x5EC03118; arr[19] = 0x909090C3; 
        link = GetScrDataField(ImportCreateAtFunc);
    }
    return link;
}

int CreateObjectAt(string name, float x, float y)
{
    int temp = GetMemory(0x5c3160), res;

    SetMemory(0x5c3160, ImportCreateAtFunc());
    res = CreateMover(SToInt(name), ToInt(x), y);
    SetMemory(0x5c3160, temp);
    if (res) return GetMemory(res + 0x2c);
    else return 0;
}

int GetUnitThingID(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x4);
    return 0;
}

int GetOwner(int unit)
{
    int ptr = UnitToPtr(unit), res;

    if (ptr)
    {
        res = GetMemory(ptr + 0x1fc);
        if (res)
            return GetMemory(res + 0x2c);
    }
    return 0;
}

int ImportUnitToPtrFunc()
{
    int arr[10], ptr, link;
    if (!arr[0])
    {
        arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x511B6068; arr[3] = 0x54FF5000; arr[4] = 0xC4830424;
        arr[5] = 0x7230680C; arr[6] = 0xFF500050; arr[7] = 0x83042454; arr[8] = 0xC03108C4; arr[9] = 0x909090C3; 
        link = GetScrDataField(ImportUnitToPtrFunc);
    }
    return link;
}

int UnitToPtr(int unit)
{
    int temp = GetMemory(0x5c336c), res;
    SetMemory(0x5c336c, ImportUnitToPtrFunc());
    res = Unknownb8(unit);
    SetMemory(0x5c336c, temp);
	return res;
}

void MapExit()
{
    SelfDamageClassMapExit();
}

void MapInitialize()
{
    int t = EnableMemoryReadWriteFunction(0);
    
    VoiceList(0);
    setGoldResetBeacon(1, 0);
    initializeStruct(-1);
    ImportUniChatCore();
    ImportUniPrintCore();
    ImportUseItemFunc();
    BkRevent(-1);
    mathSpiral(-1);
    mathSine(0, 0.0);
    initializeSelectBeacon();
    initializeChak();
    initializeCharacters();
    stoneGolemInv();
    //loop
    loopPreservePlayerTable();
    FrameTimer(1, InitializeSkillFuncs);
    FrameTimer(30, LoopSearchIndex);
    
    //delay_run
    FrameTimer(10, resetOff);
    SecondTimer(10, spawnMapPotions);
    FrameTimer(100, selectGameMode);

    MusicEvent();
}

void initializeStruct(int arg_0) {
    //characterName(arg_0);
    stepSound(arg_0);
    stepSoundDelay(arg_0);
    dotPosX(arg_0);
    getRangeAttackCount(arg_0);
    wispExplosionPos(arg_0, 0.0);
    rhombusXY(arg_0, 23.0);
    demonSkillJwayBuffer(arg_0);
    lightningXY(arg_0);
}

void InitializeSkillFuncs()
{
    PlayerInputTable(-1);
    ImportUnitToPtrFunc();
    ImportGreenExplosionFunc();
    ImportGreenLightningFunc();
    skillEyeofwolf(0);
    skillOnJump(0);
    skillSneak(0);
    harpoonEvent(0, 0);
    ImportCreateAtFunc();
    CallFunctionWithArg(0, 0);
    InitRandSelector(4388.0, 4184.0);

    RegistSignMessage(Object("gameModeSign1"), "게임모드: 부활 시 캐릭터 재선택 가능");
    RegistSignMessage(Object("gameModeSign2"), "게임모드: 한번 선택한 캐릭으로 계속 플레이");
    RegistSignMessage(Object("usage1"), "캐릭터를 선택하려면 비콘에 들어갑니다");
    RegistSignMessage(Object("usage2"), "랜덤한 유닛을 고르려면 물음표로 들어가세요");
}

void selectAllPick() {
    GAME_MODE = 1;
    ModeSelectBeacon();
}
void selectAutoPick() {
    GAME_MODE = 0;
    ObjectOn(Object("autoSelect"));
    ModeSelectBeacon();
}
void ModeSelectBeacon()
{
    ObjectOff(Object("selectBeacon1"));
    ObjectOff(Object("selectBeacon2"));
    Frozen(CreateObject("TraderQuiverRack", 109), 1);
    WallGroupOpen(1);
}

void selectGameMode()
{
    UniPrintToAll("게임모드를 선택하세요 .");
    UniPrintToAll("좌측비콘: 오토픽 모드(한번 고른 캐릭으로 계속 플레이), 우측비콘: 셀렉팅 모드(죽을때마다 캐릭터 교체가능)");
}

void initializeSelectBeacon() {
    int var_0 = 0;
    int var_1 = Object("selectBeaconBase");

    while(var_0 < 10) {
        LookWithAngle(var_1 + (var_0 * 2), var_0);
        var_0 += 1;
    }
}
void initializeChak() {
    int var_0 = 0;
    int var_1 = Object("chakramBase");

    while(var_0 < 10) {
        FAN_CHAK[var_0] = var_1 + (var_0 * 2);
        var_0 += 1;
    }
}
void initializeCharacters()
{
    int i;

    for (i = 0; i < 10 ; i ++)
        MODEL[i] = Object("char" + IntToString(i + 1));
    RedWizardInit(Object("char6"));
    characterPut();
}

void characterPut() {
    int i;
    
    for(i = 0 ; i < 10 ; i += 1) {
        Frozen(MODEL[i], 1);
        if (i < 5) {
            LookWithAngle(MODEL[i], 32);
            MoveObject(MODEL[i], GetWaypointX(i + 4) - 32.0, GetWaypointY(i + 4) - 32.0);
        }
        else {
            LookWithAngle(MODEL[i], 160);
            MoveObject(MODEL[i], GetWaypointX(i + 4) + 32.0, GetWaypointY(i + 4) + 32.0);
        }
    }
}
string characterName()
{
    string table = "드라이아이드"; "데몬"; "기계골렘"; "스톤골렘"; "비홀더"; "레드 위자드"; "호렌더스"; "헤쿠바"; "오우거로드"; "리치로드";
        
    return table;
}

string stepSound(int num)
{
    string arr[10];

    if (num < 0)
    {
        arr[0] = "EmberDemonMove";
        arr[1] = "DemonMove";
        arr[2] = "MechGolemMove";
        arr[3] = "GolemMove";
        arr[4] = "ShadeMove";
        arr[5] = arr[0];
        arr[6] = arr[0];
        arr[7] = arr[0];
        arr[8] = "OgreBruteMove";
        arr[9] = arr[0];
        return arr[0];
    }
    return arr[num];
}

float stepSoundDelay(int num)
{
    float arr[10];

    if (num < 0)
    {
        arr[0] = 0.4;
        arr[1] = 0.25;
        arr[2] = 0.4;
        arr[3] = 0.4;
        arr[4] = 0.3;
        arr[5] = 0.4;
        arr[6] = 0.4;
        arr[7] = 0.4;
        arr[8] = 0.4;
        arr[9] = 0.4;
        return arr[0];
    }
    return arr[num];
}

void selectMonster()
{
    int plr = GetDirection(self);

    if (plr < 10)
    {
        if (!MaxHealth(player[plr]) && MaxHealth(other) == 150 && GetGold(other) <= 10 && CurrentHealth(other))
        {
            EnchantOff(other, "ENCHANT_INFRAVISION");
            EnchantOff(other, "ENCHANT_SNEAK");
            player[plr] = GetCaller();
            player[plr + 10] = 1;
            if (IsPlayerUnit(other))
                SelfDamageClassEntry(other);
            // player[plr + 20] = GetMemory(0x979720);
            MoveObject(player[plr], GetWaypointX(1), GetWaypointY(1));
            Enchant(player[plr], "ENCHANT_INVULNERABLE", 4.0);
            Enchant(player[plr], "ENCHANT_SLOWED", 0.0);
            Enchant(player[plr], "ENCHANT_HASTED", 0.0);
            Enchant(player[plr], "ENCHANT_AFRAID", 0.0);
            Enchant(player[plr], "ENCHANT_CROWN", 0.0);
            SetOwner(player[plr], MODEL[plr]);
            ChangeGold(player[plr], -10);
            ChangeGold(player[plr], plr + 1);
            UniPrintToAll(PlayerIngameNick(player[plr]) + " 님께서 " + ToStr(SToInt(characterName()) + plr) + "을 선택하셨습니다");
            Pickup(player[plr], FAN_CHAK[plr]);
            UniPrint(player[plr], "쿨다운 보는법: 빨간색-L 키 / 초록색-J 키 / 파란색-K 키 / 흰색-점프 키");
        }
    }
}

void loopPreservePlayerTable()
{
    int k;
    float dis;

    for (k = 9 ; k >= 0 ; k --)
    {
        if (player[k + 10] && !CurrentHealth(player[k]))
        {
            UniPrintToAll(ToStr(SToInt(characterName()) + k) + "(" + PlayerIngameNick(player[k]) + ")이(가) 격추되었습니다");
            player[k] = 0;
            MoveObject(FAN_CHAK[k], GetWaypointX(104), GetWaypointY(104));
            resetMonsterPlaced(k);
            player[k + 10] = 0;
        }
        else if (CurrentHealth(player[k]))
        {
            MoveObject(BkRevent(k), GetObjectX(player[k]), GetObjectY(player[k]));
            if (GetUnitFlags(player[k]) & 0x40)
            {
                if (HasItem(player[k], FAN_CHAK[k]))
                    Drop(player[k], FAN_CHAK[k]);
                player[k] = 0;
            }
            else
            {
                dis = Distance(GetObjectX(player[k]), GetObjectY(player[k]) + 4.0, GetObjectX(MODEL[k]), GetObjectY(MODEL[k]));
                if (dis <= 1.0 && HasEnchant(MODEL[k], "ENCHANT_VILLAIN")) { //stop
                    PauseObject(MODEL[k], 1);
                    EnchantOff(MODEL[k], "ENCHANT_VILLAIN");
                }
                else if (dis > 1.0) { //run
                    Frozen(MODEL[k], 0);
                    Enchant(MODEL[k], "ENCHANT_VILLAIN", 0.0);
                    if (!HasEnchant(MODEL[k], "ENCHANT_DETECTING")) {
                        MoveWaypoint(14, GetObjectX(MODEL[k]), GetObjectY(MODEL[k]));
                        AudioEvent(stepSound(k), 14);
                        Enchant(MODEL[k], "ENCHANT_DETECTING", stepSoundDelay(k));
                    }
                    Frozen(MODEL[k], 1);
                    LookWithAngle(MODEL[k], GetDirection(player[k]));
                    Walk(MODEL[k], GetObjectX(MODEL[k]), GetObjectY(MODEL[k]));
                    MoveObject(MODEL[k], GetObjectX(player[k]), GetObjectY(player[k]) + 4.0);
                }
                if (!HasEnchant(player[k], "ENCHANT_INVISIBLE"))
                    Enchant(player[k], "ENCHANT_INVISIBLE", 0.0);
                else
                    PlayerInputHandler(k);

                if (HasEnchant(player[k], "ENCHANT_PROTECT_FROM_MAGIC"))
                {
                    RestoreHealth(player[k], 1);
                    Effect("GREATER_HEAL", GetObjectX(player[k]), GetObjectY(player[k]), GetObjectX(player[k]), GetObjectY(player[k]) - 200.0);
                }
                else if (HasEnchant(GetLastItem(player[k]), "ENCHANT_VILLAIN")) {
                    MoveWaypoint(102, GetObjectX(player[k]), GetObjectY(player[k]));
                    RestoreHealth(player[k], 100);
                    AudioEvent("RegenerationOn", 102);
                    Delete(GetLastItem(player[k]));
                }
                cooldownDotSystem(k);
            }
        }
    }
    FrameTimer(1, loopPreservePlayerTable);
}

void PlayerInputHandler(int plr)
{
    if (HasEnchant(player[plr], "ENCHANT_INFRAVISION"))
        EnchantOff(player[plr], "ENCHANT_INFRAVISION");
    CallFunctionWithArg(SkillFuncPtr() + PlayerInputTable(CheckPlayerInput(player[plr])), plr);
}

int PlayerInputTable(int key)
{
    int arr[100];

    if (key < 0)
    {
        arr[48] = 1; arr[47] = 2; arr[49] = 3; arr[7] = 4;
        return 0;
    }
    return arr[key];
}

int BkRevent(int num)
{
    int arr[10];
    int i;

    if (num == -1)
    {
        arr[0] = Object("ReventBaseOffset");
        for (i = 1 ; i < 10 ; i ++)
            arr[i] = arr[0] + (i * 2);
        return 0;
    }
    return arr[num];
}

void DecreaseCooldown(int arg_0)
{
    int i;
    //40, 50, 60, 70
    //41, 51, 61, 71
    for(i = 0; i < 40 ; i += 10)
    {
        if (MAGIC_ORB[arg_0 + 40 + i])
        {
            MAGIC_ORB[arg_0 + 40 + i] --;
            if (!MAGIC_ORB[arg_0 + 40 + i])
                UniPrint(player[arg_0], "지금 " + ToStr(SToInt(skillName()) + (i / 10)) + " 스킬 쿨다운이 완료되었습니다");
        }
        else if (!IsObjectOn(MAGIC_ORB[arg_0 + i]) && CurrentHealth(player[arg_0]))
            MAGIC_ORB[arg_0 + i] = CreateObject(ToStr(SToInt(cooldownDotType()) + (i / 10)), 103);
    }
}

string skillName()
{
    string table = "L 키(빨간색)"; "J 키(초록색)"; "K 키(파란색)"; "점프(흰색)";

    return table;
}

string cooldownDotType()
{
    string table = {"HealOrb", "CharmOrb", "DrainManaOrb", "ManaBombOrb"};

    return table;
}
void cooldownDotSystem(int arg_0) {
    int i;

    DecreaseCooldown(arg_0);
    for(i = 0 ; i < 40 ; i += 10) {
        if (IsObjectOn(MAGIC_ORB[arg_0 + i]))
            MoveObject(MAGIC_ORB[arg_0 + i], GetObjectX(player[arg_0]) + dotPosX(i / 10), GetObjectY(player[arg_0]) - 60.0);
    }
}
float dotPosX(int arg_0) {
    float var_0[4];

    if (arg_0 == -1) {
        var_0[0] = -30.0;
        var_0[1] = -10.0;
        var_0[2] = 10.0;
        var_0[3] = 30.0;
        return var_0[0];
    }
    return var_0[arg_0];
}
int setGoldResetBeacon(int arg_0, int arg_1) { //mode(0: release, 1: insert), value
    int var_0;

    if (var_0 == 0)
        var_0 = Object("goldResetBeacon");
    if (arg_0 == 1)
        LookWithAngle(var_0, arg_1);
    return GetDirection(var_0);
}
void resetYourGold() {
    if (setGoldResetBeacon(0, 0) == 0 && GetGold(other) > 0) {
        ChangeGold(other, -16777216);
    }
    else {
        if (MaxHealth(other) == 150) {
            Delete(GetLastItem(other));
            Delete(GetLastItem(other));
            MoveObject(other, GetWaypointX(3), GetWaypointY(3));
        }
        else {
            MoveObject(other, 4723.0, 4028.0);
            Frozen(other, 1);
            UniPrint(other, "죄송합니다 , 이 맵은 오직 전사만 입장 가능합니다 .");
        }
    }
    EnchantOff(other, "ENCHANT_AFRAID");
    EnchantOff(other, "ENCHANT_HASTED");
    EnchantOff(other, "ENCHANT_SLOWED");
    EnchantOff(other, "ENCHANT_ANCHORED");
    if (!HasEnchant(other, "ENCHANT_ANTI_MAGIC"))
        Enchant(other, "ENCHANT_ANTI_MAGIC", 0.0);
}
void autoSelectToCharacter()
{
    int plr = 0;

    if (CurrentHealth(other))
    {
        plr = GetGold(other);
        if (plr > 0 && plr <= 10)
            MoveObject(other, GetWaypointX(3 + plr), GetWaypointY(3 + plr));
    }
}

void resetOff()
{
    SetMemory(0x5D5330, 0);
    setGoldResetBeacon(1, 1);
}

void randomRespawnLocation() {
    int var_0 = Random(15, 32);

    MoveObject(other, GetWaypointX(var_0), GetWaypointY(var_0));
    Effect("TELEPORT", GetWaypointX(var_0), GetWaypointY(var_0), 0.0, 0.0);
    Effect("SMOKE_BLAST", GetWaypointX(var_0), GetWaypointY(var_0), 0.0, 0.0);
    AudioEvent("BlindOff", var_0);
}

void resetMonsterPlaced(int arg_0) {
    int var_0;

    var_0 = arg_0 + 4;
    if (arg_0 < 5) {
        MoveObject(MODEL[arg_0], GetWaypointX(var_0) - 32.0, GetWaypointY(var_0) - 32.0);
        LookWithAngle(MODEL[arg_0], 32);
    }
    else {
        MoveObject(MODEL[arg_0], GetWaypointX(var_0) + 32.0, GetWaypointY(var_0) + 32.0);
        LookWithAngle(MODEL[arg_0], 160);
    }

    //Dots devide.
    //array size. 80
    //dots: 0-9, 10-19, 20-29, 30-39
    //value: 40-49, 50-59, 60-69, 70-79

    for(var_0 = arg_0 ; var_0 < 40 ; var_0 += 10) {
        if (IsObjectOn(MAGIC_ORB[var_0]))
            Delete(MAGIC_ORB[var_0]);
        if (GAME_MODE)
            MAGIC_ORB[var_0 + 40] = 0;
    }
    Frozen(MODEL[arg_0], 1);
}

int SkillFuncPtr()
{
    StopScript(SkillFuncPtr);
}

void skillSneak(int arg_0)
{
    int time[10];

    if (!time[0])
    {
        time[0] = 20; time[1] = 25; time[2] = 20; time[3] = 20; time[4] = 35;
        time[5] = 25; time[6] = 30; time[7] = 20; time[8] = 15; time[9] = 15;
        return;
    }
    if (!MAGIC_ORB[arg_0 + 40] && !HasEnchant(player[arg_0], "ENCHANT_ANCHORED"))
    {
        if (!COOLDOWN[arg_0])
        {
            MAGIC_ORB[arg_0 + 40] = time[arg_0] * 30;
            COOLDOWN[arg_0] = 1;
            CallFunctionWithArg(SkillAFuncPtr() + arg_0, arg_0);
            Delete(MAGIC_ORB[arg_0]);
        }
    }
    else
        NotifyCurrentCooldown(arg_0, MAGIC_ORB[arg_0 + 40]);
}

void skillEyeofwolf(int arg_0)
{
    int time[10];

    if (!time[0])
    {
        time[0] = 30; time[1] = 30; time[2] = 30; time[3] = 30; time[4] = 30;
        time[5] = 40; time[6] = 30; time[7] = 30; time[8] = 30; time[9] = 30;
        return;
    }
    if (!MAGIC_ORB[arg_0 + 50] && !HasEnchant(player[arg_0], "ENCHANT_ANCHORED"))
    {
        if (!COOLDOWN[arg_0 + 10])
        {
            COOLDOWN[arg_0 + 10] = 1;
            MAGIC_ORB[arg_0 + 50] = time[arg_0] * 30;
            CallFunctionWithArg(SkillSFuncPtr() + arg_0, arg_0);
            Delete(MAGIC_ORB[arg_0 + 10]);
        }
    }
    else
        NotifyCurrentCooldown(arg_0, MAGIC_ORB[arg_0 + 50]);
}

void harpoonEvent(int arg_0, int arg_1)
{
    int time[10];

    Delete(arg_1);
    if (!time[0])
    {
        time[0] = 5; time[1] = 5; time[2] = 5; time[3] = 8; time[4] = 10;
        time[5] = 8; time[6] = 5; time[7] = 5; time[8] = 5; time[9] = 5;
    }
    else if (!MAGIC_ORB[arg_0 + 60] && !HasEnchant(player[arg_0], "ENCHANT_ANCHORED"))
    {
        if (!COOLDOWN[arg_0 + 20])
        {
            COOLDOWN[arg_0 + 20] = 1;
            MAGIC_ORB[arg_0 + 60] = time[arg_0] * 30;
            CallFunctionWithArg(SkillDFuncPtr() + arg_0, arg_0);
            Delete(MAGIC_ORB[arg_0 + 20]);
        }
    }
    else
        NotifyCurrentCooldown(arg_0, MAGIC_ORB[arg_0 + 60]);
}

void skillOnJump(int arg_0)
{
    int time[10];

    if (!time[0])
    {
        time[0] = 20; time[1] = 15; time[2] = 35; time[3] = 30; time[4] = 40;
        time[5] = 3; time[6] = 20; time[7] = 10; time[8] = 30; time[9] = 3;
    }
    else if (!MAGIC_ORB[arg_0 + 70] && !HasEnchant(player[arg_0], "ENCHANT_ANCHORED"))
    {
        if (!COOLDOWN[arg_0 + 30])
        {
            MAGIC_ORB[arg_0 + 70] = time[arg_0] * 30;
            COOLDOWN[arg_0 + 30] = 1;
            CallFunctionWithArg(SkillJFuncPtr() + arg_0, arg_0);
            Delete(MAGIC_ORB[arg_0 + 30]);
        }
    }
    else
        NotifyCurrentCooldown(arg_0, MAGIC_ORB[arg_0 + 70]);
}

//43 way not used

int IsPlayerUnit(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 8) & 4;
    return false;
}

int IsMonsterUnit(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 8) & 2;
    return false;
}

int IsMissileUnit(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 8) & 1;
    return false;
}

void DetectedSpecificIndex(int curId)
{
    if (!IsMissileUnit(curId))
        return;
    int thingId = GetUnitThingID(curId);

    if (thingId == 1179)
    {
        if (CheckOwner(curId) >= 0 && !HasEnchant(curId, "ENCHANT_FREEZE"))
            normalAttackEvent(CheckOwner(curId), curId);
    }
    else if (thingId == 526)
        Delete(curId);
}

void LoopSearchIndex()
{
    int curId, tempId;
    int link;

    if (!link)
        link = GetScrDataField(LoopSearchIndex);
    while (Unknownb9(0x750710))
    {
        Unused59(link + 4, Unknownb9(Unknownb9(0x750710) + 0x2c));
        if (curId)
        {
            while (curId < tempId)
            {
                Unused59(link, curId + 1);
                DetectedSpecificIndex(curId);
            }
            break;
        }
        curId = tempId;
        break;
    }
    FrameTimer(1, LoopSearchIndex);
}

void normalAttackEvent(int plr, int cur)
{
    int k = 0;
    int mis;

    if (CurrentHealth(player[plr]))
    {
        if (!HasEnchant(player[plr], "ENCHANT_DETECTING"))
        {
            MoveWaypoint(95, GetObjectX(cur), GetObjectY(cur));
            while(k < getRangeAttackCount(plr))
            {
                mis = CreateObject(ToStr(SToInt(MissileNameTables()) + plr), 95);
                Enchant(mis, "ENCHANT_FREEZE", 0.0);
                SetOwner(player[plr], mis);
                LookWithAngle(mis, GetDirection(player[plr]));
                PushObject(mis, 30.0, GetObjectX(player[plr]), GetObjectY(player[plr]));
                k += 1;
            }
            Enchant(player[plr], "ENCHANT_DETECTING", 0.7);
        }
    }
    Delete(cur);
}

int getRangeAttackCount(int num)
{
    int info[10];

    if (num == -1)
    {
        info[0] = 2;
        info[1] = 2;
        info[2] = 2;
        info[3] = 1;
        info[4] = 2;
        info[5] = 2;
        info[6] = 2;
        info[7] = 1;
        info[8] = 1;
        info[9] = 2;
        return info[0];
    }
    return info[num];
}

string MissileNameTables()
{
    string table = {
        "YellowStarShot", "PitifulFireball", "MercArcherArrow", "ThrowingStone", "LightningBolt",
        "ImpShot", "MercArcherArrow", "DeathBallFragment", "OgreShuriken", "CherubArrow"
        };
    return table;
}

void spawnMapPotions()
{
    int k;
    int arr[10];
    int timer;

    if (!timer)
    {
        for (k = 9 ; k >= 0 ; k --)
        {
            if (!IsObjectOn(arr[k]))
            {
                arr[k] = CreateObject("AmuletOfClarity", k + 85);
                Enchant(arr[k], "ENCHANT_VILLAIN", 0.0);
            }
        }
        timer = 70;
    }
    else
        timer --;
    SecondTimer(1, spawnMapPotions);
}

int SkillAFuncPtr()
{
    StopScript(GWizSkillA);
}

void GWizSkillA(int arg_0)
{
    int var_0;
    float var_1;
    float var_2;
    int var_3;

    if (CurrentHealth(player[arg_0]) && var_0 < 22) {
        if (var_0 == 0) {
            var_3 = GetDirection(player[arg_0]);
            var_1 = unitForward(player[arg_0], 1, -10.0); //dx
            var_2 = unitForward(player[arg_0], 0, -10.0); //dy
            MoveWaypoint(44, GetObjectX(player[arg_0]) + var_1 + (var_2 * 10.0), GetObjectY(player[arg_0]) + var_2 - (var_1 * 10.0));
            MoveWaypoint(45, GetObjectX(player[arg_0]) + var_1 - (var_2 * 10.0), GetObjectY(player[arg_0]) + var_2 + (var_1 * 10.0));
            AudioEvent("GlyphCast", 44);
            var_0 = 1;
        }
        spawnArrows(arg_0, 44, var_3, var_1, var_2);
        spawnArrows(arg_0, 45, var_3, var_1, var_2);
        MoveWaypoint(44, GetWaypointX(44) - var_2, GetWaypointY(44) + var_1);
        MoveWaypoint(45, GetWaypointX(45) + var_2, GetWaypointY(45) - var_1);
        GreenLightningFx(FloatToInt(GetWaypointX(44)), FloatToInt(GetWaypointY(44)), FloatToInt(GetWaypointX(45)), FloatToInt(GetWaypointY(45)), 12);
        FrameTimerWithArg(1, arg_0, GWizSkillA);
        var_0 += 1;
    }
    else {
        COOLDOWN[arg_0] = 0;
        var_0 = 0;
    }
}

void DemonSkillA(int arg_0)
{
    int var_0;
    float var_1;
    float var_2;
    int var_3;

    if (CurrentHealth(player[arg_0]) && var_0 < 30)
    {
        if (var_0 == 0) {
            var_1 = unitForward(player[arg_0], 1, 23.0);
            var_2 = unitForward(player[arg_0], 0, 23.0);
            MoveWaypoint(48, GetObjectX(player[arg_0]) + var_1, GetObjectY(player[arg_0]) + var_2);
            var_0 = 1;
        }
        else {
            MoveWaypoint(48, GetWaypointX(48) + var_1, GetWaypointY(48) + var_2);
            var_3 = CreateObject("CarnivorousPlant", 48);
            LookWithAngle(var_3, arg_0);
            Frozen(var_3, 1);
            LookWithAngle(var_3, arg_0);
            DeleteObjectTimer(var_3, 1);
            SetCallback(var_3, 9, demonTouched);
            DeleteObjectTimer(CreateObject("MediumFireBoom", 48), 6);
            AudioEvent("HammerMissing", 48);
            var_0 += 1;
        }
        FrameTimerWithArg(1, arg_0, DemonSkillA);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0] = 0;
    }
}

void mecaGolemSkillA(int arg_0) {
    int var_0;
    float var_1;
    float var_2;
    int var_3;

    if (CurrentHealth(player[arg_0]) && var_0 < 30)
    {
        if (var_0 == 0) {
            var_1 = unitForward(player[arg_0], 1, 24.0);
            var_2 = unitForward(player[arg_0], 0, 24.0);
            MoveWaypoint(51, GetObjectX(player[arg_0]) + var_1, GetObjectY(player[arg_0]) + var_2);
        }
        else {
            MoveWaypoint(51, GetWaypointX(51) + var_1, GetWaypointY(51) + var_2);
            var_3 = CreateObject("CarnivorousPlant", 51);
            LookWithAngle(var_3, arg_0);
            Frozen(var_3, 1);
            SetCallback(var_3, 9, mecaGolemTouch);
            DeleteObjectTimer(var_3, 1);
            Effect("SENTRY_RAY", GetWaypointX(51), GetWaypointY(51), GetWaypointX(51) + var_1, GetWaypointY(51) + var_2);
        }
        var_0 += 1;
        FrameTimerWithArg(1, arg_0, mecaGolemSkillA);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0] = 0;
    }
}

void stoneGolemSkillA(int arg_0)
{
    float var_0;
    float var_1;
    int var_2;
    int var_3[3];
    int i;

    if (CurrentHealth(player[arg_0]))
    {
        var_0 = unitForward(player[arg_0], 1, 20.0); //-dx
        var_1 = unitForward(player[arg_0], 0, 20.0); //-dy
        MoveWaypoint(58, GetObjectX(player[arg_0]) + var_0, GetObjectY(player[arg_0]) + var_1);
        MoveWaypoint(82, GetWaypointX(58) - var_1, GetWaypointY(58) + var_0);
        MoveWaypoint(83, GetWaypointX(58) + var_1, GetWaypointY(58) - var_0);
        var_3[0] = CreateObject("ArcherArrow", 58);
        var_3[1] = CreateObject("ArcherArrow", 82);
        var_3[2] = CreateObject("ArcherArrow", 83);

        for(i = 0 ; i < 3 ; i += 1)
        {
            Enchant(var_3[i], "ENCHANT_HASTED", 0.0);
            Enchant(var_3[i], "ENCHANT_REFLECTIVE_SHIELD", 0.0);
            SetOwner(player[arg_0], var_3[i]);
            LookWithAngle(var_3[i], GetDirection(player[arg_0]));
            PushObject(var_3[i], -20.0, GetObjectX(var_3[i]) + var_0, GetObjectY(var_3[i]) + var_1);
        }
        AudioEvent("AwardSpell", 58);
        DeleteObjectTimer(CreateObject("ManaBombCharge", 58), 20);
    }
    COOLDOWN[arg_0] = 0;
}

void beholderSkillA(int arg_0)
{
    int var_0;
    int var_1;
    
    if (CurrentHealth(player[arg_0]) && var_0 < 2)
    {
        if (var_0 == 0) {
            var_1 = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], var_1);
        }
        else if (var_0 == 1) {
            MoveWaypoint(59, GetObjectX(var_1), GetObjectY(var_1));
            CastSpellObjectObject("SPELL_PULL", var_1, var_1);
            CastSpellObjectObject("SPELL_PULL", var_1, var_1);
            Delete(var_1);
            DeleteObjectTimer(CreateObject("PlayerWaypoint", 59), 25);
            DeleteObjectTimer(CreateObject("PlayerWaypoint", 59), 25);
            FrameTimerWithArg(10, arg_0 + (256 * 59), bombLightningSparks);
        }
        var_0 += 1;
        FrameTimerWithArg(1, arg_0, beholderSkillA);
    }
    else {
        if (IsObjectOn(var_1))
            Delete(var_1);
        COOLDOWN[arg_0] = 0;
        var_0 = 0;
    }
}

void RWizSkillA(int arg_0)
{
    int var_0;
    float pos_x;
    float pos_y;
    string name = "COUNTERSPELL_EXPLOSION";
    int i;
    int unit[8];
    int pointer;

    if (CurrentHealth(player[arg_0]) && var_0 < 100)
    {
        if (!pointer)
        {
            pointer = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], pointer);
            DeleteObjectTimer(pointer, 3);
        }
        else
        {
            pos_x = mathSpiral(var_0 * 2);
            pos_y = mathSpiral(var_0 * 2 + 1);
            if (!var_0)
            {
                MoveWaypoint(62, GetObjectX(pointer), GetObjectY(pointer));
                AudioEvent("HecubahDieFrame0A", 62);
                for (i = 7 ; i >= 0 ; i --)
                {
                    unit[i] = CreateObject("Bomber", 106);
                    LookWithAngle(unit[i], arg_0);
                    Damage(unit[i], 0, 255, -1);
                    ObjectOff(unit[i]);
                    Frozen(unit[i], 1);
                    SetCallback(unit[i], 9, RWizTouched);
                }
            }
            /*MoveWaypoint(63, GetWaypointX(62) + pos_x, GetWaypointY(62) + pos_y);
            Effect(name, GetWaypointX(63), GetWaypointY(63), 0.0, 0.0);
            MoveObject(unit[0], GetWaypointX(63), GetWaypointY(63));*/

            //for (i = 45 ; i <= 315 ; i += 45)
            for (i = 0 ; i <= 315 ; i += 45)
            {
                MoveWaypoint(63, GetWaypointX(62) + Rx_ratio(pos_x, pos_y, i), GetWaypointY(62) + Ry_ratio(pos_x, pos_y, i));
                Effect(name, GetWaypointX(63), GetWaypointY(63), 0.0, 0.0);
                MoveObject(unit[i / 45], GetWaypointX(63), GetWaypointY(63));
            }
            var_0 ++;
        }
        FrameTimerWithArg(1, arg_0, RWizSkillA);
    }
    else
    {
        COOLDOWN[arg_0] = 0;
        var_0 = 0;
        for (i = 7 ; i >= 0 ; i --)
            Delete(unit[i]);
        if (pointer > 0)
            pointer = 0;
    }
}

void horrendousSkillA(int arg_0) {
    int var_0;
    int var_1;
    
    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 60) {
        if (var_0 == 0) {
            var_1 = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], var_1);
            var_0 = -1;
        }
        else if (var_0 == -1) {
            MoveWaypoint(68, GetObjectX(var_1), GetObjectY(var_1));
            LookWithAngle(var_1, 68);
            controlBlock(arg_0, var_1, 100.0, 0);
            Delete(var_1);
            var_0 = 1;
        }
        else
            var_0 += 1;
        FrameTimerWithArg(1, arg_0, horrendousSkillA);
    }
    else {
        controlBlock(arg_0, 0, 0.0, 1);
        COOLDOWN[arg_0] = 0;
        var_0 = 0;
    }
}

void hecubahSkillA(int arg_0)
{
    float var_0;
    float var_1;
    int var_2 = 0;
    int var_3;

    if (CurrentHealth(player[arg_0]))
    {
        var_0 = unitForward(player[arg_0], 1, 30.0);
        var_1 = unitForward(player[arg_0], 0, 30.0);
        MoveWaypoint(75, GetObjectX(player[arg_0]) + var_0, GetObjectY(player[arg_0]) + var_1);

        while(var_2 < 12)
        {
            var_3 = CreateObject("CarnivorousPlant", 75);
            SetOwner(player[arg_0], var_3);
            Frozen(var_3, 1);
            SetCallback(var_3, 9, deathrayTouched);
            LookWithAngle(var_3, arg_0);
            DeleteObjectTimer(var_3, 1);
            MoveWaypoint(75, GetWaypointX(75) + var_0, GetWaypointY(75) + var_1);
            AudioEvent("DeathRayCast", 75);
            var_2 += 1;
        }
        Effect("DEATH_RAY", GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), GetWaypointX(75), GetWaypointY(75));
        AudioEvent("HecubahTaunt", 75);
    }
    COOLDOWN[arg_0] = 0;
}

void ogreSkillA(int arg_0) {
    float var_0;
    float var_1;
    int var_2;
    int var_3;

    if (CurrentHealth(player[arg_0]) > 0 && var_2 < 21) {
        if (var_2 == 0) {
            var_0 = unitForward(player[arg_0], 1, 26.0);
            var_1 = unitForward(player[arg_0], 0, 26.0);
            MoveWaypoint(78, GetObjectX(player[arg_0]) + var_0, GetObjectY(player[arg_0]) + var_1);
            AudioEvent("CrossBowShoot", 78);
            Enchant(player[arg_0], "ENCHANT_ANCHORED", 0.0);
        }
        else {
            MoveWaypoint(78, GetWaypointX(78) + var_0, GetWaypointY(78) + var_1);
            makeStar(78, 50.0);
            var_3 = CreateObject("CarnivorousPlant", 78);
            Frozen(var_3, 1);
            LookWithAngle(var_3, arg_0);
            SetCallback(var_3, 9, OgreCollisionEvent);
            DeleteObjectTimer(var_3, 1);
        }
        var_2 += 1;
        FrameTimerWithArg(1, arg_0, ogreSkillA);
    }
    else {
        EnchantOff(player[arg_0], "ENCHANT_ANCHORED");
        var_2 = 0;
        COOLDOWN[arg_0] = 0;
    }
}

void lichSkillA(int arg_0)
{
    int rep;
    int ray_addr;
    int ray_id;
    float math_x;
    float math_y;
    
    if (CurrentHealth(player[arg_0]) && rep < 2)
    {
        if (!rep)
        {
            math_x = UnitAngleCos(player[arg_0], 25.0);
            math_y = UnitAngleSin(player[arg_0], 25.0);
            MoveWaypoint(96, GetObjectX(player[arg_0]) + math_x, GetObjectY(player[arg_0]) + math_y);
            Effect("SENTRY_RAY", GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), GetObjectX(player[arg_0]) + (math_x * 8.0), GetObjectY(player[arg_0]) + (math_y * 8.0));
            ray_addr = SentryRay();
            ray_id = GetMemory(ray_addr + 0x2c);
            SetOwner(player[arg_0], ray_id);
            SetRayRadian(player[arg_0], ray_addr);
            Enchant(player[arg_0], "ENCHANT_INVULNERABLE", 0.9);
            FrameTimerWithArg(4, arg_0, lichSkillA);
        }
        else
        {
            MoveObject(ray_id, GetWaypointX(96), GetWaypointY(96));
            FrameTimerWithArg(10, arg_0, lichSkillA);
        }
        rep ++;
    }
    else {
        rep = 0;
        COOLDOWN[arg_0] = 0;
        if (ray_id)
        {
            ObjectOff(ray_id);
            MoveObject(ray_id, GetWaypointX(108), GetWaypointY(108));
        }
    }
}

void spawnArrows(int plr, int wp, int angle, float pos_x, float pos_y) { //player_idx, wp, direction
    int k;
    int arr[4];

    for (k = 3 ; k >= 0 ; k --)
    {
        arr[k] = CreateObject("WeakArcherArrow", wp);
        SetOwner(player[plr], arr[k]);
        LookWithAngle(arr[k], angle);
        PushObject(arr[k], -30.0, GetObjectX(arr[k]) - pos_x, GetObjectY(arr[k]) - pos_y);
    }
}

int SkillSFuncPtr()
{
    StopScript(GWizSkillS);
}

void GWizSkillS(int arg_0) {
    int var_0;
    int var_1;
    int var_2;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 90) {
        if (var_0 == 0) {
            MoveWaypoint(46, GetObjectX(player[arg_0]) - unitForward(player[arg_0], 1, -23.0), GetObjectY(player[arg_0]) - unitForward(player[arg_0], 0, -23.0));
            var_1 = CreateObject("willOWisp", 46);
            Enchant(var_1, "ENCHANT_INVULNERABLE", 0.0);
            Enchant(var_1, "ENCHANT_ANTI_MAGIC", 0.0);
            Enchant(var_1, "ENCHANT_BLINDED", 0.0);
            Enchant(var_1, "ENCHANT_RUN", 0.0);
            AggressionLevel(var_1, 0.0);
            var_2 = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], var_1);
            SetOwner(player[arg_0], var_2);
            Enchant(player[arg_0], "ENCHANT_ANCHORED", 0.0);
            var_0 = 1;
            FrameTimerWithArg(1, arg_0, GWizSkillS);
        }
        else {
            MoveWaypoint(105, GetObjectX(var_1), GetObjectY(var_1));
            MoveWaypoint(46, GetObjectX(var_2), GetObjectY(var_2));
            if (var_0 % 3 == 0) {
                localRisk(arg_0, 80, 105, 60.0);
            }
            PushObject(var_1, -3.5, GetObjectX(var_2), GetObjectY(var_2));
            rhombusRaiserFX(var_1);
            var_0 += 1;
            FrameTimerWithArg(1, arg_0, GWizSkillS);
        }
    }
    else {
        var_0 = 0;
        EnchantOff(player[arg_0], "ENCHANT_ANCHORED");
        COOLDOWN[arg_0 + 10] = 0;
        Delete(var_1);
        Delete(var_2);
    }
}

void DemonSkillS(int arg_0) {
    int var_0;
    int var_1 = 0;
    int var_2;
    float var_3;
    float var_4;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 20) {
        var_3 = mathSine(var_0 * 18, 38.0);
        var_4 = mathSine(var_0 * 18 + 90, 38.0);
        MoveWaypoint(49, GetObjectX(player[arg_0]) + var_3, GetObjectY(player[arg_0]) + var_4);
        AudioEvent("GolemHitting", 49);
        
        while(var_1 < 6) {
            var_2 = CreateObject("CarnivorousPlant", 49);
            LookWithAngle(var_2, arg_0);
            Frozen(var_2, 1);
            DeleteObjectTimer(var_2, 1);
            SetCallback(var_2, 9, demonTouched2);
            DeleteObjectTimer(CreateObject("Explosion", 49), 5);
            MoveWaypoint(49, GetWaypointX(49) + var_3, GetWaypointY(49) + var_4);
            var_1 += 1;
        }
        var_0 += 1;
        FrameTimerWithArg(1, arg_0, DemonSkillS);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 10] = 0;
    }
}

void mecaGolemSkillS(int arg_0) {
    int var_0;
    int var_1;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 2) {
        if (var_0 == 0) {
            var_0 = 1;
            var_1 = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], var_1);
            FrameTimerWithArg(1, arg_0, mecaGolemSkillS);
        }
        else if (var_0 == 1) {
            if (IsVisibleTo(player[arg_0], var_1)) {
                MoveWaypoint(52, GetObjectX(var_1), GetObjectY(var_1));
                Delete(var_1);
                Effect("LIGHTNING", GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), GetWaypointX(52), GetWaypointY(52));
                MoveObject(player[arg_0], GetWaypointX(52), GetWaypointY(52));
                aroundSpreadMissiles(arg_0);
            }
            else
                UniPrint(player[arg_0], "마우스의 위치가 벽 너머에 있습니다, 현재 마우스 포인터의 위치로 이동이 불가능합니다");
            var_0 = 2;
            FrameTimerWithArg(1, arg_0, mecaGolemSkillS);
        }
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 10] = 0;
        Delete(var_1);
    }
}

void stoneGolemSkillS(int arg_0) {
    float var_0;
    float var_1;
    int var_2;
    int i;

    if (CurrentHealth(player[arg_0]) > 0) {
        Enchant(player[arg_0], "ENCHANT_FREEZE", 2.0);
        var_0 = unitForward(player[arg_0], 1, 30.0);
        var_1 = unitForward(player[arg_0], 0, 30.0);
        MoveWaypoint(58, GetObjectX(player[arg_0]) + var_0, GetObjectY(player[arg_0]) + var_1);
        for(i = 0; i < 12; i += 1) {
            MoveWaypoint(58, GetWaypointX(58) + var_0, GetWaypointY(58) + var_1);
            var_2 = CreateObject("wizard", 58);
            SetOwner(player[arg_0], var_2);
            CastSpellObjectLocation("SPELL_FIST", var_2, GetWaypointX(58), GetWaypointY(58));
            DeleteObjectTimer(var_2, 1);
        }
    }
    COOLDOWN[arg_0 + 10] = 0;
}

void beholderSkillS(int arg_0) {
    int var_0;
    float var_1;
    float var_2;
    int var_3;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 120) {
        var_1 = mathSine(Random(0, 359) + 90, RandomFloat(30.0, 200.0));
        var_2 = mathSine(Random(0, 359), RandomFloat(30.0, 200.0));
        MoveWaypoint(60, GetObjectX(player[arg_0]) + var_1, GetObjectY(player[arg_0]) + var_2);
        var_3 = CreateObject("CarnivorousPlant", 60);
        Frozen(var_3, 1);
        LookWithAngle(var_3, arg_0);
        SetOwner(player[arg_0], var_3);
        SetCallback(var_3, 9, lightningTouched2);
        DeleteObjectTimer(var_3, 1);
        Effect("RICOCHET", GetWaypointX(60), GetWaypointY(60), 0.0, 0.0);
        Effect("LIGHTNING", GetWaypointX(60), GetWaypointY(60), GetWaypointX(60), GetWaypointY(60) - 100.0);
        AudioEvent("LightningBolt", 60);
        BeholderAroundDamage(arg_0);
        var_0 += 1;
        FrameTimerWithArg(1, arg_0, beholderSkillS);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 10] = 0;
    }
}

void RWizSkillS(int arg_0) {
    int var_0;
    int var_1;
    int var_2;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 51) {
        if (var_0 == 0) {
            var_1 = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], var_1);
            Enchant(player[arg_0], "ENCHANT_INVULNERABLE", 3.0);
            var_0 = -1;
        }
        else if (var_0 == -1) {
            MoveWaypoint(64, GetObjectX(var_1), GetObjectY(var_1));
            Delete(var_1);
            var_0 = 1;
        }
        else {
            MoveWaypoint(65, GetWaypointX(64) + RandomFloat(-160.0, 160.0), GetWaypointY(64) + RandomFloat(-160.0, 160.0));
            var_2 = CreateObject("flame", 65);
            Raise(var_2, 200.0);
            SetOwner(player[arg_0], var_2);
            DeleteObjectTimer(var_2, 21);
            var_2 = CreateObject("CaveRocksMedium", 65);
            LookWithAngle(var_2, arg_0);
            Raise(var_2, 200.0);
            var_0 += 1;
            FrameTimerWithArg(22, var_2, explosionDelayFireStorm);
        }
        FrameTimerWithArg(3, arg_0, RWizSkillS);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 10] = 0;
        Delete(var_1);
    }
}

void horrendousSkillS(int arg_0) {
    int var_0;
    int var_1;
    
    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 60) {
        if (var_0 == 0) {
            var_1 = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], var_1);
            var_0 -= 1;
        }
        else if (var_0 == -1) {
            MoveWaypoint(69, GetObjectX(var_1), GetObjectY(var_1));
            Delete(var_1);
            var_0 = 1;
        }
        else {
            MoveWaypoint(70, GetWaypointX(69) + RandomFloat(-110.0, 110.0), GetWaypointY(69) + RandomFloat(-110.0, 110.0));
            var_1 = CreateObject("CherubArrow", 70);
            SetOwner(player[arg_0], var_1);
            LookWithAngle(var_1, 64);
            Raise(var_1, 200.0);
            DeleteObjectTimer(var_1, 22);
            AudioEvent("CrossBowShoot", 70);
            var_0 += 1;
            localRisk(arg_0, 2, 69, 300.0);
        }
        FrameTimerWithArg(1, arg_0, horrendousSkillS);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 10] = 0;
        Delete(var_1);
    }
}

void hecubahSkillS(int arg_0) {
    int var_0;
    int var_1;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 2) {
        if (var_0 == 0) {
            MoveWaypoint(75, GetObjectX(player[arg_0]), GetObjectY(player[arg_0]));
            var_1 = CreateObject("ManaBombCharge", 75);
            AudioEvent("ManaBombCast", 75);
            Effect("JIGGLE", GetWaypointX(75), GetWaypointY(75), 50.0, 0.0);
            Enchant(player[arg_0], "ENCHANT_FREEZE", 0.0);
            Enchant(player[arg_0], "ENCHANT_ANCHORED", 0.0);
            Enchant(player[arg_0], "ENCHANT_INVULNERABLE", 2.0);
            stunPlayer(arg_0, 75, 350.0);
            FrameTimerWithArg(57, arg_0, hecubahSkillS);
        }
        else if (var_0 == 1) {
            localRisk(arg_0, 200, 75, 400.0);
            Effect("WHITE_FLASH", GetWaypointX(75), GetWaypointY(75), 0.0, 0.0);
            EnchantOff(player[arg_0], "ENCHANT_ANCHORED");
            EnchantOff(player[arg_0], "ENCHANT_FREEZE");
            FrameTimerWithArg(5, arg_0, hecubahSkillS);
        }
        var_0 += 1;
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 10] = 0;
        Delete(var_1);
    }
}

void ogreSkillS(int arg_0) {
    int var_0;
    int var_1;
    int i;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 37) {
        if (var_0 == 0) {
            MoveWaypoint(79, GetObjectX(player[arg_0]), GetObjectY(player[arg_0]));
            DeleteObjectTimer(CreateObject("ForceOfNatureCharge", 79), 30);
        }
        MoveWaypoint(80, GetWaypointX(79) - mathSine((var_0 % 36) * 10, 30.0), GetWaypointY(79) - mathSine(((var_0 % 36) * 10) + 90, 30.0));
        for(i = 0; i < 5 ; i += 1) {
            var_1 = CreateObject("FanChakramInMotion", 80);
            Enchant(var_1, "ENCHANT_FREEZE", 0.0);
            SetOwner(player[arg_0], var_1);
            PushObject(var_1, 20.0, GetWaypointX(79), GetWaypointY(79));
        }
        var_0 += 1;
        FrameTimerWithArg(1, arg_0, ogreSkillS);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 10] = 0;
    }
}

void lichSkillS(int arg_0) {
    int var_0;
    int var_1;
    int var_2[18];
    int i;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 100) {
        if (var_0 == 0) {
            var_1 = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], var_1);
            Enchant(player[arg_0], "ENCHANT_ANCHORED", 0.0);
        }
        else if (var_0 == 1) {
            MoveWaypoint(98, GetObjectX(var_1), GetObjectY(var_1));
            Delete(var_1);
            flagMode(arg_0, 0);
        }
        else {
            flagMode(0, 1);
        }
        var_0 += 1;
        FrameTimerWithArg(1, arg_0, lichSkillS);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 10] = 0;
        Delete(var_1);
        EnchantOff(player[arg_0], "ENCHANT_ANCHORED");
        flagMode(0, 2);
    }
}

float wispExplosionPos(int num, float size) {
    float arr[4];

    if (num == -1)
    {
        arr[0] = 1.0;
        arr[1] = -1.0;
        arr[2] = 0.0;
        arr[3] = 0.0;
        return arr[0];
    }
    return arr[num] * size;
}

float rhombusXY(int num, float size) {
    float arr[12];

    if (num == -1)
    {
        arr[0] = size;
        arr[1] = -size;
        arr[2] = 0.0;
        arr[3] = 0.0;
        arr[4] = 0.0;
        arr[5] = 0.0;
        arr[6] = size;
        arr[7] = -size;
        arr[8] = size;
        arr[9] = -size;
        arr[10] = 0.0;
        arr[11] = 0.0;
        return arr[0];
    }
    return arr[num];
}

void rhombusRaiserFX(int unit)
{
    int k = 0;

    while(k < 4)
    {
        Effect("SENTRY_RAY", GetObjectX(unit) + rhombusXY(k, 0.0), GetObjectY(unit) + rhombusXY(3 - k, 0.0), GetObjectX(unit) + rhombusXY(k + 4, 0.0), GetObjectY(unit) + rhombusXY(k + 8, 0.0));
        k += 1;
    }
}

void GWizTouched()
{
    if (CurrentHealth(other) && IsAttackedBy(other, self))
        Damage(other, self, 100, 14);
}

int SkillDFuncPtr()
{
    StopScript(GWizSkillD);
}

void GWizSkillD(int arg_0)
{
    int var_0;

    if (CurrentHealth(player[arg_0]))
    {
        MoveWaypoint(47, GetObjectX(player[arg_0]) + unitForward(player[arg_0], 1, 23.0), GetObjectY(player[arg_0]) + unitForward(player[arg_0], 0, 23.0));
        var_0 = CreateObject("greenFrog", 47);
        SetCallback(var_0, 9, GWizTouched2);
        AudioEvent("GlyphCast", 47);
        SetUnitMaxHealth(var_0, arg_0 + 1);
        DeleteObjectTimer(var_0, 22);
        Enchant(var_0, "ENCHANT_INVULNERABLE", 0.0);
        Enchant(var_0, "ENCHANT_HASTED", 0.0);
        Enchant(var_0, "ENCHANT_RUN", 0.0);
        PushObject(var_0, 200.0, GetObjectX(player[arg_0]), GetObjectY(player[arg_0]));
    }
    COOLDOWN[arg_0 + 20] = 0;
}

void DemonSkillD(int arg_0) {
    int var_0;
    int var_1;
    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 2) {
        if (var_0 == 0) {
            var_1 = CreateObject("moonglow", 2);
            DeleteObjectTimer(var_1, 30);
            SetOwner(player[arg_0], var_1);
            var_0 = 1;
            FrameTimerWithArg(1, arg_0, DemonSkillD);
        }
        else if (var_0 == 1) {
            MoveWaypoint(50, GetObjectX(var_1), GetObjectY(var_1));
            Delete(var_1);
            var_1 = CreateObject("FireSprite", 50);
            LinkFireSpriteBin(var_1);
            storageTemp(var_1, 1);
            Raise(var_1, 180.0);
            SetOwner(player[arg_0], var_1);
            Enchant(var_1, "ENCHANT_DEATH", 0.1);
            FrameTimerWithArg(3, arg_0, disableInvisible);
            var_0 = 2;
            FrameTimerWithArg(3, arg_0, DemonSkillD);
        }
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 20] = 0;
    }
}

void MecaGolemDSkill(int plr)
{
    int ptr;

    if (CurrentHealth(player[plr]))
    {
        COOLDOWN[plr + 20] = 0;
        ptr = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(player[plr]) + UnitAngleCos(player[plr], 23.0), GetObjectY(player[plr]) + UnitAngleSin(player[plr], 23.0));
        CreateObjectAt("InvisibleLightBlueLow", GetObjectX(ptr), GetObjectY(ptr));
        SetOwner(player[plr], ptr);
        LookWithAngle(ptr, GetDirection(player[plr]));
        FrameTimerWithArg(1, ptr, FlyingTrackingBullet);
    }
}

void stoneGolemSkillD(int arg_0) {
    float var_0;
    float var_1;
    int var_2;
    
    if (CurrentHealth(player[arg_0]))
    {
        var_0 = unitForward(player[arg_0], 1, 30.0);
        var_1 = unitForward(player[arg_0], 0, 30.0);
        MoveWaypoint(58, GetObjectX(player[arg_0]) + var_0, GetObjectY(player[arg_0]) + var_1);
        var_2 = CreateObject("boulder", 58);
        SetOwner(player[arg_0], var_2);
        Enchant(var_2, "ENCHANT_SHOCK", 0.0);
        Enchant(var_2, "ENCHANT_DEATH", 2.0);
        PushObject(var_2, 30.0, GetObjectX(player[arg_0]), GetObjectY(player[arg_0]));
    }
    COOLDOWN[arg_0 + 20] = 0;
}

void beholderSkillD(int arg_0) {
    if (CurrentHealth(player[arg_0]) > 0) {
        Enchant(player[arg_0], "ENCHANT_PROTECT_FROM_MAGIC", 1.0);
        CastSpellObjectLocation("SPELL_MAGIC_MISSILE", player[arg_0], GetObjectX(player[arg_0]) + unitForward(player[arg_0], 1, 23.0), GetObjectY(player[arg_0]) + unitForward(player[arg_0], 0, 23.0));
    }
    COOLDOWN[arg_0 + 20] = 0;
}

void RWizSkillD(int arg_0) {
    int var_0;
    int var_1;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 52) {
        if (var_0 == 0) {
            MoveWaypoint(67, GetObjectX(player[arg_0]) + unitForward(player[arg_0], 1, 30.0), GetObjectY(player[arg_0]) + unitForward(player[arg_0], 0, 30.0));
            var_1 = CreateObject("MovableStatueVictory4SW", 67);
            SetOwner(player[arg_0], var_1);
            LookWithAngle(var_1, arg_0);
        }
        else {
            lightningRisk(var_1);
        }
        var_0 += 1;
        FrameTimerWithArg(1, arg_0, RWizSkillD);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 20] = 0;
        Delete(var_1);
    }
}

void horrendousSkillD(int arg_0) {
    int var_0;
    int unit;
    float pos_x;
    float pos_y;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 21) {
        if (!var_0)
        {
            pos_x = unitForward(player[arg_0], 1, 20.0);
            pos_y = unitForward(player[arg_0], 0, 20.0);
            MoveWaypoint(71, GetObjectX(player[arg_0]) + pos_x, GetObjectY(player[arg_0]) + pos_y);
            MoveObject(GetMagic(), GetWaypointX(71), GetWaypointY(71));
            unit = CreateObject("Maiden", 71);
            LookWithAngle(unit, arg_0);
            Frozen(unit, 1);
            SetCallback(unit, 9, horrendousTouched);
        }
        else if (IsObjectOn(unit))
        {
            MoveWaypoint(71, GetWaypointX(71) + pos_x, GetWaypointY(71) + pos_y);
            MoveObject(unit, GetWaypointX(71), GetWaypointY(71));
            MoveObject(GetMagic(), GetWaypointX(71), GetWaypointY(71));
        }
        else
            var_0 = 255;
        var_0 ++;
        FrameTimerWithArg(1, arg_0, horrendousSkillD);
    }
    else {
        if (CurrentHealth(unit))
            Delete(unit);
        MoveObject(GetMagic(), GetWaypointX(107), GetWaypointY(107));
        var_0 = 0;
        COOLDOWN[arg_0 + 20] = 0;
    }
}

void hecubahSkillD(int arg_0) {
    int i;
    int var_0;

    if (CurrentHealth(player[arg_0]) > 0) {
        MoveWaypoint(75, GetObjectX(player[arg_0]) + unitForward(player[arg_0], 1, 20.0), GetObjectY(player[arg_0]) + unitForward(player[arg_0], 0, 20.0));
        AudioEvent("ForceOfNatureRelease", 75);
        for(i = 0 ; i < 3 ; i += 1) {
            var_0 = CreateObject("DeathBallFragment", 75);
            Enchant(var_0, "ENCHANT_FREEZE", 0.0);
            SetOwner(player[arg_0], var_0);
            PushObject(var_0, 30.0, GetObjectX(player[arg_0]), GetObjectY(player[arg_0]));
            DeleteObjectTimer(var_0, 17);
        }
    }
    COOLDOWN[arg_0 + 20] = 0;
}

void ogreSkillD(int arg_0) {
    int var_0;
    int var_1;
    int i;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 2) {
        if (var_0 == 0) {
            EnchantOff(player[arg_0], "ENCHANT_FREEZE");
            Enchant(player[arg_0], "ENCHANT_INVULNERABLE", 0.0);
            PushObject(player[arg_0], -150.0, GetObjectX(player[arg_0]) + unitForward(player[arg_0], 1, 20.0), GetObjectY(player[arg_0]) + unitForward(player[arg_0], 0, 20.0));
            FrameTimerWithArg(7, arg_0, ogreSkillD);
        }
        else {
            EnchantOff(player[arg_0], "ENCHANT_INVULNERABLE");
            Enchant(player[arg_0], "ENCHANT_FREEZE", 1.0);
            for(i = 0 ; i < 12 ; i += 1) {
                MoveWaypoint(81, GetObjectX(player[arg_0]) + mathSine(i * 30, 50.0), GetObjectY(player[arg_0]) + mathSine(i * 30 + 90, 50.0));
                var_1 = CreateObject("CarnivorousPlant", 81);
                Frozen(var_1, 1);
                LookWithAngle(var_1, arg_0);
                SetCallback(var_1, 9, OgreCollisionEvent2);
                DeleteObjectTimer(var_1, 1);
                DeleteObjectTimer(CreateObject("Smoke", 81), 5);
                Effect("SENTRY_RAY", GetWaypointX(81), GetWaypointY(81), GetObjectX(player[arg_0]), GetObjectY(player[arg_0]));
            }
            FrameTimerWithArg(1, arg_0, ogreSkillD);
        }
        var_0 += 1;
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 20] = 0;
    }
}

void lichSkillD(int arg_0)
{
    int var_0;
    int var_1;
    int var_2;
    float var_3;
    float var_4;

    if (CurrentHealth(player[arg_0]) && var_0 < 30)
    {
        if (!var_0)
        {
            var_1 = GetDirection(player[arg_0]);
            Enchant(player[arg_0], "ENCHANT_ANCHORED", 0.0);
            var_3 = unitForward(player[arg_0], 1, 22.0);
            var_4 = unitForward(player[arg_0], 0, 22.0);
            MoveWaypoint(100, GetObjectX(player[arg_0]) + var_3, GetObjectY(player[arg_0]) + var_4);
            var_2 = CreateObject("BlackWolf", 100);
            CreateObject("InvisibleLightBlueHigh", 100);
            LookWithAngle(var_2 + 1, arg_0);
            Frozen(var_2, 1);
            SetOwner(player[arg_0], var_2);
            SetCallback(var_2, 9, lichTouched);
        }
        else if (CurrentHealth(var_2))
        {
            LookWithAngle(var_2, var_1);
            Walk(var_2, GetObjectX(var_2), GetObjectY(var_2));
            MoveObject(var_2, GetObjectX(var_2) + var_3, GetObjectY(var_2) + var_4);
        }
        var_0 ++;
        FrameTimerWithArg(1, arg_0, lichSkillD);
    }
    else
    {
        EnchantOff(player[arg_0], "ENCHANT_ANCHORED");
        Delete(var_2);
        Delete(var_2 + 1);
        var_0 = 0;
        COOLDOWN[arg_0 + 20] = 0;
    }
}

void GWizTouched2() {
    int var_0 = CurrentHealth(self) - 1;

    if (CurrentHealth(other) > 0 && IsAttackedBy(other, player[var_0])) {
        Damage(other, player[var_0], 70, 14);
        Effect("THIN_EXPLOSION", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        Delete(self);
    }
}

void FlyingTrackingBullet(int ptr)
{
    int owner = GetOwner(ptr), count = ToInt(GetObjectZ(ptr)), target;

    if (CurrentHealth(owner) && count < 20)
    {
        if (GetDirection(ptr + 1))
        {
            target = ToInt(GetObjectZ(ptr + 1));
            if (CurrentHealth(target))
            {
                if (Distance(GetObjectX(ptr), GetObjectY(ptr), GetObjectX(target), GetObjectY(target)) < 37.0)
                {
                    MoveWaypoint(76, GetObjectX(ptr), GetObjectY(ptr));
                    AudioEvent("HammerMissing", 76);
                    GreenExplosion(GetObjectX(ptr), GetObjectY(ptr));
                    Damage(target, owner, 48, 14);
                    count = 200;
                }
                else
                {
                    LookAtObject(ptr, target);
                    MoveObject(ptr, GetObjectX(ptr) + UnitRatioX(target, ptr, 25.0), GetObjectY(ptr) + UnitRatioY(target, ptr, 25.0));
                }
            }
            else
                LookWithAngle(ptr + 1, 0);
        }
        else
        {
            MoveObject(ptr, GetObjectX(ptr) + UnitAngleCos(ptr, 25.0), GetObjectY(ptr) + UnitAngleSin(ptr, 25.0));
            DetectAroundEnemy(ptr);
        }
        LookWithAngle(HarpoonFxAtLocation(ptr, 9), GetDirection(ptr));
        Raise(ptr, ToFloat(count + 1));
        FrameTimerWithArg(1, ptr, FlyingTrackingBullet);
    }
    else
    {
        Delete(ptr);
        Delete(ptr + 1);
    }
}

int HarpoonFxAtLocation(int unit, int lftime)
{
    int unit2 = CreateObjectAt("HarpoonBolt", GetObjectX(unit), GetObjectY(unit));

    Frozen(unit2, 1);
    DeleteObjectTimer(unit2, lftime);
    Effect("CYAN_SPARKS", GetObjectX(unit2), GetObjectY(unit2), 0.0, 0.0);
    return unit2;
}

void DetectAroundEnemy(int ptr)
{
    int unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(ptr), GetObjectY(ptr)) + 1, k;

    Raise(unit - 1, 5000.0);
    SetOwner(ptr, unit - 1);
    for (k = 0 ; k < 8 ; k ++)
    {
        UnitNoCollide(CreateObjectAt("WeirdlingBeast", GetObjectX(ptr), GetObjectY(ptr)));
        SetOwner(unit - 1, unit + k);
        LookWithAngle(unit + k, 32 * k);
        Enchant(unit + k, "ENCHANT_INFRAVISION", 0.0);
        SetCallback(unit + k, 3, UnitDetectEvent);
        DeleteObjectTimer(unit + k, 1);
    }
    DeleteObjectTimer(unit - 1, 1);
}

void UnitDetectEvent()
{
    int ptr = GetOwner(GetOwner(self)), unit = GetOwner(self);

    if (HasClass(other, "PLAYER"))
    {
        if (Distance(GetObjectX(other), GetObjectY(other), GetObjectX(self), GetObjectY(self)) < GetObjectZ(unit))
        {
            Raise(unit, Distance(GetObjectX(other), GetObjectY(other), GetObjectX(self), GetObjectY(self)));
            LookWithAngle(ptr + 1, 1);
            Raise(ptr + 1, ToFloat(GetCaller()));
        }
    }
}

int SkillJFuncPtr()
{
    StopScript(GWizSkillJ);
}

void GWizSkillJ(int arg_0) {
    int var_0;
    int var_1;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 2) {
        if (var_0 == 0) {
            var_1 = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], var_1);
            var_0 = 1;
        }
        else {
            MoveWaypoint(47, GetObjectX(var_1), GetObjectY(var_1));
            Delete(var_1);
            CastSpellObjectLocation("SPELL_METEOR_SHOWER", player[arg_0], GetWaypointX(47), GetWaypointY(47));
            Enchant(player[arg_0], "ENCHANT_FREEZE", 1.0);
            Enchant(player[arg_0], "ENCHANT_INVULNERABLE", 1.0);
            var_0 = 2;
        }
        FrameTimerWithArg(1, arg_0, GWizSkillJ);
    }
    else {
        var_0 = 0;
        Delete(var_1);
        COOLDOWN[arg_0 + 30] = 0;
    }
}

void DemonSkillJ(int arg_0) {
    float var_0;
    float var_1;
    int var_2[3];
    int var_3 = 0;

    if (CurrentHealth(player[arg_0]) > 0) {
        var_0 = unitForward(player[arg_0], 1, -23.0); //dx
        var_1 = unitForward(player[arg_0], 0, -23.0); //dy
        MoveWaypoint(54, GetObjectX(player[arg_0]) - var_0, GetObjectY(player[arg_0]) - var_1);
        MoveWaypoint(50, GetObjectX(player[arg_0]) + (0.2 * var_1) - var_0, GetObjectY(player[arg_0]) - (0.2 * var_0) - var_1);
        MoveWaypoint(53, GetObjectX(player[arg_0]) - (0.2 * var_1) - var_0, GetObjectY(player[arg_0]) + (0.2 * var_0) - var_1);
        while(var_3 < 3) {
            var_2[var_3] = CreateObject("StrongFireball", demonSkillJwayBuffer(var_3));
            SetOwner(player[arg_0], var_2[var_3]);
            LookAtObject(var_2[var_3], player[arg_0]);
            LookWithAngle(var_2[var_3], GetDirection(var_2[var_3]) + 128);
            PushObject(var_2[var_3], 30.0, GetObjectX(player[arg_0]), GetObjectY(player[arg_0]));
            var_3 += 1;
        }
    }
    COOLDOWN[arg_0 + 30] = 0;
}

void MecaGolemSkillJ(int plr)
{
    int x; int ptr;
    float pos_x; float pos_y;

    if (CurrentHealth(player[plr]) && x < 30)
    {
        if (!x)
        {
            pos_x = unitForward(player[plr], 1, 19.0);
            pos_y = unitForward(player[plr], 0, 19.0);
            Enchant(player[plr], "ENCHANT_FREEZE", 0.0);
        }
        MoveWaypoint(57, GetObjectX(player[plr]) - pos_x, GetObjectY(player[plr]) - pos_y);
        AudioEvent("FirewalkOn", 57);
        ptr = CreateObject("CarnivorousPlant", 57);
        Frozen(ptr, 1);
        LookWithAngle(ptr, plr);
        SetCallback(ptr, 9, MecaBerserkerTouched);
        DeleteObjectTimer(ptr, 1);
        DeleteObjectTimer(CreateObject("MeteorExplode", 57), 6);
        x ++;
        FrameTimerWithArg(1, plr, MecaGolemSkillJ);
    }
    else
    {
        EnchantOff(player[plr], "ENCHANT_FREEZE");
        x = 0;
        COOLDOWN[plr + 30] = 0;
    }
}

void stoneGolemSkillJ(int arg_0) {
    int var_0;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 80) {
        if (var_0 == 0) {
            Enchant(player[arg_0], "ENCHANT_PROTECT_FROM_MAGIC", 4.0);
            Enchant(player[arg_0], "ENCHANT_BURNING", 0.0);
        }
        if (!HasItem(player[arg_0], stoneGolemInv()))
            Pickup(player[arg_0], stoneGolemInv());
        else {
            Drop(player[arg_0], stoneGolemInv());
            MoveObject(stoneGolemInv(), 100.0, 100.0);
        }
        PushObject(player[arg_0], -5.0, GetObjectX(player[arg_0]) + unitForward(player[arg_0], 1, 20.0), GetObjectY(player[arg_0]) + unitForward(player[arg_0], 0, 20.0));
        var_0 += 1;
        FrameTimerWithArg(1, arg_0, stoneGolemSkillJ);
    }
    else {
        EnchantOff(player[arg_0], "ENCHANT_BURNING");
        Drop(player[arg_0], stoneGolemInv());
        MoveObject(stoneGolemInv(), 100.0, 100.0);
        var_0 = 0;
        COOLDOWN[arg_0 + 30] = 0;
    }
}

void beholderSkillJ(int arg_0) {
    int var_0;
    float var_1;
    float var_2;
    int var_3;
    int i;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 2) {
        if (var_0 == 0) {
            var_0 += 1;
            var_1 = unitForward(player[arg_0], 1, 30.0);
            var_2 = unitForward(player[arg_0], 0, 30.0);
            Enchant(player[arg_0], "ENCHANT_ANCHORED", 0.0);
            Enchant(player[arg_0], "ENCHANT_FREEZE", 0.0);
            MoveWaypoint(61, GetObjectX(player[arg_0]) + var_1, GetObjectY(player[arg_0]) + var_2);
            for(i = 0 ; i < 12 ; i += 1) {
                MoveWaypoint(61, GetWaypointX(61) + var_1, GetWaypointY(61) + var_2);
                var_3 = CreateObject("CarnivorousPlant", 61);
                SetOwner(player[arg_0], var_3);
                Frozen(var_3, 1);
                LookWithAngle(var_3, arg_0);
                SetCallback(var_3, 9, beholderTouched);
                DeleteObjectTimer(var_3, 1);
            }
            Effect("SENTRY_RAY", GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), GetWaypointX(61), GetWaypointY(61));
            MoveObject(player[arg_0], GetWaypointX(61), GetWaypointY(61));
            Effect("TELEPORT", GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), 0.0 ,0.0);
            FrameTimerWithArg(20 , arg_0, beholderSkillJ);
        }
        else if (var_0 == 1) {
            var_0 += 1;
            for(i = 0 ; i < 12 ; i += 1) {
                MoveWaypoint(61, GetWaypointX(61) - var_1, GetWaypointY(61) - var_2);
                var_3 = CreateObject("CarnivorousPlant", 61);
                SetOwner(player[arg_0], var_3);
                Frozen(var_3, 1);
                LookWithAngle(var_3, arg_0);
                SetCallback(var_3, 9, beholderTouched);
                DeleteObjectTimer(var_3, 1);
            }
            Effect("SENTRY_RAY", GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), GetWaypointX(61), GetWaypointY(61));
            MoveObject(player[arg_0], GetWaypointX(61), GetWaypointY(61));
            Effect("TELEPORT", GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), 0.0, 0.0);
            FrameTimerWithArg(1, arg_0, beholderSkillJ);
        }
    }
    else {
        EnchantOff(player[arg_0], "ENCHANT_FREEZE");
        EnchantOff(player[arg_0], "ENCHANT_ANCHORED");
        var_0 = 0;
        COOLDOWN[arg_0 + 30] = 0;
    }
}

void RWizSkillJ(int plr)
{
    int check;
    float pos_x = GetObjectX(player[plr]), pos_y = GetObjectY(player[plr]);

    if (CurrentHealth(player[plr]))
    {
        MoveWaypoint(67, pos_x + UnitAngleCos(player[plr], 100.0), pos_y + UnitAngleSin(player[plr], 100.0));
        check = CreateObject("ghost", 67);
        if (IsVisibleTo(player[plr], check))
            MoveObject(player[plr], GetWaypointX(67), GetWaypointY(67));
        else
            UniPrint(UnitToPtr(player[plr]), "그곳을 볼 수 없습니다");
        CastSpellObjectObject("SPELL_INVERSION", player[plr], player[plr]);
        Effect("COUNTERSPELL_EXPLOSION", GetWaypointX(67), GetWaypointY(67), 0.0, 0.0);
        GreenLightningFx(FloatToInt(pos_x), FloatToInt(pos_y), FloatToInt(GetWaypointX(67)), FloatToInt(GetWaypointY(67)), 16);
        AudioEvent("BallThrow", 67);
        Delete(check);
    }
    COOLDOWN[plr + 30] = 0;
}

void horrendousSkillJ(int arg_0)
{
    int var_0;
    int var_1;
    float var_2;
    float var_3;
    float var_4;
    float var_5;
    float var_6;
    float var_7;
    float var_8;
    float var_9;
    float var_10;

    if (CurrentHealth(player[arg_0]) && var_0 < 10)
    {
        if (var_0 == 0)
        {
            var_1 = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], var_1);
            Enchant(player[arg_0], "ENCHANT_FREEZE", 2.0);
            MoveWaypoint(72, GetObjectX(player[arg_0]), GetObjectY(player[arg_0]));
            var_0 = -1;
        }
        else if (var_0 == -1) {
            var_2 = Distance(GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), GetObjectX(var_1), GetObjectY(var_1));
            var_3 = (GetObjectX(player[arg_0]) - GetObjectX(var_1)) * 15.0 / var_2; //dx
            var_4 = (GetObjectY(player[arg_0]) - GetObjectY(var_1)) * 15.0 / var_2; //dy
            var_5 = var_3;
            var_6 = var_4;
            Delete(var_1);
            var_1 = CreateObject("InvisibleLightBlueHigh", 72);
            var_0 = 1;
        }
        else {
            MoveWaypoint(72, GetObjectX(var_1) - var_3, GetObjectY(var_1) - var_4);
            MoveWaypoint(73, GetObjectX(var_1) - var_5, GetObjectY(var_1) - var_6);
            spawnArrowWithHor(arg_0, 72, 6);
            spawnArrowWithHor(arg_0, 73, 6);
            var_7 = GetObjectX(var_1) - (0.1 * var_4) - var_3;
            var_8 = GetObjectY(var_1) + (0.1 * var_3) - var_4;
            var_9 = GetObjectX(var_1) + (0.1 * var_6) - var_5;
            var_10 = GetObjectY(var_1) - (0.1 * var_5) - var_6;
            var_2 = Distance(GetObjectX(var_1), GetObjectY(var_1), var_7, var_8);
            var_3 = (GetObjectX(var_1) - var_7) * 20.0 / var_2;
            var_4 = (GetObjectY(var_1) - var_8) * 20.0 / var_2;
            var_5 = (GetObjectX(var_1) - var_9) * 20.0 / var_2;
            var_6 = (GetObjectY(var_1) - var_10) * 20.0 / var_2;
            var_0 += 1;
        }
        FrameTimerWithArg(1, arg_0, horrendousSkillJ);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 30] = 0;
        Delete(var_1);
    }
}

void hecubahSkillJ(int arg_0) {
    int var_0;
    int var_1;
    float var_2;
    float var_3;
    float var_4;
    int var_5[4];
    
    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 20) {
        if (var_0 == 0) {
            var_1 = CreateObject("moonglow", 2);
            SetOwner(player[arg_0], var_1);
            Enchant(player[arg_0], "ENCHANT_ANCHORED", 0.0);
        }
        else if (var_0 == 1) {
            var_3 = unitForward(player[arg_0], 1, -20.0); //dx
            var_4 = unitForward(player[arg_0], 0, -20.0); //dy
            MoveWaypoint(75, GetObjectX(var_1), GetObjectY(var_1));
            MoveWaypoint(76, GetWaypointX(75), GetWaypointY(75));
            Delete(var_1);
        }
        else {
            var_5[0] = CreateObject("LargeFlame", 75);
            var_5[1] = CreateObject("LargeFlame", 76);
            var_5[2] = CreateObject("fireball", 75);
            var_5[3] = CreateObject("fireball", 76);
            DeleteObjectTimer(var_5[0], 120);
            DeleteObjectTimer(var_5[1], 120);
            DeleteObjectTimer(CreateObject("barrel", 75), 3);
            DeleteObjectTimer(CreateObject("barrel", 76), 3);
            SetOwner(player[arg_0], var_5[0]);
            SetOwner(player[arg_0], var_5[1]);
            SetOwner(player[arg_0], var_5[2]);
            SetOwner(player[arg_0], var_5[3]);
            MoveWaypoint(75, GetWaypointX(75) + var_4, GetWaypointY(75) - var_3);
            MoveWaypoint(76, GetWaypointX(76) - var_4, GetWaypointY(76) + var_3);
            AudioEvent("FirewalkOff", 75);
            AudioEvent("FirewalkOff", 76);
        }
        var_0 += 1;
        FrameTimerWithArg(1, arg_0, hecubahSkillJ);
    }
    else {
        var_0 = 0;
        EnchantOff(player[arg_0], "ENCHANT_ANCHORED");
        COOLDOWN[arg_0 + 30] = 0;
        Delete(var_1);
    }
}

void ogreSkillJ(int arg_0) { //not_yet
    int var_0;
    float var_1;
    float var_2;

    if (CurrentHealth(player[arg_0]) > 0 && var_0 < 30) {
        if (var_0 == 0) {
            var_1 = unitForward(player[arg_0], 1, 24.0);
            var_2 = unitForward(player[arg_0], 0, 24.0);
            MoveWaypoint(84, GetObjectX(player[arg_0]) + var_1, GetObjectY(player[arg_0]) + var_2);
            ogreSpawnBarrel(0, 84);
            LookWithAngle(ogreTrg(), arg_0);
            MoveObject(ogreTrg(), GetObjectX(ogreSpawnBarrel(1, 0)), GetObjectY(ogreSpawnBarrel(1, 0)));
            ObjectOn(ogreTrg());
        }
        else {
            if (ogreSpawnBarrel(1, 0) != 0) {
                MoveObject(ogreSpawnBarrel(1, 0), GetObjectX(ogreSpawnBarrel(1, 0)) + var_1, GetObjectY(ogreSpawnBarrel(1, 0)) + var_2);
                MoveObject(ogreTrg(), GetObjectX(ogreSpawnBarrel(1, 0)), GetObjectY(ogreSpawnBarrel(1, 0)));
            }
            else
                var_0 = 30;
        }
        var_0 += 1;
        FrameTimerWithArg(1, arg_0, ogreSkillJ);
    }
    else {
        var_0 = 0;
        COOLDOWN[arg_0 + 30] = 0;
        ogreSpawnBarrel(2, 0);
        ObjectOff(ogreTrg());
    }
}

void lichSkillJ(int arg_0) {
    int var_0;

    if (CurrentHealth(player[arg_0]) > 0) {
        UniChatMessage(player[arg_0], "순보...!", 109);
        MoveWaypoint(99, GetObjectX(player[arg_0]) + unitForward(player[arg_0], 1, 140.0), GetObjectY(player[arg_0]) + unitForward(player[arg_0], 0, 140.0));
        var_0 = CreateObject("redPotion2", 99);
        if (IsVisibleTo(player[arg_0], var_0)) {
            MoveObject(player[arg_0], GetWaypointX(99), GetWaypointY(99));
            Effect("SMOKE_BLAST", GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), 0.0, 0.0);
            Effect("TELEPORT", GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), 0.0, 0.0);
            AudioEvent("BlindOn", 99);
        }
        Enchant(player[arg_0], "ENCHANT_SHOCK", 3.0);
        Delete(var_0);
    }
    COOLDOWN[arg_0 + 30] = 0;
}

void demonTouched() {
    int var_0 = GetDirection(self);

    if (CurrentHealth(other) > 0 && IsAttackedBy(other, player[var_0])) {
        Damage(other, player[var_0], 130, 7);
        Enchant(other, "ENCHANT_CHARMING", 0.5);
    }
}

void demonTouched2() {
    int var_0 = GetDirection(self);

    if (CurrentHealth(other) > 0 && IsAttackedBy(other, player[var_0])) {
        Damage(other, player[var_0], 100, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.5);
    }
}

int storageTemp(int arg_0, int arg_1) { //unit, mode (0: release, 1: save)
    int var_0;
    
    if (arg_1 == 1)
        var_0 = arg_0;
    return var_0;
}
void disableInvisible(int arg_0) {
    EnchantOff(player[arg_0], "ENCHANT_INVISIBLE");
    SetOwner(player[arg_0], storageTemp(0, 0));
}

int demonSkillJwayBuffer(int arg_0) {
    int var_0[3];

    if (arg_0 == -1) {
        var_0[0] = 50;
        var_0[1] = 53;
        var_0[2] = 54;
        return var_0[0];
    }
    return var_0[arg_0];
}

void mecaGolemTouch() {
    int var_0 = GetDirection(self);

    if (CurrentHealth(other) > 0 && IsAttackedBy(other, player[var_0])) {
        Damage(other, player[var_0], 75, 14);
        Enchant(other, "ENCHANT_FREEZE", 2.0);
        Enchant(other, "ENCHANT_CHARMING", 0.5);
    }
}

void MecaBerserkerTouched()
{
    int plr = GetDirection(self);

    if (CurrentHealth(other) && IsAttackedBy(other, player[plr]))
    {
        Damage(other, player[plr], 100, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.5);
    }
}

void aroundSpreadMissiles(int arg_0) {
    int var_0 = 0;
    int var_1;

    while(var_0 < 20) {
        MoveWaypoint(52, GetObjectX(player[arg_0]) - mathSine(var_0 * 18 + 90, 35.0), GetObjectY(player[arg_0]) - mathSine(var_0 * 18, 35.0));
        var_1 = CreateObject("CarnivorousPlant", 52);
        LookWithAngle(var_1, arg_0);
        Frozen(var_1, 1);
        SetCallback(var_1, 9, mecaGolemTouch2);
        DeleteObjectTimer(var_1, 1);
        DeleteObjectTimer(CreateObject("SmallFireBoom", 52), 5);
        var_0 += 1;
    }
    AudioEvent("HammerMissing", 52);
    Effect("JIGGLE", GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), 50.0 , 0.0);
}
void mecaGolemTouch2() {
    int var_0 = GetDirection(self);

    if (CurrentHealth(other) > 0 && IsAttackedBy(other, player[var_0])) {
        Damage(other, player[var_0], 70, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.5);
    }
}

void explosionMeca(int arg_0) {
    int var_0;
    int i;

    for(i = 0; i < 4 ; i += 1) {
        MoveWaypoint(56, GetWaypointX(55) + wispExplosionPos(i, 30.0), GetWaypointY(55) + wispExplosionPos(3 - i, 30.0));
        var_0 = CreateObject("CarnivorousPlant", 56);
        LookWithAngle(var_0, arg_0);
        Frozen(var_0, 1);
        SetCallback(var_0, 9, mecaGolemTouch3);
        DeleteObjectTimer(var_0, 1);
        Effect("SPARK_EXPLOSION", GetWaypointX(56), GetWaypointY(56), 0.0, 0.0);
    }
    AudioEvent("FireballExplode", 56);
}
void mecaGolemTouch3() {
    int var_0 = GetDirection(self);

    if (CurrentHealth(other) > 0 && IsAttackedBy(other, player[var_0])) {
        Damage(other, player[var_0], 70, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.5);
        Enchant(other, "ENCHANT_FREEZE", 2.0);
    }
}

void bombLightningSparks(int arg_0) {
    int var_0 = arg_0 / 256; //wp_num
    int var_1 = arg_0 % 256; //player_idx
    int var_2[10];
    int i;

    var_2[9] = CreateObject("InvisibleLightBlueHigh", var_0);
    for(i = 0 ; i < 9 ; i += 1) {
        MoveWaypoint(var_0, GetObjectX(var_2[9]) + lightningXY(i / 3), GetObjectY(var_2[9]) + lightningXY(i % 3));
        Effect("LIGHTNING", GetWaypointX(var_0), GetWaypointY(var_0), GetWaypointX(var_0), GetWaypointY(var_0) - 100.0);
        var_2[i] = CreateObject("CarnivorousPlant", var_0);
        SetOwner(player[var_1], var_2[i]);
        SetCallback(var_2[i], 9, lightningTouched);
        Frozen(var_2[i], 1);
        LookWithAngle(var_2[i], var_1);
        DeleteObjectTimer(var_2[i] , 1);
    }
    Delete(var_2[9]);
}
void lightningTouched() {
    int var_0 = GetDirection(self);

    if (CurrentHealth(other) > 0 && IsAttackedBy(other, player[var_0])) {
        Damage(other, player[var_0], 105, 14);
        Enchant(other, "ENCHANT_FREEZE", 2.0);
        Enchant(other, "ENCHANT_CHARMING", 0.5);
    }
}

void lightningTouched2() {
    int var_0 = GetDirection(self);

    if (CurrentHealth(other) > 0 && IsAttackedBy(other, player[var_0])) {
        Damage(other, player[var_0], 50, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.4);
    }
}
void BeholderAroundDamage(int arg_0) {
    int var_0 = 0;
    float var_1;

    while(var_0 < 10) {
        if (CurrentHealth(player[var_0]) > 0 && var_0 != arg_0) {
            if (Distance(GetObjectX(player[arg_0]), GetObjectY(player[arg_0]), GetObjectX(player[var_0]), GetObjectY(player[var_0])) < 200.0) {
                Damage(player[var_0], player[arg_0], 2, 14);
                Effect("RICOCHET", GetObjectX(player[var_0]), GetObjectY(player[var_0]), 0.0 , 0.0);
            }
        }
        var_0 += 1;
    }
}

void beholderTouched() {
    int var_0 = GetDirection(self);

    if (IsAttackedBy(other, player[var_0]) && CurrentHealth(other) > 0) {
        Damage(other, player[var_0], 75, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.5);
    }
}

void RWizTouched()
{
    int own = GetDirection(self);

    if (IsAttackedBy(other, player[own]) && !HasEnchant(other, "ENCHANT_ETHEREAL"))
    {
        Enchant(other, "ENCHANT_ETHEREAL", 1.5);
        Damage(other, player[own], 125, 14);
    }
}

void explosionDelayFireStorm(int arg_0) {
    int var_0 = GetDirection(arg_0);
    int var_1;

    MoveWaypoint(66, GetObjectX(arg_0), GetObjectY(arg_0));
    Delete(arg_0);
    SetOwner(player[var_0], CreateObject("titanFireball", 66));
    var_1 = CreateObject("barrel", 66);
    Frozen(var_1, 1);
    DeleteObjectTimer(var_1, 1);
}

void lightningRisk(int arg_0) {
    int var_0 = GetDirection(arg_0);
    int var_1 = 0;
    float var_2;

    while(var_1 < 10) {
        if (CurrentHealth(player[var_1]) > 0 && var_1 != var_0) {
            var_2 = Distance(GetObjectX(player[var_1]), GetObjectY(player[var_1]), GetObjectX(arg_0), GetObjectY(arg_0));
            if (var_2 < 350.0 && IsVisibleTo(player[var_1], arg_0)) {
                Effect("LIGHTNING", GetObjectX(arg_0), GetObjectY(arg_0), GetObjectX(player[var_1]), GetObjectY(player[var_1]));
                Damage(player[var_1], player[var_0], 2, 16);
                MoveWaypoint(101, GetObjectX(player[var_1]), GetObjectY(player[var_1]));
                AudioEvent("LightningBolt", 101);
            }
        }
        var_1 ++;
    }
}

void controlBlock(int arg_0, int arg_1, float arg_2, int arg_3) { //player_index, base_unit, range, mode(0: spawn, 1: delete)
    int var_0 = GetDirection(arg_1); //area
    float var_1;
    float var_2;
    float var_3;
    float var_4;
    int var_5[40];
    float var_6;
    int i;

    var_1 = GetObjectX(arg_1);
    var_2 = GetObjectY(arg_1) + 100.0;
    for(i = 0 ; i < 40 ; i += 1) {
        if (arg_3 == 0) {
            var_6 = Distance(GetObjectX(arg_1), GetObjectY(arg_1), var_1, var_2);
            var_3 = (GetObjectX(arg_1) - var_1) * arg_2 / var_6; //dx
            var_4 = (GetObjectY(arg_1) - var_2) * arg_2 / var_6; //dy
            MoveWaypoint(var_0, GetObjectX(arg_1) - var_3, GetObjectY(arg_1) - var_4);
            var_5[i] = CreateObject("RotatingSpikes", var_0);
            SetOwner(player[arg_0], var_5[i]);
            Enchant(var_5[i], "ENCHANT_SHOCK", 0.0);
            Frozen(var_5[i], 1);
            var_1 = GetObjectX(arg_1) - (0.2 * var_4) - var_3;
            var_2 = GetObjectY(arg_1) + (0.2 * var_3) - var_4;
        }
        else
            Delete(var_5[i]);
    }
}

void localRisk(int arg_0, int arg_1, int arg_2, float arg_3) { //index, damage_value, area, range
    float var_0;
    int i;

    for(i = 0; i < 10 ; i += 1) {
        if (CurrentHealth(player[i]) > 0 && i != arg_0) {
            var_0 = Distance(GetObjectX(player[i]), GetObjectY(player[i]), GetWaypointX(arg_2), GetWaypointY(arg_2));
            if (var_0 < arg_3)
                Damage(player[i], player[arg_0], arg_1, 14);
        }
    }
}

void horrendousTouched()
{
    int var_0 = GetDirection(self);

    if (CurrentHealth(other) > 0 && IsAttackedBy(other, player[var_0]) && HasClass(other, "PLAYER"))
    {
        Effect("CYAN_SPARKS", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        Damage(other, player[var_0], 70, 14);
        Enchant(other, "ENCHANT_FREEZE", 2.0);
        Enchant(other, "ENCHANT_CHARMING", 1.0);
    }
    else if (!GetCaller())
        Delete(self);
}

int GetMagic()
{
    int unit;

    if (!unit) unit = Object("IceShoot");
    return unit;
}

void spawnArrowWithHor(int arg_0, int arg_1, int arg_2) { //index, wp, amount
    int var_0;
    int i;

    for(i = 0 ; i < arg_2; i += 1) {
        var_0 = CreateObject("CherubArrow", arg_1);
        SetOwner(player[arg_0], var_0);
        LookAtObject(var_0, player[arg_0]);
        LookWithAngle(var_0, GetDirection(var_0) + 128);
        PushObject(var_0, 20.0, GetObjectX(player[arg_0]), GetObjectY(player[arg_0]));
    }
}

void stunPlayer(int arg_0, int arg_1, float arg_2) {
    int i;
    float var_0;

    for(i = 0 ; i < 10 ; i += 1) {
        if (CurrentHealth(player[i]) > 0 && i != arg_0) {
            var_0 = Distance(GetObjectX(player[i]), GetObjectY(player[i]), GetWaypointX(arg_1), GetWaypointY(arg_1));
            if (var_0 < arg_2)
                Enchant(player[i], "ENCHANT_FREEZE", 1.0);
        }
    }
}
void deathrayTouched()
{
    int plr = GetDirection(self);

    if (IsAttackedBy(other, player[plr]) && CurrentHealth(player[plr]))
    {
        Damage(other, player[plr], 100, 16);
        Enchant(other, "ENCHANT_FREEZE", 2.0);
        Enchant(other, "ENCHANT_CHARMING", 0.4);
    }
}

void OgreCollisionEvent2()
{
    int plr = GetDirection(self);

    if (CurrentHealth(other) && IsAttackedBy(other, player[plr]) && !HasEnchant(other, "ENCHANT_ETHEREAL"))
    {
        Damage(other, player[plr], 50, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.4);
        Enchant(other, "ENCHANT_ETHEREAL", 0.4);
    }
}

void makeStar(int arg_0, float arg_1) {
    float var_0 = GetWaypointX(arg_0);
    float var_1 = GetWaypointY(arg_0);
    float var_2[10];
    int i;

    for(i = 0; i < 5; i += 1) {
        var_2[i * 2] = var_0 - mathSine(i * 72, arg_1);
        var_2[i * 2 + 1] = var_1 - mathSine(i * 72 + 90, arg_1);
    }

    Effect("SENTRY_RAY", var_2[0], var_2[1], var_2[4], var_2[5]);
    Effect("SENTRY_RAY", var_2[0], var_2[1], var_2[6], var_2[7]);
    Effect("SENTRY_RAY", var_2[2], var_2[3], var_2[6], var_2[7]);
    Effect("SENTRY_RAY", var_2[2], var_2[3], var_2[8], var_2[9]);
    Effect("SENTRY_RAY", var_2[4], var_2[5], var_2[8], var_2[9]);
}
void OgreCollisionEvent()
{
    int plr = GetDirection(self);

    if (IsAttackedBy(other, player[plr]) && CurrentHealth(other) && !HasEnchant(other, "ENCHANT_ETHEREAL"))
    {
        Damage(other, player[plr], 100, 14);
        Enchant(other, "ENCHANT_ETHEREAL", 0.5);
    }
}

int ogreSpawnBarrel(int mode, int wp) 
{
     //mode(0: spawn, 1: reference, 2: remove), way
    int unit;
    
    if (!mode)
    {
        unit = CreateObject("Barrel", wp);
        Frozen(unit, 1);
        return 0;
    }
    else if (mode == 1)
    {
        if (IsObjectOn(unit)) return unit;
        else return 0;
    }
    else
    {
        if (IsObjectOn(unit))
        {
            Frozen(unit, 0);
            Damage(unit, 0, 255, 14);
        }
        return 0;
    }
}

string OgreTables()
{
    string table = {"Barrellotd", "PiledBarrels1", "Crate1", "Crate2", "Coffin2"};

    return table;
}

void catchOgrePlayer()
{
    int var_0 = GetDirection(ogreTrg());
    int var_1;
    int var_2;
    int var_3;
    int var_4;

    if (CurrentHealth(player[var_0]) && var_1 < 25)
    {
        if (!CurrentHealth(var_2) && !IsCaller(player[var_0]))
        {
            ogreSpawnBarrel(2, 0);
            var_2 = GetCaller();
            UniPrintToAll("트랩에 걸렸습니다 .");
            Effect("CYAN_SPARKS", GetObjectX(var_2), GetObjectY(var_2), 0.0, 0.0);
            ObjectOff(ogreTrg());
            var_4 = 1;
        }
        if (var_4 == 1)
        {
            if (CurrentHealth(var_2))
            {
                if (IsObjectOn(var_3))
                {
                    Damage(var_3, 0, 255, 14);
                    Damage(var_2, player[var_0], 10, 2);
                }
                else
                {
                    MoveWaypoint(84, GetObjectX(var_2), GetObjectY(var_2));
                    var_3 = CreateObject(ToStr(SToInt(OgreTables()) + Random(0, 4)), 84);
                    Raise(var_3, 200.0);
                }
                var_1 += 1;
                FrameTimer(21, catchOgrePlayer);
            }
            else {
                var_1 = 25;
                FrameTimer(1, catchOgrePlayer);
            }
        }
    }
    else
    {
        if (IsObjectOn(var_3))
            Delete(var_3);
        var_1 = 0;
        var_2 = 0;
        var_4 = 0;
    }
}
int ogreTrg()
{
    int switch;

    if (!switch)
        switch = Object("catcherOgre");

    return switch;
}

void flagMode(int plr, int mode)
{
    //owner_index, mode(0: spawn, 1: control, 2: remove)
    int unit[18];
    int i;

    for (i = 0 ; i < 18 ; i ++)
    {
        if (!mode)
        {
            MoveWaypoint(97, GetWaypointX(98) + mathSine(i * 20 + 90, 200.0), GetWaypointY(98) + mathSine(i * 20, 200.0));
            unit[i] = CreateObject(ToStr(SToInt(SpiritStatues()) + ((i % 16) / 2)), 97);
            SetOwner(player[plr], unit[i]);
            Effect("SMOKE_BLAST", GetWaypointX(97), GetWaypointY(97), 0.0, 0.0);
        }
        else if (mode == 1)
        {
            if (!HasEnchant(unit[i], "ENCHANT_SHOCK"))
                Enchant(unit[i], "ENCHANT_SHOCK", 0.0);
            PushObject(unit[i], -1.0, GetWaypointX(98), GetWaypointY(98));
        }
        else if (mode == 2)
            Delete(unit[i]);
    }
}

string SpiritStatues()
{
    string table = {
        "MovableStatue2f", "MovableStatue2e", "MovableStatue2d", "MovableStatue2c", "MovableStatue2b", "MovableStatue2a", "MovableStatue2h", "MovableStatue2g"
        };

    return table;
}

void lichTouched()
{
    int plr = GetDirection(GetTrigger() + 1);

    if (CurrentHealth(other) && IsAttackedBy(other, player[plr]))
    {
        Damage(other, player[plr], 70, 14);
        Enchant(other, "ENCHANT_FREEZE", 1.0);
        Delete(self);
        Delete(GetTrigger() + 1);
        Effect("SPARK_EXPLOSION", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    }
}

float lightningXY(int num)
{
    float pos_xy[3];

    if (num == -1) {
        pos_xy[0] = 0.0;
        pos_xy[1] = 35.0;
        pos_xy[2] = -35.0;
        return pos_xy[0];
    }
    return pos_xy[num];
}
int stoneGolemInv()
{
    int sd;

    if (!IsObjectOn(sd))
        sd = CreateObject("sword", 2);
    return sd;
}

int CheckOwner(int unit)
{
    int k;
    for (k = 9 ; k >= 0 ; k --)
    {
        if (IsOwnedBy(unit, player[k]))
            return k;
    }
    return -1;
}

int CheckUnitOwner(int unit)
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        if (IsOwnedBy(unit, player[i]))
            return i;
    }
    return -1;
}

float unitForward(int unit, int mode, float size) { //unit_idx, 0 sin, 1 cos, size
    int angle = GetDirection(unit) * 45 / 32;

    if (!mode)
        return mathSine(angle, size);
    else
        return mathSine(angle + 90, size);
}

void DummyFunction()
{
    //
}

void setUnitHealth(int arg_0, int arg_1) {
    Damage(arg_0, 0, CurrentHealth(arg_0) - 1, -1);
    Pickup(arg_0, CreateObject("rottenMeat", 2));
    Damage(arg_0, 0, CurrentHealth(arg_0) - arg_1, -1);
}

float Rx_ratio(float x, float y, int angle)
{
    return (mathSine(angle + 90, 1.0) * x) - (mathSine(angle, 1.0) * y);
}

float Ry_ratio(float x, float y, int angle)
{
    return (mathSine(angle, 1.0) * x) + (mathSine(angle + 90, 1.0) * y);
}

float mathSpiral(int num)
{
    float pos_xy[198];

    if (num == -1)
    {
        pos_xy[0] = 104.378106; pos_xy[1] = -87.789521;pos_xy[2] = 101.162975; pos_xy[3] = -89.408868;pos_xy[4] = 97.908932; pos_xy[5] = -90.948525;
        pos_xy[6] = 94.617582; pos_xy[7] = -92.406723;pos_xy[8] = 91.290607; pos_xy[9] = -93.781695;pos_xy[10] = 87.929770; pos_xy[11] = -95.071682;pos_xy[12] = 84.536915; pos_xy[13] = -96.274933;
        pos_xy[14] = 81.113972; pos_xy[15] = -97.389711;pos_xy[16] = 77.662960; pos_xy[17] = -98.414290;pos_xy[18] = 74.185985; pos_xy[19] = -99.346962;pos_xy[20] = 70.685247; pos_xy[21] = -100.186039;
        pos_xy[22] = 67.163042; pos_xy[23] = -100.929855;pos_xy[24] = 63.621760; pos_xy[25] = -101.576772;pos_xy[26] = 60.063894; pos_xy[27] = -102.125180;pos_xy[28] = 56.492040; pos_xy[29] = -102.573506;
        pos_xy[30] = 52.908897; pos_xy[31] = -102.920212;pos_xy[32] = 49.317274; pos_xy[33] = -103.163805;pos_xy[34] = 45.720088; pos_xy[35] = -103.302838;pos_xy[36] = 42.120372; pos_xy[37] = -103.335916;
        pos_xy[38] = 38.521271; pos_xy[39] = -103.261703;pos_xy[40] = 34.926053; pos_xy[41] = -103.078924;pos_xy[42] = 31.338102; pos_xy[43] = -102.786377;pos_xy[44] = 27.760926; pos_xy[45] = -102.382933;
        pos_xy[46] = 24.198160; pos_xy[47] = -101.867546;pos_xy[48] = 20.653565; pos_xy[49] = -101.239262;pos_xy[50] = 17.131032; pos_xy[51] = -100.497220;pos_xy[52] = 13.634583; pos_xy[53] = -99.640671;
        pos_xy[54] = 10.168372; pos_xy[55] = -98.668977;pos_xy[56] = 6.736692; pos_xy[57] = -97.581623;pos_xy[58] = 3.343967; pos_xy[59] = -96.378231;pos_xy[60] = -0.005238; pos_xy[61] = -95.058564;
        pos_xy[62] = -3.306223; pos_xy[63] = -93.622544;pos_xy[64] = -6.554149; pos_xy[65] = -92.070256;pos_xy[66] = -9.744037; pos_xy[67] = -90.401966;pos_xy[68] = -12.870773; pos_xy[69] = -88.618134;
        pos_xy[70] = -15.929105; pos_xy[71] = -86.719426;pos_xy[72] = -18.913646; pos_xy[73] = -84.706728;pos_xy[74] = -21.818878; pos_xy[75] = -82.581166;pos_xy[76] = -24.639152; pos_xy[77] = -80.344116;
        pos_xy[78] = -27.368694; pos_xy[79] = -77.997228;pos_xy[80] = -30.001610; pos_xy[81] = -75.542442;pos_xy[82] = -32.531892; pos_xy[83] = -72.982006;pos_xy[84] = -34.953425; pos_xy[85] = -70.318499;
        pos_xy[86] = -37.259997; pos_xy[87] = -67.554850;pos_xy[88] = -39.445306; pos_xy[89] = -64.694364;pos_xy[90] = -41.502977; pos_xy[91] = -61.740744;pos_xy[92] = -43.426573; pos_xy[93] = -58.698117;
        pos_xy[94] = -45.209611; pos_xy[95] = -55.571059;pos_xy[96] = -46.845586; pos_xy[97] = -52.364626;pos_xy[98] = -48.327984; pos_xy[99] = -49.084378;pos_xy[100] = -49.650316; pos_xy[101] = -45.736413;
        pos_xy[102] = -50.806140; pos_xy[103] = -42.327396;pos_xy[104] = -51.789098; pos_xy[105] = -38.864593;pos_xy[106] = -52.592949; pos_xy[107] = -35.355902;pos_xy[108] = -53.211614; pos_xy[109] = -31.809888;
        pos_xy[110] = -53.639221; pos_xy[111] = -28.235819;pos_xy[112] = -53.870160; pos_xy[113] = -24.643697;pos_xy[114] = -53.899146; pos_xy[115] = -21.044297;pos_xy[116] = -53.721281; pos_xy[117] = -17.449202;
        pos_xy[118] = -53.332138; pos_xy[119] = -13.870832;pos_xy[120] = -52.727842; pos_xy[121] = -10.322482;pos_xy[122] = -51.905175; pos_xy[123] = -6.818345;pos_xy[124] = -50.861676; pos_xy[125] = -3.373547;
        pos_xy[126] = -49.595773; pos_xy[127] = -0.004161;pos_xy[128] = -48.106915; pos_xy[129] = 3.272775;pos_xy[130] = -46.395733; pos_xy[131] = 6.439250;pos_xy[132] = -44.464204; pos_xy[133] = 9.476286;
        pos_xy[134] = -42.315853; pos_xy[135] = 12.363955;pos_xy[136] = -39.955964; pos_xy[137] = 15.081413;pos_xy[138] = -37.391819; pos_xy[139] = 17.606962;pos_xy[140] = -34.632967; pos_xy[141] = 19.918131;
        pos_xy[142] = -31.691513; pos_xy[143] = 21.991800;pos_xy[144] = -28.582448; pos_xy[145] = 23.804365;pos_xy[146] = -25.323998; pos_xy[147] = 25.331957;pos_xy[148] = -21.938010; pos_xy[149] = 26.550730;
        pos_xy[150] = -18.450372; pos_xy[151] = 27.437235;pos_xy[152] = -14.891448; pos_xy[153] = 27.968899;pos_xy[154] = -11.296547; pos_xy[155] = 28.124631;pos_xy[156] = -7.706387; pos_xy[157] = 27.885600;
        pos_xy[158] = -4.167558; pos_xy[159] = 27.236202;pos_xy[160] = -0.732943; pos_xy[161] = 26.165283;pos_xy[162] = 2.537954; pos_xy[163] = 24.667670;pos_xy[164] = 5.578826; pos_xy[165] = 22.746070;
        pos_xy[166] = 8.316648; pos_xy[167] = 20.413429;pos_xy[168] = 10.672181; pos_xy[169] = 17.695843;pos_xy[170] = 12.561130; pos_xy[171] = 14.636114;pos_xy[172] = 13.896316; pos_xy[173] = 11.298037;
        pos_xy[174] = 14.591389; pos_xy[175] = 7.771479;pos_xy[176] = 14.566900; pos_xy[177] = 4.178176;pos_xy[178] = 13.759913; pos_xy[179] = 0.677930;pos_xy[180] = 12.138983; pos_xy[181] = -2.525645;
        pos_xy[182] = 9.727097; pos_xy[183] = -5.181917;pos_xy[184] = 6.636254; pos_xy[185] = -6.997113;pos_xy[186] = 3.118011; pos_xy[187] = -7.655334;pos_xy[188] = -0.367525; pos_xy[189] = -6.878490;
        pos_xy[190] = -3.075499; pos_xy[191] = -4.572578;pos_xy[192] = -3.967222; pos_xy[193] = -1.158741;pos_xy[194] = -2.116754; pos_xy[195] = 1.763844;pos_xy[196] = 0.985692; pos_xy[197] = 0.962476;
        return 0.0;
    }
    return pos_xy[num];
}

float mathSine(int angle, float size)
{
    float var_0[91];
    int i;
    int k;

    if (var_0[90] != 0.0)
    {
        k = angle / 90;
        i = angle - (k * 90);
        k %= 2;
        if (k == 1)
            i = 90 - i;
        if ((angle / 180) % 2 == 1)
            return -var_0[i] * size;
        else
            return var_0[i] * size;
    }
    k = MathRingCore(44);
    Delete(k);
    for (i = 0 ; i <= 90 ; i ++)
    {
        var_0[i] = GetObjectZ(k + i + 1);
        Delete(k + i + 1);
    }
    return var_0[0];
}

int MathRingCore(int wp)
{
    float x_ratio;
    float y_ratio;
    string name = "InvisibleLightBlueLow";
    int unit = CreateObject(name, wp);
    int i;

    MoveWaypoint(wp + 1, GetWaypointX(wp), GetWaypointY(wp) - 1.0);
    for (i = 0 ; i <= 90 ; i ++)
    {
        x_ratio = WayRatioXY(wp, wp + 1, 0);
        y_ratio = WayRatioXY(wp, wp + 1, 1);
        MoveWaypoint(wp + 1, GetWaypointX(wp) - x_ratio, GetWaypointY(wp) - y_ratio);
        CreateObject(name, wp + 1);
        Raise(unit + i + 1, GetWaypointX(wp) - GetWaypointX(wp + 1));
        MoveWaypoint(wp + 1, GetWaypointX(wp) - (1.0 / 57.3 * y_ratio) - x_ratio, GetWaypointY(wp) + (1.0 / 57.3 * x_ratio) - y_ratio);
    }
    return unit;
}

float WayRatioXY(int wp1, int wp2, int mode)
{
    if (!mode)
        return (GetWaypointX(wp1) - GetWaypointX(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
    else
        return (GetWaypointY(wp1) - GetWaypointY(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

int SentryRay()
{
    int ray;

    if (!ray)
    {
        CreateObject("SentryGlobeMovable", 108);
        ray = GetMemory(0x750710);
        ObjectOff(GetMemory(ray + 0x2c));
    }
    return ray;
}

void SetRayRadian(int owner, int ray_ptr)
{
    SetMemory(GetMemory(ray_ptr + 0x2ec), ToInt(3.141592 / 180.0 * IntToFloat(GetDirection(owner)) * 45.0 / 32.0));
    ObjectOn(GetMemory(ray_ptr + 0x2c));
}

void DisableRay(int ray)
{
    ObjectOff(ray);
}

float IntToFloat(int x)
{
    int i;
    int pos = x;
    float result = 0.0;
 
    if (pos < 0)
        pos = -pos;
    for (i = 0; i < 32; i ++)
    {
        if (pos & 0x80000000)
            result += 1.0;
        pos = pos << 1;
        if (i != 31)
            result *= 2.0;
    }
    if (x < 0)
        return -result;
    else
        return result;
}

float UnitAngleCos(int unit, float size)
{
    return mathSine((GetDirection(unit) * 45 / 32) + 90, size);
}

float UnitAngleSin(int unit, float size)
{
    return mathSine(GetDirection(unit) * 45 / 32, size);
}

string PlayerName(int ptr)
{
    int addr = GetMemory(0x97bb40), xwis_id = GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x830;

	SetMemory(addr, GetMemory(xwis_id));
    SetMemory(addr + 4, GetMemory(xwis_id + 4));
    SetMemory(addr + 8, GetMemory(xwis_id + 8));
	StopScript(0);
}

int ImportGreenLightningFunc()
{
    int arr[21], link;

    if (!link)
    {
		arr[0] = 0x5D685657; arr[1] = 0x68004042; arr[2] = 0x00523790; arr[3] = 0x50725068; arr[4] = 0x35606800;
		arr[5] = 0x106A0040; arr[6] = 0x042454FF; arr[7] = 0x8B08C483; arr[8] = 0x2414FFF0; arr[9] = 0x14FFF88B;
		arr[10] = 0x0C468924; arr[11] = 0x892414FF; arr[12] = 0x14FF0846; arr[13] = 0x04468924; arr[14] = 0x892414FF;
		arr[15] = 0xFF565706; arr[16] = 0x830C2454; arr[17] = 0xFF5608C4; arr[18] = 0x830C2454; arr[19] = 0x5F5E10C4; arr[20] = 0x909090C3; 
        link = GetScrDataField(ImportGreenLightningFunc);
    }
    return link;
}

void GreenLightningFx(int x1, int y1, int x2, int y2, int time)
{
    int temp = GetMemory(0x5c321c);

    SetMemory(0x5c321c, ImportGreenLightningFunc());
    Effect(ToStr(x1), ToFloat(y1), ToFloat(x2), ToFloat(y2), ToFloat(time));
    SetMemory(0x5c321c, temp);
}

int ImportGreenExplosionFunc()
{
    int arr[17], ptr, link;
    if (!arr[0])
    {
        arr[0] = 0x32006856; arr[1] = 0x50680052; arr[2] = 0x68005072; arr[3] = 0x00403560; arr[4] = 0x54FF086A;
		arr[5] = 0xC4830424; arr[6] = 0xFFF08B04; arr[7] = 0x89042454; arr[8] = 0x2454FF06; arr[9] = 0x04468904;
		arr[10] = 0x0000C868; arr[11] = 0x54FF5600; arr[12] = 0xC4831024; arr[13] = 0x425D6814; arr[14] = 0xFF560040;
		arr[15] = 0x83042454; arr[16] = 0xC35E08C4; 
        link = GetScrDataField(ImportGreenExplosionFunc);
    }
    return link;
}

void GreenExplosion(float x, float y)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportGreenExplosionFunc());
    Unused5a(ToInt(y), ToInt(x));
    SetMemory(0x5c31f4, temp);
}

void CallFunctionWithArg(int func, int arg)
{
    int link, ptr;

    if (!link)
    {
        link = GetScrCodeField(CalleeArg);
    }
    else
    {
        SetMemory(link + 0x10, func);
        CalleeArg(arg);
    }
}

void CalleeArg(int arg)
{
    CalleeArg(arg);
}

void UnitNoCollide(int unit)
{
    SetUnitFlags(unit, GetUnitFlags(unit) ^ 0x40);
}

void SetUnitFlags(int unit, int flag)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x10, flag);
}

int GetUnitFlags(int unit)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x10);
    return 0;
}

float UnitRatioX(int unit, int target, float size)
{
    return (GetObjectX(unit) - GetObjectX(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float UnitRatioY(int unit, int target, float size)
{
    return (GetObjectY(unit) - GetObjectY(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

int FloatToInt(float x)
{
    int i, result = 0;
    float pos = x;

    if (pos < 0.0) pos = -pos;
    pos = pos / 2147483648.0;
    if (pos < 2.0)
    { 
        for (i = 0 ; i < 32 ; i ++)
        {
            if (pos >= 1.0)
            {
                result ++;
                pos -= 1.0;
            }
            if (i != 31) result = result << 1;
            pos *= 2.0;
        }
    }
    else result = 0x7fffffff;
    if (x < 0.0) return -result;
    else return result;
}

void SelectRandomUnit()
{
    int arr[10], k, idx = 0;

    for (k = 0 ; k < 10 ; k ++)
    {
        if (!MaxHealth(player[k]))
        {
            arr[idx] = k;
            idx ++;
        }
    }
    if (idx)
        PlayerTeleportToRandBeacon(other, Random(0, idx - 1));
    else
    {
        MoveObject(other, GetWaypointX(3), GetWaypointY(3));
        Print("에러_ 더 이상 선택가능한 캐릭터가 없습니다");
    }
}

void PlayerTeleportToRandBeacon(int unit, int sel)
{
    float x = GetWaypointX(4 + sel), y = GetWaypointY(4 + sel);

    GreenLightningFx(FloatToInt(GetObjectX(unit)), FloatToInt(GetObjectY(unit)), FloatToInt(x), FloatToInt(y), 12);
    MoveObject(unit, x, y);
}

void InitRandSelector(float x, float y)
{
    int unit = CreateObjectAt("NPC", x, y);

    UnitNoCollide(CreateObjectAt("TeleportWake", x, y));
    Damage(unit, 0, MaxHealth(unit) + 1, -1);
    SetCallback(unit, 9, SelectRandomUnit);
    MoveWaypoint(76, x - 40.0, y - 40.0);
    StrRandomMark();
}

void StrRandomMark()
{
	int arr[3];
	string name = "SpinningCrown";
	int i = 0;
	arr[0] = 67670300; arr[1] = 16514; arr[2] = 2064; 
	while(i < 3)
	{
		drawStrRandomMark(arr[i], name);
		i ++;
	}
}

void drawStrRandomMark(int arg_0, string name)
{
	int count;
	int i;
	float pos_x;
	float pos_y;

	if (!count)
	{
		pos_x = GetWaypointX(76);
		pos_y = GetWaypointY(76);
	}
	for (i = 1 ; i > 0 && count < 93 ; i <<= 1)
	{
		if (i & arg_0)
			UnitNoCollide(CreateObject(name, 76));
		if (count % 7 == 6)
			MoveWaypoint(76, GetWaypointX(76) - 54.000000, GetWaypointY(76) + 9.000000);
		else
			MoveWaypoint(76, GetWaypointX(76) + 9.000000, GetWaypointY(76));
		count ++;
	}
	if (count >= 93)
	{
		count = 0;
		MoveWaypoint(76, pos_x, pos_y);
	}
}

int CheckPlayerInput(int plr_unit)
{
    int ptr = UnitToPtr(plr_unit), temp;

    if (ptr)
    {
        temp = GetMemory(GetMemory(ptr + 0x2ec) + 0x114);
        if (temp)
            return GetMemory(0x81b960 + (GetMemory(temp + 0x810) * 3072));
    }
    return 0;
}

void NotifyCurrentCooldown(int plr, int ctime)
{
    if (CurrentHealth(player[plr]))
    {
        UniPrint(UnitToPtr(player[plr]), "사용하시려는 스킬의 남은 쿨다운: " + IntToString(ctime));
    }
}

void LinkFireSpriteBin(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, FireSpriteBinTable());
}

int ImportUniChatCore()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0xC0685657; arr[1] = 0x6800528A; arr[2] = 0x00507250; arr[3] = 0x8B2414FF; arr[4] = 0x2414FFF8;
        arr[5] = 0x14FFF08B; arr[6] = 0x56505724; arr[7] = 0x102454FF; arr[8] = 0x5E14C483; arr[9] = 0x9090C35F;
        link = GetScrDataField(ImportUniChatCore);
    }
    return link;
}

void UniChatCore(int plrPtr, int sPtr, int sTime)
{
    int temp = GetMemory(0x5c3320);

    SetMemory(0x5c3320, ImportUniChatCore());
    GroupRunAway(sPtr, plrPtr, sTime);
    SetMemory(0x5c3320, temp);
}

int ImportUniPrintCore()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x9EB06856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x502414FF;
        arr[5] = 0x2454FF56; arr[6] = 0x10C4830C; arr[7] = 0x9090C35E; 
        link = GetScrDataField(ImportUniPrintCore);
    }
    return link;
}

void UniPrintCore(int plrPtr, int sPtr)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportUniPrintCore());
    Unused5a(sPtr, plrPtr);
    SetMemory(0x5c31f4, temp);
}

int GetByteValue(int ptr)
{
    return GetMemory(ptr) & 0xff;
}

void WriteAddressWordValue(int addr, int word)
{
    int temp = GetMemory(addr) & 0xffff0000;
    SetMemory(addr, temp | word);
}

void NoxUtf8ToUnicode(int src, int dest)
{
    int i = 0, byt;

    while (1)
    {
        byt = GetByteValue(src + i);
        if (!byt) break;
        if (!(byt & 0x80))
        {
            WriteAddressWordValue(dest, byt);
            i ++;
        }
        else if ((byt & 0xe0) == 0xc0)
        {
            WriteAddressWordValue(dest, ((byt & 0x1f) <<6) | (GetByteValue(src + i + 1) & 0x3f));
            i += 2;
        }
        else if ((byt & 0xf0) == 0xe0)
        {
            WriteAddressWordValue(dest, ((byt & 0xf) << 12) | ((GetByteValue(src + i + 1) & 0x3f) << 6) | (GetByteValue(src + i + 2) & 0x3f));
            i += 3;
        }
        dest += 2;
    }
    WriteAddressWordValue(dest, 0);
}

void UniPrint(int sUnit, string sMsg)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
            link = GetScrDataField(UniPrint);
        NoxUtf8ToUnicode(str, link + 8);
        UniPrintCore(ptr, link + 8);
    }
}

void UniChatMessage(int sUnit, string sMsg, int duration)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
            link = GetScrDataField(UniChatMessage);
        NoxUtf8ToUnicode(str, link + 12);
        UniChatCore(ptr, link + 12, duration);
    }
}

void UniPrintToAll(string sMsg)
{
    int wDest[200];
    int plrPtr = 0x62f9e0, link, str = SToInt(sMsg), i;

    if (!link)
        link = GetScrDataField(UniPrint) + 4;
    str = GetMemory(0x97bb40 + (str * 4));
    NoxUtf8ToUnicode(str, link);
    for (i = 0 ; i < 32 ; i ++)
    {
        if (GetMemory(plrPtr))
            UniPrintCore(GetMemory(plrPtr), link);
        plrPtr += 0x12dc;
    }
}

int MathAbs(int num)
{
    if (num < 0)
        num = -num;
    return num;
}

int CheckSignDelay(int sPtr, int gap)
{
    int cFps = GetMemory(0x84ea04);

    if (MathAbs(cFps - GetMemory(sPtr)) > gap)
    {
        SetMemory(sPtr, cFps);
        return 1;
    }
    return 0;
}

void SignNotification()
{
    int otPtr = GetMemory(0x979720), sePtr = GetMemory(0x979724);

    if (otPtr && sePtr)
    {
        if (CheckSignDelay(GetMemory(sePtr + 0x2e0) + 100, 60))
        {
            UniPrint(other, ToStr(GetMemory(sePtr + 0x2f0)));
            //UniPrintCore(otPtr, GetMemory(sePtr + 0x2e0));
        }
    }
}

void RegistSignMessage(int sUnit, string sMsg)
{
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg);

    if (ptr)
    {
        SetMemory(ptr + 0x2f0, str);
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, SignNotification);
    }
}

int ImportUseItemFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x1424748B; arr[3] = 0x18246C8B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        link = GetScrDataField(ImportUseItemFunc);
    }
    return link;
}

int GetWordValue(int num)
{
	return num & 0xffff;
}

void WriteAddressByteValue(int addr, int byt)
{
	int temp = GetMemory(addr) & 0xffffff00;
	SetMemory(addr, temp | byt);
}

int NoxUnicodeToUtf8(int src, int destPtr)
{
	int i, byt, dest = destPtr;

	for (i = 0 ; i < 20 ; i ++)
	{
		byt = GetWordValue(GetMemory(src));
        if (!byt) break;
		if (byt < 0x80)
		{
			WriteAddressByteValue(dest, byt);
			dest ++;
		}
		else if (byt < 0x800)
		{
			WriteAddressByteValue(dest, ((byt >> 6) & 0x1f) | 0xc0);
			WriteAddressByteValue(dest + 1, (byt & 0x3f) | 0x80);
			dest += 2;
		}
		else
		{
			WriteAddressByteValue(dest, ((byt >> 12) & 0x0f) | 0xe0);
			WriteAddressByteValue(dest + 1, ((byt >> 6) & 0x3f) | 0x80);
			WriteAddressByteValue(dest + 2, (byt & 0x3f) | 0x80);
			dest += 3;
		}
        src += 2;
	}
    WriteAddressByteValue(dest, 0);
	return dest - destPtr;
}

string PlayerIngameNick(int sUnit)
{
    string emptyName = {
        "00:01234567890123456789abcd0123456789abxyz", "01:01234567890123456789abcd0123456789abxyz",
        "02:01234567890123456789abcd0123456789abxyz", "03:01234567890123456789abcd0123456789abxyz",
        "04:01234567890123456789abcd0123456789abxyz", "05:01234567890123456789abcd0123456789abxyz",
        "06:01234567890123456789abcd0123456789abxyz", "07:01234567890123456789abcd0123456789abxyz",
        "08:01234567890123456789abcd0123456789abxyz", "09:01234567890123456789abcd0123456789abxyz",
        "10:01234567890123456789abcd0123456789abxyz", "11:01234567890123456789abcd0123456789abxyz",
        "12:01234567890123456789abcd0123456789abxyz", "13:01234567890123456789abcd0123456789abxyz",
        "14:01234567890123456789abcd0123456789abxyz", "15:01234567890123456789abcd0123456789abxyz",
        "16:01234567890123456789abcd0123456789abxyz", "17:01234567890123456789abcd0123456789abxyz",
        "18:01234567890123456789abcd0123456789abxyz", "19:01234567890123456789abcd0123456789abxyz",
        "20:01234567890123456789abcd0123456789abxyz", "21:01234567890123456789abcd0123456789abxyz",
        "22:01234567890123456789abcd0123456789abxyz", "23:01234567890123456789abcd0123456789abxyz",
        "24:01234567890123456789abcd0123456789abxyz", "25:01234567890123456789abcd0123456789abxyz",
        "26:01234567890123456789abcd0123456789abxyz", "27:01234567890123456789abcd0123456789abxyz",
        "28:01234567890123456789abcd0123456789abxyz", "29:01234567890123456789abcd0123456789abxyz",
        "30:01234567890123456789abcd0123456789abxyz", "31:01234567890123456789abcd0123456789abxyz"};
    int ptr = UnitToPtr(sUnit), plrIndex, destPtr, srcPtr;
    
    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 4)
        {
            plrIndex = GetMemory(GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x810);
            destPtr = GetMemory(0x97bb40 + ((SToInt(emptyName) + plrIndex) * 4));
            srcPtr = GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x889;
            NoxUnicodeToUtf8(srcPtr, destPtr);
            return ToStr(SToInt(emptyName) + plrIndex);
        }
    }
    return "NULL";
}

int ImportCheckSelfDamage()
{
    int arr[14], link;

    if (!link)
    {
        arr[0] = 0x4C8B5651; arr[1] = 0xC9850C24; arr[2] = 0x748B2374; arr[3] = 0xF6851024; arr[4] = 0xF1391B74; arr[5] = 0x8B501374; arr[6] = 0x0001FC86;
        arr[7] = 0x74C08500; arr[8] = 0x58F08B05; arr[9] = 0xEB58ECEB; arr[10] = 0xC3595E04; arr[11] = 0x68595E90; arr[12] = 0x004E17B0; arr[13] = 0x909090C3;
        link = GetScrDataField(ImportCheckSelfDamage);
    }
    return link;
}

void SelfDamageClassEntry(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        SetMemory(ptr + 0x2cc, ImportCheckSelfDamage());
}

void SelfDamageClassMapExit()
{
    int i, pTable = 0x62f9e0, ptr;
    int link = GetScrDataField(SelfDamageClassMapExit);

    for (i = 31 ; i >= 0 ; Unused59(link, Unknownb9(link) - 1))
    {
        SetMemory(link + 8, GetMemory(pTable));
        if (ptr)
        {
            SetMemory(ptr + 0x2cc, 0x4e17b0);
            // SetMemory(ptr + 0x2d4, 0x54d2b0);
            // if (GetMemory(ptr + 0x2e8) ^ 0x4E62F0)      //@brief. 관객모드가 아닐 경우에만 되돌립니다//
                // SetMemory(GetMemory(pTable) + 0x2e8, 0x4f8100);     //@brief. 업데이트 되돌리기//
            // CancelPlayerDialogWithPTR(GetMemory(pTable));
        }
        Unused59(link + 4, Unknownb9(link + 4) + 0x12dc);
    }
}