
int GEN_ARR[486];
int OPS_MAP[486];
int PuzzleCount[12];
int player[12];
int STAGE[6];

int EnableMemoryReadWriteFunction(int t) {}

void ClientMain()
{
    int var0;

    if (!var0)
    {
        var0 = EnableMemoryReadWriteFunction(0);
        SetMemory(0x69ba98, 0x43de10);
        SetMemory(0x69b974, 0x64);
        ExtractMapBgm((SToInt("puyo.mp3") << 0x10) | ResourceBGMdata);
        var0 ++;
    }
}

int NetClientExec()
{
    int arr[2], link;

    arr[0] = 0xdf;
    CancelTimer(FrameTimerWithArg(10, NetClientExec, NetClientExec));
    link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    return link;
}

void ClientSetMemory(int user, int targetAddr, int byte)
{
    int ptr = NetClientExec();

    SetMemory(ptr + 1, targetAddr - 0x6d495c);
    SetMemory(ptr + 5, byte);
    NetClientSend(user, ptr, 6);
}

void DelayLink(int pUnit)
{
    ClientSetMemory(pUnit, 0x69ba98 + 0, 0);
    ClientSetMemory(pUnit, 0x69ba98 + 1, 0x10);
    ClientSetMemory(pUnit, 0x69ba98 + 2, 0x75);
}

void ClientEntry(int cliUnit)
{
    int scrNumber;

    CancelTimer(FrameTimerWithArg(10, ClientMain, ClientMain));
    scrNumber = GetMemory(GetMemory(0x83395c) + 8) & 0xff;
    //6A 00 6A 00/ 6A 7F E8 05/ 63 DB FF 83/ C4 0C 68 B0/ 95 4B 00 C3
    ClientSetMemory(cliUnit, 0x751000, 0x6a);
    ClientSetMemory(cliUnit, 0x751001, 0x00);
    ClientSetMemory(cliUnit, 0x751002, 0x6a);
    ClientSetMemory(cliUnit, 0x751003, 0x00);
    ClientSetMemory(cliUnit, 0x751004, 0x6a);
    ClientSetMemory(cliUnit, 0x751005, scrNumber);
    ClientSetMemory(cliUnit, 0x751006, 0xe8);
    ClientSetMemory(cliUnit, 0x751007, 0x05);
    ClientSetMemory(cliUnit, 0x751008, 0x63);
    ClientSetMemory(cliUnit, 0x751009, 0xdb);
    ClientSetMemory(cliUnit, 0x75100a, 0xff);
    ClientSetMemory(cliUnit, 0x75100b, 0x83);
    ClientSetMemory(cliUnit, 0x75100c, 0xc4);
    ClientSetMemory(cliUnit, 0x75100d, 0x0c);
    ClientSetMemory(cliUnit, 0x75100e, 0x68);
    ClientSetMemory(cliUnit, 0x75100f, 0x10);
    ClientSetMemory(cliUnit, 0x751010, 0xde);
    ClientSetMemory(cliUnit, 0x751011, 0x43);
    ClientSetMemory(cliUnit, 0x751012, 0x00);
    ClientSetMemory(cliUnit, 0x751013, 0xc3);
    FrameTimerWithArg(1, cliUnit, DelayLink);
}

int GetPlayerIndex(int pUnit)
{
	int res, ptr = UnitToPtr(pUnit);

	if (ptr)
	{
		res = GetMemory(ptr + 0x2ec);
		if (res)
		{
			res = GetMemory(res + 0x114);
			if (res)
				return GetMemory(res + 0x810) & 0xff;
		}
	}
	return 0;
}

int ImportNetSendClientNumber()
{
    StopScript(ImportNetSendClient);
}

int ImportNetSendClient()
{
    int arr[15], link;

    if (!link)
    {
        arr[0] = 0x40EBC068; arr[1] = 0x72506800; arr[2] = 0x83500050; arr[3] = 0x54FF10EC; arr[4] = 0x44891424;
        arr[5] = 0x54FF0C24; arr[6] = 0x44891424; arr[7] = 0x54FF0824; arr[8] = 0x44891424; arr[9] = 0x54FF0424;
        arr[10] = 0x04891424; arr[11] = 0x2454FF24; arr[12] = 0x10C48318; arr[13] = 0x08C48358; arr[14] = 0x909090C3;
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * ImportNetSendClientNumber() + 0x1c));
    }
    return link;
}

void NetClientSend(int plrUnit, int buffPtr, int buffSize)
{
    //netClientSend,0x0040EBC0
    int plrPtr = UnitToPtr(plrUnit), plrIdx;
    int temp = GetMemory(0x5c31ac);

    if (plrPtr)
    {
        if (GetMemory(plrPtr + 0x08) & 0x04)
        {
            plrIdx = GetMemory(GetMemory(GetMemory(plrPtr + 0x2ec) + 0x114) + 0x810);
            //5c31ac
            SetMemory(0x5c31ac, ImportNetSendClient());
            PushObject(plrIdx, ToFloat(1), ToFloat(buffPtr), ToFloat(buffSize));
            SetMemory(0x5c31ac, temp);
        }
    }
}

int FixCallOpcode(int curAddr, int targetAddr)
{
    SetMemory(curAddr + 1, targetAddr - curAddr - 5);
}

void BeaconActivate()
{
    int var_0;

    if (CurrentHealth(other) > 10)
    {
        var_0 = GetDirection(other);
        PuzzleCount[var_0] ++;
    }
}

void SetUnitFlags(int unit, int flag)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x10, flag);
}

int GetUnitFlags(int unit)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x10);
    return 0;
}

int GetOwner(int unit)
{
    int ptr = UnitToPtr(unit), res;

    if (ptr)
    {
        res = GetMemory(ptr + 0x1fc);
        if (res)
            return GetMemory(res + 0x2c);
    }
    return 0;
}

int ImportCreateAtFunc()
{
    int arr[20], link;

    if (!link)
    {
        arr[0] = 0xAA506856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xFF502414; arr[4] = 0x50042454;
        arr[5] = 0x082454FF; arr[6] = 0x4085048B; arr[7] = 0x680097BB; arr[8] = 0x004E3810; arr[9] = 0x2454FF50;
        arr[10] = 0x08C48304; arr[11] = 0xF685F08B; arr[12] = 0x006A0A74; arr[13] = 0x2454FF56; arr[14] = 0x08C48314;
        arr[15] = 0x50723068; arr[16] = 0x54FF5600; arr[17] = 0xC4830424; arr[18] = 0x5EC03118; arr[19] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportCreateAtFunc, ImportCreateAtFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int CreateObjectAt(string name, float x, float y)
{
    int temp = GetMemory(0x5c3160), res;

    SetMemory(0x5c3160, ImportCreateAtFunc());
    res = CreateMover(SToInt(name), ToInt(x), y);
    SetMemory(0x5c3160, temp);
    if (res) return GetMemory(res + 0x2c);
    else return 0;
}

int GetUnitThingID(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x4);
    return 0;
}

int ImportUnitToPtrFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x511B6068; arr[3] = 0x54FF5000; arr[4] = 0xC4830424;
        arr[5] = 0x7230680C; arr[6] = 0xFF500050; arr[7] = 0x83042454; arr[8] = 0xC03108C4; arr[9] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportUnitToPtrFunc, ImportUnitToPtrFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int UnitToPtr(int unit)
{
    int temp = GetMemory(0x5c336c), res;
    SetMemory(0x5c336c, ImportUnitToPtrFunc());
    res = Unknownb8(unit);
    SetMemory(0x5c336c, temp);
	return res;
}

int GetMemory(int addr)
{
    return Unknownb9(addr);
}

void SetMemory(int addr, int value)
{
    Unused59(addr, value);
}

void MapInitialize()
{
    int t = EnableMemoryReadWriteFunction(0);

    ImportCreateAtFunc();
    ImportUnitToPtrFunc();
    MusicEvent();
    grpFlag(-1);
    getBeacon(-1);

    //loop_run
    FrameTimer(6, loopPreservePlayers);

    //delay_run
    FrameTimer(30, callstartPicketFunc);
}

void MapExit()
{
    MusicEvent();
}

void setResetGame(int i)
{
    resetBeacon(i);
    RemoveAllBlocks(i);
    readAndWriteMap(i);
    EnchantOff(player[i], "ENCHANT_INFRAVISION");
    UniPrintToAll(PlayerIngameNick(player[i]) + " 플레이어 님께서 리셋기능을 활성화 했습니다.");
    UniChatMessage(player[i], "게임을 리셋하겠습니다...!", 150);
    Enchant(player[i], "ENCHANT_FREEZE", 2.0);
    MoveWaypoint(24, GetObjectX(player[i]), GetObjectY(player[i]));
    AudioEvent("SoulGateTouch", 24);
}

void clearCurrentStage(int i)
{
    resetBeacon(i);
    RemoveAllBlocks(i);
    STAGE[i] ++;
    UniPrintToAll("현재 스테이지를 완료하였습니다! 다음 스테이지는 " + IntToString(STAGE[i] + 1) + " 입니다!");
    UniPrintToAll(PlayerIngameNick(player[i]) + " 플레이어 님께서 스테이지 " + IntToString(STAGE[i] + 1) + " 으로 진입하셨습니다.");
    Enchant(player[i], "ENCHANT_FREEZE", 2.0);
    MoveWaypoint(24, GetObjectX(player[i]), GetObjectY(player[i]));
    if (STAGE[i] < 24)
    {
        AudioEvent("FlagRespawn", 24);
        FrameTimerWithArg(1, i * 81, func_ptr() + STAGE[i]);
        FrameTimerWithArg(2, i, readAndWriteMap);
    }
    else
    {
        Enchant(player[i], "ENCHANT_CROWN", 0.0);
        UniPrintToAll(PlayerIngameNick(player[i]) + " 플레이어 님께서 모든 스테이지를 클리어 하셨습니다, 축하드립니다!!");
        AudioEvent("LongBellsDown", 24);
        DeleteObjectTimer(CreateObject("LevelUp", 24), 450);
    }
}

int spawnBlock(int wp, int num)
{
    int unit = CreateObject("Maiden", wp);

    CreateObject("MonsterGenerator", wp);
    LookWithAngle(unit, num);
    LookWithAngle(unit + 1, 0);
    Frozen(unit, 1);
    Frozen(unit + 1, 1);
    ObjectOff(unit + 1);
    SetDialog(unit, "NORMAL", pushGenerator, nullPointer);

    return unit;
}

void pushGenerator()
{
    int angle = GetDirection(other) / 64;
    int unit;

    if (Distance(GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other)) < 42.0 && !GetDirection(GetTrigger() + 1))
    {
        LookWithAngle(GetTrigger() + 1, 1);
        if (angle == 0)
            MoveWaypoint(2, GetObjectX(self) + 46.0, GetObjectY(self) + 46.0);
        else if (angle == 1)
            MoveWaypoint(2, GetObjectX(self) - 46.0, GetObjectY(self) + 46.0);
        else if (angle == 2)
            MoveWaypoint(2, GetObjectX(self) - 46.0, GetObjectY(self) - 46.0);
        else
            MoveWaypoint(2, GetObjectX(self) + 46.0, GetObjectY(self) - 46.0);
        unit = CreateObject("GreenFrog", 2);
        SetCallback(unit, 9, unitTouchedEvent);
        AudioEvent("FlareWand", 2);
        FrameTimerWithArg(1, GetTrigger(), checkPush);
        FrameTimerWithArg(1, unit, checkPush);
    }
}

void checkPush(int arg_0)
{
    int var_0;

    if (!var_0)
        var_0 = arg_0;
    else
    {
        LookWithAngle(var_0 + 1, 0);
        if (CurrentHealth(arg_0) > 0)
        {
            MoveWaypoint(3, GetObjectX(arg_0), GetObjectY(arg_0));
            Delete(arg_0);
            MoveObject(var_0, GetWaypointX(3), GetWaypointY(3));
            MoveObject(var_0 + 1, GetWaypointX(3), GetWaypointY(3));
        }
        var_0 = 0;
    }
}

void unitTouchedEvent()
{
    if (!HasClass(other, "TRIGGER"))
        Delete(self);
}

void nullPointer()
{
    return;
}

int CheckIsSwitchUnit(int unit)
{
    int ptr;

    if (GetUnitThingID(unit) == 735)
    {
        ptr = UnitToPtr(unit);
        if (ptr)
            SetMemory(ptr + 8, GetMemory(ptr + 8) ^ 0x400000);
        return 1;
    }
    return 0;
}

int getBeacon(int arg_0)
{
    int var_0[42], i;

    if (arg_0 == -1)
    {
        var_0[0] = Object("beaconBase");
        CheckIsSwitchUnit(var_0[0]);
        for (i = 1 ; i < 42 ; i ++)
        {
            var_0[i] = var_0[0] + (i * 2);
            CheckIsSwitchUnit(var_0[i]);
        }
        return 0;
    }
    return var_0[arg_0];
}

void resetBeacon(int arg_0)
{
    int i;

    for (i = 6 ; i >= 0 ; i --)
        ObjectOff(getBeacon(arg_0 * 7 + i));
}

/*****
OPS_MAP
0: Block
1: pushBlock
2: playerStart
3: beacon
*****/

void readAndWriteMap(int arg_0)
{
    int i;
    int var_0 = arg_0 * 81;
    int add = 0;

    PuzzleCount[arg_0 + 6] = 0;

    MoveWaypoint(arg_0 + 12, GetWaypointX(arg_0 + 18), GetWaypointY(arg_0 + 18));
    for (i = 0 ; i < 81 ; i ++)
    {
        if (!OPS_MAP[i + var_0])
        {
            GEN_ARR[arg_0 * 81 + add] = CreateObject("MonsterGenerator", arg_0 + 12);
            Enchant(GEN_ARR[arg_0 * 81 + add], "ENCHANT_FREEZE", 0.0);
            ObjectOff(GEN_ARR[arg_0 * 81 + add]);
            Frozen(GEN_ARR[arg_0 * 81 + add], 1);
            add ++;
        }
        else if (OPS_MAP[i + var_0] == 1)
        {
            GEN_ARR[arg_0 * 81 + add] = spawnBlock(arg_0 + 12, arg_0);
            PuzzleCount[arg_0 + 6] ++;
            add ++;
        }
        else if (OPS_MAP[i + var_0] == 2)
        {
            MoveWaypoint(arg_0 + 4, GetWaypointX(arg_0 + 12), GetWaypointY(arg_0 + 12));
            MoveObject(player[arg_0], GetWaypointX(arg_0 + 4), GetWaypointY(arg_0 + 4));
        }
        else if (OPS_MAP[i + var_0] == 3)
        {
            teleportBeacon(arg_0, arg_0 + 12);
            GEN_ARR[arg_0 * 81 + add] = CreateObject("BlueSummons", arg_0 + 12);
            add ++;
        }
        else if (OPS_MAP[i + var_0] == 5)
        {
            GEN_ARR[arg_0 * 81 + add] = spawnBlock(arg_0 + 12, arg_0);
            PuzzleCount[arg_0 + 6] ++;
            add ++;
            teleportBeacon(arg_0, arg_0 + 12);
            GEN_ARR[arg_0 * 81 + add] = CreateObject("BlueSummons", arg_0 + 12);
            add ++;
        }
        if (i % 9 == 8)
            MoveWaypoint(arg_0 + 12, GetWaypointX(arg_0 + 12) - (46.0 * 7.0), GetWaypointY(arg_0 + 12) + (46.0 * 9.0));
        else
            MoveWaypoint(arg_0 + 12, GetWaypointX(arg_0 + 12) + 46.0, GetWaypointY(arg_0 + 12) - 46.0);
    }
}

void teleportBeacon(int arg_0, int wp)
{
    int i;

    if (i == 7)
        i = 0;
    ObjectOn(getBeacon(arg_0 * 7 + i));
    MoveObject(getBeacon(arg_0 * 7 + i), GetWaypointX(wp), GetWaypointY(wp));

    i ++;
}

void RemoveAllBlocks(int arg_0)
{
    int i;

    for (i = 80 ; i >= 0 ; i --)
    {
        if (HasClass(GEN_ARR[arg_0 * 81 + i], "MONSTER"))
            Delete(GEN_ARR[arg_0 * 81 + i] + 1);
        Delete(GEN_ARR[arg_0 * 81 + i]);
    }
}

int func_ptr()
{
    StopScript(opsMapArea1);
}

void opsMapArea1(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 0;OPS_MAP[i + 22] = 0;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 4;OPS_MAP[i + 25] = 3;OPS_MAP[i + 26] = 4;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 4;OPS_MAP[i + 29] = 4;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 0;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 1;OPS_MAP[i + 34] = 3;OPS_MAP[i + 35] = 4;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 2;OPS_MAP[i + 38] = 1;OPS_MAP[i + 39] = 1;OPS_MAP[i + 40] = 1;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 4;OPS_MAP[i + 43] = 3;OPS_MAP[i + 44] = 4;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 4;OPS_MAP[i + 49] = 0;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 4;OPS_MAP[i + 52] = 3;OPS_MAP[i + 53] = 4;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 0;OPS_MAP[i + 59] = 0;OPS_MAP[i + 60] = 0;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea2(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 4;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 4;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 1;OPS_MAP[i + 30] = 1;OPS_MAP[i + 31] = 1;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 3;OPS_MAP[i + 39] = 3;OPS_MAP[i + 40] = 3;OPS_MAP[i + 41] = 3;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 1;OPS_MAP[i + 49] = 1;OPS_MAP[i + 50] = 3;OPS_MAP[i + 51] = 0;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 2;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 0;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea3(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 4;OPS_MAP[i + 20] = 2;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 4;OPS_MAP[i + 29] = 0;OPS_MAP[i + 30] = 0;OPS_MAP[i + 31] = 1;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 4;OPS_MAP[i + 39] = 3;OPS_MAP[i + 40] = 4;OPS_MAP[i + 41] = 3;OPS_MAP[i + 42] = 4;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 0;OPS_MAP[i + 48] = 4;OPS_MAP[i + 49] = 1;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 4;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 0;OPS_MAP[i + 57] = 0;OPS_MAP[i + 58] = 0;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea4(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 4;OPS_MAP[i + 20] = 2;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 0;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 4;OPS_MAP[i + 29] = 0;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 0;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 3;OPS_MAP[i + 39] = 3;OPS_MAP[i + 40] = 3;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 4;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 1;OPS_MAP[i + 49] = 1;OPS_MAP[i + 50] = 1;OPS_MAP[i + 51] = 4;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 0;OPS_MAP[i + 57] = 0;OPS_MAP[i + 58] = 4;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea5(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 3;OPS_MAP[i + 13] = 4;OPS_MAP[i + 14] = 4;OPS_MAP[i + 15] = 4;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 3;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 4;OPS_MAP[i + 24] = 4;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 0;OPS_MAP[i + 30] = 0;OPS_MAP[i + 31] = 4;OPS_MAP[i + 32] = 3;OPS_MAP[i + 33] = 4;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 0;OPS_MAP[i + 39] = 4;OPS_MAP[i + 40] = 4;OPS_MAP[i + 41] = 0;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 0;OPS_MAP[i + 48] = 4;OPS_MAP[i + 49] = 1;OPS_MAP[i + 50] = 1;OPS_MAP[i + 51] = 4;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 0;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 2;OPS_MAP[i + 59] = 1;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 4;OPS_MAP[i + 67] = 4;OPS_MAP[i + 68] = 4;OPS_MAP[i + 69] = 4;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea6(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 4;OPS_MAP[i + 11] = 4;OPS_MAP[i + 12] = 4;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 4;OPS_MAP[i + 15] = 4;OPS_MAP[i + 16] = 4;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 4;OPS_MAP[i + 20] = 5;OPS_MAP[i + 21] = 3;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 3;OPS_MAP[i + 24] = 3;OPS_MAP[i + 25] = 4;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 1;OPS_MAP[i + 30] = 0;OPS_MAP[i + 31] = 4;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 1;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 1;OPS_MAP[i + 39] = 4;OPS_MAP[i + 40] = 4;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 4;OPS_MAP[i + 43] = 4;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 4;OPS_MAP[i + 49] = 0;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 2;OPS_MAP[i + 52] = 4;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 0;OPS_MAP[i + 57] = 0;OPS_MAP[i + 58] = 0;OPS_MAP[i + 59] = 0;OPS_MAP[i + 60] = 0;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea7(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 4;OPS_MAP[i + 8] = 4;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 4;OPS_MAP[i + 17] = 4;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 0;OPS_MAP[i + 22] = 0;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 4;OPS_MAP[i + 26] = 4;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 4;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 4;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 4;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 4;OPS_MAP[i + 39] = 1;OPS_MAP[i + 40] = 1;OPS_MAP[i + 41] = 1;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 4;OPS_MAP[i + 44] = 3;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 1;OPS_MAP[i + 49] = 2;OPS_MAP[i + 50] = 1;OPS_MAP[i + 51] = 4;OPS_MAP[i + 52] = 4;OPS_MAP[i + 53] = 3;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 4;OPS_MAP[i + 59] = 0;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 1;OPS_MAP[i + 62] = 3;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 3;OPS_MAP[i + 70] = 3;OPS_MAP[i + 71] = 3;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea8(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 4;OPS_MAP[i + 2] = 4;OPS_MAP[i + 3] = 4;OPS_MAP[i + 4] = 4;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 4;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 1;OPS_MAP[i + 13] = 1;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 4;OPS_MAP[i + 20] = 4;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 4;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 1;OPS_MAP[i + 29] = 0;OPS_MAP[i + 30] = 0;OPS_MAP[i + 31] = 0;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 4;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 0;OPS_MAP[i + 39] = 2;OPS_MAP[i + 40] = 3;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 4;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 4;OPS_MAP[i + 49] = 3;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 0;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 3;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 0;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea9(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 4;OPS_MAP[i + 11] = 4;OPS_MAP[i + 12] = 4;OPS_MAP[i + 13] = 4;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 4;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 0;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 4;OPS_MAP[i + 29] = 3;OPS_MAP[i + 30] = 1;OPS_MAP[i + 31] = 3;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 4;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 1;OPS_MAP[i + 39] = 2;OPS_MAP[i + 40] = 1;OPS_MAP[i + 41] = 0;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 4;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 3;OPS_MAP[i + 48] = 1;OPS_MAP[i + 49] = 3;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 0;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 4;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 0;OPS_MAP[i + 58] = 0;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 0;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 4;OPS_MAP[i + 64] = 4;OPS_MAP[i + 65] = 4;OPS_MAP[i + 66] = 4;OPS_MAP[i + 67] = 4;OPS_MAP[i + 68] = 4;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea10(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 4;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 4;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 3;OPS_MAP[i + 39] = 1;OPS_MAP[i + 40] = 3;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 0;OPS_MAP[i + 48] = 1;OPS_MAP[i + 49] = 0;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 0;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 4;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 2;OPS_MAP[i + 58] = 4;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 0;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea11(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 4;OPS_MAP[i + 12] = 4;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 4;OPS_MAP[i + 21] = 1;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 4;OPS_MAP[i + 29] = 3;OPS_MAP[i + 30] = 5;OPS_MAP[i + 31] = 3;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 0;OPS_MAP[i + 39] = 1;OPS_MAP[i + 40] = 4;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 2;OPS_MAP[i + 49] = 4;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 0;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 0;OPS_MAP[i + 57] = 0;OPS_MAP[i + 58] = 0;OPS_MAP[i + 59] = 0;OPS_MAP[i + 60] = 0;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea12(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 4;OPS_MAP[i + 11] = 4;OPS_MAP[i + 12] = 4;OPS_MAP[i + 13] = 3;OPS_MAP[i + 14] = 3;OPS_MAP[i + 15] = 3;OPS_MAP[i + 16] = 4;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 4;OPS_MAP[i + 20] = 4;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 0;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 4;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 0;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 1;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 4;OPS_MAP[i + 34] = 4;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 4;OPS_MAP[i + 39] = 1;OPS_MAP[i + 40] = 0;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 4;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 1;OPS_MAP[i + 48] = 4;OPS_MAP[i + 49] = 0;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 2;OPS_MAP[i + 52] = 4;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 4;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 0;OPS_MAP[i + 59] = 0;OPS_MAP[i + 60] = 0;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea13(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 3;OPS_MAP[i + 11] = 3;OPS_MAP[i + 12] = 3;OPS_MAP[i + 13] = 3;OPS_MAP[i + 14] = 3;OPS_MAP[i + 15] = 4;OPS_MAP[i + 16] = 4;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 4;OPS_MAP[i + 20] = 4;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 3;OPS_MAP[i + 23] = 4;OPS_MAP[i + 24] = 1;OPS_MAP[i + 25] = 4;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 0;OPS_MAP[i + 30] = 0;OPS_MAP[i + 31] = 4;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 1;OPS_MAP[i + 39] = 4;OPS_MAP[i + 40] = 4;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 4;OPS_MAP[i + 43] = 4;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 1;OPS_MAP[i + 48] = 1;OPS_MAP[i + 49] = 1;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 1;OPS_MAP[i + 52] = 4;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 4;OPS_MAP[i + 56] = 2;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 0;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 4;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea14(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 4;OPS_MAP[i + 11] = 4;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 4;OPS_MAP[i + 20] = 4;OPS_MAP[i + 21] = 0;OPS_MAP[i + 22] = 0;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 4;OPS_MAP[i + 29] = 4;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 4;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 4;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 4;OPS_MAP[i + 39] = 0;OPS_MAP[i + 40] = 0;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 1;OPS_MAP[i + 43] = 4;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 0;OPS_MAP[i + 49] = 3;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 1;OPS_MAP[i + 52] = 2;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 4;OPS_MAP[i + 55] = 4;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 3;OPS_MAP[i + 59] = 0;OPS_MAP[i + 60] = 1;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 4;OPS_MAP[i + 64] = 4;OPS_MAP[i + 65] = 4;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 3;OPS_MAP[i + 68] = 4;OPS_MAP[i + 69] = 4;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea15(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 4;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 3;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 3;OPS_MAP[i + 30] = 1;OPS_MAP[i + 31] = 3;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 4;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 1;OPS_MAP[i + 39] = 1;OPS_MAP[i + 40] = 0;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 4;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 2;OPS_MAP[i + 49] = 4;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 0;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 0;OPS_MAP[i + 57] = 0;OPS_MAP[i + 58] = 0;OPS_MAP[i + 59] = 0;OPS_MAP[i + 60] = 0;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea16(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 4;OPS_MAP[i + 15] = 4;OPS_MAP[i + 16] = 3;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 4;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 4;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 0;OPS_MAP[i + 30] = 2;OPS_MAP[i + 31] = 1;OPS_MAP[i + 32] = 1;OPS_MAP[i + 33] = 1;OPS_MAP[i + 34] = 3;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 0;OPS_MAP[i + 39] = 4;OPS_MAP[i + 40] = 4;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 4;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 0;OPS_MAP[i + 48] = 4;OPS_MAP[i + 49] = 4;OPS_MAP[i + 50] = 0;OPS_MAP[i + 51] = 0;OPS_MAP[i + 52] = 4;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 0;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 4;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 3;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea17(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 4;OPS_MAP[i + 11] = 4;OPS_MAP[i + 12] = 4;OPS_MAP[i + 13] = 4;OPS_MAP[i + 14] = 4;OPS_MAP[i + 15] = 4;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 4;OPS_MAP[i + 20] = 1;OPS_MAP[i + 21] = 1;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 4;OPS_MAP[i + 24] = 4;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 2;OPS_MAP[i + 30] = 0;OPS_MAP[i + 31] = 0;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 4;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 1;OPS_MAP[i + 39] = 4;OPS_MAP[i + 40] = 0;OPS_MAP[i + 41] = 1;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 3;OPS_MAP[i + 48] = 3;OPS_MAP[i + 49] = 3;OPS_MAP[i + 50] = 3;OPS_MAP[i + 51] = 4;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 4;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea18(int i) //fix
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 4;OPS_MAP[i + 23] = 4;OPS_MAP[i + 24] = 4;OPS_MAP[i + 25] = 4;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 4;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 4;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 1;OPS_MAP[i + 34] = 4;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 4;OPS_MAP[i + 39] = 4;OPS_MAP[i + 40] = 0;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 1;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 0;OPS_MAP[i + 48] = 1;OPS_MAP[i + 49] = 0;OPS_MAP[i + 50] = 0;OPS_MAP[i + 51] = 4;OPS_MAP[i + 52] = 4;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 4;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 3;OPS_MAP[i + 59] = 3;OPS_MAP[i + 60] = 5;OPS_MAP[i + 61] = 3;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 4;OPS_MAP[i + 65] = 4;OPS_MAP[i + 66] = 4;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 4;OPS_MAP[i + 69] = 2;OPS_MAP[i + 70] = 4;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea19(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 0;OPS_MAP[i + 22] = 0;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 4;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 0;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 4;OPS_MAP[i + 39] = 1;OPS_MAP[i + 40] = 0;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 4;OPS_MAP[i + 43] = 3;OPS_MAP[i + 44] = 4;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 1;OPS_MAP[i + 48] = 2;OPS_MAP[i + 49] = 1;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 3;OPS_MAP[i + 52] = 5;OPS_MAP[i + 53] = 3;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 4;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 1;OPS_MAP[i + 58] = 4;OPS_MAP[i + 59] = 0;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 3;OPS_MAP[i + 62] = 4;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 4;OPS_MAP[i + 65] = 4;OPS_MAP[i + 66] = 4;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea20(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 4;OPS_MAP[i + 11] = 4;OPS_MAP[i + 12] = 4;OPS_MAP[i + 13] = 4;OPS_MAP[i + 14] = 4;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 4;OPS_MAP[i + 20] = 5;OPS_MAP[i + 21] = 4;OPS_MAP[i + 22] = 5;OPS_MAP[i + 23] = 4;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 3;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 1;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 5;OPS_MAP[i + 39] = 4;OPS_MAP[i + 40] = 5;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 0;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 4;OPS_MAP[i + 49] = 4;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 0;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 4;OPS_MAP[i + 56] = 2;OPS_MAP[i + 57] = 0;OPS_MAP[i + 58] = 4;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 0;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea21(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 0;OPS_MAP[i + 22] = 0;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 0;OPS_MAP[i + 30] = 0;OPS_MAP[i + 31] = 4;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 4;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 0;OPS_MAP[i + 39] = 0;OPS_MAP[i + 40] = 1;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 4;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 4;OPS_MAP[i + 49] = 1;OPS_MAP[i + 50] = 4;OPS_MAP[i + 51] = 0;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 4;OPS_MAP[i + 56] = 0;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 0;OPS_MAP[i + 59] = 4;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 4;OPS_MAP[i + 65] = 2;OPS_MAP[i + 66] = 4;OPS_MAP[i + 67] = 3;OPS_MAP[i + 68] = 4;OPS_MAP[i + 69] = 3;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea22(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 4;OPS_MAP[i + 13] = 4;OPS_MAP[i + 14] = 3;OPS_MAP[i + 15] = 4;OPS_MAP[i + 16] = 4;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 0;OPS_MAP[i + 22] = 1;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 4;OPS_MAP[i + 25] = 4;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 4;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 3;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 3;OPS_MAP[i + 34] = 4;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 0;OPS_MAP[i + 39] = 1;OPS_MAP[i + 40] = 0;OPS_MAP[i + 41] = 1;OPS_MAP[i + 42] = 4;OPS_MAP[i + 43] = 0;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 3;OPS_MAP[i + 49] = 4;OPS_MAP[i + 50] = 3;OPS_MAP[i + 51] = 4;OPS_MAP[i + 52] = 3;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 4;OPS_MAP[i + 56] = 1;OPS_MAP[i + 57] = 0;OPS_MAP[i + 58] = 1;OPS_MAP[i + 59] = 0;OPS_MAP[i + 60] = 1;OPS_MAP[i + 61] = 4;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 4;OPS_MAP[i + 65] = 4;OPS_MAP[i + 66] = 2;OPS_MAP[i + 67] = 4;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 4;OPS_MAP[i + 70] = 4;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea23(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 0;OPS_MAP[i + 21] = 0;OPS_MAP[i + 22] = 0;OPS_MAP[i + 23] = 0;OPS_MAP[i + 24] = 0;OPS_MAP[i + 25] = 0;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 0;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 4;OPS_MAP[i + 32] = 4;OPS_MAP[i + 33] = 0;OPS_MAP[i + 34] = 0;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 4;OPS_MAP[i + 38] = 4;OPS_MAP[i + 39] = 3;OPS_MAP[i + 40] = 3;OPS_MAP[i + 41] = 1;OPS_MAP[i + 42] = 1;OPS_MAP[i + 43] = 4;OPS_MAP[i + 44] = 4;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 4;OPS_MAP[i + 47] = 4;OPS_MAP[i + 48] = 1;OPS_MAP[i + 49] = 1;OPS_MAP[i + 50] = 3;OPS_MAP[i + 51] = 3;OPS_MAP[i + 52] = 4;OPS_MAP[i + 53] = 4;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 0;OPS_MAP[i + 57] = 0;OPS_MAP[i + 58] = 4;OPS_MAP[i + 59] = 2;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 0;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 0;OPS_MAP[i + 66] = 0;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 0;OPS_MAP[i + 70] = 0;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 0;OPS_MAP[i + 75] = 0;OPS_MAP[i + 76] = 0;OPS_MAP[i + 77] = 0;OPS_MAP[i + 78] = 0;OPS_MAP[i + 79] = 0;OPS_MAP[i + 80] = 0;
}

void opsMapArea24(int i)
{
    OPS_MAP[i + 0] = 0;OPS_MAP[i + 1] = 0;OPS_MAP[i + 2] = 0;OPS_MAP[i + 3] = 0;OPS_MAP[i + 4] = 0;OPS_MAP[i + 5] = 0;OPS_MAP[i + 6] = 0;OPS_MAP[i + 7] = 0;OPS_MAP[i + 8] = 0;
    OPS_MAP[i + 9] = 0;OPS_MAP[i + 10] = 0;OPS_MAP[i + 11] = 0;OPS_MAP[i + 12] = 0;OPS_MAP[i + 13] = 0;OPS_MAP[i + 14] = 0;OPS_MAP[i + 15] = 0;OPS_MAP[i + 16] = 0;OPS_MAP[i + 17] = 0;
    OPS_MAP[i + 18] = 0;OPS_MAP[i + 19] = 0;OPS_MAP[i + 20] = 4;OPS_MAP[i + 21] = 3;OPS_MAP[i + 22] = 3;OPS_MAP[i + 23] = 3;OPS_MAP[i + 24] = 4;OPS_MAP[i + 25] = 4;OPS_MAP[i + 26] = 0;
    OPS_MAP[i + 27] = 0;OPS_MAP[i + 28] = 0;OPS_MAP[i + 29] = 4;OPS_MAP[i + 30] = 4;OPS_MAP[i + 31] = 0;OPS_MAP[i + 32] = 0;OPS_MAP[i + 33] = 1;OPS_MAP[i + 34] = 4;OPS_MAP[i + 35] = 0;
    OPS_MAP[i + 36] = 0;OPS_MAP[i + 37] = 0;OPS_MAP[i + 38] = 4;OPS_MAP[i + 39] = 4;OPS_MAP[i + 40] = 1;OPS_MAP[i + 41] = 4;OPS_MAP[i + 42] = 4;OPS_MAP[i + 43] = 4;OPS_MAP[i + 44] = 0;
    OPS_MAP[i + 45] = 0;OPS_MAP[i + 46] = 0;OPS_MAP[i + 47] = 0;OPS_MAP[i + 48] = 1;OPS_MAP[i + 49] = 0;OPS_MAP[i + 50] = 0;OPS_MAP[i + 51] = 1;OPS_MAP[i + 52] = 0;OPS_MAP[i + 53] = 0;
    OPS_MAP[i + 54] = 0;OPS_MAP[i + 55] = 0;OPS_MAP[i + 56] = 4;OPS_MAP[i + 57] = 4;OPS_MAP[i + 58] = 4;OPS_MAP[i + 59] = 1;OPS_MAP[i + 60] = 4;OPS_MAP[i + 61] = 4;OPS_MAP[i + 62] = 0;
    OPS_MAP[i + 63] = 0;OPS_MAP[i + 64] = 0;OPS_MAP[i + 65] = 4;OPS_MAP[i + 66] = 1;OPS_MAP[i + 67] = 0;OPS_MAP[i + 68] = 0;OPS_MAP[i + 69] = 4;OPS_MAP[i + 70] = 4;OPS_MAP[i + 71] = 0;
    OPS_MAP[i + 72] = 0;OPS_MAP[i + 73] = 0;OPS_MAP[i + 74] = 4;OPS_MAP[i + 75] = 4;OPS_MAP[i + 76] = 3;OPS_MAP[i + 77] = 3;OPS_MAP[i + 78] = 3;OPS_MAP[i + 79] = 2;OPS_MAP[i + 80] = 0;
}

int VaildPlayerCheck(int plrUnit)
{
    int plrArr[32], pIndex = GetPlayerIndex(plrUnit);

    if (pIndex >= 0)
    {
        if (plrUnit ^ plrArr[pIndex])
        {
            plrArr[pIndex] = plrUnit;
            return 1;
        }
    }
    return 0;
}

void ResourceBGMdata()
{
}

void PlayerClassOnInit(int plr, int pUnit)
{
    MoveWaypoint(plr + 4, GetWaypointX(plr + 13), GetWaypointY(plr + 13));
    player[plr] = pUnit;
    player[plr + 6] = 1;
    STAGE[plr] = 0;
    if (VaildPlayerCheck(pUnit))
    {
        if (pUnit ^ GetHost())
            ClientEntry(pUnit);
        else
        {
            ExtractMapBgm((SToInt("puyo.mp3") << 0x10) | ResourceBGMdata);
        }
        FrameTimerWithArg(60, pUnit, NetPlayBgm);
    }
    UniPrintToAll(PlayerIngameNick(player[plr]) + " 플레이어 님 입장!");
}

void playerHasJoined()
{
    int i, plr;

    while (CurrentHealth(other))
    {
        if (MaxHealth(other) == 150)
        {
            plr = checkPlayer();
            for (i = 0 ; i < 6 && plr < 0 ; i ++)
            {
                if (!MaxHealth(player[i]))
                {
                    PlayerClassOnInit(i, GetCaller());
                    plr = i;
                    break;
                }
            }
            if (plr >= 0)
            {
                entryPlayer(plr);
                break;
            }
        }
        playerCantEntry();
        break;
    }
}

void entryPlayer(int i)
{
    Delete(GetLastItem(player[i]));
    resetBeacon(i);
    RemoveAllBlocks(i);
    Enchant(player[i], "ENCHANT_FREEZE", 2.0);
    UniChatMessage(player[i], "한번 시작해 봅시다!", 150);
    if (!STAGE[i])
        opsMapArea1(i * 81);
    readAndWriteMap(i);
}

void playerCantEntry()
{
    UniPrintToAll("맵에 문제가 생겨서 해당 플레이어는 입장할 수가 없습니다.");
    MoveObject(other, GetWaypointX(11), GetWaypointY(11));
    Enchant(other, "ENCHANT_FREEZE", 0.0);
    Enchant(other, "ENCHANT_ANCHORED", 0.0);
    Enchant(other, "ENCHANT_ANTI_MAGIC", 0.0);
    AudioEvent("FlareWand", 11);
}

void loopPreservePlayers()
{
    int i;

    for (i = 0 ; i < 6 ; i ++)
    {
        if (MaxHealth(player[i]))
        {
            if (GetUnitFlags(player[i]) & 0x40)
                player[i] = 0;
            else if (CurrentHealth(player[i]))
            {
                MoveObject(grpFlag(i), GetObjectX(player[i]), GetObjectY(player[i]));
                if (HasEnchant(player[i], "ENCHANT_INFRAVISION"))
                    setResetGame(i);
                if (PuzzleCount[i] > 0)
                {
                    if (PuzzleCount[i] == PuzzleCount[i + 6])
                        clearCurrentStage(i);
                    PuzzleCount[i] = 0;
                }
            }
        }
        else if (player[i + 6])
        {
            player[i] = 0;
            player[i + 6] = 0;
        }
    }
    FrameTimer(1, loopPreservePlayers);
}

int checkPlayer()
{
    int i;

    for (i = 5 ; i >= 0 ; i --)
    {
        if (IsCaller(player[i]))
            return i;
    }
    return -1;
}

int grpFlag(int arg_0)
{
    int var_0[6];

    if (arg_0 == -1)
    {
        var_0[0] = Object("flagBase");

        int i;
        for (i = 1 ; i < 6 ; i ++)
            var_0[i] = var_0[0] + (i * 2);
        return 0;
    }
    return var_0[arg_0];
}

int GetWordValue(int num)
{
	return num & 0xffff;
}

void WriteAddressByteValue(int addr, int byt)
{
	int temp = GetMemory(addr) & 0xffffff00;
	SetMemory(addr, temp | byt);
}

int NoxUnicodeToUtf8(int src, int destPtr)
{
	int i, byt, dest = destPtr;

	for (i = 0 ; i < 20 ; i ++)
	{
		byt = GetWordValue(GetMemory(src));
        if (!byt) break;
		if (byt < 0x80)
		{
			WriteAddressByteValue(dest, byt);
			dest ++;
		}
		else if (byt < 0x800)
		{
			WriteAddressByteValue(dest, ((byt >> 6) & 0x1f) | 0xc0);
			WriteAddressByteValue(dest + 1, (byt & 0x3f) | 0x80);
			dest += 2;
		}
		else
		{
			WriteAddressByteValue(dest, ((byt >> 12) & 0x0f) | 0xe0);
			WriteAddressByteValue(dest + 1, ((byt >> 6) & 0x3f) | 0x80);
			WriteAddressByteValue(dest + 2, (byt & 0x3f) | 0x80);
			dest += 3;
		}
        src += 2;
	}
    WriteAddressByteValue(dest, 0);
	return dest - destPtr;
}

string PlayerIngameNick(int sUnit)
{
    string emptyName = {
        "00:01234567890123456789abcd0123456789abxyz", "01:01234567890123456789abcd0123456789abxyz",
        "02:01234567890123456789abcd0123456789abxyz", "03:01234567890123456789abcd0123456789abxyz",
        "04:01234567890123456789abcd0123456789abxyz", "05:01234567890123456789abcd0123456789abxyz",
        "06:01234567890123456789abcd0123456789abxyz", "07:01234567890123456789abcd0123456789abxyz",
        "08:01234567890123456789abcd0123456789abxyz", "09:01234567890123456789abcd0123456789abxyz",
        "10:01234567890123456789abcd0123456789abxyz", "11:01234567890123456789abcd0123456789abxyz",
        "12:01234567890123456789abcd0123456789abxyz", "13:01234567890123456789abcd0123456789abxyz",
        "14:01234567890123456789abcd0123456789abxyz", "15:01234567890123456789abcd0123456789abxyz",
        "16:01234567890123456789abcd0123456789abxyz", "17:01234567890123456789abcd0123456789abxyz",
        "18:01234567890123456789abcd0123456789abxyz", "19:01234567890123456789abcd0123456789abxyz",
        "20:01234567890123456789abcd0123456789abxyz", "21:01234567890123456789abcd0123456789abxyz",
        "22:01234567890123456789abcd0123456789abxyz", "23:01234567890123456789abcd0123456789abxyz",
        "24:01234567890123456789abcd0123456789abxyz", "25:01234567890123456789abcd0123456789abxyz",
        "26:01234567890123456789abcd0123456789abxyz", "27:01234567890123456789abcd0123456789abxyz",
        "28:01234567890123456789abcd0123456789abxyz", "29:01234567890123456789abcd0123456789abxyz",
        "30:01234567890123456789abcd0123456789abxyz", "31:01234567890123456789abcd0123456789abxyz"};
    int ptr = UnitToPtr(sUnit), plrIndex, destPtr, srcPtr;
    
    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 4)
        {
            plrIndex = GetMemory(GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x810);
            destPtr = GetMemory(0x97bb40 + ((SToInt(emptyName) + plrIndex) * 4));
            srcPtr = GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x889;
            NoxUnicodeToUtf8(srcPtr, destPtr);
            return ToStr(SToInt(emptyName) + plrIndex);
        }
    }
    return "NULL";
}

void startPicket() {
	int var_0[660];int var_1;int var_2;string var_3;float var_4;float var_5;int var_6[2];int var_7[141];
	if (var_1 == 0) {
		var_0[4] = 1;var_0[9] = 1;var_0[13] = 1;var_0[14] = 1;var_0[15] = 1;var_0[16] = 1;var_0[17] = 1;var_0[18] = 1;var_0[19] = 1;var_0[21] = 1;var_0[26] = 1;var_0[27] = 1;var_0[28] = 1;var_0[33] = 1;var_0[37] = 1;
		var_0[38] = 1;var_0[39] = 1;var_0[40] = 1;var_0[41] = 1;var_0[42] = 1;var_0[45] = 1;var_0[64] = 1;var_0[69] = 1;var_0[76] = 1;var_0[81] = 1;var_0[93] = 1;var_0[102] = 1;var_0[105] = 1;var_0[124] = 1;var_0[129] = 1;
		var_0[136] = 1;var_0[141] = 1;var_0[144] = 1;var_0[145] = 1;var_0[146] = 1;var_0[147] = 1;var_0[148] = 1;var_0[149] = 1;var_0[150] = 1;var_0[153] = 1;var_0[162] = 1;var_0[165] = 1;var_0[170] = 1;var_0[184] = 1;var_0[189] = 1;
		var_0[195] = 1;var_0[197] = 1;var_0[201] = 1;var_0[202] = 1;var_0[203] = 1;var_0[213] = 1;var_0[222] = 1;var_0[225] = 1;var_0[231] = 1;var_0[244] = 1;var_0[249] = 1;var_0[254] = 1;var_0[258] = 1;var_0[261] = 1;var_0[266] = 1;
		var_0[267] = 1;var_0[268] = 1;var_0[273] = 1;var_0[282] = 1;var_0[285] = 1;var_0[292] = 1;var_0[303] = 1;var_0[305] = 1;var_0[309] = 1;var_0[313] = 1;var_0[319] = 1;var_0[321] = 1;var_0[325] = 1;var_0[329] = 1;var_0[333] = 1;
		var_0[334] = 1;var_0[335] = 1;var_0[341] = 1;var_0[345] = 1;var_0[353] = 1;var_0[363] = 1;var_0[365] = 1;var_0[369] = 1;var_0[385] = 1;var_0[389] = 1;var_0[393] = 1;var_0[401] = 1;var_0[405] = 1;var_0[414] = 1;var_0[418] = 1;
		var_0[422] = 1;var_0[426] = 1;var_0[429] = 1;var_0[434] = 1;var_0[435] = 1;var_0[436] = 1;var_0[437] = 1;var_0[438] = 1;var_0[439] = 1;var_0[440] = 1;
	}
	if (var_1 == 1) {
		var_0[441] = 1;var_0[445] = 1;var_0[449] = 1;var_0[453] = 1;var_0[460] = 1;var_0[465] = 1;var_0[475] = 1;var_0[478] = 1;var_0[482] = 1;var_0[486] = 1;var_0[489] = 1;var_0[501] = 1;var_0[505] = 1;var_0[509] = 1;var_0[513] = 1;
		var_0[519] = 1;var_0[525] = 1;var_0[536] = 1;var_0[538] = 1;var_0[541] = 1;var_0[547] = 1;var_0[549] = 1;var_0[561] = 1;var_0[566] = 1;var_0[567] = 1;var_0[568] = 1;var_0[573] = 1;var_0[577] = 1;var_0[578] = 1;var_0[585] = 1;
		var_0[597] = 1;var_0[598] = 1;var_0[609] = 1;var_0[621] = 1;var_0[633] = 1;var_0[645] = 1;var_0[654] = 1;var_0[655] = 1;var_0[656] = 1;var_0[657] = 1;var_0[658] = 1;
	}
	if (var_3 != "drainManaOrb")
		var_3 = "drainManaOrb";
	var_4 = GetWaypointX(10) + 2.000000;
	var_5 = GetWaypointY(10);
	var_6[0] += 1;
	if (var_6[0] == 61) {
		var_4 = GetWaypointX(10) - 118.000000;
		var_5 = GetWaypointY(10) + 2.000000;
		var_6[0] = 1;
	}
	MoveWaypoint(10, var_4, var_5);
	if (var_0[var_1] == 1) {
		var_7[var_2] = CreateObject(var_3, 10);
		Frozen(var_7[var_2], 1);
		var_2 += 1;
	}
	var_1 += 1;
	if (var_1 == 660) {
		var_1 = 0;
		var_2 = 0;
		var_6[0] = 0;
		var_6[1] = 0;
	}
}
void callstartPicketFunc() {
	int var_0 = 0;

	while(var_0 < 660) {
		startPicket();
		var_0 += 1;
	}
	MoveWaypoint(10, GetWaypointX(10) - (60.000000 * 2.000000), GetWaypointY(10) - (11.000000 * 2.000000)); 
}

int ToInt(float x)
{
    StopScript(x);
}

float ToFloat(int x)
{
    StopScript(x);
}

int SToInt(string x)
{
    StopScript(x);
}

string ToStr(int x)
{
    StopScript(x);
}

float UnitRatioX(int unit, int target, float size)
{
    return (GetObjectX(unit) - GetObjectX(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float UnitRatioY(int unit, int target, float size)
{
    return (GetObjectY(unit) - GetObjectY(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

int ImportUniChatCore()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0xC0685657; arr[1] = 0x6800528A; arr[2] = 0x00507250; arr[3] = 0x8B2414FF; arr[4] = 0x2414FFF8;
        arr[5] = 0x14FFF08B; arr[6] = 0x56505724; arr[7] = 0x102454FF; arr[8] = 0x5E14C483; arr[9] = 0x9090C35F;
        CancelTimer(FrameTimerWithArg(10, ImportUniChatCore, ImportUniChatCore));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniChatCore(int plrPtr, int sPtr, int sTime)
{
    int temp = GetMemory(0x5c3320);

    SetMemory(0x5c3320, ImportUniChatCore());
    GroupRunAway(sPtr, plrPtr, sTime);
    SetMemory(0x5c3320, temp);
}

int ImportUniPrintCore()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x9EB06856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x502414FF;
        arr[5] = 0x2454FF56; arr[6] = 0x10C4830C; arr[7] = 0x9090C35E; 
        CancelTimer(FrameTimerWithArg(10, ImportUniPrintCore, ImportUniPrintCore));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniPrintCore(int plrPtr, int sPtr)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportUniPrintCore());
    Unused5a(sPtr, plrPtr);
    SetMemory(0x5c31f4, temp);
}

int GetByteValue(int ptr)
{
    return GetMemory(ptr) & 0xff;
}

void WriteAddressWordValue(int addr, int word)
{
    int temp = GetMemory(addr) & 0xffff0000;
    SetMemory(addr, temp | word);
}

void NoxUtf8ToUnicode(int src, int dest)
{
    int i = 0, byt;

    while (1)
    {
        byt = GetByteValue(src + i);
        if (!byt) break;
        if (!(byt & 0x80))
        {
            WriteAddressWordValue(dest, byt);
            i ++;
        }
        else if ((byt & 0xe0) == 0xc0)
        {
            WriteAddressWordValue(dest, ((byt & 0x1f) <<6) | (GetByteValue(src + i + 1) & 0x3f));
            i += 2;
        }
        else if ((byt & 0xf0) == 0xe0)
        {
            WriteAddressWordValue(dest, ((byt & 0xf) << 12) | ((GetByteValue(src + i + 1) & 0x3f) << 6) | (GetByteValue(src + i + 2) & 0x3f));
            i += 3;
        }
        dest += 2;
    }
    WriteAddressWordValue(dest, 0);
}

void UniPrint(int sUnit, string sMsg)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
        {
            CancelTimer(FrameTimerWithArg(10, UniPrint, UniPrint));
            link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        }
        NoxUtf8ToUnicode(str, link + 8);
        UniPrintCore(ptr, link + 8);
    }
}

void UniChatMessage(int sUnit, string sMsg, int duration)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
        {
            CancelTimer(FrameTimerWithArg(10, UniChatMessage, UniChatMessage));
            link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        }
        NoxUtf8ToUnicode(str, link + 12);
        UniChatCore(ptr, link + 12, duration);
    }
}

void UniPrintToAll(string sMsg)
{
    int wDest[200];
    int plrPtr = 0x62f9e0, link, str = SToInt(sMsg), i;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, UniPrint, UniPrint));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c)) + 4;
    }
    str = GetMemory(0x97bb40 + (str * 4));
    NoxUtf8ToUnicode(str, link);
    for (i = 0 ; i < 32 ; i ++)
    {
        if (GetMemory(plrPtr))
            UniPrintCore(GetMemory(plrPtr), link);
        plrPtr += 0x12dc;
    }
}

int MathAbs(int num)
{
    if (num < 0)
        num = -num;
    return num;
}

int CheckSignDelay(int sPtr, int gap)
{
    int cFps = GetMemory(0x84ea04);

    if (MathAbs(cFps - GetMemory(sPtr)) > gap)
    {
        SetMemory(sPtr, cFps);
        return 1;
    }
    return 0;
}

void SignNotification()
{
    int otPtr = GetMemory(0x979720), sePtr = GetMemory(0x979724);

    if (otPtr && sePtr)
    {
        if (CheckSignDelay(GetMemory(sePtr + 0x2e0) + 100, 60))
        {
            UniPrint(other, ToStr(GetMemory(sePtr + 0x2f0)));
            //UniPrintCore(otPtr, GetMemory(sePtr + 0x2e0));
        }
    }
}

void RegistSignMessage(int sUnit, string sMsg)
{
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg);

    if (ptr)
    {
        SetMemory(ptr + 0x2f0, str);
        //str = GetMemory(0x97bb40 + (str * 4));
        //NoxUtf8ToUnicode(str, GetMemory(ptr + 0x2e0));
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        CancelTimer(FrameTimerWithArg(10, SignNotification, SignNotification));
        SetMemory(ptr + 0x2fc, GetMemory(GetMemory(0x83395c) + 8));
    }
}

int ImportUniBroadcast()
{
    int arr[6], link;

    if (!link)
    {
        arr[0] = 0x4D9FD068; arr[1] = 0x72506800; arr[2] = 0x14FF0050; arr[3] = 0x106A5024;
        arr[4] = 0x0C2454FF; arr[5] = 0xC310C483;
        CancelTimer(FrameTimerWithArg(10, ImportUniBroadcast, ImportUniBroadcast));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniBroadcast(string sMsg)
{
    int wDest[100];
    int temp = GetMemory(0x5c3108), link, str = GetMemory(0x97bb40 + (SToInt(sMsg) * 4));

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, UniBroadcast, UniBroadcast));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    NoxUtf8ToUnicode(str, link + 4);
    SetMemory(0x5c3108, ImportUniBroadcast());
    Unused1f(link + 4);
    SetMemory(0x5c3108, temp);
}

int ImportUseItemFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x1424748B; arr[3] = 0x18246C8B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUseItemFunc, ImportUseItemFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int ImportUnitCollideFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x14246C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUnitCollideFunc, ImportUnitCollideFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void WriteMusicStrings(int targetAddr)
{
    int arr[78], i;

    arr[0] = 0x70616863; arr[1] = 0x61772E31; arr[2] = 0x68630076; arr[3] = 0x77327061; arr[4] = 0x772E7A69; arr[5] = 0x63007661; arr[6] = 0x32706168;
    arr[7] = 0x2E6E6F63; arr[8] = 0x00766177; arr[9] = 0x70616863; arr[10] = 0x72617732; arr[11] = 0x7661772E; arr[12] = 0x61686300; arr[13] = 0x772E3370;
    arr[14] = 0x63007661; arr[15] = 0x34706168; arr[16] = 0x7661772E; arr[17] = 0x61686300; arr[18] = 0x772E3570; arr[19] = 0x63007661; arr[20] = 0x36706168;
    arr[21] = 0x7661772E; arr[22] = 0x61686300; arr[23] = 0x772E3770; arr[24] = 0x63007661; arr[25] = 0x38706168; arr[26] = 0x7661772E; arr[27] = 0x61686300;
    arr[28] = 0x772E3970; arr[29] = 0x63007661; arr[30] = 0x61706168; arr[31] = 0x7661772E; arr[32] = 0x61686300; arr[33] = 0x772E6270; arr[34] = 0x74007661;
    arr[35] = 0x656C7469; arr[36] = 0x7661772E; arr[37] = 0x776F7400; arr[38] = 0x772E316E; arr[39] = 0x74007661; arr[40] = 0x326E776F; arr[41] = 0x7661772E;
    arr[42] = 0x776F7400; arr[43] = 0x772E336E; arr[44] = 0x73007661; arr[45] = 0x2E316275; arr[46] = 0x00766177; arr[47] = 0x32627573; arr[48] = 0x7661772E;
    arr[49] = 0x62757300; arr[50] = 0x61772E33; arr[51] = 0x61770076; arr[52] = 0x7265646E; arr[53] = 0x61772E31; arr[54] = 0x61770076; arr[55] = 0x7265646E;
    arr[56] = 0x61772E32; arr[57] = 0x61770076; arr[58] = 0x7265646E; arr[59] = 0x61772E33; arr[60] = 0x72630076; arr[61] = 0x74696465; arr[62] = 0x61772E73;
    arr[63] = 0x68730076; arr[64] = 0x2E6C6C65; arr[65] = 0x00766177; arr[66] = 0x69746361; arr[67] = 0x2E316E6F; arr[68] = 0x00766177; arr[69] = 0x69746361;
    arr[70] = 0x2E326E6F; arr[71] = 0x00766177; arr[72] = 0x69746361; arr[73] = 0x2E336E6F; arr[74] = 0x00766177; arr[75] = 0x646E6177; arr[76] = 0x2E347265;
    arr[77] = 0x00766177;
    for (i = 0 ; i < 78 ; i ++)
        SetMemory(targetAddr + (i * 4), arr[i]);
}

void PreProcessPlayBgm(int targetAddr)
{
    int oldBase = 0x59da7c;

    WriteMusicStrings(targetAddr);
    SetMemory(oldBase + 0, targetAddr);
    SetMemory(oldBase + 4, targetAddr + 0xa);
    SetMemory(oldBase + 8, targetAddr + 0x17);
    SetMemory(oldBase + 12, targetAddr + 0x24);
    SetMemory(oldBase + 16, targetAddr + 0x31);
    SetMemory(oldBase + 20, targetAddr + 0x3b);
    SetMemory(oldBase + 24, targetAddr + 0x45);
    SetMemory(oldBase + 28, targetAddr + 0x4f);
    SetMemory(oldBase + 32, targetAddr + 0x59);
    SetMemory(oldBase + 36, targetAddr + 0x63);
    SetMemory(oldBase + 40, targetAddr + 0x6d);
    SetMemory(oldBase + 44, targetAddr + 0x77);
    SetMemory(oldBase + 48, targetAddr + 0x81);
    SetMemory(oldBase + 52, targetAddr + 0x8b);
    SetMemory(oldBase + 56, targetAddr + 0x95);
    SetMemory(oldBase + 60, targetAddr + 0x9f);
    SetMemory(oldBase + 64, targetAddr + 0xa9);
    SetMemory(oldBase + 68, targetAddr + 0xb3);
    SetMemory(oldBase + 72, targetAddr + 0xbc);
    SetMemory(oldBase + 76, targetAddr + 0xc5);
    SetMemory(oldBase + 80, targetAddr + 0xce);
    SetMemory(oldBase + 84, targetAddr + 0xda);
    SetMemory(oldBase + 88, targetAddr + 0xe6);
    SetMemory(oldBase + 92, targetAddr + 0xf2);
    SetMemory(oldBase + 96, targetAddr + 0xfe);
    SetMemory(oldBase + 100, targetAddr + 0x108);
    SetMemory(oldBase + 104, targetAddr + 0x114);
    SetMemory(oldBase + 108, targetAddr + 0x120);
    SetMemory(oldBase + 112, targetAddr + 0x12c);
    SetMemory(0x59dbfc, 0);
}

int PlayMusicPacket()
{
    int packet = 0x6466e5, link;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, PlayMusicPacket, PlayMusicPacket));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void NetPlayBgm(int user)
{
    if (CurrentHealth(user))
    {
        NetClientSend(user, PlayMusicPacket(), 3);
    }
}

int ImportWriteBinaryFileNumber()
{
    StopScript(ImportWriteBinaryFile);
}

int ImportWriteBinaryFile()
{
    int arr[17], link;

    if (!link)
    {
        arr[0] = 0xDB624BE8; arr[1] = 0x246850FF; arr[2] = 0xFF005882; arr[3] = 0x485AE830; arr[4] = 0xC483FFE1;
        arr[5] = 0x74C08508; arr[6] = 0x748B5624; arr[7] = 0x768B0424; arr[8] = 0x8D0E8B04; arr[9] = 0x50500476; arr[10] = 0x5651016A; arr[11] = 0xE149D1E8;
        arr[12] = 0x10C483FF; arr[13] = 0xCB64FAE8; arr[14] = 0x04C483FF; arr[15] = 0x04C4835E; arr[16] = 0x909090C3;
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * ImportWriteBinaryFileNumber() + 0x1c));
        FixCallOpcode(link + 0, 0x507250);
        FixCallOpcode(link + 0xd, 0x56586c);
        FixCallOpcode(link + 0x2c, 0x565a02);
        FixCallOpcode(link + 0x34, 0x407533);
    }
    return link;
}

void WriteBinaryFile(string fileName, int stream)
{
    int temp = 0x5c310c;

    fileName = ToStr(GetMemory(0x97bb40 + (SToInt(fileName) * 4)));
    SetMemory(0x5c310c, ImportWriteBinaryFile());
    Unused20(GetMemory(GetMemory(0x75ae28) + (0x30 * (ImportWriteBinaryFileNumber() + 1) + 0x1c)));
    SetMemory(0x5c310c, temp);
}

void ExtractMapBgm(int arg)
{
    string fileName = ToStr(arg >> 0x10);
    int rscF = arg & 0xffff;
    int stream = GetMemory(GetMemory(0x75ae28) + (0x30 * rscF + 0x20));

    SetMemory(0x59dc10, GetMemory(0x97bb40 + (SToInt(fileName) * 4)));
    WriteBinaryFile("music\\" + fileName, stream);

    PreProcessPlayBgm(0x5becc4);
}