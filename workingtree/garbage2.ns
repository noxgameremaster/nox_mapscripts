

int player[20], LastUnitID = 1165;
string StageUnit[90];
int StageHp[90];
int CurStage, OrbPtr, Skill_time, Skill_marker;
int Num_fst, Num_scd;

int g_dropItemFunction[7];

int EnableMemoryReadWriteFunction(int t) {}
int GetMemory(int addr) { return Unknownb9(addr); }
void SetMemory(int addr, int value) { Unused59(addr, value); }
float ToFloat(int arg) { StopScript(arg); }
int ToInt(float arg) { StopScript(arg); }
string ToStr(int arg) { StopScript(arg); }
int SToInt(string arg) { StopScript(arg); }

int GetScrDataField(int functionName)
{
    return GetMemory(GetMemory(0x75ae28) + (0x30 * functionName + 0x1c));
}

int GetScrCodeField(int functionName)
{
    return GetMemory(GetMemory(0x75ae28) + (0x30 * functionName + 0x20));
}

int FixCallOpcode(int curAddr, int targetAddr)
{
    SetMemory(curAddr + 1, targetAddr - curAddr - 5);
}

int OpcodeGetTargetAddr(int curAddr)
{
    return GetMemory(curAddr + 1) + curAddr + 5;
}

void OpcodeLoadEffectiveAddr(int loadAddr, int codeAddr, int offset)
{
    int targetAddr = OpcodeGetTargetAddr(codeAddr + offset);

    SetMemory(loadAddr + offset + 1, targetAddr - (loadAddr + offset) - 5);
}

void OpcodeCopiesAdvance(int destPtr, int callNodePtr, int startAddr, int endAddr)
{
    int destBase = destPtr, curAddr = startAddr;
    int vptr = GetScrDataField(OpcodeCopiesAdvance);

    while (curAddr <= endAddr)
    {
        Unused59(destPtr, Unknownb9(curAddr));
        if (Unknownb9(callNodePtr))
        {
            if (Unknownb9(callNodePtr) + 1 <= curAddr)
            {
                OpcodeLoadEffectiveAddr(destBase, startAddr, Unknownb9(callNodePtr) - startAddr);
                Unused59(vptr + 4, Unknownb9(vptr + 4) + 4);
            }
        }
        Unused59(vptr + 0x14, Unknownb9(vptr + 0x14) + 4);
        Unused59(vptr, Unknownb9(vptr) + 4);
    }
}

/*
Waypoints Setting
1~4: 플레이어 입장
5: 입장불가 시 플레이어 이동지점
6: 트리거 웨이포인트(초기: MathSine)
7: 트리거 웨이포인트
8~32: 25개 유닛소환 지점
33: 스탬프 스트링: 운석소나기
34: 스탬프 스트링: 상점
35,36: redOrb
37,38: blueOrb
39,40: greenOrb
41: (맵에서 안보이는 곳에 배치) 망각의 지팡이 배치될 지점
*/

int ImportCreateAtFunc()
{
    int arr[20], link;

    if (!link)
    {
        arr[0] = 0xAA506856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xFF502414; arr[4] = 0x50042454;
        arr[5] = 0x082454FF; arr[6] = 0x4085048B; arr[7] = 0x680097BB; arr[8] = 0x004E3810; arr[9] = 0x2454FF50;
        arr[10] = 0x08C48304; arr[11] = 0xF685F08B; arr[12] = 0x006A0A74; arr[13] = 0x2454FF56; arr[14] = 0x08C48314;
        arr[15] = 0x50723068; arr[16] = 0x54FF5600; arr[17] = 0xC4830424; arr[18] = 0x5EC03118; arr[19] = 0x909090C3; 
        link = GetScrDataField(ImportCreateAtFunc);
    }
    return link;
}

int CreateObjectAt(string name, float x, float y)
{
    int temp = GetMemory(0x5c3160), res;

    SetMemory(0x5c3160, ImportCreateAtFunc());
    res = CreateMover(SToInt(name), ToInt(x), y);
    SetMemory(0x5c3160, temp);
    if (res) return GetMemory(res + 0x2c);
    else return 0;
}

void CallFunctionWithArg(int func, int arg)
{
    int link, ptr;

    if (!link)
    {
        link = GetScrCodeField(CalleeArg);
    }
    else
    {
        SetMemory(link + 0x10, func);
        CalleeArg(arg);
    }
}

void CalleeArg(int arg)
{
    CalleeArg(arg);
}

void ChangeColorMaiden(int red, int grn, int blue, int unit)
{
    int ptr1 = UnitToPtr(unit), k, num;

    if (!ptr1) return;
    SetMemory(ptr1 + 4, 1385);  //TODO: Maiden Unit Thing ID
    for (k = 0 ; k < 32 ; k ++)
        SetMemory(ptr1 + 0x230 + (k * 4), 0x400);
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x178, 0xa0);
    // R  G  B  R    G  B  R  G    B  R  G  B    R  G  B  R    G  B 
    // 00 ff 00 00 / ff 00 00 ff / 00 00 ff 00 / 00 ff 00 00 / ff 00 00
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 4, grn | (blue << 8) | (red << 16) | (grn << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 8, blue | (red << 8) | (grn << 16) | (blue << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 12, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 16, grn | (blue << 8));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x1e8, VoiceList(7));
}

int WizardRedBinTable()
{
	int arr[62], link;

	if (!link)
	{
		arr[0] = 1635412311; arr[1] = 1699898482; arr[2] = 100;  
		arr[17] = 100; arr[18] = 30; arr[19] = 50; 
		arr[20] = 1045220557; arr[21] = 1061158912; arr[23] = 32; arr[24] = 1067869798; 
		arr[26] = 4;
		arr[37] = 1751607628; arr[38] = 1852403316; arr[39] = 1819230823; 
		arr[40] = 116; arr[53] = 1073741824;
		arr[55] = 12; arr[56] = 20;
		link = GetScrDataField(WizardRedBinTable);
	}
	return link;
}

int MaidenBinTable()
{
	int arr[62], link;

	if (!link)
	{
		arr[0] = 1684627789; arr[1] = 28261;
		arr[17] = 30; arr[18] = 92; arr[19] = 60; 
		arr[21] = 1065353216; arr[22] = 0; arr[23] = 32776; arr[24] = 1065688760; 
		arr[27] = 1; arr[28] = 1106247680; arr[29] = 22; 
		arr[30] = 1101004800; arr[31] = 2; arr[32] = 22; arr[33] = 30;
		arr[58] = 5546320; arr[59] = 5542784; 
		link = GetScrDataField(MaidenBinTable);
	}
	return link;
}

int GoonBinTable()
{
	int arr[62], link;

	if (!link)
	{
		arr[0] = 1852796743; 
		arr[17] = 85; arr[19] = 15; 
		arr[21] = 1065353216; arr[23] = 32776; arr[24] = 1066192077; 
		arr[27] = 1; arr[28] = 1106247680; arr[29] = 15; 
		arr[30] = 1092616192; arr[31] = 4; arr[32] = 20; arr[33] = 28; arr[34] = 1; 
		arr[35] = 2; arr[36] = 20;
		arr[57] = 5548176; arr[58] = 5546608; arr[59] = 5543680; 
		link = GetScrDataField(GoonBinTable);
	}
	return link;
}

int StrongWizardWhiteBinTable()
{
	int arr[62], link;

	if (!link)
	{
		arr[0] = 1869771859; arr[1] = 1767335790; arr[2] = 1685217658; arr[3] = 1953065047; arr[4] = 101;
		arr[16] = 80000; arr[17] = 200; arr[18] = 55; arr[19] = 60; 
		arr[21] = 1065353216; arr[23] = 8; arr[24] = 1069547520; 
		arr[37] = 1701996870; arr[38] = 1819042146;
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 1128792064; arr[54] = 4; 
		arr[55] = 20; arr[56] = 30; arr[57] = 5547984;

		link = GetScrDataField(StrongWizardWhiteBinTable);
	}
	return link;
}

int WeirdlingBeastBinTable()
{
	int arr[62], link;

	if (!link)
	{
		arr[0] = 1919509847; arr[1] = 1852402788; arr[2] = 1634026087; arr[3] = 29811;
		arr[17] = 85; arr[18] = 50; arr[19] = 55; 
		arr[21] = 1065353216; arr[22] = 0; arr[23] = 32776; arr[24] = 1068708659; 
		arr[26] = 4; arr[28] = 1082130432; arr[29] = 20; 
		arr[31] = 2; arr[32] = 8; arr[33] = 16;
		arr[57] = 5548112; arr[58] = 0; arr[59] = 5542784;  
		link = GetScrDataField(WeirdlingBeastBinTable);
	}
	return link;
}

int BlackWidowBinTable()
{
	int arr[62], link;

	if (!link)
	{
		arr[0] = 1667329090; arr[1] = 1684625259; arr[2] = 30575;
		arr[17] = 130; arr[18] = 45; arr[19] = 85; 
		arr[21] = 1065353216; arr[23] = 4; arr[24] = 1069547520; 
		arr[26] = 4; arr[27] = 3; arr[28] = 1097859072; arr[29] = 25; 
		arr[31] = 8; arr[32] = 13; arr[33] = 21; arr[34] = 50; 
		arr[35] = 3; arr[36] = 6; arr[37] = 1684631635; arr[38] = 1884516965; arr[39] = 29801;
		arr[53] = 1128792064;
		arr[55] = 20; arr[56] = 28; arr[59] = 5544896; arr[61] = 45071360; 
		link = GetScrDataField(BlackWidowBinTable);
	}
	return link;
}

int FireSpriteBinTable()
{
	int arr[62], link;

	if (!link)
	{
		arr[0] = 1701996870; arr[1] = 1769107539; arr[2] = 25972;
		arr[17] = 85; arr[18] = 25; arr[19] = 50; 
		arr[21] = 1065353216; arr[23] = 65544; arr[24] = 1065353216; 
		arr[37] = 1801545047; arr[38] = 1701996870; arr[39] = 1819042146; 
		arr[53] = 1128792064;
		arr[55] = 15; arr[56] = 21; arr[58] = 5545472;
		link = GetScrDataField(FireSpriteBinTable);
	}
	return link;
}

int GetUnitThingID(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x4);
    return 0;
}

int GetUnitFlags(int unit)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x10);
    return 0;
}

void SetUnitFlags(int unit, int flag)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x10, flag);
}

void UnitNoCollide(int unit)
{
    SetUnitFlags(unit, GetUnitFlags(unit) ^ 0x40);
}

void SetUnitStatus(int unit, int stat)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            SetMemory(temp + 0x5a0, stat);
    }
}

int GetUnitStatus(int unit)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            return GetMemory(temp + 0x5a0);
    }
    return 0;
}

void CheckMonsterThing(int unit)
{
    object functionNode[97], init;
    int thingID = GetUnitThingID(unit);
    int key = thingID % 97;

    if (!init)
    {
        init = true;
        functionNode[5] = MonsterGoonProcess;
        functionNode[72] = MonsterStrongWhiteWizProcess;
        functionNode[30] = MonsterWeirdlingBeastProcess;
        functionNode[34] = MonsterBlackWidowProcess;
        functionNode[6] = MonsterBear2Process;
        functionNode[12] = MonsterFireSpriteProcess;
        functionNode[73] = MonsterWizardRedProcess;
    }
    if (thingID)
    {
        if (functionNode[key] != 0)
            CallFunctionWithArg(functionNode[key], unit);
    }
}

void MonsterGoonProcess(int unit)
{
    //TODO: Index. 1, ThingName= Goon
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, GoonBinTable());
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(63));       //MimicVoice
        SetUnitMaxHealth(unit, 130);
    }
}

void MonsterStrongWhiteWizProcess(int unit)
{
    //TODO: Index. 2, ThingName= StrongWizardWhite
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, StrongWizardWhiteBinTable());
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(34));       //HorvathVoice
        SetUnitMaxHealth(unit, 200);
    }
}

void MonsterWeirdlingBeastProcess(int unit)
{
    //TODO: Index. 3, ThingName= WeirdlingBeast
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, WeirdlingBeastBinTable());
        //SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(34));       //HorvathVoice
        SetUnitMaxHealth(unit, 150);
    }
}

void MonsterBlackWidowProcess(int unit)
{
    //TODO: Index. 4, ThingName= BlackWidow
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, BlackWidowBinTable());
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(19));       //HorvathVoice
        SetUnitMaxHealth(unit, 225);
    }
}

void MonsterBear2Process(int unit)
{
    //TODO: Index. 5, ThingName= Bear2 -> Maiden
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        ChangeColorMaiden(Random(0, 255), Random(0, 255), Random(0, 255), unit);
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, MaidenBinTable());
        SetUnitMaxHealth(unit, 325);
    }
}

void MonsterFireSpriteProcess(int unit)
{
    //TODO: Index. 6, ThingName= FireSprite
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, FireSpriteBinTable());
        SetUnitMaxHealth(unit, 135);
        SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x8000);
    }
}

void MonsterWizardRedProcess(int unit)
{
    //TODO: Index. 7, ThingName= WizardRed
    int ptr = UnitToPtr(unit), uec;

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, WizardRedBinTable());
        SetUnitMaxHealth(unit, 225);
        uec = GetMemory(ptr + 0x2ec);
        if (uec)
        {
            SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x20);
            SetMemory(uec + 0x528, ToInt(1.0));
            SetMemory(uec + 0x520, ToInt(300.0));
            uec += 0x5d0;
            SetMemory(uec + GetSpellNumber("SPELL_MAGIC_MISSILE"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_SHIELD"), 0x10000000);
            SetMemory(uec + GetSpellNumber("SPELL_STUN"), 0x20000000);
            SetMemory(uec + GetSpellNumber("SPELL_SHOCK"), 0x10000000);
            SetMemory(uec + GetSpellNumber("SPELL_FIREBALL"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_DEATH_RAY"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_BURN"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_INVERSION"), 0x08000000);
            SetMemory(uec + GetSpellNumber("SPELL_COUNTERSPELL"), 0x08000000);
        }
    }
}

int ImportGetSpellNumber()
{
	int arr[11], link;

	if (!link)
	{
		arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x4085048B; arr[3] = 0x680097BB; arr[4] = 0x004243F0; arr[5] = 0x2454FF50;
		arr[6] = 0x08C48304; arr[7] = 0x50723068; arr[8] = 0x54FF5000; arr[9] = 0xC4830424; arr[10] = 0xC3C0310C;
		link = GetScrDataField(ImportGetSpellNumber);
	}
	return link;
}

int GetSpellNumber(string spell)
{
	int temp = GetMemory(0x5c3204), res;

	SetMemory(0x5c3204, ImportGetSpellNumber());
	res = Unused5e(spell);
	SetMemory(0x5c3204, temp);
	return res * 4;
}

int ImportUnitToPtrFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x511B6068; arr[3] = 0x54FF5000; arr[4] = 0xC4830424;
        arr[5] = 0x7230680C; arr[6] = 0xFF500050; arr[7] = 0x83042454; arr[8] = 0xC03108C4; arr[9] = 0x909090C3; 
        link = GetScrDataField(ImportUnitToPtrFunc);
    }
    return link;
}

int UnitToPtr(int unit)
{
    int temp = GetMemory(0x5c336c), res;
    SetMemory(0x5c336c, ImportUnitToPtrFunc());
    res = Unknownb8(unit);
    SetMemory(0x5c336c, temp);
	return res;
}

int GetOwner(int unit)
{
    int ptr = UnitToPtr(unit), res;

    if (ptr)
    {
        res = GetMemory(ptr + 0x1fc);
        if (res)
            return GetMemory(res + 0x2c);
    }
    return 0;
}

int CreateMoverFix(int targetUnit, int destLocation, float speed)
{
    int unitMover = CreateMover(targetUnit, destLocation, speed), unitPtr = UnitToPtr(targetUnit);
    int movPtr;

    if (unitMover)
    {
        movPtr = UnitToPtr(unitMover);
        if (movPtr && unitPtr)
        {
            SetMemory(unitPtr + 0x28, LastUnitID);
            movPtr = GetMemory(movPtr + 0x2ec);
            SetMemory(movPtr + 0x20, LastUnitID);
        }
    }
    LastUnitID ++;

    return unitMover;
}

void ImportBinTable()
{
    BlackWidowBinTable();
    FireSpriteBinTable();
    GoonBinTable();
    MaidenBinTable();
    StrongWizardWhiteBinTable();
    WeirdlingBeastBinTable();
    WizardRedBinTable();
}

void InitDropItemFunctions()
{
    g_dropItemFunction[0] = 6;
    g_dropItemFunction[6] = PutPotion;
    g_dropItemFunction[1] = PutGold;
    g_dropItemFunction[2] = PutArmor;
    g_dropItemFunction[3] = PutWeapon;
    g_dropItemFunction[4] = PutMagicalStaff;
    g_dropItemFunction[5] = PutHpPotion;
}

void MapInitialize()
{
    int t = EnableMemoryReadWriteFunction(0);

    //Init_
    MusicEvent();
    ImportBinTable();
    ImportCheckSelfDamage();
    ImportPlaySoundAround();
    ImportUniChatCore();
    ImportUniPrintCore();
    CallFunctionWithArg(0, 0);
    MapWaypointInit();
    VoiceList(0);
    GetMaster();
    MathSine(1, 1.0 / 57.3);    //Todo. 확인 필요. 해당 로케이션을 쓰는지 안쓰는지?
    ImportUnitToPtrFunc();
    ImportGetSpellNumber();
    ImportCreateAtFunc();
    ImportRemoveSneakDelay();
    ImportPlayerAutoTeamSign();
    CheckMonsterThing(0);
    DefStageUnitName();
    DefStageUnitHp();
    InitDropItemFunctions();

    int ptr = DiePlayerHandlerCopiedCode();
    ChangePlayerDeathSound(ptr, 913);
    PlayerUpdate4f8100();
    SetMemory(ptr + 0x386, (GetMemory(ptr + 0x386) & 0xffff0000) | 0x9eb);

    //delay_run
    FrameTimer(1, InitOrbPlace);
    FrameTimer(2, InitMeteorSkill);
    FrameTimer(3, InitNumberDisplay);
    FrameTimer(20, StrGoShop);
    FrameTimer(21, StrMeteorShower);
    SecondTimerWithArg(30, 0, StartCurrentStage);

    FrameTimer(2, SetGameTypeCoopMode);

    //Loop_run
    FrameTimer(20, PlayerClassOnLoop);
}

void MapExit()
{
    MusicEvent();
    RemoveCoopTeamMode();
    SelfDamageClassMapExit();
}

void InitNumberDisplay()
{
    FloatTable(-1);
    NumberData(0);
    Num_fst = NumberOrb(44);
    Num_scd = NumberOrb(45);
    PutNumberOnMap(0);
}

void PutNumberOnMap(int num)
{
    if (num < 100)
        DisplayNumber(Num_fst, 43, NumberData(num / 10));
    else
        DisplayNumber(Num_fst, 43, NumberData(0));
    DisplayNumber(Num_scd, 46, NumberData(num % 10));
}

int NumberOrb(int location)
{
	int orb, k;

	if (location)
	{
		orb = CreateObjectAt("InvisibleLightBlueHigh", LocationX(location), LocationY(location));
		for (k = 0 ; k < 28 ; k ++)
			ObjectOff(CreateObjectAt("ManaBombOrb", GetObjectX(orb + k) + 1.0, GetObjectY(orb + k)));
        Raise(orb, ToFloat(location));
	}
    else
        return 0;

	return orb + 1;
}

void DisplayNumber(int orb, int loc, int bytes)
{
	float pos_x = LocationX(loc), pos_y = LocationY(loc);
	int idx = 0, k, wp = ToInt(GetObjectZ(orb - 1));

	for (k = 1 ; !(k & 0x10000000) ; k <<= 1)
	{
		if (bytes & k)
			MoveObject(orb + idx, pos_x, pos_y);
		else
			MoveObject(orb + idx, GetWaypointX(wp) + FloatTable(idx), GetWaypointY(wp));
		if (idx % 4 == 3)
		{
			pos_x = GetWaypointX(loc);
			pos_y += 2.0;
		}
		else
			pos_x += 2.0;
		idx ++;
	}
}

float FloatTable(int num)
{
	float arr[28], count;
	int k;

	if (num < 0)
	{
		count = 27.0;
		for (k = 27 ; k >= 0 ; k --)
		{
			arr[k] = count;
			count -= 1.0;
		}
		return ToFloat(0);
	}
	return arr[num];
}

int NumberData(int num)
{
	int data[10];

	if (!data[0])
	{
		data[0] = 110729622; data[1] = 239354980; data[2] = 252799126; data[3] = 110643350; data[4] = 143194521;
		data[5] = 110659359; data[6] = 110719382; data[7] = 71583903; data[8] = 110717334; data[9] = 110684566;
		return 0;
	}
	return data[num];
}

void InitMeteorSkill()
{
    int target = Object("Buy_getmonster");

    Skill_time = 0;
    MoveWaypoint(6, GetObjectX(target), GetObjectY(target));
    Skill_marker = CreateObject("BlueSummons", 6);
}

void ActivateMeteorShower()
{
    if (!Skill_time)
    {
        if (GetGold(other) >= 50000)
        {
            ChangeGold(other, -50000);
            Skill_time = 1;
            Delete(Skill_marker);
            SecondTimerWithArg(5, 60, StartMeteorShowerTime);
            UniPrintToAll("전장에 메테오 샤워를 시전합니다, 쿨다운: 300초");
            FrameTimerWithArg(3, GetCaller(), ShotMeteor);
        }
        else
            UniPrint(other, "금액이 " + IntToString(50000 - GetGold(other)) + " 더 필요합니다");
    }
}

void StartMeteorShowerTime(int time)
{
    if (time)
    {
        PutNumberOnMap(time);
        SecondTimerWithArg(5, time - 1, StartMeteorShowerTime);
    }
    else
    {
        InitMeteorSkill();
        UniPrintToAll("메테오 샤워를 사용가능 합니다, 사용금액: 5만원, 쿨다운: 300초");
    }
}

void DelayCastShower(int unit)
{
    CastSpellObjectObject("SPELL_METEOR_SHOWER", unit, unit);
    Delete(unit);
}

void ShotMeteor(int caster)
{
    int k, trap = CreateObject("InvisibleLightBlueHigh", 6);

    Delete(trap);
    trap ++;
    if (CurrentHealth(caster))
    {
        for (k = 0 ; k < 25 ; k ++)
        {
            SetOwner(caster, CreateObject("Wizard", k + 8));
            FrameTimerWithArg(1, trap + k, DelayCastShower);
        }
    }
}

int GetMaster()
{
    int unit;

    if (!unit)
    {
        unit = CreateObject("Hecubah", 42);
        Frozen(unit, 1);
    }
    return unit;
}

void InitOrbPlace()
{
    OrbPtr = CreateObject("InvisibleLightBlueHigh", 1) + 1;
    CreateObject("RedOrb", Random(0, 1) + 35);
    CreateObject("BlueOrb", Random(0, 1) + 37);
    CreateObject("GreenOrb", Random(0, 1) + 39);
    Delete(OrbPtr - 1);
}

void conbineFinalStaff()
{
    int k, res = 0, ptr;

    for (k = 0 ; k < 3 ; k ++)
        res += HasItem(other, OrbPtr + k);
    if (res == 3)
    {
        UniPrint(other, "오브를 모두 모으셨습니다");
        Delete(OrbPtr);
        Delete(OrbPtr + 1);
        Delete(OrbPtr + 2);
        SetUnitHealth(other, 2000);
        ptr = CreateObject("InvisibleLightBlueHigh", 1);
        CreateObject("InvisibleLightBlueHigh", 1);
        Raise(ptr, ToFloat(CreateObject("OblivionOrb", 41)));
        Raise(ptr + 1, ToFloat(GetCaller()));
        FrameTimerWithArg(1, ptr, DelayPickToPlayer);
    }
}

void DelayPickToPlayer(int ptr)
{
    int owner = ToInt(GetObjectZ(ptr + 1));
    if (CurrentHealth(owner))
    {
        Pickup(owner, ToInt(GetObjectZ(ptr)));
    }
    else
        Delete(ToInt(GetObjectZ(ptr)));
    Delete(ptr);
    Delete(ptr + 1);
}

void DefStageUnitName()
{
    StageUnit[0] = "Imp"; StageUnit[1] = "Bat"; StageUnit[2] = "SmallAlbinoSpider";
    StageUnit[3] = "Urchin"; StageUnit[4] = "Wasp"; StageUnit[5] = "Imp";
    StageUnit[6] = "Urchin"; StageUnit[7] = "FlyingGolem"; StageUnit[8] = "GiantLeech";
    StageUnit[9] = "GiantLeech"; StageUnit[10] = "AlbinoSpider"; StageUnit[11] = "Spider";
    StageUnit[12] = "Urchin"; StageUnit[13] = "Spider"; StageUnit[14] = "UrchinShaman";
    StageUnit[15] = "UrchinShaman"; StageUnit[16] = "AlbinoSpider"; StageUnit[17] = "Scorpion";
    StageUnit[18] = "Troll"; StageUnit[19] = "Scorpion"; StageUnit[20] = "SpittingSpider";
    StageUnit[21] = "SpittingSpider"; StageUnit[22] = "Wolf"; StageUnit[23] = "FlyingGolem";
    StageUnit[24] = "Swordsman"; StageUnit[25] = "Archer"; StageUnit[26] = "WhiteWolf";
    StageUnit[27] = "Swordsman"; StageUnit[28] = "Archer"; StageUnit[29] = "FlyingGolem";
    StageUnit[30] = "GruntAxe"; StageUnit[31] = "WhiteWolf"; StageUnit[32] = "BlackBear";
    StageUnit[33] = "GruntAxe"; StageUnit[34] = "OgreBrute"; StageUnit[35] = "Bear";
    StageUnit[36] = "OgreBrute"; StageUnit[37] = "OgreWarlord"; StageUnit[38] = "Bear";
    StageUnit[39] = "WizardGreen"; StageUnit[40] = "OgreWarlord"; StageUnit[41] = "Bear";
    StageUnit[42] = "WizardGreen"; StageUnit[43] = "BlackWidow"; StageUnit[44] = "Goon";
    StageUnit[45] = "WillOWisp"; StageUnit[46] = "Shade"; StageUnit[47] = "BlackWidow";
    StageUnit[48] = "Ghost"; StageUnit[49] = "Shade"; StageUnit[50] = "WillOWisp";
    StageUnit[51] = "Beholder"; StageUnit[52] = "Ghost"; StageUnit[53] = "Zombie";
    StageUnit[54] = "EvilCherub"; StageUnit[55] = "Skeleton"; StageUnit[56] = "VileZombie";
    StageUnit[57] = "EvilCherub"; StageUnit[58] = "MeleeDemon"; StageUnit[59] = "SkeletonLord";
    StageUnit[60] = "FireSprite"; StageUnit[61] = "MeleeDemon"; StageUnit[62] = "SkeletonLord";
    StageUnit[63] = "FireSprite"; StageUnit[64] = "EvilCherub"; StageUnit[65] = "EmberDemon";
    StageUnit[66] = "FireSprite"; StageUnit[67] = "EmberDemon"; StageUnit[68] = "VileZombie";
    StageUnit[69] = "Wizard"; StageUnit[70] = "SkeletonLord"; StageUnit[71] = "Ghost";
    StageUnit[72] = "Wizard"; StageUnit[73] = "EvilCherub"; StageUnit[74] = "MechanicalGolem";
    StageUnit[75] = "WizardRed"; StageUnit[76] = "MeleeDemon"; StageUnit[77] = "MechanicalGolem";
    StageUnit[78] = "Demon"; StageUnit[79] = "Mimic"; StageUnit[80] = "EvilCherub";
    StageUnit[81] = "Horrendous"; StageUnit[82] = "Mimic"; StageUnit[83] = "StoneGolem";
    StageUnit[84] = "WizardWhite"; StageUnit[85] = "MechanicalGolem"; StageUnit[86] = "StoneGolem";
    StageUnit[87] = "WizardRed"; StageUnit[88] = "MechanicalGolem"; StageUnit[89] = "MeleeDemon";
}

void DefStageUnitHp()
{
    StageHp[0] = 20; StageHp[1] = 30; StageHp[2] = 30 | (1 << 16);
    StageHp[3] = 50; StageHp[4] = 50; StageHp[5] = 40;
    StageHp[6] = 50; StageHp[7] = 50 | ((2 | 4) << 16); StageHp[8] = 60;
    StageHp[9] = 90; StageHp[10] = 80; StageHp[11] = 90;
    StageHp[12] = 90; StageHp[13] = 100; StageHp[14] = 85;
    StageHp[15] = 97; StageHp[16] = 120; StageHp[17] = 150;
    StageHp[18] = 200; StageHp[19] = 200; StageHp[20] = 140;
    StageHp[21] = 135; StageHp[22] = 150; StageHp[23] = 108 | ((2 | 4) << 16);
    StageHp[24] = 250 | (0x420 << 16); StageHp[25] = 120 | (0x520 << 16); StageHp[26] = 175;
    StageHp[27] = 275 | (0x420 << 16); StageHp[28] = 130 | (0x520 << 16); StageHp[29] = 120 | ((2 | 4) << 16);
    StageHp[30] = 225; StageHp[31] = 180; StageHp[32] = 280;
    StageHp[33] = 250; StageHp[34] = 290; StageHp[35] = 325;
    StageHp[36] = 225; StageHp[37] = 290; StageHp[38] = 350;
    StageHp[39] = 128; StageHp[40] = 325; StageHp[41] = 350;
    StageHp[42] = 175; StageHp[43] = 225 | (0x1d28 << 16); StageHp[44] = 120 | (0x6420 << 16);
    StageHp[45] = 225; StageHp[46] = 128; StageHp[47] = 250 | (0x1d28 << 16);
    StageHp[48] = 98 | (0x40 << 16); StageHp[49] = 192; StageHp[50] = 225;
    StageHp[51] = 306; StageHp[52] = 125 | (0x40 << 16); StageHp[53] = 192;
    StageHp[54] = 128; StageHp[55] = 295; StageHp[56] = 340;
    StageHp[57] = 128; StageHp[58] = 192; StageHp[59] = 275;
    StageHp[60] = 98 | (1 << 16); StageHp[61] = 192; StageHp[62] = 275;
    StageHp[63] = 98 | (1 << 16); StageHp[64] = 98; StageHp[65] = 192;
    StageHp[66] = 98 | (1 << 16); StageHp[67] = 192; StageHp[68] = 306;
    StageHp[69] = 192; StageHp[70] = 275; StageHp[71] = 130 | (0x40 << 16);
    StageHp[72] = 192; StageHp[73] = 98; StageHp[74] = 625;
    StageHp[75] = 260 | (0x2034 << 16); StageHp[76] = 175; StageHp[77] = 650;
    StageHp[78] = 400; StageHp[79] = 700; StageHp[80] = 98;
    StageHp[81] = 400; StageHp[82] = 700; StageHp[83] = 650;
    StageHp[84] = 350; StageHp[85] = 650; StageHp[86] = 650;
    StageHp[87] = 295 | (0x2034 << 16); StageHp[88] = 650; StageHp[89] = 175;
}

void GhostImage(int unit)
{
    if (CurrentHealth(unit))
    {
        MoveObject(unit + 1, GetObjectX(unit), GetObjectY(unit));
        FrameTimerWithArg(1, unit, GhostImage);
    }
    else
    {
        Delete(unit + 1);
    }
}

void StartCurrentStage(int num)
{
    if (CurStage < 30)
    {
        if (num < 25)
        {
            SummonUnit(num + 8);
            FrameTimerWithArg(1, num + 1, StartCurrentStage);
        }
    }
    else
        VictoryEvent();
}

void VictoryEvent()
{
    int k;
    DeleteObjectTimer(CreateObject("LevelUp", 20), 1800);
    DeleteObjectTimer(CreateObject("LevelUp", 8), 1800);
    DeleteObjectTimer(CreateObject("LevelUp", 32), 1800);
    DeleteObjectTimer(CreateObject("LevelUp", 12), 1800);
    DeleteObjectTimer(CreateObject("LevelUp", 28), 1800);
    for (k = 4 ; k >= 0 ; k --)
        WallOpen(Wall(110 + k, 138 + k));
    UniPrintToAll("축하합니다, 모든 스테이지를 클리어하셨습니다!, 최종 스테이지: 30");
}

void SummonUnit(int wp)
{
    int idx = CurStage * 3 + Random(0, 2);
    int unit = CreateObject(StageUnit[idx], wp);

    SetOwner(GetMaster(), unit);
    CheckMonsterThing(unit);
    Raise(unit, 200.0);
    CheckUnitFlags(GetMemory(0x750710), idx);
    SetCallback(unit, 5, UnitDeaths);
    SetUnitMaxHealth(unit, StageHp[idx] & 0xffff);
    Enchant(unit, "ENCHANT_ANCHORED", 0.0);
}

int VoiceList(int num)
{
    int list[75], addr, k;

    if (!list[0])
    {
        addr = GetMemory(0x663eec);
        for (k = 0 ; k < 75 ; k ++)
        {
            list[k] = addr;
            addr = GetMemory(addr + 0x4c);
        }
    }
    return list[num];
}

void CheckUnitFlags(int ptr, int idx)
{
    int flags = StageHp[idx] >> 16, unit = GetMemory(ptr + 0x2c);

    if (flags & 0x1) //slowed
        Enchant(unit, "ENCHANT_SLOWED", 0.0);
    if (flags & 0x2) //for_flying_golem
        SetCallback(unit, 3, MecaFlierWeapon);
    if (flags & 0x4) //wide_sight
        CreatureGuard(unit, GetObjectX(unit), GetObjectY(unit), GetObjectX(unit) + 10.0, GetObjectY(unit) - 10.0, 400.0);
    if (flags & 0x8)
        SetCallback(unit, 5, SummonSmallSpiderWhenDead);
    if (flags & 0x10)
        SetCallback(unit, 3, RedWizWeapon);
    if (flags & 0x20)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(flags >> 8));
    if (flags & 0x40)
    {
        int fist = CreateObjectAt("SmallFist", GetObjectX(unit), GetObjectY(unit));

        UnitNoCollide(fist);
        Frozen(fist, true);
        FrameTimerWithArg(1, unit, GhostImage);
    }
}

void UnitDeaths()
{
    int rnd = Random(1, g_dropItemFunction[0]), itemMake;

    DeleteObjectTimer(self, 60);
    CheckPass();
    itemMake = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(self), GetObjectY(self));
    FrameTimerWithArg(1, itemMake, g_dropItemFunction[rnd]);
}

void MecaFlierWeapon()
{
    int mis;
    float pos_x, pos_y;

    if (CurrentHealth(other))
    {
        if (!HasEnchant(self, "ENCHANT_ETHEREAL"))
        {
            pos_x = UnitRatioX(self, other, 17.0);
            pos_y = UnitRatioY(self, other, 17.0);
            MoveWaypoint(6, GetObjectX(self), GetObjectY(self));
            Effect("DAMAGE_POOF", GetWaypointX(6), GetWaypointY(6), 0.0, 0.0);
            mis = CreateObject("WeakArcherArrow", 6);
            SetOwner(self, mis);
            LookAtObject(mis, other);
            PushObjectTo(mis, -pos_x * 2.0, -pos_y * 2.0);
            Enchant(self, "ENCHANT_ETHEREAL", 0.7);
        }
        if (!HasEnchant(self, "ENCHANT_DETECTING"))
        {
            Enchant(self, "ENCHANT_DETECTING", 0.0);
            FrameTimerWithArg(22, GetTrigger(), ResetUnitSight);
        }
    }
}

void RedWizWeapon()
{
    int unit;
    float pos_x, pos_y;
    if (CurrentHealth(other))
    {
        if (!HasEnchant(self, "ENCHANT_ETHEREAL"))
        {
            pos_x = UnitRatioX(self, other, 20.0);
            pos_y = UnitRatioY(self, other, 20.0);
            unit = CreateObjectAt("Maiden", GetObjectX(self) - pos_x, GetObjectY(self) - pos_y);
            CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit));
            CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit));
            Frozen(unit, 1);
            SetCallback(unit, 9, ParserGunTouched);
            SetOwner(self, unit + 1);
            Raise(unit + 1, pos_x);
            Raise(unit + 2, pos_y);
            Enchant(self, "ENCHANT_ETHEREAL", 2.0);
        }
        if (!HasEnchant(self, "ENCHANT_DETECTING"))
        {
            Enchant(self, "ENCHANT_DETECTING", 0.0);
            FrameTimerWithArg(30, GetTrigger(), ResetUnitSight);
        }
    }
}

void RWizParserGun(int ptr)
{
    int owner = GetOwner(ptr + 1), count = GetDirection(ptr + 1);

    if (CurrentHealth(owner) && count < 30)
    {
        MoveObject(ptr, GetObjectX(ptr) - GetObjectZ(ptr + 1), GetObjectY(ptr) - GetObjectZ(ptr + 2));
        Effect("SENTRY_RAY", GetObjectX(ptr) + GetObjectZ(ptr + 1), GetObjectY(ptr) + GetObjectZ(ptr + 2), GetObjectX(ptr), GetObjectY(ptr));
        LookWithAngle(ptr + 1, count + 1);
        FrameTimerWithArg(1, ptr, RWizParserGun);
    }
    else
    {
        Delete(ptr);
        Delete(ptr + 1);
        Delete(ptr + 2);
    }
}

void ParserGunTouched()
{
    int owner = GetOwner(GetTrigger() + 1);

    if (CurrentHealth(other) && IsAttackedBy(other, owner) && !HasEnchant(other, "ENCHANT_FREEZE"))
    {
        Damage(other, owner, 30, 16);
        Enchant(other, "ENCHANT_FREEZE", 1.0);
    }
}

void SummonSmallSpiderWhenDead()
{
    MoveWaypoint(6, GetObjectX(self), GetObjectY(self));
    CreateObject("ArachnaphobiaFocus", 6);
    DeleteObjectTimer(CreateObject("BigSmoke", 6), 9);
    AudioEvent("BeholderDie", 6);
    AudioEvent("PoisonTrapTriggered", 6);
    UnitDeaths();
}

void ResetUnitSight(int unit)
{
    EnchantOff(unit, "ENCHANT_DETECTING");
    Enchant(unit, "ENCHANT_BLINDED", 0.07);
    AggressionLevel(unit, 1.0);
}

int CreateYellowPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 639); //YellowPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateBlackPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 641); //BlackPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateWhitePotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 640); //WhitePotion
    SetMemory(ptr + 12, GetMemory(ptr + 12) ^ 0x20);
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CheckPotionThingID(int unit)
{
    int thingID = GetUnitThingID(unit), x = unit;

    if (thingID == 639)
        x = CreateYellowPotion(125, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 640)
        x = CreateWhitePotion(100, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 641)
        x = CreateBlackPotion(85, GetObjectX(unit), GetObjectY(unit));
    if (x ^ unit) Delete(unit);

    return x;
}

void CheckPass()
{
    int count;

    count ++;
    if (count >= 25)
    {
        CurStage ++;
        UniPrintToAll("이번 스테이지를 완료했습니다, 잠시 후 다음 스테이지 " + IntToString(CurStage + 1) + "가 시작됩니다");
        SecondTimerWithArg(10, 0, StartCurrentStage);
        count = 0;
    }
}

void PutPotion(int itemMake)
{
    CheckPotionThingID(CreateObjectAt(PotionList(), GetObjectX(itemMake), GetObjectY(itemMake)));
    Delete(itemMake);
}

void PutGold(int itemMake)
{
    SetGoldAmount(CreateObjectAt(TreasureList(), GetObjectX(itemMake), GetObjectY(itemMake)), Random(500, 3000));
    Delete(itemMake);
}

void PutArmor(int itemMake)
{
    CreateObjectAt(ArmorTable(Random(0, 16)), GetObjectX(itemMake), GetObjectY(itemMake));
    Delete(itemMake);
}

void PutWeapon(int itemMake)
{
    CreateObjectAt(WeaponTable(Random(0, 11)), GetObjectX(itemMake), GetObjectY(itemMake));
    Delete(itemMake);
}

void PutMagicalStaff(int itemMake)
{
    CreateObjectAt(StaffTable(Random(0, 4)), GetObjectX(itemMake), GetObjectY(itemMake));
    Delete(itemMake);
}

void PutHpPotion(int itemMake)
{
    CreateObjectAt("RedPotion", GetObjectX(itemMake), GetObjectY(itemMake));
    Delete(itemMake);
}

int PlayerClassOnInit(int plr, int pUnit)
{
    player[plr] = pUnit;
    player[plr + 10] = 1;

    if (GetGold(pUnit))
        ChangeGold(pUnit, -GetGold(pUnit));
    SelfDamageClassEntry(pUnit);
    DiePlayerHandlerEntry(pUnit);

    return plr;
}

void PlayerRegist()
{
    int k, plr;

    while (true)
    {
        if (CurrentHealth(other))
        {
            plr = CheckPlayer();
            for (k = 9 ; k >= 0 && plr < 0 ; k --)
            {
                if (!MaxHealth(player[k]))
                {
                    plr = PlayerClassOnInit(k, GetCaller());
                    break;
                }
            }
            if (plr >= 0)
            {
                PlayerJoin(plr);
                break;
            }
        }
        CantJoin();
        break;
    }
}

void PlayerJoin(int plr)
{
    int wp = Random(1, 4);

    MoveObject(player[plr], GetWaypointX(wp), GetWaypointY(wp));
    DeleteObjectTimer(CreateObject("BlueRain", wp), 12);
    AudioEvent("BlindOff", wp);
}

void CantJoin()
{
    Enchant(other, "ENCHANT_FREEZE", 0.0);
    Enchant(other, "ENCHANT_ANTI_MAGIC", 0.0);
    MoveObject(other, GetWaypointX(5), GetWaypointY(5));
    UniPrint(other, "이 맵은 지원되지 않습니다");
}

void PlayerClassOnAlive(int plr)
{
    int pUnit = player[plr];

    if (UnitCheckEnchant(pUnit, GetLShift(31)))
    {
        WindBoost(pUnit);
        RemoveTreadLightly(pUnit);
        EnchantOff(pUnit, EnchantList(31));
    }
}

void PlayerClassOnDeath(int plr)
{ }

void PlayerClassOnExit(int plr)
{
    player[plr] = 0;
    player[plr + 10] = 0;
}

void PlayerClassOnLoop()
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        while (true)
        {
            if (MaxHealth(player[i]))
            {
                if (GetUnitFlags(player[i]) & 0x40)
                    1;
                else if (CurrentHealth(player[i]))
                {
                    PlayerClassOnAlive(i);
                    break;
                }
                else
                {
                    if (PlayerClassDeathFlagCheck(i)) 1;
                    else
                    {
                        PlayerClassDeathFlagSet(i);
                        PlayerClassOnDeath(i);
                    }
                    break;
                }
            }
            if (player[i + 10])
                PlayerClassOnExit(i);
            break;
        }
    }
    FrameTimer(1, PlayerClassOnLoop);
}

void WindBoost(int caster)
{
    Enchant(caster, "ENCHANT_RUN", 0.3);
    PushObjectTo(caster, UnitAngleCos(caster, 77.0), UnitAngleSin(caster, 77.0));
    Effect("RICOCHET", GetObjectX(caster), GetObjectY(caster), 0.0, 0.0);
}

int PlayerClassDeathFlagCheck(int plr)
{
    return player[plr + 10] & 2;
}

void PlayerClassDeathFlagSet(int plr)
{
    player[plr + 10] ^= 2;
}

int CheckPlayer()
{
    int k;
    for (k = 9 ; k >= 0 ; k --)
    {
        if (IsCaller(player[k]))
            return k;
    }
    return -1;
}

void SetGoldAmount(int unit, int amount)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
	    SetMemory(GetMemory(ptr + 0x2b4), amount);
}

void SetUnitMaxHealth(int unit, int amount)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x22c), amount);
        SetMemory(GetMemory(ptr + 0x22c) + 0x4, amount);
    }
}

string PotionList()
{
    string table = {"RedPotion", "CurePoisonPotion", "ShieldPotion", "ShockProtectPotion", "YellowPotion", "BlackPotion", "VampirismPotion",
    "HastePotion", "FireProtectPotion", "PoisonProtectPotion"};

    return ToStr(SToInt(table) + Random(0, 9));
}

string TreasureList()
{
    string table = {"QuestGoldChest", "QuestGoldPile", "Gold"};

    return ToStr(SToInt(table) + Random(0, 2));
}

string WeaponTable(int num)
{
    string table = {"WarHammer", "GreatSword", "RoundChakram", "Quiver", "OgreAxe", "MorningStar", "Sword", "Longsword",
    "CrossBow", "Bow", "StaffWooden", "FanChakram"};
    return ToStr(SToInt(table) + num); //amount: 0-11
}

string StaffTable(int num)
{
    string table = {"DeathRayWand", "LesserFireballWand", "FireStormWand", "ForceWand", "SulphorousFlareWand"};

    return ToStr(SToInt(table) + num);
}

string ArmorTable(int num)
{
    string table = {"ConjurerHelm", "LeatherArmbands", "LeatherArmor", "LeatherArmoredBoots", "LeatherBoots", "LeatherLeggings",
    "WizardHelm", "WizardRobe", "OrnateHelm", "Breastplate", "PlateArms", "PlateBoots", "PlateLeggings", "MedievalCloak",
    "MedievalPants", "MedievalShirt", "SteelShield"};

    return ToStr(SToInt(table) + num); //amount: 0-16
}

string PlayerName(int ptr)
{
    int addr = GetMemory(0x97bb40), xwis_id = GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x830;

	SetMemory(addr, GetMemory(xwis_id));
    SetMemory(addr + 4, GetMemory(xwis_id + 4));
    SetMemory(addr + 8, GetMemory(xwis_id + 8));
	StopScript(0);
}

float UnitRatioX(int unit, int target, float size)
{
    return (GetObjectX(unit) - GetObjectX(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float UnitRatioY(int unit, int target, float size)
{
    return (GetObjectY(unit) - GetObjectY(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float MathSine(int angle, float size)
{
    float var_0[91];
    int i, k;
 
    if (!ToInt(var_0[90]))
    {
        MoveWaypoint(angle + 1, GetWaypointX(angle), GetWaypointY(angle) - 1.0);
        for (i = 0 ; i <= 90 ; i ++)
        {
            var_0[i] = GetSineValue(angle, size);
            Delete(k + i + 1);
        }
        return var_0[0];
    }
    k = angle / 90;
    i = angle - (k * 90);

    if (k % 2) i = 90 - i;
    if ((angle / 180) % 2) return -var_0[i] * size;
	else return var_0[i] * size;
}

float GetSineValue(int wp, float c)
{
    float x_ratio = WayRatioX(wp, wp + 1), y_ratio = WayRatioY(wp, wp + 1), res;

    res = GetWaypointX(wp) - GetWaypointX(wp + 1);
    MoveWaypoint(wp + 1, GetWaypointX(wp) - (c * y_ratio) - x_ratio, GetWaypointY(wp) + (c * x_ratio) - y_ratio);
    return res;
}

float UnitAngleCos(int unit, float size)
{
    return MathSine((GetDirection(unit) * 45 / 32) + 90, size);
}

float UnitAngleSin(int unit, float size)
{
    return MathSine(GetDirection(unit) * 45 / 32, size);
}

float WayRatioX(int wp1, int wp2)
{
    return (GetWaypointX(wp1) - GetWaypointX(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float WayRatioY(int wp1, int wp2)
{
    return (GetWaypointY(wp1) - GetWaypointY(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

void StrGoShop()
{
	int arr[23], i = 0;
	string name = "ManaBombOrb";

	arr[0] = 1613226512; arr[1] = 2139097167; arr[2] = 8521792; arr[3] = 8480; arr[4] = 63447682; arr[5] = 1082098816; arr[6] = 140743176; arr[7] = 4608; arr[8] = 574784530; arr[9] = 18432; 
	arr[10] = 277350408; arr[11] = 1073156097; arr[12] = 2046; arr[13] = 278528; arr[14] = 1887305728; arr[15] = 1081375; arr[16] = 1107559424; arr[17] = 138477632; arr[18] = 135270400; arr[19] = 553844994; 
	arr[20] = 528592896; arr[21] = 67110904; arr[22] = 1585407; 
	while(i < 23)
	{
		drawStrGoShop(arr[i], name);
		i ++;
	}
}

void drawStrGoShop(int arg_0, string name)
{
	int count, i;
	float pos_x, pos_y;

	if (!count)
	{
		pos_x = GetWaypointX(1);
		pos_y = GetWaypointY(1);
	}
	for (i = 1 ; i > 0 && count < 713 ; i <<= 1)
	{
		if (i & arg_0)
			CreateObject(name, 1);
		if (count % 64 == 63)
			MoveWaypoint(1, GetWaypointX(1) - 126.000000, GetWaypointY(1) + 2.000000);
		else
			MoveWaypoint(1, GetWaypointX(1) + 2.000000, GetWaypointY(1));
		count ++;
	}
	if (count >= 713)
	{
		count = 0;
		MoveWaypoint(1, pos_x, pos_y);
	}
}


void StrMeteorShower()
{
	int arr[22];
	string name = "ManaBombOrb";
	int i = 0;
	arr[0] = 1075905016; arr[1] = 83640384; arr[2] = 268976257; arr[3] = 555749392; arr[4] = 67360800; arr[5] = 1883767812; arr[6] = 41978375; arr[7] = 1179905; arr[8] = 554705984; arr[9] = 294976; 
	arr[10] = 159582728; arr[11] = 1072762992; arr[12] = 33816576; arr[13] = 8406020; arr[14] = 8454399; arr[15] = 2232449; arr[16] = 538984480; arr[17] = 33808; arr[18] = 200933256; arr[19] = 2089219; 
	arr[20] = 33554434; arr[21] = 64; 
	while(i < 22)
	{
		drawStrMeteorShower(arr[i], name);
		i ++;
	}
}

void drawStrMeteorShower(int arg_0, string name)
{
	int count;
	int i;
	float pos_x;
	float pos_y;

	if (!count)
	{
		pos_x = GetWaypointX(33);
		pos_y = GetWaypointY(33);
	}
	for (i = 1 ; i > 0 && count < 682 ; i <<= 1)
	{
		if (i & arg_0)
			CreateObject(name, 33);
		if (count % 60 == 59)
			MoveWaypoint(33, GetWaypointX(33) - 118.000000, GetWaypointY(33) + 2.000000);
		else
			MoveWaypoint(33, GetWaypointX(33) + 2.000000, GetWaypointY(33));
		count ++;
	}
	if (count >= 682)
	{
		count = 0;
		MoveWaypoint(33, pos_x, pos_y);
	}
}

void SetUnitHealth(int unit, int amount)
{
    Damage(unit, 0, CurrentHealth(unit) - 1, -1);
    Pickup(unit, CreateObject("RottenMeat", 41));
    Damage(unit, 0, CurrentHealth(unit) - amount, -1);
}

string StringOverflow(int t)
{
	return ToStr((t - 0x97bb40) / 4);
}

string EnchantList(int sNumber)
{
	return StringOverflow(0x596f24 + (sNumber * 4));
}

int UnitCheckEnchant(int sUnit, int sMagicFlag)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        return GetMemory(ptr + 0x154) & sMagicFlag;
    return 0;
}

int GetLShift(int sCount)
{
    return (1 << sCount);
}

void SetUnitEnchantCopy(int sUnit, int sMagicFlag)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		Enchant(sUnit, EnchantList(6), 0.0);
		SetMemory(ptr + 0x154, GetMemory(ptr + 0x154) | sMagicFlag);
	}
}

void UnitSetEnchantTime(int unit, int enchantNumber, int durateTime)
{
	int ptr = UnitToPtr(unit), temp, tempPtr;

	if (ptr)
	{
		SetUnitEnchantCopy(unit, GetLShift(enchantNumber));
		tempPtr = ptr + 0x158 + ((enchantNumber / 2) * 4);
		temp = GetMemory(tempPtr);
		if (enchantNumber % 2)
		{
			SetMemory(tempPtr, (GetMemory(tempPtr) & 0xffff) | (durateTime << 0x10));
		}
		else
			SetMemory(tempPtr, ((GetMemory(tempPtr) >> 0x10) << 0x10) | durateTime);
	}
}

int ImportRemoveSneakDelay()
{
    int arr[7], link;

    if (!link)
    {
        arr[0] = 0x72506850; arr[1] = 0x14FF0050; arr[2] = 0xC3006824; arr[3] = 0x046A004F; arr[4] = 0x2454FF50; arr[5] = 0x10C48308; arr[6] = 0x9090C358;
        link = GetScrDataField(ImportRemoveSneakDelay);
    }
    return link;
}

void RemoveTreadLightly(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit), temp = GetMemory(0x5c336c);

    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 0x04)
        {
            SetMemory(0x5c336c, ImportRemoveSneakDelay());
            Unknownb8(ptr);
            SetMemory(0x5c336c, temp);
        }
    }
}

int ImportPlayerAutoTeamSign()
{
    int arr[17], link;

    if (!link)
    {
        arr[0] = 0x4191D068; arr[1] = 0x50515600; arr[2] = 0x000020B9; arr[3] = 0xF9E0B800; arr[4] = 0xC9850062;
        arr[5] = 0x8B492774; arr[6] = 0x12DC0530; arr[7] = 0xF6850000; arr[8] = 0x5150F074; arr[9] = 0x8D24468B;
        arr[10] = 0x016A304E; arr[11] = 0x51016A50; arr[12] = 0x54FF016A; arr[13] = 0xC4832824; arr[14] = 0xEB585914;
        arr[15] = 0x5E5958D5; arr[16] = 0xC304C483;
        link = GetScrDataField(ImportPlayerAutoTeamSign);
    }
    return link;
}

void PlayerAutoTeamSign()
{
    int temp = GetMemory(0x5c31cc);

    SetMemory(0x5c31cc, ImportPlayerAutoTeamSign());
    Unused50();
    SetMemory(0x5c31cc, temp);
}

void MakeCoopTeam()
{
    int arr[3];
    int teamCount = GetMemory(0x654D5C), temp, link;

    if (!teamCount && !link)
    {
        arr[0] = 0x417E1068; arr[1] = 0x2414FF00; arr[2] = 0xC304C483;
        link = GetScrDataField(MakeCoopTeam);
        temp = GetMemory(0x5c31cc);
        SetMemory(0x5c31cc, link);
        Unused50();
        SetMemory(0x5c31cc, temp);
        SetMemory(0x5d53a4, 268640519);
    }
}

void RemoveCoopTeamMode()
{
    int arr[6], link, temp;

    if (!link && GetMemory(0x654d5c) == 1)
    {
        arr[0] = 0x4DB8BE56; arr[1] = 0x20680065; arr[2] = 0x6A00418F; arr[3] = 0x54FF5600; arr[4] = 0xC4830824; arr[5] = 0x90C35E0C;
        link = GetScrDataField(RemoveCoopTeamMode);
        temp = GetMemory(0x5c31cc);
        SetMemory(0x5c31cc, link);
        Unused50();
        SetMemory(0x5c31cc, temp);
    }
}

void SetGameTypeCoopMode()
{
    MakeCoopTeam();
    PlayerAutoTeamSign();
}

void CancelPlayerDialogWithPTR(int plrPtr)
{
    if (GetMemory(GetMemory(plrPtr + 0x2ec) + 0x11c))
    {
        SetMemory(GetMemory(plrPtr + 0x2ec) + 0x11c, 0);
        SetMemory(GetMemory(GetMemory(plrPtr + 0x2ec) + 0x114) + 0xe60, 0x10);
    }
}

int ImportCheckSelfDamage()
{
    int arr[14], link;

    if (!link)
    {
        arr[0] = 0x4C8B5651; arr[1] = 0xC9850C24; arr[2] = 0x748B2374; arr[3] = 0xF6851024; arr[4] = 0xF1391B74; arr[5] = 0x8B501374; arr[6] = 0x0001FC86;
        arr[7] = 0x74C08500; arr[8] = 0x58F08B05; arr[9] = 0xEB58ECEB; arr[10] = 0xC3595E04; arr[11] = 0x68595E90; arr[12] = 0x004E17B0; arr[13] = 0x909090C3;
        link = GetScrDataField(ImportCheckSelfDamage);
    }
    return link;
}

void SelfDamageClassEntry(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        SetMemory(ptr + 0x2cc, ImportCheckSelfDamage());
}

void SelfDamageClassMapExit()
{
    int i, pTable = 0x62f9e0, ptr;
    int link = GetScrDataField(SelfDamageClassMapExit);

    for (i = 31 ; i >= 0 ; Unused59(link, Unknownb9(link) - 1))
    {
        SetMemory(link + 8, GetMemory(pTable));
        if (ptr)
        {
            SetMemory(ptr + 0x2cc, 0x4e17b0);
            SetMemory(ptr + 0x2d4, 0x54d2b0);
            if (GetMemory(ptr + 0x2e8) ^ 0x4E62F0)      //@brief. 관객모드가 아닐 경우에만 되돌립니다//
                SetMemory(GetMemory(pTable) + 0x2e8, 0x4f8100);     //@brief. 업데이트 되돌리기//
            CancelPlayerDialogWithPTR(GetMemory(pTable));
        }
        Unused59(link + 4, Unknownb9(link + 4) + 0x12dc);
    }
}

void ChangePlayerDeathSound(int handle, int soundNumber) //@brief. 유저가 죽었을 때 효과음을 변경합니다
{
    SetMemory(handle + 0x258, soundNumber);  //@brief. SoundList.txt 파일을 참고하세요
}

int CallNode54d2b0()
{
    int arr[40];

    if (!arr[0])
    {
        arr[0] = 0x54d2d1;
        arr[1] = 0x54d2e3;
        arr[2] = 0x54d2f3;
        arr[3] = 0x54d30a;
        arr[4] = 0x54d348;
        arr[5] = 0x54d375;
        arr[6] = 0x54d3aa;
        arr[7] = 0x54d45c;
        arr[8] = 0x54d47b;
        arr[9] = 0x54d513;
        arr[10] = 0x54d527;
        arr[11] = 0x54d566;
        arr[12] = 0x54d574;
        arr[13] = 0x54d588;
        arr[14] = 0x54d594;
        arr[15] = 0x54d5a6;
        arr[16] = 0x54d5b2;
        arr[17] = 0x54d5c4;
        arr[18] = 0x54d5d1;
        arr[19] = 0x54d5e2;
        arr[20] = 0x54d5f4;
        arr[21] = 0x54d610;
        arr[22] = 0x54d622;
        arr[23] = 0x54d62c;
        arr[24] = 0x54d639;
        arr[25] = 0x54d642;
        arr[26] = 0x54d65b;
        arr[27] = 0x54d662;
        arr[28] = 0x54d668;
        arr[29] = 0x54d67a;
        arr[30] = 0x54d680;
        arr[31] = 0x54d693;
        arr[32] = 0x54d6a6;
        arr[33] = 0x54d727;
        arr[34] = 0x54d72d;
        arr[35] = 0x54d733;
        arr[36] = 0x54d73d;
        arr[37] = 0x54d749;
        arr[38] = 0x54d782;
    }
    return GetScrDataField(CallNode54d2b0);
}

int DiePlayerHandlerCopiedCode()
{
    int arr[314], link;

    if (!link)
    {
        link = GetScrDataField(DiePlayerHandlerCopiedCode);
        OpcodeCopiesAdvance(link, CallNode54d2b0(), 0x54d2b0, 0x54d794);
    }
    return link;
}

void DiePlayerHandlerEntry(int plrUnit)  //@brief. 해당 유저를 재정의된 시스템에 등록합니다
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
    {
        SetMemory(ptr + 0x2d4, DiePlayerHandlerCopiedCode());  //@brief. 플레이어 데스 재정의 핸들러 등록!
        SetMemory(ptr + 0x2e8, PlayerUpdate4f8100());       //@brief. 플레이어 업데이트 재정의 핸들러 등록!
    }
}

int Callnode4f8100()
{
    int node[20], link;

    if (!link)
    {
        node[0] = 0x4f8145;
        node[1] = 0x4f816e;
        node[2] = 0x4f81ad;
        node[3] = 0x4f820b;
        node[4] = 0x4f8218;
        node[5] = 0x4f8221;
        node[6] = 0x4f826b;
        node[7] = 0x4f8326;
        node[8] = 0x4f836e;
        node[9] = 0x4f8381;
        node[10] = 0x4f8387;
        node[11] = 0x4f838f;
        node[12] = 0x4f83a3;
        node[13] = 0x4f83ac;
        node[14] = 0x4f83c3;
        node[15] = 0x4f83dc;
        node[16] = 0x4f83eb;
        node[17] = 0x4f8407;
        node[18] = 0; //nullptr
        link = GetScrDataField(Callnode4f8100);
    }
    return link;
}

int PlayerUpdate4f8100()    //@brief. 유저 업데이트 복사본
{
    int codes[200], link;

    if (!link)
    {
        link = GetScrDataField(PlayerUpdate4f8100);
        OpcodeCopiesAdvance(link, Callnode4f8100(), 0x4f8100, 0x4f8414);
        FixCallOpcode(link + 0x287, PlayerUpdate4f8460());  //@brief. 4f8460으로 링크
    }
    return link;
}

int PlayerUpdate4f8460()
{
    int arr[75], link;

    if (!link)
    {
        arr[0] = 0x530CEC83; arr[1] = 0x748B5655; arr[2] = 0x31571C24; arr[3] = 0xECBE8BC0; arr[4] = 0x89000002; arr[5] = 0x89202444; arr[6] = 0x8A142444;
        arr[7] = 0xF8835847; arr[8] = 0x83427721; arr[9] = 0x077404F8; arr[10] = 0x8C8524FF; arr[11] = 0x8B004F99; arr[12] = 0x84EA0415; arr[13] = 0x88AE8B00;
        arr[14] = 0xA1000000; arr[15] = 0x0085B3FC; arr[16] = 0xE8D1EA29; arr[17] = 0x1776C239; arr[18] = 0x00040068; arr[19] = 0x4CDEE800; arr[20] = 0xC483F28D;
        arr[21] = 0x74C08504; arr[22] = 0x90806812; arr[23] = 0x68C3004F; arr[24] = 0x004F9983; arr[25] = 0x850B68C3; arr[26] = 0x68C3004F; arr[27] = 0x00002000;
        arr[28] = 0x8D4CBBE8; arr[29] = 0x04C483F2; arr[30] = 0x4A74C085; arr[31] = 0x0114878B; arr[32] = 0x80F60000; arr[33] = 0x00000E60; arr[34] = 0x313B7501;
        arr[35] = 0x10888AC9; arr[36] = 0x51000008; arr[37] = 0x9E5227E8; arr[38] = 0x04C483F2; arr[39] = 0x2674C085; arr[40] = 0x000006BB; arr[41] = 0x08583900;
        arr[42] = 0x978B3A74; arr[43] = 0x00000114; arr[44] = 0x8AC03150; arr[45] = 0x00081082; arr[46] = 0x71E85000; arr[47] = 0x83F29E52; arr[48] = 0xC08508C4;
        arr[49] = 0x95E8DF74; arr[50] = 0x85F28D4C; arr[51] = 0x560F74C0; arr[52] = 0x00011BE8; arr[53] = 0x04C48300; arr[54] = 0x4F850B68; arr[55] = 0x8368C300;
        arr[56] = 0xC3004F99; arr[57] = 0x01148F8B; arr[58] = 0xD2310000; arr[59] = 0x0810918A; arr[60] = 0xE8520000; arr[61] = 0xF29E52A8; arr[62] = 0x5604C483;
        arr[63] = 0x9C255FE8; arr[64] = 0x04C483F2; arr[65] = 0x4F850B68; arr[66] = 0x9090C300;
        link = GetScrDataField(PlayerUpdate4f8460);
        FixCallOpcode(link + 0x4d, 0x40a5c0);
        FixCallOpcode(link + 0x70, 0x40a5c0);
        FixCallOpcode(link + 0x94, 0x51ab50);
        FixCallOpcode(link + 0xba, 0x51abc0);
        FixCallOpcode(link + 0xc6, 0x40a5f0);
        // FixCallOpcode(link + 0xd0, 0x4f7ef0);       //@todo. 여기를 서브클래싱 해줘야 한다!
        FixCallOpcode(link + 0xd0, PlayerRespawn004f7ef0());       //@brief. 서브클래싱 링크
        FixCallOpcode(link + 0xf3, 0x51ac30);
        // FixCallOpcode(link + 0xfc, 0x4f7ef0);           //@brief. todo
        FixCallOpcode(link + 0xfc, PlayerRespawn004f7ef0());           //@brief. todo
    }
    return link;
}

int Callnode004f7ef0()
{
    int node[21], link;

    if (!link)
    {
        node[0] = 0x4f7ef7;
        node[1] = 0x4f7f1b;
        node[2] = 0x4f7f48;
        node[3] = 0x4f7f59;
        node[4] = 0x4f7f7c;
        node[5] = 0x4f7f8b;
        node[6] = 0x4f7f98;
        node[7] = 0x4f7fb5;
        node[8] = 0x4f7fd6;
        node[9] = 0x4f7ff1;
        node[10] = 0x4f800d;
        node[11] = 0x4f801a;
        node[12] = 0x4f8028;
        node[13] = 0x4f802f;
        node[14] = 0x4f803d;
        node[15] = 0x4f8055;
        node[16] = 0x4f807a;
        node[17] = 0x4f8087;
        node[18] = 0x4f80a1;
        node[19] = 0; //nullptr
        link = GetScrDataField(Callnode004f7ef0);
    }
    return link;
}

int PlayerRespawn004f7ef0()     //@brief. 유저 리스폰 복사본
{
    int codes[115], link;

    if (!link)
    {
        link = GetScrDataField(PlayerRespawn004f7ef0);
        OpcodeCopiesAdvance(link, Callnode004f7ef0(), 0x4f7ef0, 0x4f80b4);
        SetMemory(link + 0x62, 0x16a9090);
        SetMemory(link + 0x94, (GetMemory(link + 0x94) & (~0xffff)) ^ 0x9090);
        FixCallOpcode(link + 0x9b, RedrawOnRespawn());
    }
    return link;
}

int RedrawOnRespawn()
{
    int arr[16], link;

    if (!link)
    {
        arr[0] = 0x50EC8B55; arr[1] = 0x758B5651; arr[2] = 0xF88E8B08; arr[3] = 0x85000001; arr[4] = 0x8B2674C9; arr[5] = 0x00251041; arr[6] = 0x85000001; arr[7] = 0x511274C0;
        arr[8] = 0x1F8AE856; arr[9] = 0x595EFFDA; arr[10] = 0x41E85651; arr[11] = 0x5EFFDA1F; arr[12] = 0xF0898B59; arr[13] = 0xEB000001; arr[14] = 0x58595ED6; arr[15] = 0x9090C35D;
        link = GetScrDataField(RedrawOnRespawn);
        FixCallOpcode(link + 0x21, 0x4f2fb0);
        FixCallOpcode(link + 0x2a, 0x4f2f70);
    }
    return link;
}

int MapWaypointTable(int idx)
{
    int table[600];

    return table[idx - 1];
}

float LocationX(int location)
{
    StopScript(GetMemory(MapWaypointTable(location) + 8));
}

float LocationY(int location)
{
    StopScript(GetMemory(MapWaypointTable(location) + 12));
}

void TeleportLocation(int location, float xProfile, float yProfile)
{
    int wTable = MapWaypointTable(location);

    SetMemory(wTable + 8, ToInt(xProfile));
    SetMemory(wTable + 12, ToInt(yProfile));
}

void TeleportLocationVector(int location, float xVect, float yVect)
{
    int wTable = MapWaypointTable(location);

    SetMemory(wTable + 8, ToInt(ToFloat(GetMemory(wTable + 8)) + xVect));
    SetMemory(wTable + 12, ToInt(ToFloat(GetMemory(wTable + 12)) + yVect));
}

void MapWaypointFill(int wAddr, int tPtr)
{
    int num;

    if (wAddr)
    {
        num = GetMemory(wAddr);
        SetMemory(tPtr + (num * 4), wAddr);
        MapWaypointFill(GetMemory(wAddr + 484), tPtr);
    }
}

void MapWaypointInit()
{
    MapWaypointFill(GetMemory(0x83c7fc), GetScrDataField(MapWaypointTable));
}

int ImportPlaySoundAround()
{
	int arr[17], link;

	if (!link)
	{
		arr[0] = 0x50196068; arr[1] = 0x72506800; arr[2] = 0x50560050; arr[3] = 0x082454FF;
		arr[4] = 0x54FFF08B; arr[5] = 0x006A0824; arr[6] = 0x5650006A; arr[7] = 0x1C2454FF;
		arr[8] = 0x5810C483; arr[9] = 0x08C4835E; arr[10] = 0x909090C3;
        link = GetScrDataField(ImportPlaySoundAround);
	}
	return link;
}

void PlaySoundAround(int sUnit, int sNumber)
{
	int unitPtr = UnitToPtr(sUnit), temp = GetMemory(0x5c325c);

	if (unitPtr)
	{
		SetMemory(0x5c325c, ImportPlaySoundAround());
		Unused74(unitPtr, sNumber);
		SetMemory(0x5c325c, temp);
	}
}

int ImportUniChatCore()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0xC0685657; arr[1] = 0x6800528A; arr[2] = 0x00507250; arr[3] = 0x8B2414FF; arr[4] = 0x2414FFF8;
        arr[5] = 0x14FFF08B; arr[6] = 0x56505724; arr[7] = 0x102454FF; arr[8] = 0x5E14C483; arr[9] = 0x9090C35F;
        link = GetScrDataField(ImportUniChatCore);
    }
    return link;
}

void UniChatCore(int plrPtr, int sPtr, int sTime)
{
    int temp = GetMemory(0x5c3320);

    SetMemory(0x5c3320, ImportUniChatCore());
    GroupRunAway(sPtr, plrPtr, sTime);
    SetMemory(0x5c3320, temp);
}

int ImportUniPrintCore()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x9EB06856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x502414FF;
        arr[5] = 0x2454FF56; arr[6] = 0x10C4830C; arr[7] = 0x9090C35E; 
        link = GetScrDataField(ImportUniPrintCore);
    }
    return link;
}

void UniPrintCore(int plrPtr, int sPtr)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportUniPrintCore());
    Unused5a(sPtr, plrPtr);
    SetMemory(0x5c31f4, temp);
}

int GetByteValue(int ptr)
{
    return GetMemory(ptr) & 0xff;
}

void WriteAddressWordValue(int addr, int word)
{
    int temp = GetMemory(addr) & 0xffff0000;
    SetMemory(addr, temp | word);
}

void NoxUtf8ToUnicode(int src, int dest)
{
    int i = 0, byt;

    while (1)
    {
        byt = GetByteValue(src + i);
        if (!byt) break;
        if (!(byt & 0x80))
        {
            WriteAddressWordValue(dest, byt);
            i ++;
        }
        else if ((byt & 0xe0) == 0xc0)
        {
            WriteAddressWordValue(dest, ((byt & 0x1f) <<6) | (GetByteValue(src + i + 1) & 0x3f));
            i += 2;
        }
        else if ((byt & 0xf0) == 0xe0)
        {
            WriteAddressWordValue(dest, ((byt & 0xf) << 12) | ((GetByteValue(src + i + 1) & 0x3f) << 6) | (GetByteValue(src + i + 2) & 0x3f));
            i += 3;
        }
        dest += 2;
    }
    WriteAddressWordValue(dest, 0);
}

void UniPrint(int sUnit, string sMsg)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
            link = GetScrDataField(UniPrint);
        NoxUtf8ToUnicode(str, link + 8);
        UniPrintCore(ptr, link + 8);
    }
}

void UniChatMessage(int sUnit, string sMsg, int duration)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
            link = GetScrDataField(UniChatMessage);
        NoxUtf8ToUnicode(str, link + 12);
        UniChatCore(ptr, link + 12, duration);
    }
}

void UniPrintToAll(string sMsg)
{
    int wDest[200];
    int plrPtr = 0x62f9e0, link, str = SToInt(sMsg), i;

    if (!link)
        link = GetScrDataField(UniPrint) + 4;
    str = GetMemory(0x97bb40 + (str * 4));
    NoxUtf8ToUnicode(str, link);
    for (i = 0 ; i < 32 ; i ++)
    {
        if (GetMemory(plrPtr))
            UniPrintCore(GetMemory(plrPtr), link);
        plrPtr += 0x12dc;
    }
}

int MathAbs(int num)
{
    if (num < 0)
        num = -num;
    return num;
}

int CheckSignDelay(int sPtr, int gap)
{
    int cFps = GetMemory(0x84ea04);

    if (MathAbs(cFps - GetMemory(sPtr)) > gap)
    {
        SetMemory(sPtr, cFps);
        return 1;
    }
    return 0;
}

void SignNotification()
{
    int otPtr = GetMemory(0x979720), sePtr = GetMemory(0x979724);

    if (otPtr && sePtr)
    {
        if (CheckSignDelay(GetMemory(sePtr + 0x2e0) + 100, 60))
        {
            UniPrint(other, ToStr(GetMemory(sePtr + 0x2f0)));
            //UniPrintCore(otPtr, GetMemory(sePtr + 0x2e0));
        }
    }
}

void RegistSignMessage(int sUnit, string sMsg)
{
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg);

    if (ptr)
    {
        SetMemory(ptr + 0x2f0, str);
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, SignNotification);
    }
}

int ImportUniBroadcast()
{
    int arr[6], link;

    if (!link)
    {
        arr[0] = 0x4D9FD068; arr[1] = 0x72506800; arr[2] = 0x14FF0050; arr[3] = 0x106A5024;
        arr[4] = 0x0C2454FF; arr[5] = 0xC310C483;
        link = GetScrDataField(ImportUniBroadcast);
    }
    return link;
}

void UniBroadcast(string sMsg)
{
    int wDest[100];
    int temp = GetMemory(0x5c3108), link, str = GetMemory(0x97bb40 + (SToInt(sMsg) * 4));

    if (!link)
        link = GetScrDataField(UniBroadcast);
    NoxUtf8ToUnicode(str, link + 4);
    SetMemory(0x5c3108, ImportUniBroadcast());
    Unused1f(link + 4);
    SetMemory(0x5c3108, temp);
}

int ImportUseItemFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x1424748B; arr[3] = 0x18246C8B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        link = GetScrDataField(ImportUseItemFunc);
    }
    return link;
}