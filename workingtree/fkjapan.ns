
int MainKey2, LbPtr, LbCnt;
int MyBlock, LbPtr2, CampArea;
int ArrTrp3;
int ArrTrp2;
int LastUnitPtr;
int ArrTrp1, MainKey1;
int UfRot;
int player[20];
int MyBlock2, FireTrp1;
int EnableMemoryReadWriteFunction(int t) {}

int GetMemory(int addr) { return Unknownb9(addr); }
void SetMemory(int addr, int value) { Unused59(addr, value); }

void OpcodeCopiesAdvance(int destPtr, int callNodePtr, int startAddr, int endAddr)
{
    int destBase = destPtr, curAddr = startAddr;
    int vptr = GetScrDataField(OpcodeCopiesAdvance);

    while (curAddr <= endAddr)
    {
        Unused59(destPtr, Unknownb9(curAddr));
        if (Unknownb9(callNodePtr))
        {
            if (Unknownb9(callNodePtr) + 1 <= curAddr)
            {
                OpcodeLoadEffectiveAddr(destBase, startAddr, Unknownb9(callNodePtr) - startAddr);
                Unused59(vptr + 4, Unknownb9(vptr + 4) + 4);
            }
        }
        Unused59(vptr + 0x14, Unknownb9(vptr + 0x14) + 4);
        Unused59(vptr, Unknownb9(vptr) + 4);
    }
}

int GetWordValue(int num)
{
	return num & 0xffff;
}

void WriteAddressByteValue(int addr, int byt)
{
	int temp = GetMemory(addr) & 0xffffff00;
	SetMemory(addr, temp | byt);
}

int NoxUnicodeToUtf8(int src, int destPtr)
{
	int i, byt, dest = destPtr;

	for (i = 0 ; i < 20 ; i ++)
	{
		byt = GetWordValue(GetMemory(src));
        if (!byt) break;
		if (byt < 0x80)
		{
			WriteAddressByteValue(dest, byt);
			dest ++;
		}
		else if (byt < 0x800)
		{
			WriteAddressByteValue(dest, ((byt >> 6) & 0x1f) | 0xc0);
			WriteAddressByteValue(dest + 1, (byt & 0x3f) | 0x80);
			dest += 2;
		}
		else
		{
			WriteAddressByteValue(dest, ((byt >> 12) & 0x0f) | 0xe0);
			WriteAddressByteValue(dest + 1, ((byt >> 6) & 0x3f) | 0x80);
			WriteAddressByteValue(dest + 2, (byt & 0x3f) | 0x80);
			dest += 3;
		}
        src += 2;
	}
    WriteAddressByteValue(dest, 0);
	return dest - destPtr;
}

string PlayerIngameNick(int sUnit)
{
    string emptyName = {
        "00:01234567890123456789abcd0123456789abxyz", "01:01234567890123456789abcd0123456789abxyz",
        "02:01234567890123456789abcd0123456789abxyz", "03:01234567890123456789abcd0123456789abxyz",
        "04:01234567890123456789abcd0123456789abxyz", "05:01234567890123456789abcd0123456789abxyz",
        "06:01234567890123456789abcd0123456789abxyz", "07:01234567890123456789abcd0123456789abxyz",
        "08:01234567890123456789abcd0123456789abxyz", "09:01234567890123456789abcd0123456789abxyz",
        "10:01234567890123456789abcd0123456789abxyz", "11:01234567890123456789abcd0123456789abxyz",
        "12:01234567890123456789abcd0123456789abxyz", "13:01234567890123456789abcd0123456789abxyz",
        "14:01234567890123456789abcd0123456789abxyz", "15:01234567890123456789abcd0123456789abxyz",
        "16:01234567890123456789abcd0123456789abxyz", "17:01234567890123456789abcd0123456789abxyz",
        "18:01234567890123456789abcd0123456789abxyz", "19:01234567890123456789abcd0123456789abxyz",
        "20:01234567890123456789abcd0123456789abxyz", "21:01234567890123456789abcd0123456789abxyz",
        "22:01234567890123456789abcd0123456789abxyz", "23:01234567890123456789abcd0123456789abxyz",
        "24:01234567890123456789abcd0123456789abxyz", "25:01234567890123456789abcd0123456789abxyz",
        "26:01234567890123456789abcd0123456789abxyz", "27:01234567890123456789abcd0123456789abxyz",
        "28:01234567890123456789abcd0123456789abxyz", "29:01234567890123456789abcd0123456789abxyz",
        "30:01234567890123456789abcd0123456789abxyz", "31:01234567890123456789abcd0123456789abxyz"};
    int ptr = UnitToPtr(sUnit), plrIndex, destPtr, srcPtr;
    
    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 4)
        {
            plrIndex = GetMemory(GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x810);
            destPtr = GetMemory(0x97bb40 + ((SToInt(emptyName) + plrIndex) * 4));
            srcPtr = GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x889;
            NoxUnicodeToUtf8(srcPtr, destPtr);
            return ToStr(SToInt(emptyName) + plrIndex);
        }
    }
    return "NULL";
}

void ClientMain()
{
    int var0, table, stream;

    if (!var0)
    {
        var0 = EnableMemoryReadWriteFunction(0);
        SetMemory(0x69ba98, 0x43de10);
        SetMemory(0x69b974, 0x64);
        PlayerClassCommonWhenEntry();

        var0 ++;
    }
}

void WriteMusicStrings(int targetAddr)
{
    int arr[78], i;

    arr[0] = 0x70616863; arr[1] = 0x61772E31; arr[2] = 0x68630076; arr[3] = 0x77327061; arr[4] = 0x772E7A69; arr[5] = 0x63007661; arr[6] = 0x32706168;
    arr[7] = 0x2E6E6F63; arr[8] = 0x00766177; arr[9] = 0x70616863; arr[10] = 0x72617732; arr[11] = 0x7661772E; arr[12] = 0x61686300; arr[13] = 0x772E3370;
    arr[14] = 0x63007661; arr[15] = 0x34706168; arr[16] = 0x7661772E; arr[17] = 0x61686300; arr[18] = 0x772E3570; arr[19] = 0x63007661; arr[20] = 0x36706168;
    arr[21] = 0x7661772E; arr[22] = 0x61686300; arr[23] = 0x772E3770; arr[24] = 0x63007661; arr[25] = 0x38706168; arr[26] = 0x7661772E; arr[27] = 0x61686300;
    arr[28] = 0x772E3970; arr[29] = 0x63007661; arr[30] = 0x61706168; arr[31] = 0x7661772E; arr[32] = 0x61686300; arr[33] = 0x772E6270; arr[34] = 0x74007661;
    arr[35] = 0x656C7469; arr[36] = 0x7661772E; arr[37] = 0x776F7400; arr[38] = 0x772E316E; arr[39] = 0x74007661; arr[40] = 0x326E776F; arr[41] = 0x7661772E;
    arr[42] = 0x776F7400; arr[43] = 0x772E336E; arr[44] = 0x73007661; arr[45] = 0x2E316275; arr[46] = 0x00766177; arr[47] = 0x32627573; arr[48] = 0x7661772E;
    arr[49] = 0x62757300; arr[50] = 0x61772E33; arr[51] = 0x61770076; arr[52] = 0x7265646E; arr[53] = 0x61772E31; arr[54] = 0x61770076; arr[55] = 0x7265646E;
    arr[56] = 0x61772E32; arr[57] = 0x61770076; arr[58] = 0x7265646E; arr[59] = 0x61772E33; arr[60] = 0x72632076; arr[61] = 0x74696465; arr[62] = 0x61772E73;
    arr[63] = 0x68730076; arr[64] = 0x2E6C6C65; arr[65] = 0x00766177; arr[66] = 0x69746361; arr[67] = 0x2E316E6F; arr[68] = 0x00766177; arr[69] = 0x69746361;
    arr[70] = 0x2E326E6F; arr[71] = 0x00766177; arr[72] = 0x69746361; arr[73] = 0x2E336E6F; arr[74] = 0x00766177; arr[75] = 0x646E6177; arr[76] = 0x2E347265;
    arr[77] = 0x00766177;
    for (i = 0 ; i < 78 ; i ++)
        SetMemory(targetAddr + (i * 4), arr[i]);
}

void PreProcessPlayBgm(int targetAddr)
{
    int oldBase = 0x59da7c;

    WriteMusicStrings(targetAddr);
    SetMemory(oldBase + 0, targetAddr);
    SetMemory(oldBase + 4, targetAddr + 0xa);
    SetMemory(oldBase + 8, targetAddr + 0x17);
    SetMemory(oldBase + 12, targetAddr + 0x24);
    SetMemory(oldBase + 16, targetAddr + 0x31);
    SetMemory(oldBase + 20, targetAddr + 0x3b);
    SetMemory(oldBase + 24, targetAddr + 0x45);
    SetMemory(oldBase + 28, targetAddr + 0x4f);
    SetMemory(oldBase + 32, targetAddr + 0x59);
    SetMemory(oldBase + 36, targetAddr + 0x63);
    SetMemory(oldBase + 40, targetAddr + 0x6d);
    SetMemory(oldBase + 44, targetAddr + 0x77);
    SetMemory(oldBase + 48, targetAddr + 0x81);
    SetMemory(oldBase + 52, targetAddr + 0x8b);
    SetMemory(oldBase + 56, targetAddr + 0x95);
    SetMemory(oldBase + 60, targetAddr + 0x9f);
    SetMemory(oldBase + 64, targetAddr + 0xa9);
    SetMemory(oldBase + 68, targetAddr + 0xb3);
    SetMemory(oldBase + 72, targetAddr + 0xbc);
    SetMemory(oldBase + 76, targetAddr + 0xc5);
    SetMemory(oldBase + 80, targetAddr + 0xce);
    SetMemory(oldBase + 84, targetAddr + 0xda);
    SetMemory(oldBase + 88, targetAddr + 0xe6);
    SetMemory(oldBase + 92, targetAddr + 0xf2);
    SetMemory(oldBase + 96, targetAddr + 0xfe);
    SetMemory(oldBase + 100, targetAddr + 0x108);
    SetMemory(oldBase + 104, targetAddr + 0x114);
    SetMemory(oldBase + 108, targetAddr + 0x120);
    SetMemory(oldBase + 112, targetAddr + 0x12c);
    SetMemory(0x59dbfc, 0);
}

void ExtractMapBgm(string fileName)
{
    int stream = GetMemory(GetMemory(0x75ae28) + ((0x30 * (GetMemory(0x75ae2c) - 1)) + 0x20));

    SetMemory(0x59dc10, GetMemory(0x97bb40 + (SToInt(fileName) * 4)));
    WriteBinaryFile("music\\" + fileName, stream);

    PreProcessPlayBgm(0x5becc4);
}

void PlayerClassCommonWhenEntry()
{
    //ExtractMapBgm("WelcomeHell.mp3");
    SomeObjectChangeToInnerImage();
    UserImageInit();
    ShowMessageBox("대형마트를 털어라", "마트를 습격하고 사장을 죽이세요");
}

int ImportAllowAllDrop()
{
	int arr[19], link;

	if (!link)
	{
		arr[0] = 0x550CEC83; arr[1] = 0x14246C8B; arr[2] = 0x24748B56; arr[3] = 0xECAE391C; arr[4] = 0x74000001; arr[5] = 0xC0315E08; arr[6] = 0x0CC4835D;
		arr[7] = 0x0845F6C3; arr[8] = 0x68207404; arr[9] = 0x0053EBF0; arr[10] = 0x2454FF56; arr[11] = 0x08C48304; arr[12] = 0x0F74C085; arr[13] = 0x53EC8068;
		arr[14] = 0x56016A00; arr[15] = 0x082454FF; arr[16] = 0x680CC483; arr[17] = 0x004ED301; arr[18] = 0x909090C3;
        link = GetScrDataField(ImportAllowAllDrop);
	}
	return link;
}

int CheckGameKorLanguage()
{
    if (GetMemory(0x611c04))
        return GetMemory(GetMemory(GetMemory(0x611c04))) == 0xc774d300;
    return 0;
}

string MessageDesc(int index)
{
    string msg =
    "0번 문자열";
    "0 strings";
    "아 슈벌... 내가 너한테 뒤지다니...!!";
    "Fuck.. This couldn't happen!";
    "비밀의 벽이 열렸습니다";
    "A secret wall has opened";
    "보스 등장이요~!!";
    "Here comes the boss!!";
    "침입자를 발견했다! 잡아라";
    "Intruder recognized! Get'em!";
    "왔냐?ㅋ";
    "Hello?";
    "너는 뭐냐?";
    "Wut r u?";
    "놈이 저기 있다, 저놈을 잡아라!";
    "He's over there! Get'em!";
    "아따 내 손에 잡히면 젓갈을 담가불랑께 싸게싸게 오쇼이";
    "Stop there right away, or I'll devastate you";
    "여기가 어디라고 함부로 들어오느냐";
    "How dare u come in here!";
    "오빠~ 잡히면 죽어!!";
    "Darling stop there!";
    "뜨거운 맛을 보게될 것이야!";
    "This would hurt!";
    "개 유닛 스캔완료";
    "units initialized";
	"지금은 내가 이 철창안에 갇혀있는 신세지만!! 내가 여기서 나가는 순간 너는 죽은 목숨이다!!";
	"Tho I'm now jailed in here you'll be a dead man once I get outta here!";
	"자꾸 까불어? 내 본 모습을 보여주지!!\n변신중...";
	"Keep bothering me? I'll show u what I really am!\nis morphing...";
	"여기까지 와주다니 정말 고생많았어...\n그런데 넌 여기서 죽어줘야 겠어";
	"It's so nice of u to come all the way through here...\nYet you wouldn't get outta here alive I think";
	"카드키를 사용하여 잠긴문을 열었습니다, 이 키는 더 이상 사용되지 않으므로 지워집니다";
	"Unlocked the door using key card. The key would be deleted from inventory after usage..";
	"아슈발..";
	"Da fuck..";
	"ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ";
	"looooooool";
	"오옳옭....";
	"Eww....";
	"당장 내놔~ 내꺼야!!";
	"Give it back that belongs to me!";
	"이런... 들켜버렸군! 그렇다면 어쩔 수 없지. 덤벼라 애송이 녀석아";
	"Oh, so I got caught! Then come on let's do this!";
	"나를 사랑으로 채워줘요~~ 사랑의 빳때리가 다 됐나봐요~";
	"Why u run away? Come and love me";
	"으앙 뒤졌다 ㅠㅠ"; //23
	"Oops";
	" 님께서 적에게 격추되셨습니다";
	"  has been defeated by enemies";
	"해당 유저가 패스트 조인 되었습니다";
	"The player has been resurrected";
	"카드키를 사용하여 잠긴 문을 열었습니다, 이 키는 더 이상 사용되지 않으므로 인벤토리에서 제거됩니다";
	"Unlocked the door using key card. The key would be deleted from inventory after usage.";
	"지하 도서관 출구 엘리베이터가 작동되었습니다";
	"Enterance elevator to underground library has just been activated";
	"공간이동 명령어 쿨다운 입니다... 몇초 후 다시 시도해보세요";
	"The command line is not ready yet... Try again in a second";
	"저장된 위치로 이동되었습니다";
	"Has been teleported to saved point";
	"아직 저장된 위치가 없습니다";
	"No saved point yet";
	"이동 전 위치를 저장 후 시작지점으로 이동되었습니다";
	"Saved the previous point and has been teleported to the start point";
	"시작지점 주변에서 이탈하여 공간이동 명령어를 사용할 경우 위치가 다시 저장되므로, 원래위치로 가려면 반드시 시작지점 주변에서 사용하세요";
	"If you use the teleportation command out of the start point, that would cause the loss of previously saved point, so make sure to use it on start area";
	"결제성공! ";
	"Transaction successful! ";
	" 개의 아이템이 처리되었습니다";
	" items has been processed";
	"더 이상 처리할 아이템이 없어서 결제가 취소되었습니다";
	"No more items to be processed, transaction failed";
	"잔액이 부족합니다! 소지품 무적화 가격 3000 천원";
	"Not enough gold; 3000gold needed";
	"거래성공: 마법 지팡이를 소유하였습니다 (-2만골드 차감 됨)";
	"Transation successful; You've got a magical wand! (20 thousand gold subtracted)";
	"거래실패: 잔액이 부족합니다";
	"Transaction failed; Not enough gold";
	"거래성공: 리치 박치기 마법 지팡이를 소유하였습니다 (- 5만 골드 차감 됨)";
	"Transaction successful; You've got a Lich charging wand! (50 thousand gold subracted)";
	"거래가 취소되었습니다: 잔액이 부족합니다. 5만 골드 필요!!";
	"Transation failed; 50 thousand gold needed";
	"거래성공: 포스오브 네이처 지팡이를 소유하였습니다 (- 35000 골드 차감 됨)";
	"Transation successful; You've got a Force of Nature staff!";
	"[포스오브 네이처 지팡이 구매] 거래가 취소되었습니다: 잔액이 부족합니다. 35000 골드 필요!!";
	"Transation failed; 35 thousand gold needed";
	"거래성공: 메테오 완드를 소유하였습니다 (- 20000 골드 차감 됨)";
	"Transation successful; You've got a Meteor wand!";
	"[메테오 완드 구매] 거래가 취소되었습니다: 잔액이 부족합니다. 20000 골드 필요!!";
	"Transation failed; 20 thousand gold needed";
	"거래가 취소되었습니다: 당신은 이미 올 엔첸트 능력을 가졌습니다";
	"Transaction canceled; You've already got all enchants";
	"거래가 완료되었습니다. 이제 당신은 올 엔첸트 능력을 가졌습니다";
	"Transaction successful; Now you've got all enchants";
	"[올엔첸 구매] 거래가 취소되었습니다: 잔액이 부족합니다";
	"[AllEnchantments]: Transaction failed; Not enough gold";
	"거래가 취소되었습니다: 당신은 이미 향상된 작살 능력을 가졌습니다";
	"Transation failed; You've already got enhanced harpoon ability";
	"거래가 완료되었습니다. 이제 당신은 향상된 작살 능력을 가졌습니다";
	"Transaction successful; Now you've got enhanced harpoon ability";
	"거래가 취소되었습니다: 잔액이 부족합니다";
	"Transaction failed; Not enough gold !!";
	"아이템:초강력 뿅망치 결제가 완료되었습니다 (-25000 골드 차감)";
	"You've purchased a Supa dupa warhammer (25 thousand gold subtracted)";
	"[초강력 뿅망치 구입] 거래실패: 잔액이 부족합니다";
	"Failed to purchase Supa dupa warhammer; Not enough gold";
	"거래가 취소되었습니다: 패스트 힐링 상태가 이미 적용되어있습니다";
	"Transaction canceled; You've alreaady got fast healing ability.";
	"거래완료: 패스트 힐링이 적용됩니다 (빠른 체력 회복)";
	"Transaction successful; You've got fast healing ability";
	"거래가 취소되었습니다: 잔액이 부족합니다- 패스트 힐링 15000골드 필요!";
	"Transaction failed; 15 thousand gold needed";
	"재사용 대기시간 입니다... 잠시 기다려 주세요 (최대 4 초)";
	"Cooling down... Please wait for a moment (Max 4 seconds)";
	"거래가 완료되었습니다: 인벤토리에 전투의 목걸이가 추가되었습니다";
	"Transaction successful; The Amulet of Combat has been added to the inventory";
	"인벤토리를 열어서 전투의 목걸이를 사용할 때 마다 특수한 마법이 시전됩니다. 사용 시 쿨다운이 있을 수도 있습니다";
	"By clicking the Amulet of Combat on inventory, some kinda spells would be casted, There might be a cool down";
	"거래가 취소되었습니다: 잔액이 부족합니다 -30000 골드 필요";
	"Transaction failed; 30 thousand gold needed!";
	"재사용 대기시간 입니다...";
	"Cooling down...";
	"이 아이템을 다시 장착하려면 버렸다가 다시 주워야 합니다!";
	"To equip the item again you must throw it and then pick it up";
	"마우스 포인터가 캐릭터가 볼 수 없는 곳에 있어서 마법 시전을 수행하지 못했습니다";
	"Since the cursor isn't pointing the visible area, couldn't cast the spell";
	"메테오 완드: 재사용 대기시간 입니다...";
	"Meteor wand is cooling down...";
	"포스오브 네이쳐 지팡이: 재사용 대기시간 입니다...";
	"Force of Nature staff is cooling down...";
	"7월 화보 잡지를 꺼내들었다...";
	"Picked up the pictorial magazine of July...";
	" 님께서 입장하셨습니다";
	" has joined the game";
	" 님께서 게임을 떠나셨습니다";
	" has left the game";
	"게이트의 잠금이 해제되었습니다";
	"The door has been unlocked";
	"어디선가 동력장치가 움직였습니다";
	"Somewhere, the mechanism has been activated";
	"이 주변 어디선가 동력장치가 움직입니다";
	"Somewhere near hear the mechanism is working";
	"철창이 낮아졌습니다";
	"A fence has been lowered";
	"지하 도서관 좌측통로가 열렸습니다";
	"Left way of the underground library has been opened";
	"AD- 방금, 스페셜 샵이 오픈되었습니다. 가격도 싸고 성능도 좋은 아이템이 준비되어 있으니 많은 이용 바랍니다";
	"AD- Special shop has been opened. Unique and cosf-efficient merchandises are for sale!";

    return ToStr(SToInt(msg) + (index * 2) + !CheckGameKorLanguage());
}


void FireSpriteSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1076426178);
		SetMemory(ptr + 0x224, 1076426178);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 65536);
		SetMemory(GetMemory(ptr + 0x22c), 240);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 240);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, FireSpriteBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 1065353216);
	}
}


void UnitZeroFleeRange(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0); //Flee Range set to 0
}

void UnitLinkBinScript(int unit, int binAddr)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, binAddr);
}

void SetUnitVoice(int unit, int voiceIndex)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(voiceIndex));
}

int ImportAbsoluteWPickup()
{
    int arr[100], link;

    if (!link)
    {
        arr[0] = 0x8B565553; arr[1] = 0x31102474; arr[2] = 0x468A57ED; arr[3] = 0x247C8B08; arr[4] = 0x6804A818; arr[5] = 0x0040A5C0; arr[6] = 0x00080068; arr[7] = 0x2454FF00;
        arr[8] = 0x08C48304; arr[9] = 0xC068C085; arr[10] = 0x680040A5; arr[11] = 0x00000800; arr[12] = 0x042454FF; arr[13] = 0x8508C483; arr[14] = 0x245C8BC0;
        arr[15] = 0x24548B20; arr[16] = 0x31E0681C; arr[17] = 0x5253004F; arr[18] = 0x54FF5657; arr[19] = 0xC4831024; arr[20] = 0x01F88314; arr[21] = 0x0122850F;
        arr[22] = 0x46F60000; arr[23] = 0x840F0408; arr[24] = 0x000000FA; arr[25] = 0x02EC868B; arr[26] = 0xED310000; arr[27] = 0x14244489; arr[28] = 0x8568488B;
        arr[29] = 0x683575C9; arr[30] = 0x00419E60; arr[31] = 0x2454FF56; arr[32] = 0x08C48304; arr[33] = 0x2475C085; arr[34] = 0x41582068; arr[35] = 0x54FF5700;
        arr[36] = 0xC4830424; arr[37] = 0x02F88308; arr[38] = 0x20681274; arr[39] = 0x550053A4; arr[40] = 0xFF565753; arr[41] = 0x83102454; arr[42] = 0xE88B14C4;
        arr[43] = 0x419E6068; arr[44] = 0x54FF5600; arr[45] = 0xC4830424; arr[46] = 0x75C08508; arr[47] = 0x5820683A; arr[48] = 0xFF570041; arr[49] = 0x83042454;
        arr[50] = 0xF88308C4; arr[51] = 0x8B287502; arr[52] = 0x8B142444; arr[53] = 0x00011488; arr[54] = 0x04418B00; arr[55] = 0x17740CA8; arr[56] = 0x137502A8;
        arr[57] = 0x53A42068; arr[58] = 0x53006A00; arr[59] = 0x54FF5657; arr[60] = 0xC4831024; arr[61] = 0x85E88B14; arr[62] = 0x8B6775ED; arr[63] = 0xC4F60847;
        arr[64] = 0xF7217410; arr[65] = 0x00000C47; arr[66] = 0x1874047F; arr[67] = 0x02E0878B; arr[68] = 0xD2310000; arr[69] = 0x508AC931; arr[70] = 0x6C488A6D;
        arr[71] = 0x4D82B068; arr[72] = 0x22EB5200; arr[73] = 0x000000A9; arr[74] = 0xF6377401; arr[75] = 0x74820C47; arr[76] = 0xE0878B31; arr[77] = 0x31000002;
        arr[78] = 0x8AC931D2; arr[79] = 0x01488A10; arr[80] = 0x4D82B068; arr[81] = 0x548B5200; arr[82] = 0x31511C24; arr[83] = 0x828B57C9; arr[84] = 0x00000114;
        arr[85] = 0x0810888A; arr[86] = 0xFF510000; arr[87] = 0x83102454; arr[88] = 0xF06814C4; arr[89] = 0x68005116; arr[90] = 0x0053A6C0; arr[91] = 0x54FF5657;
        arr[92] = 0xFF570824; arr[93] = 0x83102454; arr[94] = 0x01B814C4; arr[95] = 0x5F000000; arr[96] = 0xC35B5D5E; arr[97] = 0x315D5E5F; arr[98] = 0x90C35BC0;
        link = GetScrDataField(ImportAbsoluteWPickup);
    }
    return link;
}

int ImportAbsoluteWRun()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x90909068; arr[1] = 0x72506890; arr[2] = 0x016A0050; arr[3] = 0x54FF016A; arr[4] = 0xFF500824;
        arr[5] = 0x500C2454; arr[6] = 0x142454FF; arr[7] = 0xC318C483; arr[8] = 0x90909090;
        link = GetScrDataField(ImportAbsoluteWRun);
        SetMemory(link + 1, ImportAbsoluteWPickup());
    }
    return link;
}

void AbsoluteWeaponPick(int sOwner, int sWeapon)
{
    int temp = GetMemory(0x5c31f4);
    int ownerPtr = UnitToPtr(sOwner), wPtr = UnitToPtr(sWeapon);

    if (ownerPtr && wPtr)
    {
        SetMemory(0x5c31f4, ImportAbsoluteWRun());
        Unused5a(ownerPtr, wPtr);
        SetMemory(0x5c31f4, temp);
    }
}

int ImportEquipWeapon()
{
    int arr[170], link;

    if (!link)
    {
        arr[0] = 0x8B565553; arr[1] = 0x57142474; arr[2] = 0x41582068; arr[3] = 0x54FF5600; arr[4] = 0xD88B0424; arr[5] = 0x8308468B; arr[6] = 0x00A908C4;
        arr[7] = 0x0F010010; arr[8] = 0x0000AD84; arr[9] = 0x10468B00; arr[10] = 0x0F01C4F6; arr[11] = 0x0000A185; arr[12] = 0x247C8B00; arr[13] = 0x08478B14;
        arr[14] = 0x137402A8; arr[15] = 0x53A2C068; arr[16] = 0xFF575600; arr[17] = 0x83082454; arr[18] = 0x5E5F0CC4; arr[19] = 0xA8C35B5D; arr[20] = 0x8B7F7404;
        arr[21] = 0x0002ECAF; arr[22] = 0xC3E06800; arr[23] = 0x026A004F; arr[24] = 0x2454FF57; arr[25] = 0x0CC48308; arr[26] = 0x6675C085; arr[27] = 0x4FC3E068;
        arr[28] = 0x57016A00; arr[29] = 0x082454FF; arr[30] = 0x850CC483; arr[31] = 0x8B5375C0; arr[32] = 0x00011485; arr[33] = 0x8AC93100; arr[34] = 0x0008CB88;
        arr[35] = 0xB3D06800; arr[36] = 0x56510057; arr[37] = 0x082454FF; arr[38] = 0x850CC483; arr[39] = 0x683A75C0; arr[40] = 0x004DA2C0; arr[41] = 0xABD86850;
        arr[42] = 0xFF57005C; arr[43] = 0x8B0C2454; arr[44] = 0x83302444; arr[45] = 0xC08510C4; arr[46] = 0x578B1874; arr[47] = 0x19606824; arr[48] = 0x6A520050;
        arr[49] = 0x9D685702; arr[50] = 0xFF000003; arr[51] = 0x83102454; arr[52] = 0x5E5F14C4; arr[53] = 0x5BC0315D; arr[54] = 0x318068C3; arr[55] = 0x5756004F;
        arr[56] = 0x082454FF; arr[57] = 0x850CC483; arr[58] = 0x682175C0; arr[59] = 0x004DA2C0; arr[60] = 0xABF86850; arr[61] = 0xFF57005C; arr[62] = 0x8B0C2454;
        arr[63] = 0x83302444; arr[64] = 0xC08510C4; arr[65] = 0x478BCC74; arr[66] = 0xB7EB5024; arr[67] = 0x01F8878B; arr[68] = 0xC0850000; arr[69] = 0xF039BC74;
        arr[70] = 0x808B0F74; arr[71] = 0x000001F0; arr[72] = 0xF275C085; arr[73] = 0x5B5D5E5F; arr[74] = 0x74C085C3; arr[75] = 0x587D80A5; arr[76] = 0x680F7501;
        arr[77] = 0x004FA020; arr[78] = 0xFF570D6A; arr[79] = 0x83082454; arr[80] = 0xFB830CC4; arr[81] = 0x8B3B7502; arr[82] = 0x0001148D; arr[83] = 0x0441F600;
        arr[84] = 0x681E750C; arr[85] = 0x0053A680; arr[86] = 0x2454FF57; arr[87] = 0x08C48304; arr[88] = 0x0D75C085; arr[89] = 0x4DA2C068; arr[90] = 0x1C685000;
        arr[91] = 0xEB005CAC; arr[92] = 0xA0F06885; arr[93] = 0x016A0053; arr[94] = 0xFF57016A; arr[95] = 0x830C2454; arr[96] = 0x458B10C4; arr[97] = 0x74C08568;
        arr[98] = 0x02FB831F; arr[99] = 0x40681A74; arr[100] = 0x6A0053A1; arr[101] = 0x50016A01; arr[102] = 0x2454FF57; arr[103] = 0x14C48310; arr[104] = 0x840FC085;
        arr[105] = 0xFFFFFF2A; arr[106] = 0x8010568B; arr[107] = 0x568901CE; arr[108] = 0x14858B10; arr[109] = 0x31000001; arr[110] = 0x04488BD2; arr[111] = 0x4889D909;
        arr[112] = 0x148D8B04; arr[113] = 0x8B000001; arr[114] = 0x8A1C2444; arr[115] = 0x00081091; arr[116] = 0x85406800; arr[117] = 0x5650004D; arr[118] = 0x2454FF52;
        arr[119] = 0x10C4830C; arr[120] = 0x7402FB83; arr[121] = 0x68758903; arr[122] = 0xF608468B; arr[123] = 0x397410C4; arr[124] = 0x000C46F7; arr[125] = 0x74047F00;
        arr[126] = 0xE0868B30; arr[127] = 0x31000002; arr[128] = 0x8AD231C9; arr[129] = 0x508A6D48; arr[130] = 0x14858B6C; arr[131] = 0x68000001; arr[132] = 0x004D82B0;
        arr[133] = 0x52C93151; arr[134] = 0x0810888A; arr[135] = 0x51560000; arr[136] = 0x102454FF; arr[137] = 0xEB14C483; arr[138] = 0x0000A949; arr[139] = 0x42740100;
        arr[140] = 0x7482C3F6; arr[141] = 0xE0868B2F; arr[142] = 0x31000002; arr[143] = 0x8AC931D2; arr[144] = 0x01488A10; arr[145] = 0x4D82B068; arr[146] = 0x958B5200;
        arr[147] = 0x00000114; arr[148] = 0x8A51C031; arr[149] = 0x00081082; arr[150] = 0xFF505600; arr[151] = 0x83102454; arr[152] = 0x0EEB14C4; arr[153] = 0x740CC3F6;
        arr[154] = 0xE08E8B09; arr[155] = 0xC6000002; arr[156] = 0xF0680001; arr[157] = 0x57004F2F; arr[158] = 0x2454FF56; arr[159] = 0x0CC48308; arr[160] = 0xE40CC3F7;
        arr[161] = 0x0D7407FF; arr[162] = 0x53A3D068; arr[163] = 0x54FF5700; arr[164] = 0xC4830424; arr[165] = 0x5D5E5F08; arr[166] = 0x000001B8; arr[167] = 0x90C35B00;
        
        arr[39] = 0x683aebc0;
        link = GetScrDataField(ImportEquipWeapon);
    }
    return link;
}

int ImportEquipWeaponRun()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x90909068; arr[1] = 0x72506890; arr[2] = 0x016A0050; arr[3] = 0x54FF016A; arr[4] = 0xFF500824;
        arr[5] = 0x500C2454; arr[6] = 0x142454FF; arr[7] = 0xC318C483; arr[8] = 0x90909090;
        link = GetScrDataField(ImportEquipWeaponRun);
        SetMemory(link + 1, ImportEquipWeapon());
    }
    return link;
}

void PlayerEquipWeapon(int sOwner, int sWeapon)
{
    int temp = GetMemory(0x5c31f4);
    int ownerPtr = UnitToPtr(sOwner), wPtr = UnitToPtr(sWeapon);

    if (ownerPtr && wPtr)
    {
        SetMemory(0x5c31f4, ImportEquipWeaponRun());
        Unused5a(ownerPtr, wPtr);
        SetMemory(0x5c31f4, temp);
    }
}

void DelayForcePickItemToOwner(int sItem)
{
    int owner = GetOwner(sItem);

    if (IsObjectOn(sItem))
    {
        if (CurrentHealth(owner))
        {
            AbsoluteWeaponPick(owner, sItem);
            PlayerEquipWeapon(owner, sItem);
        }
        else
            ClearOwner(sItem);
    }
}

int Bear2BinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1918985538; arr[1] = 50; arr[2] = 0; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 20000; arr[17] = 90; arr[18] = 100; arr[19] = 40; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 65545; arr[24] = 1067450368; 
		arr[25] = 0; arr[26] = 0; arr[27] = 1; arr[28] = 1106247680; arr[29] = 50; 
		arr[30] = 1103626240; arr[31] = 2; arr[32] = 20; arr[33] = 30;
		arr[55] = 0; arr[56] = 0; arr[57] = 0; arr[58] = 5547856; arr[59] = 5542784; 
		link = GetScrDataField(Bear2BinTable);
	}
	return link;
}

void ChangeColorMaiden(int red, int grn, int blue, int unit)
{
    int ptr1 = UnitToPtr(unit), k, num;

    if (!ptr1) return;
    SetMemory(ptr1 + 4, 1385);  //TODO: Maiden Unit Thing ID
    for (k = 0 ; k < 32 ; k ++)
        SetMemory(ptr1 + 0x230 + (k * 4), 0x400);
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x178, 0xa0);
    // R  G  B  R    G  B  R  G    B  R  G  B    R  G  B  R    G  B 
    // 00 ff 00 00 / ff 00 00 ff / 00 00 ff 00 / 00 ff 00 00 / ff 00 00
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 4, grn | (blue << 8) | (red << 16) | (grn << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 8, blue | (red << 8) | (grn << 16) | (blue << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 12, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 16, grn | (blue << 8));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x1e8, VoiceList(7));
}

int WizardRedBinTable()
{
	int arr[62], link;

	if (!link)
	{
		arr[0] = 1635412311; arr[1] = 1699898482; arr[2] = 100; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 80000; arr[17] = 300; arr[18] = 100; arr[19] = 50; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 40; arr[24] = 1067869798; 
		arr[25] = 0; arr[26] = 4; arr[27] = 4;
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 1128792064; arr[54] = 4; 
        link = GetScrDataField(WizardRedBinTable);
	}
	return link;
}

int MaidenBinTable()
{
	int arr[62], link, unit;
	if (!link)
	{
		arr[0] = 1684627789; arr[1] = 28261; arr[2] = 0; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 30; arr[18] = 92; arr[19] = 60; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 32776; arr[24] = 1065688760; 
		arr[25] = 0; arr[26] = 0; arr[27] = 1; arr[28] = 1106247680; arr[29] = 22; 
		arr[30] = 1101004800; arr[31] = 2; arr[32] = 22; arr[33] = 30;
		arr[55] = 0; arr[56] = 0; arr[57] = 0; arr[58] = 5546320; arr[59] = 5542784; 
		link = GetScrDataField(MaidenBinTable);
	}
	return link;
}

int GoonBinTable()
{
	int arr[62], link, unit;
	if (!link)
	{
		arr[0] = 1852796743; arr[1] = 0; arr[2] = 0; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 85; arr[18] = 0; arr[19] = 15; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 32776; arr[24] = 1066192077; 
		arr[25] = 0; arr[26] = 4; arr[27] = 0; arr[28] = 1106247680; arr[29] = 25; 
		arr[30] = 1092616192; arr[31] = 4; arr[32] = 20; arr[33] = 28; arr[34] = 2; 
		arr[35] = 3; arr[36] = 20;
		arr[55] = 0; arr[56] = 0; arr[57] = 5548176; arr[58] = 5546608; arr[59] = 5543680;
        link = GetScrDataField(GoonBinTable);
	}
	return link;
}

int StrongWizardWhiteBinTable()
{
	int arr[62], link, unit;
	if (!link)
	{
		arr[0] = 1869771859; arr[1] = 1767335790; arr[2] = 1685217658; arr[3] = 1953065047; arr[4] = 101; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 80000; arr[17] = 200; arr[18] = 55; arr[19] = 60; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 8; arr[24] = 1069547520; 
		arr[25] = 0; arr[26] = 0; arr[27] = 0; arr[28] = 0; arr[29] = 0; 
		arr[30] = 0; arr[31] = 0; arr[32] = 0; arr[33] = 0; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 1701996870; arr[38] = 1819042146; arr[39] = 0; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 1128792064; arr[54] = 4; 
		arr[55] = 20; arr[56] = 30; arr[57] = 5547984;
        link = GetScrDataField(StrongWizardWhiteBinTable);
	}
	return link;
}

int WeirdlingBeastBinTable()
{
	int arr[62], link, unit;
	if (!link)
	{
		arr[0] = 1919509847; arr[1] = 1852402788; arr[2] = 1634026087; arr[3] = 29811; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 85; arr[18] = 50; arr[19] = 55; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 32776; arr[24] = 1068708659; 
		arr[25] = 0; arr[26] = 4; arr[27] = 0; arr[28] = 1082130432; arr[29] = 20; 
		arr[30] = 0; arr[31] = 2; arr[32] = 8; arr[33] = 16;
		arr[55] = 0; arr[56] = 0; arr[57] = 5548112; arr[58] = 0; arr[59] = 5542784;
        link = GetScrDataField(WeirdlingBeastBinTable);
	}
	return link;
}

int BlackWidowBinTable()
{
	int arr[62], link, unit;
	if (!link)
	{
		arr[0] = 1667329090; arr[1] = 1684625259; arr[2] = 30575; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 130; arr[18] = 45; arr[19] = 85; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 4; arr[24] = 1069547520; 
		arr[25] = 0; arr[26] = 4; arr[27] = 3; arr[28] = 1097859072; arr[29] = 25; 
		arr[30] = 0; arr[31] = 8; arr[32] = 13; arr[33] = 21; arr[34] = 50; 
		arr[35] = 3; arr[36] = 6; arr[37] = 1684631635; arr[38] = 1884516965; arr[39] = 29801; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 1128792064; arr[54] = 0; 
		arr[55] = 20; arr[56] = 28; arr[57] = 0; arr[58] = 0; arr[59] = 5544896; 
		arr[60] = 0; arr[61] = 45071360;
        link = GetScrDataField(BlackWidowBinTable);
	}
	return link;
}

int FireSpriteBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1701996870; arr[1] = 1769107539; arr[2] = 25972; arr[17] = 240; arr[19] = 88; 
		arr[21] = 1065353216; arr[23] = 65536; arr[24] = 1065353216; arr[37] = 1769236816; arr[38] = 1181513062; 
		arr[39] = 1650815593; arr[40] = 7105633; arr[53] = 1133903872; arr[55] = 11; arr[56] = 17; 
		arr[58] = 5546320; 
		CancelTimer(FrameTimerWithArg(10, FireSpriteBinTable, FireSpriteBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int AirshipCaptainBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1936877889; arr[1] = 1131440488; arr[2] = 1635020897; arr[3] = 28265; arr[17] = 400; 
		arr[19] = 90; arr[21] = 1065353216; arr[23] = 2049; arr[24] = 1065353216; arr[26] = 4; 
		arr[28] = 1101004800; arr[29] = 40; arr[32] = 22; arr[33] = 30; arr[34] = 2; 
		arr[35] = 2; arr[36] = 20; arr[58] = 5545888; arr[59] = 5543680; arr[60] = 1387; 
		arr[61] = 46915328; 
		CancelTimer(FrameTimerWithArg(10, AirshipCaptainBinTable, AirshipCaptainBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int WoundedApprenticeBinTable()
{
	int arr[62], link, unit;
	if (!link)
	{
		arr[0] = 1853189975; arr[1] = 1097098596; arr[2] = 1701998704; arr[3] = 1667855470; arr[4] = 101; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 50; arr[18] = 10; arr[19] = 100; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 0; arr[24] = 1065353216; 
		arr[25] = 0; arr[26] = 0; arr[27] = 0; arr[28] = 1112014848; arr[29] = 40; 
		arr[30] = 1106247680; arr[31] = 2; arr[32] = 12; arr[33] = 20; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 0; arr[38] = 0; arr[39] = 0; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 0; arr[54] = 0; 
		arr[55] = 0; arr[56] = 0; arr[57] = 5548112; arr[58] = 0; arr[59] = 5542784; 
		link = GetScrDataField(WoundedApprenticeBinTable);
	}
	return link;
}

void CheckMonsterThing(int unit)
{
    int arr[97], init;
    int thingID = GetUnitThingID(unit);
    int key = thingID % 97;

    if (!init)
    {
        init = 1;
        arr[5] = 1; arr[72] = 2; arr[30] = 3; arr[34] = 4; arr[6] = 5; arr[12] = 6;
        arr[73] = 7; arr[29] = 8; arr[39] = 9;
    }
    if (thingID)
        CallFunctionWithArg(MonsterProcessFunction() + arr[key], unit);
}

int MonsterProcessFunction()
{
    StopScript(DefaultMonsterProcess);
}

void DefaultMonsterProcess(int unit)
{
    return;
}

void MonsterGoonProcess(int unit)
{
    //TODO: Index. 1, ThingName= Goon
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, GoonBinTable());
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(63));       //MimicVoice
        SetUnitMaxHealth(unit, 130);
    }
}

void MonsterStrongWhiteWizProcess(int unit)
{
    //TODO: Index. 2, ThingName= StrongWizardWhite
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, StrongWizardWhiteBinTable());
        SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0); //Flee Range set to 0
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(34));       //HorvathVoice
        SetUnitMaxHealth(unit, 200);
    }
}

void MonsterWeirdlingBeastProcess(int unit)
{
    //TODO: Index. 3, ThingName= WeirdlingBeast
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, WeirdlingBeastBinTable());
        SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0); //Flee Range set to 0
        //SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(34));       //HorvathVoice
        SetUnitMaxHealth(unit, 150);
    }
}

void MonsterBlackWidowProcess(int unit)
{
    //TODO: Index. 4, ThingName= BlackWidow
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, BlackWidowBinTable());
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(19));       //HorvathVoice
        SetUnitMaxHealth(unit, 225);
    }
}

void MonsterBear2Process(int unit)
{
    //TODO: Index. 5, ThingName= Bear2 -> Maiden
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        ChangeColorMaiden(Random(0, 255), Random(0, 255), Random(0, 255), unit);
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, MaidenBinTable());
        SetUnitMaxHealth(unit, 325);
    }
}

void MonsterFireSpriteProcess(int unit)
{
    //TODO: Index. 6, ThingName= FireSprite
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, FireSpriteBinTable());
        SetUnitMaxHealth(unit, 135);
        SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x10000);
    }
}

void MonsterWizardRedProcess(int unit)
{
    //TODO: Index. 7, ThingName= WizardRed
    int ptr = UnitToPtr(unit), uec;

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, WizardRedBinTable());
        SetUnitMaxHealth(unit, 225);
        uec = GetMemory(ptr + 0x2ec);
        if (uec)
        {
            SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x20);
            SetMemory(uec + 0x528, ToInt(1.0));
            SetMemory(uec + 0x520, ToInt(300.0));
            uec += 0x5d0;
            SetMemory(uec + GetSpellNumber("SPELL_MAGIC_MISSILE"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_SHIELD"), 0x10000000);
            SetMemory(uec + GetSpellNumber("SPELL_STUN"), 0x20000000);
            SetMemory(uec + GetSpellNumber("SPELL_SHOCK"), 0x10000000);
            SetMemory(uec + GetSpellNumber("SPELL_FIREBALL"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_DEATH_RAY"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_BURN"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_INVERSION"), 0x08000000);
            SetMemory(uec + GetSpellNumber("SPELL_COUNTERSPELL"), 0x08000000);
        }
    }
}

void MonsterAirshipCaptainProcess(int unit)
{
    //TODO: Index. 8, ThingName= AirshipCaptain
    int ptr = UnitToPtr(unit), uec;

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, AirshipCaptainBinTable());
        SetUnitMaxHealth(unit, 250);
        RetreatLevel(unit, 0.0);
        ResumeLevel(unit, 1.0);
    }
}

void MonsterWoundedApprentice(int unit)
{
    //TODO: Index. 9, ThingName= WoundedApprentice
    int ptr = UnitToPtr(unit), uec;

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, WoundedApprenticeBinTable());
        SetUnitMaxHealth(unit, 230);
        RetreatLevel(unit, 0.0);
        ResumeLevel(unit, 1.0);
        SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x8000);
    }
}

int CreateYellowPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 639); //YellowPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateBlackPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 641); //BlackPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateWhitePotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 640); //WhitePotion
    SetMemory(ptr + 12, GetMemory(ptr + 12) ^ 0x20);
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CheckPotionThingID(int unit)
{
    int thingID = GetUnitThingID(unit), x = unit;

    if (thingID == 639)
        x = CreateYellowPotion(125, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 640)
        x = CreateWhitePotion(100, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 641)
        x = CreateBlackPotion(85, GetObjectX(unit), GetObjectY(unit));
    if (x ^ unit) Delete(unit);

    return x;
}

int GetOwner(int unit)
{
    int ptr = UnitToPtr(unit), res;

    if (ptr)
    {
        res = GetMemory(ptr + 0x1fc);
        if (res)
            return GetMemory(res + 0x2c);
    }
    return 0;
}

void PlayerFastJoin()
{
    int plr = CheckPlayer();

    if (CurrentHealth(other))
    {
        if (plr >= 0)
        {
            MoveObject(player[plr], GetWaypointX(166), GetWaypointY(166));
            UniPrint(other, MessageDesc(25));
        }
        else
            MoveObject(other, GetWaypointX(167), GetWaypointY(167));
    }
}

int OpcodeGetTargetAddr(int curAddr)
{
    return GetMemory(curAddr + 1) + curAddr + 5;
}

void OpcodeLoadEffectiveAddr(int loadAddr, int codeAddr, int offset)
{
    int targetAddr = OpcodeGetTargetAddr(codeAddr + offset);

    SetMemory(loadAddr + offset + 1, targetAddr - (loadAddr + offset) - 5);
}

void MapExit()
{
    MusicEvent();
    RemoveCoopTeamMode();
    SelfDamageClassMapExit();
    SetMemory(0x5cb394, 6075528);
    SetMemory(0x5cb3a0, 6075544);
    SetMemory(0x5cb3b8, 6075580);
    SetMemory(0x5cb3ac, 6075560);
    ResetHostileCritter();
}

void EnableDropOblivion()
{
    SetMemory(0x5cb394, 0);
    SetMemory(0x5cb3a0, 0);
    SetMemory(0x5cb3b8, 0);
    SetMemory(0x5cb3ac, 0);
}

int WeaponPower(int num)
{
    int addr[6];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4; addr[1] = 0x5BA714; addr[2] = 0x5BA72C; addr[3] = 0x5BA744; addr[4] = 0x5BA75C; addr[5] = 0x5BA774;
        return 0;
    }
    return GetMemory(addr[num]);
}

int ArmorQuality(int num)
{
    int addr[6];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4; addr[1] = 0x5BA7A4; addr[2] = 0x5BA7BC; addr[3] = 0x5BA7D4; addr[4] = 0x5BA7EC; addr[5] = 0x5BA804;
        return 0;
    }
    return GetMemory(addr[num]);
}

int MaterialList(int num)
{
    int addr[6];

    if (!addr[0])
    {
        //Lv.3 ~ 7, null
        addr[0] = 0x5a00a4; addr[1] = 0x5ba834; addr[2] = 0x5ba84c; addr[3] = 0x5ba864; addr[4] = 0x5ba87c; addr[5] = 0x5ba894;
        return 0;
    }
    return GetMemory(addr[num]);
}

int GetProperties(int unit, int propertyNumber)
{
    int pNum = propertyNumber % 4, ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x2b4) + (pNum * 4);
    return 0x5a00a4;
}

int WeaponEffect(int num)
{
    int addr[39];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4;
        addr[1] = 0x5BA1BC; addr[2] = 0x5BA1D4; addr[3] = 0x5BA1EC; addr[4] = 0x5BA204; addr[5] = 0x5BA21C; addr[6] = 0x5BA234; addr[7] = 0x5BA24C; addr[8] = 0x5BA264;
        addr[9] = 0x5BA27C; addr[10] = 0x5BA294; addr[11] = 0x5BA2AC; addr[12] = 0x5BA2C4; addr[13] = 0x5BA2DC; addr[14] = 0x5BA2F4; addr[15] = 0x5BA30C; addr[16] = 0x5BA324;
        addr[17] = 0x5BA33C; addr[18] = 0x5BA354; addr[19] = 0x5BA36C; addr[20] = 0x5BA384; addr[21] = 0x5BA39C; addr[22] = 0x5BA3B4; addr[23] = 0x5BA3CC; addr[24] = 0x5BA3E4;
        addr[25] = 0x5BA3FC; addr[26] = 0x5BA414; addr[27] = 0x5BA42C; addr[28] = 0x5BA444;
        addr[29] = 0x5BA63C; addr[30] = 0x5BA654; addr[31] = 0x5BA66C; addr[32] = 0x5BA684;
        addr[33] = 0x5BA69C; addr[34] = 0x5BA6B4; addr[35] = 0x5BA6CC; addr[36] = 0x5BA6E4;
        addr[37] = GetProperties(Object("AnotherStaff"), 2);
        addr[38] = GetProperties(Object("AnotherStaff"), 3);
        return 0;
    }
    return GetMemory(addr[num]);
}

int ArmorEffect(int num)
{
    int addr[21];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4;
        addr[1] = 0x5BA45C; addr[2] = 0x5BA474; addr[3] = 0x5BA48C; addr[4] = 0x5BA4A4; addr[5] = 0x5BA4BC; addr[6] = 0x5BA4D4; addr[7] = 0x5BA4EC; addr[8] = 0x5BA504;
        addr[9] = 0x5BA51C; addr[10] = 0x5BA534; addr[11] = 0x5BA54C; addr[12] = 0x5BA564; addr[13] = 0x5BA57C; addr[14] = 0x5BA594; addr[15] = 0x5BA5AC; addr[16] = 0x5BA5C4;
        addr[17] = 0x5BA5DC; addr[18] = 0x5BA5F4; addr[19] = 0x5BA60C; addr[20] = 0x5BA624;
        return 0;
    }
    return GetMemory(addr[num]);
}

void CheckSpecialItem(int ptr)
{
    int id = GetMemory(ptr + 0x04);

    if (id >= 222 && id <= 225)
    {
        SetMemory(ptr + 0x2c4, 0x53a720);
        SetMemory(ptr + 0x2c8, ImportAllowAllDrop());
    }
    else if (id == 1178)
        SetMemory(GetMemory(ptr + 0x2e0), 0xffff);
    else if (id == 1168)
        SetMemory(GetMemory(ptr + 0x2e0), 0xffff);
}

string PotionList()
{
    string name = {
        "RedPotion", "CurePoisonPotion", "YellowPotion", "BlackPotion",
        "VampirismPotion", "Mushroom", "PoisonProtectPotion", "ShockProtectPotion",
        "FireProtectPotion", "HastePotion", "ShieldPotion", "InfravisionPotion"
    };
    return name;
}

string WeaponList()
{
    string name = {
        "GreatSword", "Longsword", "Sword", "MorningStar",
        "OgreAxe", "StaffWooden", "BattleAxe", "FanChakram",
        "RoundChakram", "WarHammer", "OblivionHalberd", "OblivionWierdling",
        "OblivionHeart"
    };
    return name;
}

string ArmorList()
{
    string name = {
        "OrnateHelm", "Breastplate", "PlateArms", "PlateBoots",
        "PlateLeggings", "MedievalCloak", "ChainCoif", "ChainLeggings",
        "ChainTunic", "SteelHelm", "LeatherArmbands", "LeatherArmor",
        "LeatherArmoredBoots", "LeatherBoots", "LeatherHelm", "LeatherLeggings",
        "MedievalPants", "MedievalShirt"
    };
    return name;
}

void InitInvPropertiesSet()
{
    WeaponEffect(0);
    ArmorEffect(0);
    WeaponPower(0);
    ArmorQuality(0);
    MaterialList(0);
    EnableDropOblivion();
}

int HotPotion(int wp)
{
    return CreateObject("RedPotion", wp);
}

int PotionItemDrop(int wp)
{
    return CheckPotionThingID(CreateObject(ToStr(SToInt(PotionList()) + Random(0, 11)), 1));
}

int MoneyDrop(int wp)
{
    string name = {"QuestGoldChest", "QuestGoldPile", "Gold"};
    int money = CreateObject(ToStr(SToInt(name) + Random(0, 2)), wp);
    SetMemory(GetMemory(GetMemory(0x750710) + 0x2b4), Random(500, 3000));
    return money;
}

int SomeGermDrop(int wp)
{
    string name = {"Ruby", "Ruby", "Ruby", "Ruby", "Ruby", "Ruby", "Emerald", "Emerald", "Diamond"};
    return CreateObject(ToStr(SToInt(name) + Random(0, 8)), wp);
}

int WeaponItemDrop(int wp)
{
    int unit = CreateObject(ToStr(SToInt(WeaponList()) + Random(0, 12)), 1);
    int ptr = GetMemory(0x750710);

    CheckSpecialItem(ptr);
    SetWeaponProperties(ptr, Random(0, 5), Random(0, 5), Random(0, 38), Random(0, 38));
    return unit;
}

int ArmorItemDrop(int wp)
{
    int unit = CreateObject(ToStr(SToInt(ArmorList()) + Random(0, 17)), 1);
    int ptr = GetMemory(0x750710);

    SetArmorProperties(ptr, Random(0, 5), Random(0, 5), Random(0, 20), Random(0, 20));
    return unit;
}

void SetWeaponProperties(int ptr, int power, int mt_lv, int wfx1, int wfx2)
{
    int k;

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2b4), WeaponPower(power));
        SetMemory(GetMemory(ptr + 0x2b4) + 4, MaterialList(mt_lv));
        SetMemory(GetMemory(ptr + 0x2b4) + 8, WeaponEffect(wfx1));
        SetMemory(GetMemory(ptr + 0x2b4) + 12, WeaponEffect(wfx2));
        for (k = 31 ; k >= 0 ; k --)
            SetMemory(ptr + 0x230 + (k * 4), 0x200);
    }
}

void SetArmorProperties(int ptr, int qual, int mt_lv, int afx1, int afx2)
{
    int k;

    SetMemory(GetMemory(ptr + 0x2b4), ArmorQuality(qual));
    SetMemory(GetMemory(ptr + 0x2b4) + 4, MaterialList(mt_lv));
    SetMemory(GetMemory(ptr + 0x2b4) + 8, ArmorEffect(afx1));
    SetMemory(GetMemory(ptr + 0x2b4) + 12, ArmorEffect(afx2));
    for (k = 31 ; k >= 0 ; k --)
        SetMemory(ptr + 0x230 + (k * 4), 0x200);
}

void CreateRewardItem(int ptr)
{
    int func;

    MoveWaypoint(1, GetObjectX(ptr), GetObjectY(ptr));
    Raise(ptr, HotPotion);
    func = ToInt(GetObjectZ(ptr));
    Delete(ptr);
    CallFunctionWithArgInt(func + Random(0, 5), 1);
}

int FloatToInt(float x)
{
    int i, result = 0;
    float pos = x;

    if (pos < 0.0) pos = -pos;
    pos = pos / 2147483648.0;
    if (pos < 2.0)
    { 
        for (i = 0 ; i < 32 ; i ++)
        {
            if (pos >= 1.0)
            {
                result ++;
                pos -= 1.0;
            }
            if (i != 31) result = result << 1;
            pos *= 2.0;
        }
    }
    else result = 0x7fffffff;
    if (x < 0.0) return -result;
    else return result;
}

void YellowLightningFx(float x1, float y1, float x2, float y2, int dur)
{
	int unit = CreateObjectAt("InvisibleLightBlueHigh", x1, y1) + 2, count, i;
	float vectX, vectY;

	CreateObjectAt("InvisibleLightBlueHigh", x2, y2);
	vectX = UnitRatioX(unit - 1, unit - 2, 32.0);
	vectY = UnitRatioY(unit - 1, unit - 2, 32.0);
	count = FloatToInt(DistanceUnitToUnit(unit - 2, unit - 1) / 32.0);
	DeleteObjectTimer(CreateObjectAt("InvisibleLightBlueHigh", x1, y1), dur);
	for (i = 0 ; i < count ; i ++)
	{
		MoveObject(unit - 2, GetObjectX(unit - 2) + vectX, GetObjectY(unit - 2) + vectY);
		DeleteObjectTimer(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit - 2), GetObjectY(unit - 2)), dur);
		if (IsVisibleTo(unit + i, unit + i + 1))
			LookWithAngle(unit, i + 1);
		else break;
	}
	Delete(unit - 1);
	Delete(unit - 2);
	FrameTimerWithArg(1, unit, DelayYellowLightning);
}

void DelayYellowLightning(int ptr)
{
	int i, max = GetDirection(ptr);

	if (IsObjectOn(ptr))
	{
		for (i = 0 ; i < max ; i ++)
			CastSpellObjectObject("SPELL_LIGHTNING", ptr + i, ptr + i + 1);
	}
}

void BerserkerNoDelayCore(int plr)
{
    int arr[10];

    if (!MaxHealth(arr[plr]))
    {
        arr[plr] = CreateObject("Bear2", 56 + plr);
        UnitLinkBinScript(CreateObjectAt("Rat", GetObjectX(arr[plr]), GetObjectY(arr[plr]) + 23.0) - 1, Bear2BinTable());
        SetOwner(player[plr], arr[plr]);
        LookAtObject(arr[plr], arr[plr] + 1);
        HitLocation(arr[plr], GetObjectX(arr[plr] + 1), GetObjectY(arr[plr] + 1));
        FrameTimerWithArg(3, arr[plr], RemoveCoreUnits);
    }
}

void RemoveCoreUnits(int ptr)
{
    Delete(ptr);
    Delete(ptr + 1);
}

void SplashHandler(int owner, int func, float x, float y, float range)
{
    int ptr = CreateObjectAt("InvisibleLightBlueHigh", range, y) + 1, k;

    SetOwner(owner, ptr - 1);
    Raise(ptr - 1, ToFloat(func));
    for (k = 0 ; k < 8 ; k ++)
    {
        DeleteObjectTimer(CreateObjectAt("WeirdlingBeast", x, y), 1);
        UnitNoCollide(ptr + k);
        LookWithAngle(ptr + k, k * 32);
        SetOwner(ptr - 1, ptr + k);
        SetCallback(ptr + k, 3, UnitVisibleSplash);
    }
    DeleteObjectTimer(ptr - 1, 2);
}

void UnitVisibleSplash()
{
    int parent;

    if (!HasEnchant(other, "ENCHANT_VILLAIN"))
    {
        parent = GetOwner(self);
        if (CurrentHealth(GetOwner(parent)))
        {
            if (Distance(GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other)) <= GetObjectX(parent))
            {
                Enchant(other, "ENCHANT_VILLAIN", 0.1);
                CallFunction(ToInt(GetObjectZ(parent)));
            }
        }
    }
}

string PlayerName(int unit)
{
    int ptr = UnitToPtr(unit);
    int addr = GetMemory(0x97bb40), xwis_id;
    
    if (ptr)
    {
        xwis_id = GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x830;

        SetMemory(addr, GetMemory(xwis_id));
        SetMemory(addr + 4, GetMemory(xwis_id + 4));
        SetMemory(addr + 8, GetMemory(xwis_id + 8));
        StopScript(0);
    }
    return "NULL";
}

float MathSine(int angle, float size)
{
    float var_0[91];
    int i, k;
 
    if (!ToInt(var_0[90]))
    {
        MoveWaypoint(angle + 1, GetWaypointX(angle), GetWaypointY(angle) - 1.0);
        for (i = 0 ; i <= 90 ; i ++)
        {
            var_0[i] = GetSineValue(angle, size);
            Delete(k + i + 1);
        }
        return var_0[0];
    }
    k = angle / 90;
    i = angle - (k * 90);

    if (k % 2) i = 90 - i;
    if ((angle / 180) % 2) return -var_0[i] * size;
	else return var_0[i] * size;
}

float GetSineValue(int wp, float c)
{
    float x_ratio = WayRatioX(wp, wp + 1), y_ratio = WayRatioY(wp, wp + 1), res;

    res = GetWaypointX(wp) - GetWaypointX(wp + 1);
    MoveWaypoint(wp + 1, GetWaypointX(wp) - (c * y_ratio) - x_ratio, GetWaypointY(wp) + (c * x_ratio) - y_ratio);
    return res;
}

float WayRatioX(int wp1, int wp2)
{
    return (GetWaypointX(wp1) - GetWaypointX(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float WayRatioY(int wp1, int wp2)
{
    return (GetWaypointY(wp1) - GetWaypointY(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float UnitAngleCos(int unit, float size)
{
    return MathSine((GetDirection(unit) * 45 / 32) + 90, size);
}

float UnitAngleSin(int unit, float size)
{
    return MathSine(GetDirection(unit) * 45 / 32, size);
}

int SToInt(string x)
{
    StopScript(x);
}

string ToStr(int x)
{
    StopScript(x);
}

float UnitRatioX(int unit, int target, float size)
{
    return (GetObjectX(unit) - GetObjectX(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float UnitRatioY(int unit, int target, float size)
{
    return (GetObjectY(unit) - GetObjectY(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float ToFloat(int x)
{
    StopScript(x);
}

int ToInt(float x)
{
    StopScript(x);
}

void CharToWideChar(string x)
{
    int ptr = GetMemory(0x97bb40 + (4 * SToInt(x))), dump = 0x751030, arr[2], read, sh = 0xff, end = 0;

    while (1)
    {
        read = GetMemory(ptr);
        if (!(read & 0xff) || !((read >> 8) &0xff) || !((read >> 16) &0xff) || !((read >> 24) &0xff))
            end = 1;
        arr[0] = (read & sh) | (((read >> 8) & sh) << 16);
        arr[1] = ((read >> 16) & sh) | (((read >> 24) & sh) << 16);
        SetMemory(dump, arr[0]);
        SetMemory(dump + 4, arr[1]);
        dump += 8;
        ptr += 4;
        if (end)
            break;
    }
    SetMemory(dump, 0);
}

void UploadConsoleParse()
{
    int arr[7], link;

    if (!link)
    {
        arr[0] = 0;
        arr[1] = 0x443c8068; arr[2] = 0x68016a00; arr[3] = 0x751030; arr[4] = 0x82454ff;
        arr[5] = 0x310cc483; arr[6] = 0x90c3c0;
        CancelTimer(FrameTimerWithArg(10, UploadConsoleParse, UploadConsoleParse));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    SetMemory(0x5c31cc, link + 4);
}

void CmdLine(string x)
{
    CharToWideChar(x);
    UploadConsoleParse();
    Unused50();
    SetMemory(0x5c31cc, 0x513c60);
}

int ImportCreateAtFunc()
{
    int arr[20], link;

    if (!link)
    {
        arr[0] = 0xAA506856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xFF502414; arr[4] = 0x50042454;
        arr[5] = 0x082454FF; arr[6] = 0x4085048B; arr[7] = 0x680097BB; arr[8] = 0x004E3810; arr[9] = 0x2454FF50;
        arr[10] = 0x08C48304; arr[11] = 0xF685F08B; arr[12] = 0x006A0A74; arr[13] = 0x2454FF56; arr[14] = 0x08C48314;
        arr[15] = 0x50723068; arr[16] = 0x54FF5600; arr[17] = 0xC4830424; arr[18] = 0x5EC03118; arr[19] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportCreateAtFunc, ImportCreateAtFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int CreateObjectAt(string name, float x, float y)
{
    int temp = GetMemory(0x5c3160), res;

    SetMemory(0x5c3160, ImportCreateAtFunc());
    res = CreateMover(SToInt(name), ToInt(x), y);
    SetMemory(0x5c3160, temp);
    if (res) return GetMemory(res + 0x2c);
    else return 0;
}

int ImportUnitToPtrFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x511B6068; arr[3] = 0x54FF5000; arr[4] = 0xC4830424;
        arr[5] = 0x7230680C; arr[6] = 0xFF500050; arr[7] = 0x83042454; arr[8] = 0xC03108C4; arr[9] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportUnitToPtrFunc, ImportUnitToPtrFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int UnitToPtr(int unit)
{
    int temp = GetMemory(0x5c336c), res;
    SetMemory(0x5c336c, ImportUnitToPtrFunc());
    res = Unknownb8(unit);
    SetMemory(0x5c336c, temp);
	return res;
}

float DistanceUnitToUnit(int unit1, int unit2)
{
    return Distance(GetObjectX(unit1), GetObjectY(unit1), GetObjectX(unit2), GetObjectY(unit2));
}

void SetUnitScanRange(int unit, float range)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x520, ToInt(range));
    }
}

int ImportGetSpellNumber()
{
	int arr[11], link;

	if (!link)
	{
		arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x4085048B; arr[3] = 0x680097BB; arr[4] = 0x004243F0; arr[5] = 0x2454FF50;
		arr[6] = 0x08C48304; arr[7] = 0x50723068; arr[8] = 0x54FF5000; arr[9] = 0xC4830424; arr[10] = 0xC3C0310C;
		link = GetScrDataField(ImportGetSpellNumber);
	}
	return link;
}

int GetSpellNumber(string spell)
{
	int temp = GetMemory(0x5c3204), res;

	SetMemory(0x5c3204, ImportGetSpellNumber());
	res = Unused5e(spell);
	SetMemory(0x5c3204, temp);
	return res * 4;
}

void SetUnitSpeed(int unit, float amount)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x224, ToInt(amount));
}

void GreenSparkFx(float x, float y)
{
    int fxUnit = CreateObjectAt("MonsterGenerator", x, y);

    Damage(fxUnit, 0, 10, 100);
    Delete(fxUnit);
}

int GetUnitStatus(int unit)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            return GetMemory(temp + 0x5a0);
    }
    return 0;
}

void SetUnitStatus(int unit, int stat)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            SetMemory(temp + 0x5a0, stat);
    }
}

void SetUnitMass(int unit, float ms)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x78, ToInt(ms));
}

int GetUnitOffset1C(int unit)
{
    int ptr = UnitToPtr(unit);
    if (ptr)
        return GetMemory(ptr + 0x1c);
}

void SetUnitOffset1C(int unit, int data)
{
    int ptr = UnitToPtr(unit);
    if (ptr)
        SetMemory(ptr + 0x1c, data);
}

int GetUnitThingID(int unit)
{
    int ptr = UnitToPtr(unit);
    if (ptr)
        return GetMemory(ptr + 0x04);
    return 0;
}

int CallFunctionWithArgInt(int func, int arg)
{
    int link, ptr;

    if (!link)
    {
        link = GetScrCodeField(CalleeArgInt);
        return 0;
    }
    else
    {
        SetMemory(link + 0x10, func);
        return CalleeArgInt(arg);
    }
}

int CalleeArgInt(int arg)
{
    return CalleeArgInt(arg);
}

int ColorMaiden(int red, int grn, int blue, int wp)
{
    int unit = CreateObject("Bear2", wp);
    int ptr1 = GetMemory(0x750710), k, num;

    SetMemory(ptr1 + 4, 1385);
    for (k = 0 ; k < 32 ; k ++)
        SetMemory(ptr1 + 0x230 + (k * 4), 0x400);
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x178, 0xa0);
    // R  G  B  R    G  B  R  G    B  R  G  B    R  G  B  R    G  B 
    // 00 ff 00 00 / ff 00 00 ff / 00 00 ff 00 / 00 ff 00 00 / ff 00 00
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 4, grn | (blue << 8) | (red << 16) | (grn << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 8, blue | (red << 8) | (grn << 16) | (blue << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 12, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 16, grn | (blue << 8));
    Delete(unit + 1);
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x1e8, VoiceList(7));

    return unit;
}

int VoiceList(int num)
{
    int list[75], addr, k;

    if (!list[0])
    {
        addr = GetMemory(0x663eec);
        for (k = 0 ; k < 75 ; k ++)
        {
            list[k] = addr;
            addr = GetMemory(addr + 0x4c);
        }
    }
    return list[num];
}

void CallFunction(int func)
{
    int link;

    if (!link)
        link = GetScrCodeField(Callee);
    else
    {
        SetMemory(link + 4, func);
        Callee();
    }
}

void Callee()
{
    Callee();
}

void UnitNoCollide(int unit)
{
    SetUnitFlags(unit, GetUnitFlags(unit) ^ 0x40);
}

void CallFunctionWithArg(int func, int arg)
{
    int link;

    if (!link)
        link = GetScrCodeField(CalleeArg);
    else
    {
        SetMemory(link + 0x10, func);
        CalleeArg(arg);
    }
}

void CalleeArg(int arg)
{
    CalleeArg(arg);
}

void SetUnitMaxHealth(int unit, int amount)
{
    int ptr = UnitToPtr(unit);
    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x22c), amount);
        SetMemory(GetMemory(ptr + 0x22c) + 0x4, amount);
    }
}

void SetUnitFlags(int unit, int flag)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x10, flag);
}

int GetUnitFlags(int unit)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x10);
    return 0;
}

void DelayGiveItemToOwner(int sItem)
{
    int owner = GetOwner(sItem);

    if (CurrentHealth(owner))
        Pickup(owner, sItem);
    else
        ClearOwner(sItem);
}

int CheckPlayer()
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        if (IsCaller(player[i]))
            return i;
    }
    return -1;
}

void ImportLibrary()
{
    VoiceList(0);
    CallFunction(0);
    CallFunctionWithArg(0, 0);
    CallFunctionWithArgInt(0, 0);
    ImportCreateAtFunc();
    ImportUnitToPtrFunc();
    ImportPlaySoundAround();
    ImportGetSpellNumber();
    ImportUnitCollideFunc();
    ImportUseItemFunc();
}

void PlayerClassOnDeath(int plr)
{
    UniPrintToAll(PlayerIngameNick(player[plr]) + " 님께서 적에게 격추되었습니다");
}

int VaildPlayerCheck(int plrUnit)
{
    int plrArr[32], pIndex = GetPlayerIndex(plrUnit);

    if (pIndex >= 0)
    {
        if (plrUnit ^ plrArr[pIndex])
        {
            plrArr[pIndex] = plrUnit;
            return 1;
        }
    }
    return 0;
}

void AlwaysAllEnchantments(int sPlr)
{
    if (PlayerClassGetFlag2(sPlr))
    {
        Enchant(player[sPlr], "ENCHANT_PROTECT_FROM_ELECTRICITY", 0.0);
        Enchant(player[sPlr], "ENCHANT_PROTECT_FROM_FIRE", 0.0);
        Enchant(player[sPlr], "ENCHANT_PROTECT_FROM_POISON", 0.0);
        Enchant(player[sPlr], "ENCHANT_REFLECTIVE_SHIELD", 0.0);
        Enchant(player[sPlr], "ENCHANT_VAMPIRISM", 0.0);
    }
}

void JoinPlayer(int plr, int destination)
{
    int pUnit = player[plr];

    if (PlayerClassCheckDeathFlag(plr))
        PlayerClassSetDeathFlag(plr);
    if (PlayerClassGetFlag2(plr))
        AlwaysAllEnchantments(plr);
    MoveObject(pUnit, LocationX(destination), LocationY(destination));
    DeleteObjectTimer(CreateObjectAt("OblivionUp", GetObjectX(pUnit), GetObjectY(pUnit)), 18);
    PlaySoundAround(pUnit, 6);
}

void FailJoin()
{
    Effect("LIGHTNING", GetObjectX(other), GetObjectY(other), GetWaypointX(11), GetWaypointY(11));
    Enchant(other, "ENCHANT_FREEZE", 1.5);
    if (!HasEnchant(other, "ENCHANT_ANCHORED"))
    {
        Enchant(other, "ENCHANT_ANTI_MAGIC", 0.0);
        Enchant(other, "ENCHANT_ANCHORED", 0.0);
    }
    MoveObject(other, GetWaypointX(11), GetWaypointY(11));
    AudioEvent("BlindOff", 11);
}

void PlayerClassOnFirstEntry(int pUnit)
{
    UniPrint(pUnit, "최초 입장자는 텔레포트 장치를 통해 입장하세요");
}

int PlayerInit(int plr, int pUnit)
{
    if (GetGold(pUnit))
        ChangeGold(pUnit, -GetGold(pUnit));
    DiePlayerHandlerEntry(pUnit);
    SelfDamageClassEntry(pUnit);
    player[plr] = pUnit;
    player[plr + 10] = 1;
    UniPrintToAll(PlayerName(pUnit) + MessageDesc(66));
    if (VaildPlayerCheck(pUnit))
    {
        if (pUnit ^ GetHost())
            ClientEntry(pUnit);
        else
            PlayerClassCommonWhenEntry();
        //FrameTimerWithArg(60, pUnit, NetPlayBgm);
        PlayerClassOnFirstEntry(pUnit);
        return (1 << 0x10) | plr;
    }
    return plr;
}

void PlayerEntryPoint()
{
    int i, plr;

    while (1)
    {
        if (CurrentHealth(other) && MaxHealth(other) == 150)
        {
            plr = CheckPlayer();
            for (i = 9 ; i >= 0 && plr < 0 ; i --)
            {
                if (!MaxHealth(player[i]))
                {
                    plr = PlayerInit(i, GetCaller());
                    break;
                }
            }
            if (plr + 1)
            {
                if (plr >> 0x10)
                    JoinPlayer(plr & 0xff, 243);
                else
                    JoinPlayer(plr, 12);
                break;
            }
        }
        FailJoin();
        break;
    }
}

void FreePlayer(int plr)
{
    string plrName = PlayerName(player[plr]);

    player[plr] = 0;
    player[plr + 10] = 0;
    if (plrName != "NULL")
        UniPrintToAll(plrName + MessageDesc(67));
}

int PlayerClassGetFlag2(int sPlr)
{
    return player[sPlr + 10] & 0x02;
}

void PlayerClassSetFlag2(int sPlr)
{
    player[sPlr + 10] = player[sPlr + 10] ^ 0x02;
}

int PlayerClassGetFastHealFlag(int sPlr)
{
    return player[sPlr + 10] & 0x04;
}

void PlayerClassSetFastHealFlag(int sPlr)
{
    player[sPlr + 10] = player[sPlr + 10] ^ 0x04;
}

int PlayerClassGetHarpoonFlag(int sPlr)
{
    return player[sPlr + 10] & 0x08;
}

void PlayerClassSetHarpoonFlag(int sPlr)
{
    player[sPlr + 10] = player[sPlr + 10] ^ 0x08;
}

int PlayerClassCheckDeathFlag(int sPlr)
{
    return player[sPlr + 10] & 0x20;
}

void PlayerClassSetDeathFlag(int sPlr)
{
    player[sPlr + 10] = player[sPlr + 10] ^ 0x20;
}

int IsPoisonedUnit(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x21c) & 0xff;
    return 0;
}

void PoisonAutoCure(int sPlr)
{
    int arr[10], plrUnit = player[sPlr];

    if (PlayerClassGetFlag2(sPlr))
    {
        if (IsPoisonedUnit(plrUnit))
        {
            CastSpellObjectObject("SPELL_CURE_POISON", plrUnit, plrUnit);
            Effect("VIOLET_SPARKS", GetObjectX(plrUnit), GetObjectY(plrUnit), 0.0, 0.0);
        }
    }
    else if (IsPoisonedUnit(plrUnit))
    {
        if (arr[sPlr] < 60)
            arr[sPlr] += IsPoisonedUnit(plrUnit);
        else
        {
            Damage(plrUnit, 0, IsPoisonedUnit(plrUnit), 5);
            arr[sPlr] = 0;
        }
    }
    else if (arr[sPlr])
        arr[sPlr] = 0;
}

void PlayerFastHealing(int sPlr)
{
    if (PlayerClassGetFastHealFlag(sPlr))
    {
        RestoreHealth(player[sPlr], 1);
    }
}

void BloodingFxHandler(int sUnit)
{
    int durate = GetDirection(sUnit), angle;

    if (IsObjectOn(sUnit))
    {
        if (durate)
        {
            angle = Random(0, 359);
            DeleteObjectTimer(
                CreateObjectAt("PlayerWaypoint", GetObjectX(sUnit) + MathSine(angle + 90, RandomFloat(3.0, 30.0)), GetObjectY(sUnit) + MathSine(angle, RandomFloat(3.0, 30.0))),
                23
            );
            LookWithAngle(sUnit, durate - 1);
            FrameTimerWithArg(1, sUnit, BloodingFxHandler);
        }
        else
            Delete(sUnit);
    }
}

void BloodSpreadingFx(int sUnit)
{
    int fxMake = CreateObjectAt("Mover", GetObjectX(sUnit), GetObjectY(sUnit));

    LookWithAngle(fxMake, 64);
    FrameTimerWithArg(1, fxMake, BloodingFxHandler);
}

void PlayerOnDeath(int sPlr)
{
    int plrUnit = player[sPlr];

    UniChatMessage(plrUnit, MessageDesc(23), 100);
    UniPrintToAll(PlayerIngameNick(plrUnit) + MessageDesc(24));
}

void PreservePlayerLoop()
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        while (1)
        {
            if (MaxHealth(player[i]))
            {
                if (GetUnitFlags(player[i]) & 0x40)
                    1;
                else if (CurrentHealth(player[i]))
                {
                    PlayerFastHealing(i);
                    PoisonAutoCure(i);
                    break;
                }
                else
                {
                    if (PlayerClassCheckDeathFlag(i)) 1;
                    else
                    {
                        PlayerClassSetDeathFlag(i);
                        PlayerOnDeath(i);
                    }
                    break;
                }
            }
            if (player[i + 10])
            {
                FreePlayer(i);
            }
            break;
        }
    }
    FrameTimer(1, PreservePlayerLoop);
}

void DisableArrowTraps(int ptr)
{
    int i = GetDirection(ptr) - 1, trap = ptr;

    for (i ; i >= 0 ; i --)
    {
        trap ++;
        ObjectOff(trap);
    }
}

void EnableArrowTraps(int ptr)
{
    int i = GetDirection(ptr) - 1, trap = ptr;

    for (i ; i >= 0 ; i --)
    {
        trap ++;
        ObjectOn(trap);
    }
    FrameTimerWithArg(1, ptr, DisableArrowTraps);
}

void DisableFireballTraps(int ptr)
{
    int i = GetDirection(ptr) - 1, trap = ptr + 1;

    for (i ; i >= 0 ; i --)
    {
        ObjectOff(trap);
        trap += 2;
    }
}

void EnableFireTraps(int ptr)
{
    int i = GetDirection(ptr) - 1, trap = ptr + 1;

    for (i ; i >= 0 ; i --)
    {
        ObjectOn(trap);
        trap += 2;
    }
    FrameTimerWithArg(1, ptr, DisableFireballTraps);
}

int PlaceWestArrowTraps(int wp, int count)
{
    int ptr = CreateObject("InvisibleLightBlueLow", wp), i;
    LookWithAngle(ptr, count);
    MoveWaypoint(1, GetWaypointX(wp), GetWaypointY(wp));
    for (i = 0 ; i < count ; i ++)
    {
        MoveWaypoint(1, GetWaypointX(1) - 11.0, GetWaypointY(1) + 11.0);
        ObjectOff(CreateObject("ArrowTrap1", 1));
    }
    return ptr;
}

int PlaceSouthArrowTraps(int wp, int count)
{
    int ptr = CreateObject("InvisibleLightBlueLow", wp), i;
    LookWithAngle(ptr, count);
    MoveWaypoint(1, GetWaypointX(wp), GetWaypointY(wp));
    for (i = 0 ; i < count ; i ++)
    {
        MoveWaypoint(1, GetWaypointX(1) + 11.0, GetWaypointY(1) + 11.0);
        ObjectOff(CreateObject("ArrowTrap2", 1));
    }
    return ptr;
}

int PlaceSouthFireballTraps(int wp, int count)
{
    int ptr = CreateObject("InvisibleLightBlueHigh", wp), i;

    LookWithAngle(ptr, count);
    MoveWaypoint(1, GetWaypointX(wp), GetWaypointY(wp));
    for (i = 0 ; i < count ; i ++)
    {
        MoveWaypoint(1, GetWaypointX(1) + 46.0, GetWaypointY(1) + 46.0);
        ObjectOff(CreateObject("Skull2", 1));
        MoveWaypoint(1, GetWaypointX(1) - 8.0, GetWaypointY(1) + 8.0);
        Enchant(CreateObject("MovableStatue2c", 1), "ENCHANT_AFRAID", 0.0);
    }
    return ptr;
}

void ActivateArrowTraps1()
{
    EnableArrowTraps(ArrTrp1);
}

void ActivateArrowTraps2()
{
    EnableArrowTraps(ArrTrp2);
}

void ActivateArrowTraps3()
{
    EnableArrowTraps(ArrTrp3);
}

void ActivateFireTraps1()
{
    EnableFireTraps(FireTrp1);
}

void EnableObject(int unit)
{
    ObjectOn(unit);
}

void UnderfootElevWalls()
{
    int i;

    for (i = 0 ; i < 7 ; i ++)
        WallToggle(Wall(97 + i, 47 + i));
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    Effect("SMOKE_BLAST", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
    AudioEvent("Gear2", 1);
    ObjectOff(self);
    FrameTimerWithArg(60, GetTrigger(), EnableObject);
}

void OpenOrbDoors(int arg)
{
    int count;

    count += arg;
    if (count == 2)
    {
        UnlockDoor(Object("MainLock1"));
        UnlockDoor(Object("MainLock11"));
        BossSummonPoint(54);
        UniPrintToAll(MessageDesc(68));
    }
}

void RedBaseOn()
{
    if (IsCaller(MainKey1))
    {
        ObjectOff(self);
        Delete(MainKey1);
        ObjectOn(Object("ROrbBase"));
        OpenOrbDoors(1);
    }
}

void BlueBaseOn()
{
    if (IsCaller(MainKey1 + 1))
    {
        ObjectOff(self);
        Delete(MainKey1 + 1);
        ObjectOn(Object("BOrbBase"));
        OpenOrbDoors(1);
    }
}

void MovingBack(int rots)
{
    int i = GetDirection(rots) - 1, dest = GetDirection(rots + 2);

    for (i ; i >= 0 ; i --)
    {
        Move(rots + (i * 2), dest + i);
    }
}

void MovingToCenter(int rots)
{
    int i = GetDirection(rots) - 1, dest = GetDirection(rots + 2);

    for (i ; i >= 0 ; i --)
    {
        Move(rots + (i * 2), dest + i);
    }
    LookWithAngle(rots + 2, dest + GetDirection(rots));
    FrameTimerWithArg(120, rots, MovingBack);
}

void ResetUnderfootRot(int ptr)
{
    LookWithAngle(ptr, 1);
}

void StartMovingUnderfootRot()
{
    int ptr = UfRot, rots;

    if (GetDirection(ptr + 1))
    {
        rots = ToInt(GetObjectZ(ptr));
        LookWithAngle(ptr + 1, 0);
        LookWithAngle(rots, 14);
        LookWithAngle(rots + 2, 16);
        FrameTimerWithArg(10, rots, MovingToCenter);
        FrameTimerWithArg(300, ptr + 1, ResetUnderfootRot);
    }
    ObjectOff(self);
    FrameTimerWithArg(100, GetTrigger(), EnableObject);
}

void MovingBlockNE(int unit)
{
    int count = GetDirection(unit);

    if (count < 92)
    {
        if (count < 23)
            MoveObject(unit, GetObjectX(unit) - 1.0, GetObjectY(unit) - 1.0);
        else
            MoveObject(unit, GetObjectX(unit) + 1.0, GetObjectY(unit) - 1.0);
        LookWithAngle(unit, count + 1);
        FrameTimerWithArg(1, unit, MovingBlockNE);
    }
}

void MovingBlockSE(int unit)
{
    int count = GetDirection(unit);

    if (count < 92)
    {
        if (count < 23)
            MoveObject(unit, GetObjectX(unit) + 1.0, GetObjectY(unit) + 1.0);
        else
            MoveObject(unit, GetObjectX(unit) + 1.0, GetObjectY(unit) - 1.0);
        LookWithAngle(unit, count + 1);
        FrameTimerWithArg(1, unit, MovingBlockSE);
    }
}

void OpenJailRoom()
{
    if (HasItem(other, MainKey2))
    {
        UnlockDoor(Object("JGate1"));
        UnlockDoor(Object("JGate2"));
        Delete(MainKey2);
        ObjectOff(self);
        UniPrint(other, MessageDesc(26));
    }
}

void StartMovingBlocks()
{
    int ptr = CreateObject("RedPotion", 55) + 1;
    Delete(ptr - 1);
    SetUnitMaxHealth(SummonDefaultMob("OgreBrute", 55), 275);
    SetUnitMaxHealth(SummonDefaultMob("OgreBrute", 55), 275);
    SetUnitMaxHealth(SummonDefaultMob("AlbinoSpider", 55), 128);
    Raise(ptr, 250.0);
    Raise(ptr + 1, 250.0);
    Raise(ptr + 2, 250.0);
    SetUnitMaxHealth(SummonDefaultMob("Goon", 67), 98);
    SetUnitMaxHealth(SummonDefaultMob("Goon", 67), 98);
    SetUnitMaxHealth(SummonDefaultMob("Goon", 67), 98);
    SetUnitMaxHealth(SummonDefaultMob("Goon", 67), 98);
    SetUnitMaxHealth(SummonDefaultMob("Goon", 67), 98);
    SetUnitMaxHealth(SummonDefaultMob("Goon", 67), 98);
    FrameTimerWithArg(30, MyBlock, MovingBlockNE);
    FrameTimerWithArg(33, MyBlock + 1, MovingBlockSE);
    ObjectOff(self);
    UniPrintToAll(MessageDesc(69));
}

void SpreadLastRow(int ptr)
{
    int count = GetDirection(ptr);

    if (count < 138)
    {
        MoveObject(ptr, GetObjectX(ptr) - 1.0, GetObjectY(ptr) - 1.0);
        MoveObject(ptr + 1, GetObjectX(ptr + 1) - 1.0, GetObjectY(ptr + 1) - 1.0);
        MoveObject(ptr + 2, GetObjectX(ptr + 2) + 1.0, GetObjectY(ptr + 2) + 1.0);
        MoveObject(ptr + 3, GetObjectX(ptr + 3) + 1.0, GetObjectY(ptr + 3) + 1.0);
        LookWithAngle(ptr, count + 1);
        FrameTimerWithArg(1, ptr, SpreadLastRow);
    }
    else
    {
        WallOpen(Wall(111, 137));
        WallOpen(Wall(112, 138));
        WallOpen(Wall(113, 139));
        WallOpen(Wall(114, 140));
        WallOpen(Wall(115, 141));
    }
}

void StartMovingLastRow()
{
    FrameTimerWithArg(60, MyBlock2, SpreadLastRow);
    ObjectOff(self);
    UniPrintToAll(MessageDesc(70));
}

int CheckSeeUnit(int unit1, int unit2)
{
    return (IsVisibleTo(unit1, unit2) || IsVisibleTo(unit2, unit1));
}

void WarCastHarpoon(int owner, int target)
{
    int unit;

    if (CurrentHealth(owner) && CurrentHealth(target))
    {
        MoveWaypoint(1, GetObjectX(owner) + UnitRatioX(target, owner, 20.0), GetObjectY(owner) + UnitRatioY(target, owner, 20.0));
        Effect("SMOKE_BLAST", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
        AudioEvent("HarpoonInvoke", 1);
        AudioEvent("PowderBarrelExplode", 1);
        unit = CreateObject("InvisibleLightBlueHigh", 1);
        SetOwner(owner, unit);
        Raise(unit, ToFloat(target));
        FrameTimerWithArg(1, unit, FlyingSword);
    }
}

void FlyingSword(int ptr)
{
    int owner = GetOwner(ptr), target = ToInt(GetObjectZ(ptr)), count = GetDirection(ptr), unit;

    if (CurrentHealth(owner) && CurrentHealth(target) && count < 19)
    {
        while (1)
        {
            if (CheckSeeUnit(ptr, target))
            {
                MoveObject(ptr, GetObjectX(ptr) + UnitRatioX(target, ptr, 21.0), GetObjectY(ptr) + UnitRatioY(target, ptr, 21.0));
                if (DistanceUnitToUnit(ptr, target) > 50.0)
                {
                    unit = CreateObjectAt("HarpoonBolt", GetObjectX(ptr), GetObjectY(ptr));
                    LookAtObject(unit, target);
                    Frozen(unit, 1);
                    DeleteObjectTimer(unit, 9);
                    LookWithAngle(ptr, count + 1);
                    break;
                }
                else
                {
                    MoveWaypoint(1, GetObjectX(ptr), GetObjectY(ptr));
                    AudioEvent("HarpoonReel", 1);
                    AudioEvent("StoneHitMetal", 1);
                    GreenSparkFx(GetWaypointX(1), GetWaypointY(1));
                    WarPullEnemy(owner, target);
                }
            }
            LookWithAngle(ptr, 100);
            break;
        }
        FrameTimerWithArg(1, ptr, FlyingSword);
    }
    else
    {
        Delete(ptr);
    }
}

void WarPullEnemy(int owner, int target)
{
    int unit = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(target), GetObjectY(target));

    ObjectOff(CreateObjectAt("Maiden", GetObjectX(target), GetObjectY(target)));
    CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner), GetObjectY(owner));
    Raise(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(target), GetObjectY(target)), CurrentHealth(owner));
    Damage(unit + 1, 0, MaxHealth(unit + 1) + 1, -1);
    Frozen(unit + 1, 1);
    SetCallback(unit + 1, 9, PullRiskUnit);
    SetOwner(owner, unit);
    Raise(unit, ToFloat(target));
    PullUp(unit);
}

void PullUp(int ptr)
{
    int owner = GetOwner(ptr), target = ToInt(GetObjectZ(ptr)), count = GetDirection(ptr);

    if (CurrentHealth(owner) && CurrentHealth(target) && count < 20 && IsObjectOn(owner))
    {
        if (IsVisibleTo(owner, target) && DistanceUnitToUnit(owner, target) > 60.0)
        {
            MoveObject(ptr + 1, GetObjectX(target) + UnitRatioX(target, owner, 12.0), GetObjectY(target) + UnitRatioY(target, owner, 12.0));
            Effect("SENTRY_RAY", GetObjectX(owner), GetObjectY(owner), GetObjectX(target), GetObjectY(target));
            count += CheckCutPulling(owner, ptr + 3);
            LookWithAngle(ptr, count + 1);
        }
        else
            LookWithAngle(ptr, 100);
        FrameTimerWithArg(1, ptr, PullUp);
    }
    else
    {
        Delete(ptr);
        Frozen(ptr + 1, 0);
        Delete(ptr + 1);
        Delete(ptr + 2);
        Delete(ptr + 3);
    }
}

int CheckCutPulling(int owner, int ptr)
{
    int tempHp = ToInt(GetObjectZ(ptr)), curHp = CurrentHealth(owner);

    if (tempHp ^ curHp)
    {
        if (curHp < tempHp)
            return 100;
        Raise(ptr, ToFloat(curHp));
    }
    return 0;
}

void PullRiskUnit()
{
    int owner = GetOwner(GetTrigger() - 1), target = ToInt(GetObjectZ(GetTrigger() - 1));
    int count = GetDirection(GetTrigger() + 1);

    if (IsCaller(target))
    {
        if (!count)
        {
            if (CurrentHealth(owner) && CurrentHealth(target))
            {
                MoveWaypoint(1, GetObjectX(target), GetObjectY(target));
                AudioEvent("SentryRayHit", 1);
                Effect("VIOLET_SPARKS", GetObjectX(target), GetObjectY(target), 0.0, 0.0);
                Damage(target, owner, 15, 14);
            }
        }
        LookWithAngle(GetTrigger() + 1, (count + 1) % 7);
    }
}

void WarCastTripleShot(int owner, int target)
{
    int unit;

    if (CurrentHealth(owner) && CurrentHealth(target))
    {
        LookAtObject(owner, target);
        unit = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner), GetObjectY(owner));
        SetOwner(owner, unit);
        Raise(unit, target);
        FrameTimerWithArg(3, unit, WarriorTripleMissile);
    }
}

void WarriorTripleMissile(int ptr)
{
    int caster = GetOwner(ptr), target = ToInt(GetObjectZ(ptr)), i;

    if (CurrentHealth(caster) && CurrentHealth(target))
    {
        LookWithAngle(ptr, GetDirection(caster) - 30);
        for (i = 0 ; i < 13 ; i ++)
        {
            SpawnBullet(caster, GetObjectX(caster) + UnitAngleCos(ptr, 17.0), GetObjectY(caster) + UnitAngleSin(ptr, 17.0), 70, 33.0);
            LookWithAngle(ptr, GetDirection(ptr) + 5);
        }
    }
    Delete(ptr);
}

void EnemyWarHarpoonCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, 0, 80, 0);
            Effect("SPARK_EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int SpawnNewBullet(int sOwner, float sX, float sY)
{
    int unit = CreateObjectAt("HarpoonBolt", sX, sY);
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(ptr + 0x2e8, 5483536); //projectile update
        SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
        SetMemory(ptr + 0x2fc, EnemyWarHarpoonCollide);
        LookAtObject(unit, sOwner);
        LookWithAngle(unit, GetDirection(unit) + 128);
        SetOwner(sOwner, unit);
    }
    return unit;
}

int SpawnBullet(int owner, float x, float y, int dam, float force)
{
    int unit = CreateObjectAt("OgreShuriken", x, y);
    int ptr = GetMemory(0x750710);

    SetMemory(GetMemory(ptr + 0x2bc) + 4, dam);
    LookAtObject(unit, owner);
    LookWithAngle(unit, GetDirection(unit) + 128);
    PushObjectTo(unit, UnitRatioX(unit, owner, force), UnitRatioY(unit, owner, force));
    SetOwner(owner, unit);
    return unit;
}

void ResetUnitSight(int unit)
{
    EnchantOff(unit, "ENCHANT_DETECTING");
    Enchant(unit, "ENCHANT_BLINDED", 0.1);
}

int CheckResetUnitSight(int unit)
{
    if (!HasEnchant(self, "ENCHANT_DETECTING"))
    {
        Enchant(self, "ENCHANT_DETECTING", 3.0);
        FrameTimerWithArg(88, GetTrigger(), ResetUnitSight);
        return 1;
    }
    return 0;
}

void HorrenDetectEnemy()
{
    if (!HasEnchant(self, "ENCHANT_BURNING") && CheckResetUnitSight(GetTrigger()))
    {
        Enchant(self, "ENCHANT_BURNING", 5.0);
        if (Random(0, 2))
            WarCastTripleShot(GetTrigger(), GetCaller());
        else
            WarCastHarpoon(GetTrigger(), GetCaller());
    }
}

void HorrenDead()
{
    WallOpen(Wall(157, 53));
    WallOpen(Wall(158, 54));
    WallOpen(Wall(159, 55));
    WallOpen(Wall(160, 56));
    DeleteObjectTimer(self, 90);
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    DeleteObjectTimer(CreateObject("VortexSource", 1), 120);
    Effect("YELLOW_SPARKS", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
    AudioEvent("HorrendousIsKilled", 1);
    UniChatMessage(self, MessageDesc(1), 120);
    UniPrintToAll(MessageDesc(2));
}

int BossHorren(int wp)
{
    int unit = CreateObject("Horrendous", wp);

    SetUnitMaxHealth(unit, 1200);
    SetCallback(unit, 3, HorrenDetectEnemy);
    SetCallback(unit, 7, FieldMobHurtHandler);
    SetCallback(unit, 5, HorrenDead);
    RetreatLevel(unit, 0.0);
    ResumeLevel(unit, 1.0);

    return unit;
}

int SpawnDummyUnit(string name, int wp)
{
    int unit = CreateObject(name, wp);

    if (CurrentHealth(unit))
    {
        ObjectOff(unit);
        Damage(unit, 0, MaxHealth(unit) + 1, -1);
        Frozen(unit, 1);
    }
    return unit;
}

int SpawnDummyUnitAt(string name, int sUnit)
{
    int unit = CreateObjectAt(name, GetObjectX(sUnit), GetObjectY(sUnit));

    if (unit)
    {
        ObjectOff(unit);
        Damage(unit, 0, CurrentHealth(unit) + 1, -1);
        Frozen(unit, 1);
    }
    return unit;
}

void RealSummonBoss(int ptr)
{
    MoveWaypoint(1, GetObjectX(ptr), GetObjectY(ptr));
    Delete(ptr);
    Effect("SMOKE_BLAST", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
    GreenSparkFx(GetWaypointX(1), GetWaypointY(1));
    AudioEvent("TagOn", 1);
    UniChatMessage(BossHorren(1), MessageDesc(3), 180);
}

void TouchedBossSummonPoint()
{
    if (MaxHealth(self))
    {
        MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
        Delete(GetTrigger() + 2);
        Delete(GetTrigger() + 1);
        Delete(self);
        FrameTimerWithArg(60, CreateObject("SpinningSkull", 1), RealSummonBoss);
    }
}

int BossSummonPoint(int wp)
{
    int unit = SpawnDummyUnit("Maiden", wp);

    UnitNoCollide(CreateObject("RewardMarkerPlus", wp));
    Frozen(unit + 1, 1);
    CreateObject("BlueSummons", wp);
    SetCallback(unit, 9, TouchedBossSummonPoint);
    return unit;
}

void ShurikenRecharging(int inv)
{
    int ptr = UnitToPtr(inv);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2e0), 0xffff);
}

int FindShuriken(int unit)
{
    int inv = GetLastItem(unit);

    while (inv)
    {
        if (GetUnitThingID(inv) == 1178)
        {
            ShurikenRecharging(inv);
            return inv;
        }
        inv = GetPreviousItem(inv);
    }
    return 0;
}

void GuardianHitShuriken(int ptr)
{
    int owner = GetOwner(ptr), target = ToInt(GetObjectZ(ptr)), mis;
    float dt = Distance(GetObjectX(ptr), GetObjectY(ptr), GetObjectX(target), GetObjectY(target));
    float vectX = UnitRatioX(target, ptr, dt), vectY = UnitRatioY(target, ptr, dt);
    float thresHold;

    if (CurrentHealth(owner) && CurrentHealth(target) && IsObjectOn(owner))
    {
        //mis = CreateObjectAt("OgreShuriken", GetObjectX(owner) + UnitRatioX(target, owner, 17.0), GetObjectY(owner) + UnitRatioY(target, owner, 17.0));
        mis = SpawnNewBullet(owner, GetObjectX(owner) + UnitRatioX(target, owner, 17.0), GetObjectY(owner) + UnitRatioY(target, owner, 17.0));
        //Enchant(mis, "ENCHANT_SHOCK", 0.0);
        //SetOwner(owner, mis);
        thresHold = DistanceUnitToUnit(mis, target) / GetObjectZ(ptr + 1);
        MoveObject(ptr, GetObjectX(target) + UnitRatioX(target, ptr, dt * thresHold), GetObjectY(target) + UnitRatioY(target, ptr, dt * thresHold));
        if (IsVisibleTo(ptr, owner))
        {
            PushObject(mis, -42.0, GetObjectX(ptr), GetObjectY(ptr));
        }
        else
        {
            PushObject(mis, -42.0, GetObjectX(target), GetObjectY(target));
        }
    }
    Delete(ptr);
    Delete(ptr + 1);
}

void AbsoluteTargetStrike(int owner, int target, float threshold, int func)
{
    int unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(target), GetObjectY(target));

    Raise(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(owner), GetObjectY(owner)), threshold);

    SetOwner(owner, unit);
    Raise(unit, ToFloat(target));
    FrameTimerWithArg(1, unit, func);
}

void AIBotDetectEnemy(int owner)
{
    int unit = CreateObjectAt("WeirdlingBeast", GetObjectX(owner), GetObjectY(owner));
    SetOwner(owner, CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner), GetObjectY(owner)));
    Raise(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(owner), GetObjectY(owner)), 5000.0);
    LookWithAngle(unit, GetDirection(owner));
    CreatureGuard(unit, GetObjectX(unit), GetObjectY(unit), GetObjectX(unit) + UnitAngleCos(unit, 200.0), GetObjectY(unit) + UnitAngleSin(unit, 200.0), 500.0);
    UnitNoCollide(unit);
    SetCallback(unit, 3, GetNealryEnemy);
    DeleteObjectTimer(unit, 1);
    FrameTimerWithArg(1, unit + 1, AIBotShootShuriken);
}

void GetNealryEnemy()
{
    int ptr = GetTrigger() + 1;
    int target = ToInt(GetObjectZ(ptr));
    float dist = DistanceUnitToUnit(self, other);

    if (dist < GetObjectZ(ptr + 1))
    {
        Raise(ptr + 1, dist);
        Raise(ptr, ToFloat(GetCaller()));
    }
}

void AIBotShootShuriken(int ptr)
{
    int owner = GetOwner(ptr), target = ToInt(GetObjectZ(ptr));

    if (CurrentHealth(owner) && CurrentHealth(target))
    {
        Raise(ptr, GuardianHitShuriken);
        AbsoluteTargetStrike(owner, target, 33.0, ToInt(GetObjectZ(ptr)));
    }
    Delete(ptr);
    Delete(ptr + 1);
}

int IsMonsterUnit(int sUnit)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        return GetMemory(ptr + 0x08) & 2;
    return 0;
}

void ShurikenEvent(int cur)
{
    int owner = GetOwner(cur);

    if (IsMonsterUnit(owner) && CurrentHealth(owner))
    {
        AIBotDetectEnemy(owner);
        FindShuriken(owner);
        Delete(cur);
    }
}

int GetPlayerScrIndex(int sUnit)
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        if (player[i] ^ sUnit)
            1;
        else    return i;
    }
    return -1;
}

void UnitVisibleSplashA()
{
    int parent = GetOwner(self);
    int spIdx = ToInt(GetObjectZ(parent + 1));

    if (CurrentHealth(GetOwner(parent)))
    {
        if (GetUnit1C(other) ^ spIdx)
        {
            if (Distance(GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other)) <= GetObjectX(parent))
            {
                Damage(other, GetOwner(parent), ToInt(GetObjectZ(parent)), 14);
                SetUnit1C(other, spIdx);
            }
        }
    }
}

void SplashDamageAt(int owner, int dam, float x, float y, float range)
{
    int ptr = CreateObjectAt("InvisibleLightBlueHigh", range, y) + 2, k, SplashIdx;

    SplashIdx ++;
    Raise(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(ptr), GetObjectY(ptr)), SplashIdx);
    SetOwner(owner, ptr - 2);
    Raise(ptr - 2, ToFloat(dam));
    for (k = 0 ; k < 4 ; k ++)
    {
        DeleteObjectTimer(CreateObjectAt("WeirdlingBeast", x, y), 1);
        UnitNoCollide(ptr + k);
        LookWithAngle(ptr + k, k * 64);
        SetOwner(ptr - 2, ptr + k);
        SetCallback(ptr + k, 3, UnitVisibleSplashA);
    }
    DeleteObjectTimer(ptr - 1, 2);
    DeleteObjectTimer(ptr - 2, 2);
}

void WarHarpoonCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            SplashDamageAt(owner, 180, GetObjectX(self), GetObjectY(self), 85.0);
            Effect("SPARK_EXPLOSION", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
            DeleteObjectTimer(CreateObjectAt("Explosion", GetObjectX(self), GetObjectY(self)), 20);
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

void PlayerHarpoonHandler(int sCur)
{
    int owner = GetOwner(sCur);
    int plr = GetPlayerScrIndex(owner), hPtr = UnitToPtr(sCur);

    if (plr + 1 && hPtr)
    {
        if (CurrentHealth(owner) && PlayerClassGetHarpoonFlag(plr))
        {
            SetMemory(hPtr + 0x2b8, ImportUnitCollideFunc());
            SetMemory(hPtr + 0x2fc, WarHarpoonCollide);
            Enchant(hPtr, "ENCHANT_SHOCK", 0.0);
        }
    }
}

void DetectedSpecificIndex(int curId)
{
    int thingID = GetUnitThingID(curId);

    if (thingID == 1179)
    {
        ShurikenEvent(curId);
    }
    else if (thingID == 526)
        PlayerHarpoonHandler(curId);
}

void LoopSearchIndex()
{
    int curId, tempId;
    int link;

    if (!link)
        link = GetScrDataField(LoopSearchIndex);
    while (Unknownb9(0x750710))
    {
        Unused59(link + 4, Unknownb9(Unknownb9(0x750710) + 0x2c));
        if (curId)
        {
            while (curId < tempId)
            {
                Unused59(link, curId + 1);
                DetectedSpecificIndex(curId);
            }
            break;
        }
        curId = tempId;
        break;
    }
    FrameTimer(1, LoopSearchIndex);
}

string HumanChatMents()
{
    return MessageDesc(Random(4, 11));
}

void HumanBotDeathHandler()
{
    UnitNoCollide(self);
    RemoveEquipments(GetTrigger());
    CreateRewardItem(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(self), GetObjectY(self)));
    BloodSpreadingFx(self);
    DeleteObjectTimer(self, 60);
}

void HumanInitSightHandler()
{
    AggressionLevel(self, 1.0);
    HumanDetectEnemy();
    SetCallback(self, 3, HumanDetectEnemy);
    UniChatMessage(self, HumanChatMents(), 150);
}

int LastParentUnit(int unit)
{
    int pic = GetOwner(unit);

    while (pic)
    {
        unit = pic;
        pic = GetOwner(pic);
    }
    return unit;
}

void HumanHearEnemyNothing()
{
    return;
}

void HumanHearEnemy()
{
    int target = LastParentUnit(other);

    if (CurrentHealth(target))
    {
        Attack(self, target);
        SetCallback(self, 10, HumanHearEnemyNothing);
    }
}

void HumanDetectEnemy()
{
    LookAtObject(self, other);
}

int InvincibleInventoryItem(int unit)
{
    int inv = GetLastItem(unit), count = 0;

    while (inv)
    {
        if (UnitCheckEnchant(inv, GetLShift(11)))
            1;
        else
        {
            count ++;
            Enchant(inv, "ENCHANT_INVULNERABLE", 0.0);
        }
        inv = GetPreviousItem(inv);
    }
    return count;
}

void RemoveEquipments(int unit)
{
	int inven = unit + 2;
	
	while (HasClass(inven, "WEAPON") || HasClass(inven, "ARMOR"))
    {
		Delete(inven);
		inven += 2;
	}
}

string StringOverflow(int t)
{
	return ToStr((t - 0x97bb40) / 4);
}

string EnchantList(int sNumber)
{
	return StringOverflow(0x596f24 + (sNumber * 4));
}

int UnitCheckEnchant(int sUnit, int sMagicFlag)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        return GetMemory(ptr + 0x154) & sMagicFlag;
    return 0;
}

int GetLShift(int sCount)
{
    return (1 << sCount);
}

int GetWeaponEnchantLevel(int unit, int propertyPtr)
{
	int ptr = UnitToPtr(unit), i, lv = 0;

	if (ptr)
	{
		if (GetMemory(ptr + 8) & 0x1000000)
		{
			for (i = 0 ; i < 4 ; i ++)
			{
				if (GetMemory(GetMemory(ptr + 0x2b4) + 8) == GetMemory(propertyPtr + (i * 24)))
				{
					lv += (i + 1);
					break;
				}
			}
			for (i = 0 ; i < 3 ; i ++)
			{
				if (GetMemory(GetMemory(ptr + 0x2b4) + 12) == GetMemory(propertyPtr + (i * 24)))
				{
					lv += (i + 1);
					break;
				}
			}
		}
	}
	return lv;
}

float IntToFloat(int x)
{
    int i;
    int pos = x;
    float result = 0.0;
 
    if (pos < 0)
        pos = -pos;
    for (i = 0; i < 32; i ++)
    {
        if (pos & 0x80000000)
            result += 1.0;
        pos = pos << 1;
        if (i != 31)
            result *= 2.0;
    }
    if (x < 0)
        return -result;
    else
        return result;
}

void SetUnitEnchantCopy(int sUnit, int sMagicFlag)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		Enchant(sUnit, EnchantList(6), 0.0);
		SetMemory(ptr + 0x154, GetMemory(ptr + 0x154) | sMagicFlag);
	}
}

void UnitSetEnchantTime(int unit, int enchantNumber, int durateTime)
{
	int ptr = UnitToPtr(unit), temp, tempPtr;

	if (ptr)
	{
		SetUnitEnchantCopy(unit, GetLShift(enchantNumber));
		tempPtr = ptr + 0x158 + ((enchantNumber / 2) * 4);
		temp = GetMemory(tempPtr);
		if (enchantNumber % 2)
		{
			SetMemory(tempPtr, (GetMemory(tempPtr) & 0xffff) | (durateTime << 0x10));
		}
		else
			SetMemory(tempPtr, ((GetMemory(tempPtr) >> 0x10) << 0x10) | durateTime);
	}
}

void FieldMobHurtHandler()
{
    int propertyLv;

    if (GetCaller())
    {
        if (UnitCheckEnchant(self, GetLShift(5)))
        {
            EnchantOff(self, EnchantList(5));
            propertyLv = GetWeaponEnchantLevel(other, 0x5BA1BC);
            if (propertyLv)
                UnitSetEnchantTime(self, 4, 15 + (propertyLv * 5));
        }
        else if (UnitCheckEnchant(self, GetLShift(3)))
        {
            EnchantOff(self, EnchantList(3));
            propertyLv = GetWeaponEnchantLevel(other, 0x5BA2DC);
            if (propertyLv)
                UnitSetEnchantTime(self, 11, 10 + (propertyLv * 4));
        }
    }
    else
    {
        if (IsPoisonedUnit(self))
        {
            Damage(self, 0, IsPoisonedUnit(self) + 1, 5);
            DeleteObjectTimer(CreateObjectAt("GreenPuff", GetObjectX(self), GetObjectY(self)), 15);
        }
    }
}

void SpecialUnitProcessing(int unit)
{
    if (CurrentHealth(unit))
    {
        AggressionLevel(unit, 0.0);
        SetCallback(unit, 3, HumanInitSightHandler);
        SetCallback(unit, 5, HumanBotDeathHandler);
        SetCallback(unit, 7, FieldMobHurtHandler);
        SetCallback(unit, 10, HearAroundEnemy);
        InvincibleInventoryItem(unit);
    }
}

void EndUnitScan(int count)
{
    UnlockDoor(Object("StartGate1"));
    UnlockDoor(Object("StartGate11"));
    FrameTimer(10, LoopSearchIndex);
    CampArea = CreateObject("InvisibleLightBlueHigh", 12);
    Enchant(CreateObject("InvisibleLightBlueHigh", 12), "ENCHANT_SHOCK", 0.0);
    UniPrintToAll(IntToString(count) + MessageDesc(12));
    FrameTimer(1, PlaceMonster);
    FrameTimer(3, DunmirPicketDescInit);
    FrameTimer(30, ChatMessageLoop);
}

void InitNPCScan(int cur)
{
    int count, i;

    for (i = 0 ; i < 10 ; i ++)
    {
        if (cur < LastUnitPtr)
        {
            if (GetUnitThingID(cur) == 1343)
            {
                SpecialUnitProcessing(cur);
                count ++;
            }
            else if (GetUnitThingID(cur) == 2672)
                CreateRewardItem(cur);
            cur += 2;
        }
        else
        {
            EndUnitScan(count);
            return;
        }
    }
    FrameTimerWithArg(1, cur, InitNPCScan);
}

void PlaceHealingBeacon()
{
    CureHPBeacon(146);
    CureHPBeacon(147);
    CureHPBeacon(148);
    CureHPBeacon(149);
    CureHPBeacon(150);
    CureHPBeacon(151);
    CureHPBeacon(152);
    CureHPBeacon(153);
    CureHPBeacon(154);
    CureHPBeacon(155);
}

void PlaceLibraryMonster()
{
    SummonMaiden(138, 255, 0, 0);
    SummonMaiden(139, 255, 0, 0);
    SummonMaiden(140, 255, 0, 0);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 141), 225);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 142), 225);
    SummonNecromancer(143);
    SummonNecromancer(144);
    SummonNecromancer(117);
    SummonNecromancer(145);
    FrameTimer(1, PlaceHealingBeacon);
}

void PlaceExMonster()
{
    SummonMaiden(175, 255, 0, 0);
    SummonMaiden(176, 255, 0, 0);
    SummonMaiden(177, 255, 0, 0);
    SummonMaiden(178, 255, 0, 0);
    SummonMaiden(179, 255, 0, 0);
    SummonMaiden(180, 255, 0, 0);
    SummonMaiden(181, 0, 225, 128);
    SummonMaiden(182, 0, 225, 128);
    SummonMaiden(183, 0, 225, 128);
    SummonMaiden(184, 0, 225, 128);
    SummonMaiden(185, 0, 225, 128);

    SummonMaiden(186, 0, 225, 128);
    SummonMaiden(187, 0, 225, 128);
    SummonMaiden(188, 0, 225, 128);
    SummonMaiden(189, 0, 225, 128);
    SummonMaiden(190, 0, 225, 128);
    SummonMaiden(191, 225, 0, 225);
    SummonMaiden(192, 0, 225, 128);
    SummonMaiden(193, 225, 0, 128);
    SummonMaiden(118, 225, 0, 128);
    SummonMaiden(119, 225, 0, 128);
    SummonMaiden(120, 225, 0, 128);
    SummonMaiden(121, 225, 0, 128);

    SummonMaiden(122, 225, 0, 128);
    SummonMaiden(123, 225, 0, 128);
    SummonMaiden(124, 225, 0, 128);
    SummonMaiden(125, 225, 0, 128);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 129), 190);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 126), 225);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 127), 225);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 128), 225);
    SummonMaiden(130, 225, 0, 128);
    SummonMaiden(131, 225, 0, 128);
    SummonMaiden(132, 225, 0, 128);

    SummonMaiden(133, 225, 0, 128);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 134), 225);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 135), 190);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 136), 225);
    SummonMaiden(137, 225, 0, 128);
    FrameTimer(1, PlaceLibraryMonster);
}

void PlaceUnderfootMonster()
{
    SetUnitMaxHealth(SummonDefaultMob("Goon", 97), 175);
    SetUnitMaxHealth(SummonDefaultMob("Goon", 98), 175);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 99), 225);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 84), 225);
    SetUnitMaxHealth(SummonDefaultMob("AlbinoSpider", 85), 160);
    SetUnitMaxHealth(SummonDefaultMob("GruntAxe", 86), 250);
    SetUnitMaxHealth(SummonDefaultMob("GruntAxe", 87), 250);
    SetUnitMaxHealth(SummonDefaultMob("GruntAxe", 88), 250);
    SetUnitMaxHealth(SummonDefaultMob("GruntAxe", 89), 250);
    SetUnitMaxHealth(SummonDefaultMob("OgreBrute", 90), 295);
    SetUnitMaxHealth(SummonDefaultMob("OgreBrute", 91), 295);
    SetUnitMaxHealth(SummonDefaultMob("OgreBrute", 92), 295);
    SetUnitMaxHealth(SummonDefaultMob("OgreWarlord", 93), 325);
    SetUnitMaxHealth(SummonDefaultMob("OgreWarlord", 94), 325);
    SetUnitMaxHealth(SummonDefaultMob("OgreBrute", 95), 295);
    SetUnitMaxHealth(SummonDefaultMob("GruntAxe", 96), 250);
    SummonNecromancer(100);
    SummonNecromancer(101);
    SetUnitMaxHealth(SummonDefaultMob("SkeletonLord", 102), 250);
    SetUnitMaxHealth(SummonDefaultMob("SkeletonLord", 103), 250);
    SetUnitMaxHealth(SummonDefaultMob("SkeletonLord", 104), 250);
    SummonNecromancer(105);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 106), 250);
    SetUnitMaxHealth(SummonDefaultMob("UrchinShaman", 107), 250);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 108), 250);
    SummonHecubah(110);
    SummonHecubah(109);
    //FrameTimerWithArg(1, CreateObject("InvisibleLightBlueHigh", 174), SpawnGolemBoss);
    InitLichKings();
    FrameTimer(1, PlaceExMonster);
}

void PlaceMonster()
{
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 56), 128);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 57), 128);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 58), 128);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 59), 128);
    SetUnitMaxHealth(SummonDefaultMob("GruntAxe", 60), 225);
    SetUnitMaxHealth(SummonDefaultMob("GruntAxe", 60), 225);
    SetUnitMaxHealth(SummonDefaultMob("OgreWarlord", 61), 325);
    SetUnitMaxHealth(SummonDefaultMob("OgreWarlord", 62), 325);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 63), 255);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 64), 255);
    SetUnitMaxHealth(SummonDefaultMob("BlackWidow", 65), 255);
    SetUnitMaxHealth(SummonDefaultMob("Scorpion", 66), 275);
    SetUnitMaxHealth(SummonDefaultMob("EvilCherub", 66), 225);
    SetUnitMaxHealth(SummonDefaultMob("OgreWarlord", 68), 325);
    SetUnitMaxHealth(SummonDefaultMob("OgreWarlord", 69), 325);
    SetUnitMaxHealth(SummonDefaultMob("OgreWarlord", 70), 325);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 71), 128);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 71), 128);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 72), 128);
    SetUnitMaxHealth(SummonDefaultMob("EmberDemon", 72), 128);
    SetUnitMaxHealth(SummonDefaultMob("SkeletonLord", 73), 295);
    SetUnitMaxHealth(SummonDefaultMob("SkeletonLord", 74), 295);
    SummonHecubah(75);
    SummonHecubah(76);
    SummonHecubah(77);
    SummonHecubah(78);
    SummonNecromancer(79);
    SummonNecromancer(80);
    SummonNecromancer(81);
    SummonNecromancer(82);
    SummonNecromancer(83);
    FrameTimer(1, PlaceUnderfootMonster);
}

void MapDecorations()
{
    MainKey2 = CreateObject("RedOrbKeyOfTheLich", 47);
    ArrTrp1 = PlaceSouthArrowTraps(13, 10);
    ArrTrp2 = PlaceSouthArrowTraps(44, 8);
    ArrTrp3 = PlaceWestArrowTraps(52, 10);
    FireTrp1 = PlaceSouthFireballTraps(53, 3);
    MainKey1 = CreateObject("RedOrbKeyOfTheLich", 14);
    CreateObject("BlueOrbKeyOfTheLich", 15);
    UfRot = CreateObject("InvisibleLightBlueHigh", 16);
    LookWithAngle(CreateObject("InvisibleLightBlueHigh", 17), 1);
    Raise(UfRot, ToFloat(Object("UnderfootRotPtr")));
    LookWithAngle(UfRot, 16);
    MyBlock = CreateObject("IronBlock", 45);
    Frozen(CreateObject("IronBlock", 46), 1);
    Frozen(MyBlock, 1);
    MyBlock2 = CreateObject("IronBlock", 48);
    Frozen(CreateObject("IronBlock", 49), 1);
    Frozen(CreateObject("IronBlock", 50), 1);
    Frozen(CreateObject("IronBlock", 51), 1);
    Frozen(MyBlock2, 1);
    PlayerAutoTeamSign();
    FrameTimerWithArg(1, CheckGameKorLanguage(), MapSignInit);
    FrameTimer(94, PlacingSpecialMarketBeacon);
    FrameTimer(2, SetHostileCritter);
    DrawImageAt(LocationX(242), LocationY(242), 2461);
    DrawImageAt(LocationX(245), LocationY(245), 1427);
    DrawImageAt(LocationX(244), LocationY(244), 1418);
    DrawImageAt(LocationX(246), LocationY(246), 2516);
    DrawImageAt(LocationX(247), LocationY(247), 1428);
    DrawImageAt(LocationX(248), LocationY(248), 1426);
    //DrawImageAt(LocationX(249), LocationY(249), 1430);
    DrawImageAt(LocationX(250), LocationY(250), 1440);
    FrameTimer(1, SetGameTypeCoopMode);
}

void ImportBinTable()
{
    BlackWidowBinTable();
    AirshipCaptainBinTable();
    FireSpriteBinTable();
    GoonBinTable();
    MaidenBinTable();
    StrongWizardWhiteBinTable();
    WeirdlingBeastBinTable();
    WizardRedBinTable();
    WoundedApprenticeBinTable();
}

void UserMapSetting()
{
    SetMemory(0x5d5330, 0x2000);
    SetMemory(0x5d5394, 1);
}

void MapInitialize()
{
    int var0 = EnableMemoryReadWriteFunction(0);

    MusicEvent();
    LastUnitPtr = CreateObject("RedPotion", 1);
    Delete(LastUnitPtr);
    MapWaypointInit();
    ImportBinTable();
    ImportAbsoluteWPickup();
    ImportEquipWeapon();
    ImportCheckSelfDamage();

    int ptr = DiePlayerHandlerCopiedCode();
    ChangePlayerDeathSound(ptr, 913);
    PlayerUpdate4f8100();
    SetMemory(ptr + 0x386, (GetMemory(ptr + 0x386) & 0xffff0000) | 0x9eb);

    CheckMonsterThing(0);
    MathSine(1, 1.0 / 57.3);
    ImportLibrary();
    FrameTimer(1, MapDecorations);
    FrameTimer(10, PreservePlayerLoop);
    InitInvPropertiesSet();
    UserMapSetting();
    FrameTimerWithArg(90, Object("FirstTargetScan"), InitNPCScan);
}

void DefaultListenEnemy()
{
    return;
}

void HearAroundEnemy()
{
    int target = LastParentUnit(other);

    if (IsVisibleTo(self, target) || IsVisibleTo(target, self))
    {
        Attack(self, target);
        AggressionLevel(self, 1.0);
        SetCallback(self, 10, DefaultListenEnemy);
    }
}

void DefaultMobDead()
{
    CreateRewardItem(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(self), GetObjectY(self)));
    DeleteObjectTimer(self, 90);
}

void DefaultMobInitSight()
{
    AggressionLevel(self, 1.0);
    SetCallback(self, 3, DefaultMobSight);
}

void PlantMobInitSight()
{
    AggressionLevel(self, 1.0);
    SetCallback(self, 3, DefaultMobSight);
    SetCallback(self, 7, FieldMobHurtHandler);
    UniChatMessage(self, MessageDesc(13), 180);
}

void DefaultMobSight()
{
    return;
}

int SummonDefaultMob(string name, int wp)
{
    int unit = CreateObject(name, wp);

    CheckMonsterThing(unit);
    SetCallback(unit, 3, DefaultMobInitSight);
    SetCallback(unit, 5, DefaultMobDead);
    SetCallback(unit, 7, FieldMobHurtHandler);
    SetCallback(unit, 10, HearAroundEnemy);
    SetUnitScanRange(unit, 450.0);
    AggressionLevel(unit, 0.0);
    RetreatLevel(unit, 0.0);
    ResumeLevel(unit, 1.0);
    return unit;
}

int SummonHecubah(int wp)
{
    int unit = CreateObject("Hecubah", wp);
    int uec = GetMemory(GetMemory(0x750710) + 0x2ec);

    SetUnitMaxHealth(unit, 750);
    SetCallback(unit, 3, PlantMobInitSight);
    SetCallback(unit, 5, DefaultMobDead);
    SetCallback(unit, 7, FieldMobHurtHandler);
    SetCallback(unit, 10, HearAroundEnemy);
    AggressionLevel(unit, 0.0);
    if (uec)
    {
        SetMemory(uec + 0x528, ToInt(1.0));
        SetMemory(uec + 0x520, ToInt(450.0));
        SetMemory(uec + 0x5a8, 0x0f0000);
        SetMemory(uec + 0x5b0, 0x0f0000);
        SetMemory(uec + 0x5c0, 0x0f0000);
        uec += 0x5d0;
        SetMemory(uec + GetSpellNumber("SPELL_DEATH_RAY"), 0x40000000);
		SetMemory(uec + GetSpellNumber("SPELL_SHIELD"), 0x10000000);
        SetMemory(uec + GetSpellNumber("SPELL_SLOW"), 0x20000000);
		SetMemory(uec + GetSpellNumber("SPELL_INVISIBILITY"), 0x10000000);
        SetMemory(uec + GetSpellNumber("SPELL_INVERSION"), 0x8000000);
        SetMemory(uec + GetSpellNumber("SPELL_CHAIN_LIGHTNING"), 0x40000000);
    }
    return unit;
}

int SummonNecromancer(int wp)
{
    int unit = CreateObject("Necromancer", wp);
    int uec = GetMemory(GetMemory(0x750710) + 0x2ec);

    SetUnitMaxHealth(unit, 350);
    SetCallback(unit, 5, DefaultMobDead);
    SetCallback(unit, 3, DefaultMobInitSight);
    SetCallback(unit, 10, HearAroundEnemy);
    AggressionLevel(unit, 0.0);
    if (uec)
    {
        SetMemory(uec + 0x528, ToInt(1.0));
        SetMemory(uec + 0x520, ToInt(450.0));
        uec += 0x5d0;
        SetMemory(uec + GetSpellNumber("SPELL_LIGHTNING"), 0x40000000);
		SetMemory(uec + GetSpellNumber("SPELL_SHIELD"), 0x10000000);
        SetMemory(uec + GetSpellNumber("SPELL_SLOW"), 0x20000000);
		SetMemory(uec + GetSpellNumber("SPELL_INVISIBILITY"), 0x10000000);
		SetMemory(uec + GetSpellNumber("SPELL_FIREBALL"), 0x40000000);
        SetMemory(uec + GetSpellNumber("SPELL_INVERSION"), 0x8000000);
        SetMemory(uec + GetSpellNumber("SPELL_COUNTERSPELL"), 0x8000000);
    }
    return unit;
}

void StrBossDeath()
{
	int arr[22], i, count = 0;
	string name = "ManaBombOrb";
	float pos_x = GetWaypointX(1), pos_y = GetWaypointY(1);

	arr[0] = 268698116; arr[1] = 70799300; arr[2] = 134349058; arr[3] = 33563682; arr[4] = 67174655; arr[5] = 1094685201; arr[6] = 1107378240; arr[7] = 595933448; 
	arr[8] = 553717792; arr[9] = 1883522300; arr[10] = 1900217887; arr[11] = 2236928; arr[12] = 144703489; arr[13] = 1074847744; arr[14] = 76021760; arr[15] = 536871038; 
	arr[16] = 1111752704; arr[17] = 2139617344; arr[18] = 557924339; arr[19] = 132128; arr[20] = 1619001344; arr[21] = 130575; 
	for (i = 0 ; i < 22 ; i ++)
		count = DrawStrBossDeath(arr[i], name, count);
	MoveWaypoint(1, pos_x, pos_y);
}

int DrawStrBossDeath(int arg, string name, int count)
{
	int i;

	for (i = 1 ; i > 0 && count < 682 ; i <<= 1)
	{
		if (i & arg)
			CreateObject(name, 1);
		if (count % 61 == 60)
			MoveWaypoint(1, GetWaypointX(1) - 120.0, GetWaypointY(1) + 2.0);
		else
			MoveWaypoint(1, GetWaypointX(1) + 2.0, GetWaypointY(1));
		count ++;
	}
	return count;
}


void WhenRunout()
{
    EnchantOff(self, "ENCHANT_BLINDED");
}

void MecaGolemStrike()
{
    int ptr;
    float dist = DistanceUnitToUnit(self, other);

    LookAtObject(self, other);
    if (dist > 39.0)
        PushObjectTo(self, UnitRatioX(other, self, 21.0), UnitRatioY(other, self, 21.0));
    if (!HasEnchant(self, "ENCHANT_BURNING") && dist < 110.0)
    {
        Enchant(self, "ENCHANT_BURNING", 0.3);
        HitLocation(self, GetObjectX(self), GetObjectY(self));
        ptr = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(self), GetObjectY(self));
        SetOwner(self, ptr);
        Raise(ptr, ToFloat(GetCaller()));
        FrameTimerWithArg(6, ptr, RemoveMecaGolemHitDelay);
    }
    Enchant(self, "ENCHANT_BLINDED", 0.0);
}

void RemoveMecaGolemHitDelay(int ptr)
{
    int unit = GetOwner(ptr), target = ToInt(GetObjectZ(ptr));
    int hp = CurrentHealth(unit), mxHp = MaxHealth(unit), pic;

    if (hp)
    {
        if (DistanceUnitToUnit(unit, target) > 27.0)
            MoveObject(ptr, GetObjectX(unit) + UnitRatioX(target, unit, 4.0), GetObjectY(unit) + UnitRatioY(target, unit, 4.0));
        else
            MoveObject(ptr, GetObjectX(unit), GetObjectY(unit));
        Delete(unit);
        pic = SummonPowerMecaGolem(ptr);
        Damage(pic, 0, mxHp - hp, -1);
        LookAtObject(pic, target);
        HitLocation(pic, GetObjectX(pic), GetObjectY(pic));
        MoveWaypoint(1, GetObjectX(ptr), GetObjectY(ptr));
        DeleteObjectTimer(CreateObject("ReleasedSoul", 1), 9);
        AudioEvent("HitStoneBreakable", 1);
    }
    Delete(ptr);
}

void MecaGolemDeathEvent()
{
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    DeleteObjectTimer(CreateObject("OblivionUp", 1), 120);
    AudioEvent("StaffOblivionAchieve1", 1);
    Effect("WHITE_FLASH", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
    StrBossDeath();
    //Music(2, 100);
    //ModifyPlayMusicNumber(2);
}

int SummonPowerMecaGolem(int ptr)
{
    int unit = CreateObjectAt("MechanicalGolem", GetObjectX(ptr), GetObjectY(ptr));

    SetUnitScanRange(unit, 450.0);
    SetUnitMaxHealth(unit, 1500);
    SetCallback(unit, 3, MecaGolemStrike);
    SetCallback(unit, 5, MecaGolemDeathEvent);
    SetCallback(unit, 13, WhenRunout);

    return unit;
}

int LichLordBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1751345484; arr[1] = 1685221196; arr[17] = 20; arr[19] = 100; arr[21] = 1065353216; 
		arr[24] = 1065353216; arr[25] = 1; arr[26] = 4; arr[27] = 7; arr[28] = 1108082688; 
		arr[29] = 130; arr[30] = 1092616192; arr[31] = 11; arr[32] = 9; arr[33] = 17; arr[57] = 5548288; 
		arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, LichLordBinTable, LichLordBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

void LichLordSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1077936128);
		SetMemory(ptr + 0x224, 1077936128);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 0);
		SetMemory(GetMemory(ptr + 0x22c), 1400);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 1400);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, LichLordBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 1065353216);
	}
}

void LichLordFONCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, 0, 200, 0);
            Enchant(other, "ENCHANT_CHARMING", 0.2);
            GreenSparkFx(GetObjectX(self), GetObjectY(self));
            break;
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int LichLordSkillFON(int sOwner, float sX, float sY)
{
    int fon = CreateObjectAt("Deathball", sX, sY);
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(ptr + 0x2e8, 5483536); //projectile update
        SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
        SetMemory(ptr + 0x2fc, LichLordFONCollide);
        SetOwner(sOwner, fon);
    }
    return fon;
}

void LichClearSight()
{
    EnchantOff(self, "ENCHANT_BLINDED");
}

void LichResetUnitSight(int sUnit)
{
    int enemy = GetUnit1C(sUnit);

    if (CurrentHealth(sUnit))
    {
        EnchantOff(sUnit, "ENCHANT_DETECTING");
        Enchant(sUnit, "ENCHANT_BLINDED", 0.06);
        if (CurrentHealth(enemy))
        {
            Attack(sUnit, enemy);
        }
    }
}

void LichLordThrowFON(int sMe, int sEnemy)
{
    int mis = LichLordSkillFON(sMe, GetObjectX(sMe) + UnitRatioX(sEnemy, sMe, 9.0), GetObjectY(sMe) + UnitRatioY(sEnemy, sMe, 9.0));

    PushObject(mis, 31.0, GetObjectX(sMe), GetObjectY(sMe));
    LookAtObject(sMe, sEnemy);
    HitLocation(sMe, GetObjectX(sMe), GetObjectY(sMe));
}

void StoneFallDown(int sUnit)
{
    int durate = GetDirection(sUnit), owner = GetOwner(sUnit);

    while (IsObjectOn(sUnit))
    {
        if (CurrentHealth(owner))
        {
            if (durate)
            {
                Raise(sUnit + 1, GetObjectZ(sUnit + 1) - GetObjectZ(sUnit));
                LookWithAngle(sUnit, durate - 1);
                FrameTimerWithArg(1, sUnit, StoneFallDown);
                break;
            }
            else
            {
                SplashDamageAt(owner, 100, GetObjectX(sUnit + 1), GetObjectY(sUnit + 1), 85.0);
                DeleteObjectTimer(CreateObjectAt("BigSmoke", GetObjectX(sUnit + 1), GetObjectY(sUnit + 1)), 18);
                PlaySoundAround(sUnit + 1, 30);
                Effect("JIGGLE", GetObjectX(sUnit + 1), GetObjectY(sUnit + 1), 0.0, 0.0);
            }
        }
        Delete(sUnit);
        Delete(sUnit + 1);
        break;
    }
}

void LichLordRaisingStone(int sMe, int sEnemy)
{
    int unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(sEnemy), GetObjectY(sEnemy));

    Raise(unit, 10.0);
    UnitNoCollide(CreateObjectAt("BoulderCave", GetObjectX(unit), GetObjectY(unit)));
    Raise(unit + 1, 250.0);
    SetOwner(sMe, unit);
    LookWithAngle(unit, 25);
    FrameTimerWithArg(3, unit, StoneFallDown);
}

void LichLordSight()
{
    int enemy = GetUnit1C(self);

    if (CurrentHealth(other))
    {
        if (GetCaller() ^ enemy)
        {
            SetUnit1C(self, GetCaller());
        }
        if (!HasEnchant(self, "ENCHANT_DETECTING"))
        {
            if (DistanceUnitToUnit(self, other) > 110.0)
            {
                if (Random(0, 4))
                    LichLordThrowFON(self, other);
                else
                    LichLordRaisingStone(self, other);
            }
            Enchant(self, "ENCHANT_DETECTING", 0.0);
            FrameTimerWithArg(35, GetTrigger(), LichResetUnitSight);
        }
    }
}

int SummonLichKing(int sUnit)
{
    int mob = CreateObjectAt("LichLord", GetObjectX(sUnit), GetObjectY(sUnit));

    LichLordSubProcess(mob);
    SetCallback(mob, 3, LichLordSight);
    SetCallback(mob, 13, LichClearSight);
    SetUnitScanRange(mob, 450.0);
    SetUnitMaxHealth(mob, 1500);
    SetCallback(mob, 5, MecaGolemDeathEvent);
    return mob;
}

int GreenFrogBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1701147207; arr[1] = 1869760110; arr[2] = 103; arr[17] = 500; arr[19] = 64; 
		arr[21] = 1065353216; arr[23] = 32768; arr[24] = 1067869798; arr[26] = 4; arr[28] = 1106247680; 
		arr[29] = 85; arr[30] = 1112014848; arr[31] = 2; arr[32] = 7; arr[33] = 15; 
		arr[59] = 5543904; arr[60] = 1313; arr[61] = 46905856; 
		CancelTimer(FrameTimerWithArg(10, GreenFrogBinTable, GreenFrogBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

void GreenFrogSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1073070735);
		SetMemory(ptr + 0x224, 1073070735);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 32768);
		SetMemory(GetMemory(ptr + 0x22c), 1000);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 1000);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, GreenFrogBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 1065353216);
	}
}

void FrogOnDead()
{
    FrameTimerWithArg(39, GetTrigger(), SpawnGolemBoss);
    UniChatMessage(self, MessageDesc(14), 90);
}

void FrogSightFirst()
{
    //Music(27, 100);
    //ModifyPlayMusicNumber(27);
    SetCallback(self, 3, DefaultMobSight);
    UniChatMessage(self, "절대로 용서 못한다 개굴~", 128);
}

void InitLichKings()
{
    int chest = Object("MobInChest"), frog;

    if (IsObjectOn(chest)) frog = GetLastItem(chest);
    if (CurrentHealth(frog))
    {
        GreenFrogSubProcess(frog);
        SetCallback(frog, 5, FrogOnDead);
        SetCallback(frog, 7, FieldMobHurtHandler);
        SetCallback(frog, 3, FrogSightFirst);
    }
}

void GolemInitSightHandler()
{
    AggressionLevel(self, 1.0);
    SetCallback(self, 3, LichLordSight);
    LichLordSight();
}

void SpawnGolemBoss(int ptr)
{
    int unit = SummonLichKing(ptr);

    DeleteObjectTimer(CreateObjectAt("GreenSmoke", GetObjectX(unit), GetObjectY(unit)), 21);
    PlaySoundAround(ptr, 825);
    UniChatMessage(unit, MessageDesc(15), 180);
    Delete(ptr);
}

int SummonMaiden(int wp, int r, int g, int b)
{
    int unit = ColorMaiden(r, g, b, wp);

    UnitLinkBinScript(unit, MaidenBinTable());
    SetUnitMaxHealth(unit, 295);
    SetUnitSpeed(unit, 1.8);
    SetCallback(unit, 3, DefaultMobInitSight);
    SetCallback(unit, 5, DefaultMobDead);
    SetCallback(unit, 7, FieldMobHurtHandler);
    SetCallback(unit, 10, HearAroundEnemy);
    SetUnitScanRange(unit, 450.0);
    AggressionLevel(unit, 0.0);

    return unit;
}

int LibraryKey()
{
    int key;

    if (!key)
        key = CreateObject("RedOrbKeyOfTheLich", 111);
    return key;
}

void OpenLibraryEntranceGate()
{
    if (CurrentHealth(other) && HasItem(other, LibraryKey()))
    {
        ObjectOff(self);
        UnlockDoor(Object("LibraryLock"));
        Delete(LibraryKey());
        UniPrintToAll(MessageDesc(16));
    }
}

int LibraryBookcase()
{
    int unit = CreateObject("InvisibleLightBlueHigh", 1);
    
    Frozen(CreateObjectAt("MovableBookcase4", 4580.0, 4291.0), 1);
    Frozen(CreateObjectAt("MovableBookcase4", 4605.0, 4316.0), 1);
    return unit;
}

int LibraryBookcase2()
{
    int unit = CreateObject("InvisibleLightBlueHigh", 1);

    Frozen(CreateObjectAt("MovableBookcase3", 2901.0, 4099.0), 1);
    Frozen(CreateObjectAt("MovableBookcase3", 2927.0, 4073.0), 1);
    Frozen(CreateObjectAt("MovableBookcase1", GetObjectX(unit + 1) + 13.0, GetObjectY(unit + 1) + 13.0), 1);
    Frozen(CreateObjectAt("MovableBookcase1", GetObjectX(unit + 2) + 13.0, GetObjectY(unit + 2) + 13.0), 1);

    return unit;
}

void ResetLibraryHandle(int ptr)
{
    LookWithAngle(ptr + 1, 0);
}

void CloseLibraryWalls(int ptr)
{
    int count = GetDirection(ptr);

    if (count < 34)
    {
        if (count < 22)
        {
            MoveObject(ptr + 1, GetObjectX(ptr + 1) + 1.0, GetObjectY(ptr + 1) + 1.0);
            MoveObject(ptr + 2, GetObjectX(ptr + 2) - 1.0, GetObjectY(ptr + 2) - 1.0);
        }
        else
        {
            MoveObject(ptr + 1, GetObjectX(ptr + 1) - 1.0, GetObjectY(ptr + 1) + 1.0);
            MoveObject(ptr + 2, GetObjectX(ptr + 2) - 1.0, GetObjectY(ptr + 2) + 1.0);
        }
        LookWithAngle(ptr, count + 1);
        FrameTimerWithArg(1, ptr, CloseLibraryWalls);
    }
    else
    {
        LookWithAngle(ptr, 0);
        WallClose(Wall(199, 187));
        FrameTimerWithArg(1, ptr, ResetLibraryHandle);
    }
}

void OpenLibraryWalls(int ptr)
{
    int count = GetDirection(ptr);

    if (count < 34)
    {
        if (count < 12)
        {
            MoveObject(ptr + 1, GetObjectX(ptr + 1) + 1.0, GetObjectY(ptr + 1) - 1.0);
            MoveObject(ptr + 2, GetObjectX(ptr + 2) + 1.0, GetObjectY(ptr + 2) - 1.0);
        }
        else
        {
            MoveObject(ptr + 1, GetObjectX(ptr + 1) - 1.0, GetObjectY(ptr + 1) - 1.0);
            MoveObject(ptr + 2, GetObjectX(ptr + 2) + 1.0, GetObjectY(ptr + 2) + 1.0);
        }
        LookWithAngle(ptr, count + 1);
        FrameTimerWithArg(1, ptr, OpenLibraryWalls);
    }
    else
    {
        LookWithAngle(ptr, 0);
        WallOpen(Wall(199, 187));
        FrameTimerWithArg(90, ptr, CloseLibraryWalls);
    }
}

void CloseLibraryWalls2(int ptr)
{
    int count = GetDirection(ptr);

    if (count < 34)
    {
        if (count < 22)
        {
            MoveObject(ptr + 1, GetObjectX(ptr + 1) + 1.0, GetObjectY(ptr + 1) - 1.0);
            MoveObject(ptr + 2, GetObjectX(ptr + 2) - 1.0, GetObjectY(ptr + 2) + 1.0);
        }
        else
        {
            MoveObject(ptr + 1, GetObjectX(ptr + 1) + 1.0, GetObjectY(ptr + 1) + 1.0);
            MoveObject(ptr + 2, GetObjectX(ptr + 2) + 1.0, GetObjectY(ptr + 2) + 1.0);
        }
        LookWithAngle(ptr, count + 1);
        FrameTimerWithArg(1, ptr, CloseLibraryWalls2);
    }
    else
    {
        LookWithAngle(ptr, 0);
    }
}

void OpenLibraryWalls2(int ptr)
{
    int count = GetDirection(ptr);

    if (count < 34)
    {
        if (count < 12)
        {
            MoveObject(ptr + 1, GetObjectX(ptr + 1) - 1.0, GetObjectY(ptr + 1) - 1.0);
            MoveObject(ptr + 2, GetObjectX(ptr + 2) - 1.0, GetObjectY(ptr + 2) - 1.0);
        }
        else
        {
            MoveObject(ptr + 1, GetObjectX(ptr + 1) - 1.0, GetObjectY(ptr + 1) + 1.0);
            MoveObject(ptr + 2, GetObjectX(ptr + 2) + 1.0, GetObjectY(ptr + 2) - 1.0);
        }
        LookWithAngle(ptr, count + 1);
        FrameTimerWithArg(1, ptr, OpenLibraryWalls2);
    }
    else
    {
        LookWithAngle(ptr, 0);
    }
}

void CloseLibraryWalls21(int ptr)
{
    int count = GetDirection(ptr + 2);

    if (count < 46)
    {
        if (count < 23)
        {
            MoveObject(ptr + 3, GetObjectX(ptr + 3) + 2.0, GetObjectY(ptr + 3) - 2.0);
            MoveObject(ptr + 4, GetObjectX(ptr + 4) - 2.0, GetObjectY(ptr + 4) + 2.0);
        }
        else
        {
            MoveObject(ptr + 3, GetObjectX(ptr + 3) - 2.0, GetObjectY(ptr + 3) - 2.0);
            MoveObject(ptr + 4, GetObjectX(ptr + 4) - 2.0, GetObjectY(ptr + 4) - 2.0);
        }
        LookWithAngle(ptr + 2, count + 1);
        FrameTimerWithArg(1, ptr, CloseLibraryWalls21);
    }
    else
    {
        LookWithAngle(ptr + 2, 0);
        WallClose(Wall(126, 178));
        WallClose(Wall(127, 177));
        FrameTimerWithArg(1, ptr, ResetLibraryHandle);
    }
}

void OpenLibraryWalls21(int ptr)
{
    int count = GetDirection(ptr + 2);

    if (count < 46)
    {
        if (count < 23)
        {
            MoveObject(ptr + 3, GetObjectX(ptr + 3) + 2.0, GetObjectY(ptr + 3) + 2.0);
            MoveObject(ptr + 4, GetObjectX(ptr + 4) + 2.0, GetObjectY(ptr + 4) + 2.0);
        }
        else
        {
            MoveObject(ptr + 3, GetObjectX(ptr + 3) - 2.0, GetObjectY(ptr + 3) + 2.0);
            MoveObject(ptr + 4, GetObjectX(ptr + 4) + 2.0, GetObjectY(ptr + 4) - 2.0);
        }
        LookWithAngle(ptr + 2, count + 1);
        FrameTimerWithArg(1, ptr, OpenLibraryWalls21);
    }
    else
    {
        LookWithAngle(ptr + 2, 0);
        FrameTimerWithArg(180, ptr, CloseLibraryWalls21);
        FrameTimerWithArg(180, ptr, CloseLibraryWalls2);
        WallOpen(Wall(126, 178));
        WallOpen(Wall(127, 177));
    }
}

void StartLibraryWallsHandler()
{
    int ptr = LbPtr;

    if (!GetDirection(ptr + 1))
    {
        LookWithAngle(ptr + 1, 1);
        FrameTimerWithArg(1, ptr, OpenLibraryWalls);
    }
}

void StartLibraryWallsHandler2()
{
    int ptr = LbPtr2;

    if (!GetDirection(ptr + 1))
    {
        LookWithAngle(ptr + 1, 1);
        FrameTimerWithArg(1, ptr, OpenLibraryWalls21);
        FrameTimerWithArg(1, ptr, OpenLibraryWalls2);
    }
}

void ClearWestNpcWalls()
{
    int i;

    if (MaxHealth(self))
    {
        Delete(self);
        for (i = 0 ; i < 15 ; i ++)
        {
            WallOpen(Wall(198 - i, 214 + i));
            WallBreak(Wall(199 - i, 215 + i));
        }
    }
    Delete(GetTrigger() + 1);
}

int WestWallClearMethod(int sLocation)
{
    int unit = CreateObject("Bomber", sLocation);

    Enchant(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)), "ENCHANT_RUN", 0.0);
    ObjectOff(unit);
    Damage(unit, 0, 100, -1);
    return unit;
}

void OpenFenceWalls()
{
    int i;

    for (i = 0 ; i < 5 ; i ++)
    {
        WallOpen(Wall(179 + i, 203 + i));
        WallOpen(Wall(173 + i, 207 - i));
        WallOpen(Wall(173 + i, 209 + i));
        WallOpen(Wall(179 + i, 213 - i));
    }
    SetCallback(WestWallClearMethod(112), 9, ClearWestNpcWalls);
}

int SummonFireSprite(int sUnit)
{
    int unit = CreateObjectAt("FireSprite", GetObjectX(sUnit), GetObjectY(sUnit));

    FireSpriteSubProcess(unit);
    return unit;
}

void FenceMobDead()
{
    LookWithAngle(LbCnt, GetDirection(LbCnt) - 1);
    SummonFireSprite(self);
    if (!GetDirection(LbCnt))
    {
        OpenFenceWalls();
        UniPrintToAll(MessageDesc(71));
    }
}

int HecubahOrbBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1969448264; arr[1] = 1332240738; arr[2] = 25202; arr[17] = 600; arr[19] = 110; 
		arr[21] = 1065353216; arr[23] = 65536; arr[24] = 1065353216; arr[26] = 4; arr[27] = 5; 
		arr[37] = 1952539972; arr[38] = 1818313320; arr[39] = 1634879084; arr[40] = 1852140903; arr[41] = 116; 
		arr[53] = 1133903872; arr[55] = 26; arr[56] = 36; arr[57] = 5547984; arr[58] = 5545616; 
		arr[60] = 1384; arr[61] = 46914560; 
		CancelTimer(FrameTimerWithArg(10, HecubahOrbBinTable, HecubahOrbBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

void HecubahOrbSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1079194419);
		SetMemory(ptr + 0x224, 1079194419);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 65536);
		SetMemory(GetMemory(ptr + 0x22c), 600);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 600);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, HecubahOrbBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 1065353216);
	}
}

int StrangePlant(int wp)
{
    int unit = CreateObject("HecubahWithOrb", wp);

    HecubahOrbSubProcess(unit);
    SetUnitScanRange(unit, 450.0);
    AggressionLevel(unit, 0.0);
    SetCallback(unit, 5, FenceMobDead);
    SetCallback(unit, 3, DefaultMobInitSight);
    SetCallback(unit, 10, HearAroundEnemy);
    return unit;
}

void LibraryFenceMob(int count)
{
    if (count >= 0)
    {
        StrangePlant(112);
        LookWithAngle(LbCnt, GetDirection(LbCnt) + 1);
        FrameTimerWithArg(1, count - 1, LibraryFenceMob);
    }
}

int PutSlideObelisk(int wp)
{
    int unit = CreateObject("BomberGenerator", wp);

    SetUnitMass(unit, 25.0);
    Enchant(unit, "ENCHANT_INVULNERABLE", 0.0);
    ObjectOff(unit);

    return unit;
}

void OpenEastLibrary()
{
    if (HasClass(other, "MONSTERGENERATOR"))
    {
        ObjectOff(self);

        MoveObject(other, GetObjectX(self), GetObjectY(self));
        Frozen(other, 1);
        GreenSparkFx(GetObjectX(self), GetObjectY(self));
        WallOpen(Wall(162, 190));
        WallOpen(Wall(161, 191));
        WallOpen(Wall(160, 192));
        FrameTimerWithArg(37, 208, RespectStrangeWizard);
        UniPrintToAll(MessageDesc(72));
    }
}

void OpenEastCastleWalls()
{
    ObjectOff(self);

    WallOpen(Wall(142, 132));
    WallOpen(Wall(141, 133));
    WallOpen(Wall(140, 134));
}

int CandleMob(int sLocation)
{
    int mob = CreateObject("TalkingSkull", sLocation);
    int img = CreateObjectAt("Candleabra5", GetObjectX(mob), GetObjectY(mob));

    TalkingSkull2SubProcess(mob);
    UnitNoCollide(img);
    FrameTimerWithArg(1, mob, MobCandleAttached);
    return mob;
}

void LibraryElevatorToggle()
{
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    AudioEvent("Gear2", 1);
    ObjectToggle(Object("LibraryElev"));
    ObjectToggle(Object("LibraryElvGear1"));
    ObjectToggle(Object("LibraryElvGear2"));
    ObjectOff(self);
    CandleMob(236);
    CandleMob(237);
    CandleMob(238);
    CreateObject("BearTrap", 239);
    CreateObject("BearTrap", 240);
    UniPrint(other, MessageDesc(27));
}

void TeleportToLocation()
{
    int dest = GetTrigger() + 1;

    if (CurrentHealth(other))
    {
        Effect("COUNTERSPELL_EXPLOSION", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        Effect("TELEPORT", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        Effect("SMOKE_BLAST", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        MoveObject(other, GetObjectX(dest), GetObjectY(dest));
        Effect("COUNTERSPELL_EXPLOSION", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        Effect("TELEPORT", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        Effect("SMOKE_BLAST", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
        DeleteObjectTimer(CreateObject("BlueRain", 1), 42);
        AudioEvent("BlindOff", 1);
    }
}

int TeleportMark(int src, int dest)
{
    int unit = CreateObject("WeirdlingBeast", src);

    SetUnitMaxHealth(unit, 10);
    Damage(unit, 0, MaxHealth(unit) + 1, -1);
    CreateObject("InvisibleLightBlueHigh", dest);
    Enchant(CreateObject("InvisibleLightBlueHigh", src), "ENCHANT_ANCHORED", 0.0);
    SetCallback(unit, 9, TeleportToLocation);
    return unit;
}

void InitLibraryPack()
{
    int alreadyRun;

    ObjectOff(self);
    if (!alreadyRun)
    {
        alreadyRun = PutSlideObelisk(113);
        LbPtr2 = LibraryBookcase2();
        LbPtr = LibraryBookcase();
        LbCnt = CreateObject("InvisibleLightBlueHigh", 112);
        TeleportMark(114, 115);
        TeleportMark(116, 117);
        FrameTimerWithArg(1, 6, LibraryFenceMob);
    }
}

void DunmirPicketDescInit()
{
    //TODO: 0 to 11
    int i;
    string desc =
    "날아올라~ 저 하늘 멋진 별이 될래요~ 깊은 밤 하늘의 빛이 되어 춤을 출거야~";
    "미안해 미안해 하지마 내가 초라해지잖아 빨간 예쁜입술로 어서 나를 죽이고 가 나는 괜찮아";
    "견찰서 가고싶어 이세끼야? 어?";
    "사랑스러운 게이~ 너는 나의 게이";
    "쪼끔만 더 밀어붙이면 우리가 이깁니다!!";
    "나를 따라하는 사람은 참 많아도 내가 따라하는 사람이란 없다고 there's no one like me";
    "누구나 그럴싸한 계획을 갖고있다. 처 맞기 전까지는";
    "인간의 욕심은 끝이없고, 똑같은 실수를 반복한다";
    "번번히 살려내지요?";
    "ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ";
    "403 호 돈갚아!!!";

    for (i = 0 ; i < 11 ; i ++)
        RegistSignMessage(Object("DunmirPick" + IntToString(i + 1)), ToStr(SToInt(desc) + Random(0, 11)));
}

int GetPlayerIndex(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        return GetMemory(GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x810);
    return -1;
}

void PlayerTeleportHandler(int idx, int unit)
{
    int arr[32];

    if (CurrentHealth(unit))
    {
        if (HasEnchant(unit, "ENCHANT_LIGHT"))
        {
            UniPrint(unit, MessageDesc(28));
            return;
        }
        if (IsVisibleTo(CampArea, unit))
        {
            if (IsObjectOn(arr[idx]))
            {
                PlayerTeleportAt(unit, GetObjectX(arr[idx]), GetObjectY(arr[idx]));
                UniPrint(unit, MessageDesc(29));
            }
            else
                UniPrint(unit, MessageDesc(30));
        }
        else
        {
            if (IsObjectOn(arr[idx]))
            {
                MoveObject(arr[idx], GetObjectX(unit), GetObjectY(unit));
            }
            else
            {
                arr[idx] = CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit));
                Enchant(arr[idx], "ENCHANT_ANCHORED", 0.0);
            }
            PlayerTeleportAt(unit, GetObjectX(CampArea), GetObjectY(CampArea));
            UniPrint(unit, MessageDesc(31));
            UniPrint(unit, MessageDesc(32));
        }
    }
}

void PlayerTeleportAt(int unit, float destX, float destY)
{
    Effect("TELEPORT", GetObjectX(unit), GetObjectY(unit), 0.0, 0.0);
    Effect("SMOKE_BLAST", GetObjectX(unit), GetObjectY(unit), 0.0, 0.0);
    MoveObject(unit, destX, destY);
    Effect("TELEPORT", GetObjectX(unit), GetObjectY(unit), 0.0, 0.0);
    Effect("SMOKE_BLAST", GetObjectX(unit), GetObjectY(unit), 0.0, 0.0);
    DeleteObjectTimer(CreateObjectAt("BlueRain", destX, destY), 25);
    Enchant(unit, "ENCHANT_LIGHT", 5.0);
}

int GetPlayerPtrByNetCode(int net)
{
	int k, plr_ptr = 0x62f9e4;

	for (k = 0 ; k < 32 ; k ++)
	{
		if (GetMemory(plr_ptr) ^ net)
			plr_ptr += 0x12dc;
		else
			return GetMemory(plr_ptr - 4);
	}
	return 0;
}

void ChatMessageHandler(int ptr)
{
	int ptr2 = GetPlayerPtrByNetCode(GetMemory(ptr + 0x290)), unit, pic = GetMemory(ptr);
    int idx;

	if (ptr2 && pic)
	{
        unit = GetMemory(ptr2 + 0x2c);
		idx = GetPlayerIndex(unit);
		if (!(pic ^ 0x2f002f))
		{
            if (GetMemory(ptr + 4) == 0x74)
                PlayerTeleportHandler(idx, unit);
			SetMemory(ptr, 0);
		}
	}
}

void ChatMessageLoop()
{
	int ptr = GetMemory(0x6f8ad0);

	while (ptr)
	{
		ChatMessageHandler(ptr);
		ptr = GetMemory(ptr + 0x2b0);
	}
	FrameTimer(10, ChatMessageLoop);
}

void HealingTarget(int ptr)
{
    int unit = GetOwner(ptr), count = GetDirection(ptr);

    if (CurrentHealth(unit) && count)
    {
        MoveObject(ptr, GetObjectX(unit), GetObjectY(unit));
        if (count % 2)
            RestoreHealth(unit, 1);
        LookWithAngle(ptr, count - 1);
        FrameTimerWithArg(1, ptr, HealingTarget);
    }
    else if (IsObjectOn(ptr))
        Delete(ptr);
}

void CureBeaconTouched()
{
    int ptr;

    if (CurrentHealth(other) && !HasEnchant(other, "ENCHANT_PROTECT_FROM_MAGIC"))
    {
        Enchant(other, "ENCHANT_PROTECT_FROM_MAGIC", 5.0);
        MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
        AudioEvent("LongBellsDown", 1);
        ptr = CreateObject("InvisibleLightBlueLow", 1);
        Enchant(ptr, "ENCHANT_RUN", 0.0);
        Enchant(ptr, "ENCHANT_SHIELD", 0.0);
        SetOwner(other, ptr);
        LookWithAngle(ptr, 150);
        FrameTimerWithArg(1, ptr, HealingTarget);
    }
}

int CureHPBeacon(int wp)
{
    int unit = CreateObject("WeirdlingBeast", wp);

    SetUnitMaxHealth(unit, 10);
    Enchant(CreateObject("InvisibleLightBlueLow", wp), "ENCHANT_RUN", 0.0);
    Enchant(unit + 1, "ENCHANT_SHIELD", 0.0);
    Enchant(unit + 1, "ENCHANT_ANCHORED", 0.0);
    Enchant(unit + 1, "ENCHANT_SLOWED", 0.0);
    Enchant(unit + 1, "ENCHANT_VAMPIRISM", 0.0);
    Enchant(unit + 1, "ENCHANT_PROTECT_FROM_ELECTRICITY", 0.0);
    Enchant(unit + 1, "ENCHANT_PROTECT_FROM_FIRE", 0.0);
    Enchant(unit + 1, "ENCHANT_PROTECT_FROM_POISON", 0.0);
    SetCallback(unit, 9, CureBeaconTouched);
    Damage(unit, 0, MaxHealth(unit) + 1, -1);
    DrawImageAt(LocationX(wp), LocationY(wp), 1430);
    return unit;
}

void PowerItemBeacon()
{
    int res;

    if (GetGold(other) >= 3000)
    {
        res = InvincibleInventoryItem(other);
        if (res)
        {
            ChangeGold(other, -3000);
            UniPrint(other, MessageDesc(33) + IntToString(res) + MessageDesc(34));
        }
        else
            UniPrint(other, MessageDesc(35));
    }
    else
        UniPrint(other, MessageDesc(36));
}

int BeaconCreate(float sX, float sY, int sFunc)
{
    int bc = CreateObjectAt("Ankh", sX, sY);
    int ptr = GetMemory(0x750710);
    
    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, sFunc);
    return bc;
}

int ImportUniChatCore()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0xC0685657; arr[1] = 0x6800528A; arr[2] = 0x00507250; arr[3] = 0x8B2414FF; arr[4] = 0x2414FFF8;
        arr[5] = 0x14FFF08B; arr[6] = 0x56505724; arr[7] = 0x102454FF; arr[8] = 0x5E14C483; arr[9] = 0x9090C35F;
        CancelTimer(FrameTimerWithArg(10, ImportUniChatCore, ImportUniChatCore));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniChatCore(int plrPtr, int sPtr, int sTime)
{
    int temp = GetMemory(0x5c3320);

    SetMemory(0x5c3320, ImportUniChatCore());
    GroupRunAway(sPtr, plrPtr, sTime);
    SetMemory(0x5c3320, temp);
}

int ImportUniPrintCore()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x9EB06856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x502414FF;
        arr[5] = 0x2454FF56; arr[6] = 0x10C4830C; arr[7] = 0x9090C35E; 
        CancelTimer(FrameTimerWithArg(10, ImportUniPrintCore, ImportUniPrintCore));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniPrintCore(int plrPtr, int sPtr)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportUniPrintCore());
    Unused5a(sPtr, plrPtr);
    SetMemory(0x5c31f4, temp);
}

int GetByteValue(int ptr)
{
    return GetMemory(ptr) & 0xff;
}

void WriteAddressWordValue(int addr, int word)
{
    int temp = GetMemory(addr) & 0xffff0000;
    SetMemory(addr, temp | word);
}

void NoxUtf8ToUnicode(int src, int dest)
{
    int i = 0, byt;

    while (1)
    {
        byt = GetByteValue(src + i);
        if (!byt) break;
        if (!(byt & 0x80))
        {
            WriteAddressWordValue(dest, byt);
            i ++;
        }
        else if ((byt & 0xe0) == 0xc0)
        {
            WriteAddressWordValue(dest, ((byt & 0x1f) <<6) | (GetByteValue(src + i + 1) & 0x3f));
            i += 2;
        }
        else if ((byt & 0xf0) == 0xe0)
        {
            WriteAddressWordValue(dest, ((byt & 0xf) << 12) | ((GetByteValue(src + i + 1) & 0x3f) << 6) | (GetByteValue(src + i + 2) & 0x3f));
            i += 3;
        }
        dest += 2;
    }
    WriteAddressWordValue(dest, 0);
}

void UniPrint(int sUnit, string sMsg)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
        {
            CancelTimer(FrameTimerWithArg(10, UniPrint, UniPrint));
            link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        }
        NoxUtf8ToUnicode(str, link + 8);
        UniPrintCore(ptr, link + 8);
    }
}

void UniChatMessage(int sUnit, string sMsg, int duration)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
        {
            CancelTimer(FrameTimerWithArg(10, UniChatMessage, UniChatMessage));
            link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        }
        NoxUtf8ToUnicode(str, link + 12);
        UniChatCore(ptr, link + 12, duration);
    }
}

void UniPrintToAll(string sMsg)
{
    int wDest[200];
    int plrPtr = 0x62f9e0, link, str = SToInt(sMsg), i;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, UniPrint, UniPrint));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c)) + 4;
    }
    str = GetMemory(0x97bb40 + (str * 4));
    NoxUtf8ToUnicode(str, link);
    for (i = 0 ; i < 32 ; i ++)
    {
        if (GetMemory(plrPtr))
            UniPrintCore(GetMemory(plrPtr), link);
        plrPtr += 0x12dc;
    }
}

int MathAbs(int num)
{
    if (num < 0)
        num = -num;
    return num;
}

int CheckSignDelay(int sPtr, int gap)
{
    int cFps = GetMemory(0x84ea04);

    if (MathAbs(cFps - GetMemory(sPtr)) > gap)
    {
        SetMemory(sPtr, cFps);
        return 1;
    }
    return 0;
}

void SignNotification()
{
    int otPtr = GetMemory(0x979720), sePtr = GetMemory(0x979724);

    if (otPtr && sePtr)
    {
        if (CheckSignDelay(GetMemory(sePtr + 0x2e0) + 100, 60))
        {
            UniPrint(other, ToStr(GetMemory(sePtr + 0x2f0)));
            //UniPrintCore(otPtr, GetMemory(sePtr + 0x2e0));
        }
    }
}

void RegistSignMessage(int sUnit, string sMsg)
{
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg);

    if (ptr)
    {
        SetMemory(ptr + 0x2f0, str);
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, SignNotification);
    }
}

int ImportUniBroadcast()
{
    int arr[6], link;

    if (!link)
    {
        arr[0] = 0x4D9FD068; arr[1] = 0x72506800; arr[2] = 0x14FF0050; arr[3] = 0x106A5024;
        arr[4] = 0x0C2454FF; arr[5] = 0xC310C483;
        CancelTimer(FrameTimerWithArg(10, ImportUniBroadcast, ImportUniBroadcast));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniBroadcast(string sMsg)
{
    int wDest[100];
    int temp = GetMemory(0x5c3108), link, str = GetMemory(0x97bb40 + (SToInt(sMsg) * 4));

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, UniBroadcast, UniBroadcast));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    NoxUtf8ToUnicode(str, link + 4);
    SetMemory(0x5c3108, ImportUniBroadcast());
    Unused1f(link + 4);
    SetMemory(0x5c3108, temp);
}

int ImportUseItemFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x1424748B; arr[3] = 0x18246C8B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUseItemFunc, ImportUseItemFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int ImportUnitCollideFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x14246C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUnitCollideFunc, ImportUnitCollideFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int GetUnit1C(int sUnit)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        return GetMemory(ptr + 0x1c);
    return 0;
}

void SetUnit1C(int sUnit, int sData)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        SetMemory(ptr + 0x1c, sData);
}

int ImportPlaySoundAround()
{
	int arr[17], link;

	if (!link)
	{
		arr[0] = 0x50196068; arr[1] = 0x72506800; arr[2] = 0x50560050; arr[3] = 0x082454FF;
		arr[4] = 0x54FFF08B; arr[5] = 0x006A0824; arr[6] = 0x5650006A; arr[7] = 0x1C2454FF;
		arr[8] = 0x5810C483; arr[9] = 0x08C4835E; arr[10] = 0x909090C3;
		CancelTimer(FrameTimerWithArg(10, ImportPlaySoundAround, ImportPlaySoundAround));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

void PlaySoundAround(int sUnit, int sNumber)
{
	int unitPtr = UnitToPtr(sUnit), temp = GetMemory(0x5c325c);

	if (unitPtr)
	{
		SetMemory(0x5c325c, ImportPlaySoundAround());
		Unused74(unitPtr, sNumber);
		SetMemory(0x5c325c, temp);
	}
}

void DestroyWallAtUnitPos(int sUnit)
{
    int xPos = FloatToInt(GetObjectX(sUnit)), yPos = FloatToInt(GetObjectY(sUnit));
    int spX, spY, tx, ty, rx;

    if (xPos > yPos) xPos += 23;
    else             yPos += 23;
    spX = (xPos + yPos - 22) / 46;
    spY = (xPos - yPos) / 46;
    tx = spX * 46;
    ty = spY * 46;
    rx = (tx + ty) / 2;
    WallBreak(Wall(rx / 23, (rx - ty) / 23));
}

void PixieCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, owner, 125, 1);
            Enchant(other, "ENCHANT_CHARMING", 0.3);
            Effect("YELLOW_SPARKS", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
            break;
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int MissilePixie(float sX, float sY, int sOwner)
{
    int mis = CreateObjectAt("Pixie", sX, sY);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2e8, 5483536); //projectile update
    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, PixieCollide);
    SetOwner(sOwner, mis);
    return mis;
}

void WandUsePixieShot(int sOwner)
{
    int mis = MissilePixie(GetObjectX(sOwner) + UnitAngleCos(sOwner, 13.0), GetObjectY(sOwner) + UnitAngleSin(sOwner, 13.0), sOwner);

    PushObject(mis, 33.0, GetObjectX(sOwner), GetObjectY(sOwner));
}

void Wand1UseHandler()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self);

    if (MathAbs(cFps - cTime) < 20)
        return;
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        WandUsePixieShot(other);
        PlaySoundAround(other, 520);
    }
}

int SummonMagicOrbStaff1(float sX, float sY, int sOwner)
{
    int staff = CreateObjectAt("OblivionOrb", sX, sY);
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, Wand1UseHandler);
        SetMemory(ptr + 0x2c4, 0x53a720);
        SetMemory(ptr + 0x2c8, ImportAllowAllDrop());
        SetOwner(sOwner, staff);
        Enchant(staff, "ENCHANT_VAMPIRISM", 0.0);
    }
    return staff;
}

void TradeMagicOrbStaff1()
{
    int initPos = GetOwner(self), staff;

    if (IsObjectOn(initPos))
    {
        if (GetGold(other) >= 20000)
        {
            ChangeGold(other, -20000);
            FrameTimerWithArg(1, SummonMagicOrbStaff1(GetObjectX(other), GetObjectY(other), other), DelayGiveItemToOwner);
            UniPrint(other, MessageDesc(37));
        }
        else
        {
            UniPrint(other, MessageDesc(38));
        }
        MoveObject(other, GetObjectX(initPos), GetObjectY(initPos));
    }
}

void TradeWizardStaff()
{
    int initPos = GetOwner(self), staff;

    if (IsObjectOn(initPos))
    {
        if (GetGold(other) >= 50000)
        {
            ChangeGold(other, -50000);
            staff = MagicStaffClassCreate(other);
            SetOwner(other, staff);
            FrameTimerWithArg(1, staff, DelayForcePickItemToOwner);
            UniPrint(other, MessageDesc(39));
        }
        else
            UniPrint(other, MessageDesc(40));
        MoveObject(other, GetObjectX(initPos), GetObjectY(initPos));
    }
}

void TradeForceOfStaff()
{
    int initPos = GetOwner(self), staff;

    if (IsObjectOn(initPos))
    {
        if (GetGold(other) >= 35000)
        {
            ChangeGold(other, -35000);
            staff = ForceOfNatureStaffCreate(other);
            SetOwner(other, staff);
            FrameTimerWithArg(1, staff, DelayForcePickItemToOwner);
            UniPrint(other, MessageDesc(41));
        }
        else
            UniPrint(other, MessageDesc(42));
        MoveObject(other, GetObjectX(initPos), GetObjectY(initPos));
    }
}

void TradeMeteorWand()
{
    int initPos = GetOwner(self), staff;

    if (IsObjectOn(initPos))
    {
        if (GetGold(other) >= 20000)
        {
            ChangeGold(other, -20000);
            staff = MeteorWandClassCreate(other);
            SetOwner(other, staff);
            FrameTimerWithArg(1, staff, DelayForcePickItemToOwner);
            UniPrint(other, MessageDesc(43));
        }
        else
            UniPrint(other, MessageDesc(44));
        MoveObject(other, GetObjectX(initPos), GetObjectY(initPos));
    }
}

void TradeAllEnchants()
{
    int plr = CheckPlayer(), initPos = GetOwner(self);

    if (IsObjectOn(initPos))
    {
        if (plr + 1)
        {
            if (GetGold(other) >= 20000)
            {
                if (PlayerClassGetFlag2(plr))
                    UniPrint(other, MessageDesc(45));
                else
                {
                    ChangeGold(other, -20000);
                    PlayerClassSetFlag2(plr);
                    AlwaysAllEnchantments(plr);
                    UniPrint(other, MessageDesc(46));
                }
            }
            else
                UniPrint(other, MessageDesc(47));
        }
        MoveObject(other, GetObjectX(initPos), GetObjectY(initPos));
    }
}

void TradeAdvancedHarpoon()
{
    int plr = CheckPlayer(), initPos = GetOwner(self);

    if (IsObjectOn(initPos))
    {
        if (plr + 1)
        {
            if (GetGold(other) >= 30000)
            {
                if (PlayerClassGetHarpoonFlag(plr))
                    UniPrint(other, MessageDesc(48));
                else
                {
                    ChangeGold(other, -30000);
                    PlayerClassSetHarpoonFlag(plr);
                    UniPrint(other, MessageDesc(49));
                }
            }
            else
                UniPrint(other, MessageDesc(50));
        }
        MoveObject(other, GetObjectX(initPos), GetObjectY(initPos));
    }
}

int ImportWeaponHitFunc()
{
    int arr[9], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x8B565000; arr[2] = 0x8B102474; arr[3] = 0x0002FC86;
        arr[4] = 0x006A5600; arr[5] = 0x2454FF50; arr[6] = 0x0CC48314; arr[7] = 0xC483585E;
        arr[8] = 0x9090C304;
        CancelTimer(FrameTimerWithArg(10, ImportWeaponHitFunc, ImportWeaponHitFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int ImportGreenExplosionFunc()
{
    int arr[17], ptr, link;
    if (!arr[0])
    {
        arr[0] = 0x32006856; arr[1] = 0x50680052; arr[2] = 0x68005072; arr[3] = 0x00403560; arr[4] = 0x54FF086A;
		arr[5] = 0xC4830424; arr[6] = 0xFFF08B04; arr[7] = 0x89042454; arr[8] = 0x2454FF06; arr[9] = 0x04468904;
		arr[10] = 0x0000C868; arr[11] = 0x54FF5600; arr[12] = 0xC4831024; arr[13] = 0x425D6814; arr[14] = 0xFF560040;
		arr[15] = 0x83042454; arr[16] = 0xC35E08C4; 
        CancelTimer(FrameTimerWithArg(10, ImportGreenExplosionFunc, ImportGreenExplosionFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void GreenExplosion(float x, float y)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportGreenExplosionFunc());
    Unused5a(ToInt(y), ToInt(x));
    SetMemory(0x5c31f4, temp);
}

void HammerSplash()
{
    int owner = GetOwner(self);

    if (CurrentHealth(owner) && CurrentHealth(other) && IsAttackedBy(other, owner))
    {
        Damage(other, owner, 100, 1);
        Enchant(other, "ENCHANT_HELD", 1.0);
    }
}

void HammerHitting()
{
    int owner = GetOwner(self), unit;

    if (MaxHealth(self) ^ CurrentHealth(self))
        RestoreHealth(self, MaxHealth(self) - CurrentHealth(self));
    if (CurrentHealth(owner))
    {
        unit = CreateObjectAt("ForceOfNatureCharge", GetObjectX(owner) + UnitAngleCos(owner, 27.0), GetObjectY(owner) + UnitAngleSin(owner, 27.0));
        SetOwner(owner, SpawnDummyUnitAt("Troll", unit));
        SetCallback(unit + 1, 9, HammerSplash);
        GreenExplosion(GetObjectX(unit), GetObjectY(unit));
        DeleteObjectTimer(unit, 21);
        DeleteObjectTimer(unit + 1, 1);
    }
}

int PowerHammerPlacing(int sOwner)
{
    int unit = CreateObjectAt("WarHammer", GetObjectX(sOwner), GetObjectY(sOwner));
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(ptr + 0x2d0, ImportWeaponHitFunc());
        SetMemory(ptr + 0x2fc, HammerHitting);
        SetOwner(sOwner, unit);
        LookWithAngle(unit, 255);
        UnitSetEnchantTime(unit, 11, 0);
    }
    return unit;
}

void TradePowerHammer()
{
    int initPos = GetOwner(self);

    if (IsObjectOn(initPos))
    {
        if (GetGold(other) >= 25000)
        {
            ChangeGold(other, -25000);
            FrameTimerWithArg(1, PowerHammerPlacing(other), DelayGiveItemToOwner);
            UniPrint(other, MessageDesc(51));
        }
        else
            UniPrint(other, MessageDesc(52));
        MoveObject(other, GetObjectX(initPos), GetObjectY(initPos));
    }
}

void TradeFastHealing()
{
    int initPos = GetOwner(self), plr = CheckPlayer();

    if (IsObjectOn(initPos))
    {
        if (plr + 1)
        {
            if (GetGold(other) >= 15000)
            {
                if (PlayerClassGetFastHealFlag(plr))
                    UniPrint(other, MessageDesc(53));
                else
                {
                    PlayerClassSetFastHealFlag(plr);
                    ChangeGold(other, -15000);
                    UniPrint(other, MessageDesc(54));
                }
            }
            else
                UniPrint(other, MessageDesc(55));
        }
        MoveObject(other, GetObjectX(initPos), GetObjectY(initPos));
    }
}

void ChakramCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, owner, 220, 16);
            Effect("DAMAGE_POOF", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int SingleRingArrow(float sX, float sY, int sOwner)
{
    int unit = CreateObjectAt("RoundChakramInMotion", sX, sY);
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(ptr + 0x2e8, 5483536); //projectile update
        SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
        SetMemory(ptr + 0x2fc, ChakramCollide);
        SetOwner(sOwner, unit);
    }
    return unit;
}

void CastArrowRing(int sOwner)
{
    float xProfile = GetObjectX(sOwner), yProfile = GetObjectY(sOwner);
    int i;

    if (CurrentHealth(sOwner))
    {
        for (i = 0 ; i < 36 ; i ++)
            PushObject(SingleRingArrow(xProfile + MathSine(i * 10 + 90, 13.0), yProfile + MathSine(i * 10, 13.0), sOwner), 33.0, xProfile, yProfile);
    }
}

void UseKingsAmulet()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self);

    if (MathAbs(cFps - cTime) < 120)
    {
        UniPrint(other, MessageDesc(56));
        return;
    }
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        FrameTimerWithArg(1, GetCaller(), CastArrowRing);
        PlaySoundAround(other, 560);
    }
}

int SummonKingsAmulet(int sOwner)
{
    int unit = CreateObjectAt("AmuletofCombat", GetObjectX(sOwner), GetObjectY(sOwner));
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, UseKingsAmulet);
        Enchant(unit, "ENCHANT_INFRAVISION", 0.0);
        SetOwner(sOwner, unit);
    }
    return unit;
}

void TradeKingsAmulet()
{
    int initPos = GetOwner(self);

    if (IsObjectOn(initPos))
    {
        if (GetGold(other) >= 30000)
        {
            FrameTimerWithArg(1, SummonKingsAmulet(other), DelayGiveItemToOwner);
            ChangeGold(other, -30000);
            UniPrint(other, MessageDesc(57));
            UniPrint(other, MessageDesc(58));
        }
        else
            UniPrint(other, MessageDesc(59));
        MoveObject(other, GetObjectX(initPos), GetObjectY(initPos));
    }
}

void PlacingSpecialMarketBeacon()
{
    int unit = CreateObject("InvisibleLightBlueLow", 171);

    CancelTimer(FrameTimerWithArg(10, TradeMagicOrbStaff1, TradeMagicOrbStaff1));
    SetOwner(unit, BeaconCreate(GetWaypointX(170), GetWaypointY(170), GetMemory(GetMemory(0x83395c) + 8)));
    CancelTimer(FrameTimerWithArg(10, TradeAllEnchants, TradeAllEnchants));
    SetOwner(unit, BeaconCreate(GetWaypointX(197), GetWaypointY(197), GetMemory(GetMemory(0x83395c) + 8)));
    CancelTimer(FrameTimerWithArg(10, TradePowerHammer, TradePowerHammer));
    SetOwner(unit, BeaconCreate(GetWaypointX(198), GetWaypointY(198), GetMemory(GetMemory(0x83395c) + 8)));
    CancelTimer(FrameTimerWithArg(10, TradeFastHealing, TradeFastHealing));
    SetOwner(unit, BeaconCreate(GetWaypointX(199), GetWaypointY(199), GetMemory(GetMemory(0x83395c) + 8)));
    CancelTimer(FrameTimerWithArg(10, TradeKingsAmulet, TradeKingsAmulet));
    SetOwner(unit, BeaconCreate(GetWaypointX(200), GetWaypointY(200), GetMemory(GetMemory(0x83395c) + 8)));
    CancelTimer(FrameTimerWithArg(10, TradeAdvancedHarpoon, TradeAdvancedHarpoon));
    SetOwner(unit, BeaconCreate(GetWaypointX(201), GetWaypointY(201), GetMemory(GetMemory(0x83395c) + 8)));
    CancelTimer(FrameTimerWithArg(10, TradeWizardStaff, TradeWizardStaff));
    SetOwner(unit, BeaconCreate(GetWaypointX(209), GetWaypointY(209), GetMemory(GetMemory(0x83395c) + 8)));
    CancelTimer(FrameTimerWithArg(10, TradeMeteorWand, TradeMeteorWand));
    SetOwner(unit, BeaconCreate(GetWaypointX(210), GetWaypointY(210), GetMemory(GetMemory(0x83395c) + 8)));
    CancelTimer(FrameTimerWithArg(10, TradeForceOfStaff, TradeForceOfStaff));
    SetOwner(unit, BeaconCreate(GetWaypointX(211), GetWaypointY(211), GetMemory(GetMemory(0x83395c) + 8)));
    TeleportMark(172, 171);
    TeleportMark(173, 12);
    TeleportMark(195, 12);
    TeleportMark(196, 12);
    UniPrintToAll(MessageDesc(73));
}

int MapWaypointTable(int idx)
{
    int table[600];

    return table[idx - 1];
}

float LocationX(int location)
{
    StopScript(GetMemory(MapWaypointTable(location) + 8));
}

float LocationY(int location)
{
    StopScript(GetMemory(MapWaypointTable(location) + 12));
}

void TeleportLocationVector(int location, float xVect, float yVect)
{
    int wTable = MapWaypointTable(location);

    SetMemory(wTable + 8, ToInt(ToFloat(GetMemory(wTable + 8)) + xVect));
    SetMemory(wTable + 12, ToInt(ToFloat(GetMemory(wTable + 12)) + yVect));
}

void MapWaypointFill(int wAddr, int tPtr)
{
    int num;

    if (wAddr)
    {
        num = GetMemory(wAddr);
        SetMemory(tPtr + (num * 4), wAddr);
        MapWaypointFill(GetMemory(wAddr + 484), tPtr);
    }
}

void MapWaypointInit()
{
    int tableLink;

    CancelTimer(FrameTimerWithArg(10, MapWaypointTable, MapWaypointTable));
    tableLink = GetMemory(GetMemory(0x75ae28) + ((0x30 * GetMemory(GetMemory(0x83395c) + 8)) + 0x1c));
    MapWaypointFill(GetMemory(0x83c7fc), tableLink);
}

void MapSignInit(int langCheck)
{
    if (!langCheck)
    {
        MapSignInitEng();
        return;
    }
    RegistSignMessage(Object("UniSign1"), "대형마트 습격하기: 이마트를 털어라!");
    RegistSignMessage(Object("UniSign2"), "스페셜 샵 입장하는 곳!: 앵크를 만지면 스페셜 샵으로 들어갈 수 있어요");
    RegistSignMessage(Object("UniSign3"), "스페셜 샵에서 나가려면 좀더 앞으로 나오세요");
    RegistSignMessage(Object("UniSign4"), "마법 이펙트 위에 서 있으면 체력이 서서히 오르기 시작할 거에요");
    RegistSignMessage(Object("UniSign5"), "빨간색 열쇠꽂이와 파란색 열쇠꽂이 각각에 해당하는 열쇠를 가져와 꽂으세요");
    RegistSignMessage(Object("UniSign6"), "주변에서 수상한 냄새가 난다... 기분이 뭔가 좋지않아!");
    RegistSignMessage(Object("UniSign7"), "지하 대도서관: 제발 좀 문 팍열고 나가지 마요... 여기엔 적군이 많으니 살살좀... 진짜 ㅡㅡ");
    RegistSignMessage(Object("UniSign8"), "여기 부터는 문학소설 코너");
    RegistSignMessage(Object("UniSign9"), "게임 꿀팁- 리치아이돌 키 이 방 끝에 있어요! 어때요? 개 꿀팁 인정? 어 인정ㅋ");
    RegistSignMessage(Object("UniSign10"), "준코: -청소년 출입금지-");
    RegistSignMessage(Object("UniSign11"), "지하 대도서관으로 내려가는 엘리베이터 입니다. 적 수가 많아 위험할 수 있으니 뛰어들어가지 마세요");
    RegistSignMessage(Object("UniSign12"), "몬스터 소환오벨리스크를 비콘위에 올리면 10시방향 비밀벽이 열려요. 안열리면 버그임");
    RegistSignMessage(Object("UniSign13"), "총독관 대 회의실: 마음에 준비는 단단히 했겠지?");
    RegistSignMessage(Object("UniSign14"), "개꿀팁 드림: 채팅에 '//t' 라고 치면 마을로 공간이동. 마을에서 치면 필드로 되돌아감");
    RegistSignMessage(Object("UniSign15"), "유용한 게임 명령어 '//t' 를 채팅입력 시 마을로 공간이동됩니다. 마을에 있으면 필드로 되돌아 갑니다");
    RegistSignMessage(Object("UniSign16"), "이 엘리베이터를 작동 시킬 스위치는 철문 안쪽 방에 있어요");
    RegistSignMessage(Object("UniSign17"), "도서관 지하2층- 어둠의 현관");

    RegistSignMessage(Object("ShopSign1"), "작살 업글(3만골드): 작살이 유닛에 부착될 때 폭발을 일으킵니다");
    RegistSignMessage(Object("ShopSign2"), "마법의 지팡이(2만골드): 마법의 관통화살을 뿜어내는 요술 지팡이!");
    RegistSignMessage(Object("ShopSign3"), "올 엔첸 능력 배우기(2만골드): 속성저항 및 흡혈 등의 유용한 속성을 항상 적용시켜줍니다");
    RegistSignMessage(Object("ShopSign4"), "초강력 뿅망치(25000골드): 일반 해머보다는 더 강력한 해머 입니다");
    RegistSignMessage(Object("ShopSign5"), "패스트힐링 능력 배우기(15000골드): 체력회복 속도를 증가시켜줍니다");
    RegistSignMessage(Object("ShopSign6"), "전투의 목걸이(3만 골드): 목걸이를 사용할 때마다 특수한 마법이 시전됩니다");
    RegistSignMessage(Object("ShopSign7"), "리치 돌진 지팡이(5만 골드): 말이 필요없는 강력한 지팡이");
    RegistSignMessage(Object("ShopSign8"), "메테오 완드 구입(20000 골드): 타게팅 위치에 메테오 시전");
    RegistSignMessage(Object("ShopSign9"), "포스 오브 네이처 지팡이(35000 골드): 소환술사가 사용했던 포오네 지팡이와 효과가 같습니다");
    RegistSignMessage(Object("ShopSignA"), "인벤토리에 있는 모든 아이템을 무적으로 만들어드려요 (1회당 3천골드)");
}

void MapSignInitEng()
{
    RegistSignMessage(Object("UniSign1"), "Invading the Wall Mart: Rob Rob!");
    RegistSignMessage(Object("UniSign2"), "Special shop enterance: Touch the ankh to get in");
    RegistSignMessage(Object("UniSign3"), "Come closer to get out of the shop");
    RegistSignMessage(Object("UniSign4"), "Once you stand on the magical effect it would gradually restore your health");
    RegistSignMessage(Object("UniSign5"), "Put the right colored keys on each key hole");
    RegistSignMessage(Object("UniSign6"), "I smell something suspicious, not feeling well");
    RegistSignMessage(Object("UniSign7"), "Underground Library: Don't rush to the door and be patient, or you'll be ambushed by neumerous enemies all of a sudden");
    RegistSignMessage(Object("UniSign8"), "From here is the literary novels");
    RegistSignMessage(Object("UniSign9"), "Big spoiler; An Idol key is likely to be at the end of chamber. Have some gratitude for me!");
    RegistSignMessage(Object("UniSign10"), "Not allowed for juvenile");
    RegistSignMessage(Object("UniSign11"), "Elevator down to underground library; Don't rush unless if you want to be enclosed by ferocious enemies");
    RegistSignMessage(Object("UniSign12"), "Put an summoning obleisk to the pressure plate, it will show you the way on 10'o clock, or report me");
    RegistSignMessage(Object("UniSign13"), "Governor's conference room: Make sure you are ready!");
    RegistSignMessage(Object("UniSign14"), "Tip: Enter '//t' on chat, you'll be teleported to the start point, as well as saving current position. Chat again and you go back to the saved point");
    RegistSignMessage(Object("UniSign15"), "Typing command line '//t' on chat makes you to teleport to the start point. If is done on start point, would be teleported to the previous point again");
    RegistSignMessage(Object("UniSign16"), "The activation switch for this elevator is on the chamber over the iron fence");
    RegistSignMessage(Object("UniSign17"), "Library -B2-");

    RegistSignMessage(Object("ShopSign1"), "Enhance Harpoon(30000Gold)): Cause an explosion when harpoon gets to the enemy units");
    RegistSignMessage(Object("ShopSign2"), "Magical Wand(20000Gold): This wand launches magical arrows!");
    RegistSignMessage(Object("ShopSign3"), "All useful enchants(20000Gold): Gives you protection and vampirism enchants permanently");
    RegistSignMessage(Object("ShopSign4"), "Supa Dupa Warhammer(25000Gold): Much more powerful than ordinary warhammers");
    RegistSignMessage(Object("ShopSign5"), "Fast healing ability(15000Gold): Speeds up regeneration");
    RegistSignMessage(Object("ShopSign6"), "Amulet of Combat(30000Gold): By clicking some kinda spells would be casted");
    RegistSignMessage(Object("ShopSign7"), "Lich charging wand50000Gold): Needless to say, just try");
    RegistSignMessage(Object("ShopSign8"), "Meteor wand(20000Gold): Cast meteor spell on target position");
    RegistSignMessage(Object("ShopSign9"), "Force of Nature staff(35000 Gold): Literally FON staff of orignial");
    RegistSignMessage(Object("ShopSignA"), "Make all items on inventory to be invincible(3000Gold each)");
}

void ResetHostileCritter()
{
	SetMemory(0x833e64, 0x55b);		//CarnivorousPlant
	SetMemory(0x833e70, 1329);		//FishBig
	SetMemory(0x833e74, 1330);		//FishSmall
	SetMemory(0x833e78, 1359);		//Rat
	SetMemory(0x833e7c, 1313);		//GreenFrog
}

void SetHostileCritter()
{
	SetMemory(0x833e64, 0x540);		//CarnivorousPlant
	SetMemory(0x833e70, 0x540);		//FishBig
	SetMemory(0x833e74, 0x540);		//FishSmall
	SetMemory(0x833e78, 0x540);		//Rat
	SetMemory(0x833e7c, 0x540);		//GreenFrog
}

int ImportPlayerAutoTeamSign()
{
    int arr[17], link;

    if (!link)
    {
        arr[0] = 0x4191D068; arr[1] = 0x50515600; arr[2] = 0x000020B9; arr[3] = 0xF9E0B800; arr[4] = 0xC9850062;
        arr[5] = 0x8B492774; arr[6] = 0x12DC0530; arr[7] = 0xF6850000; arr[8] = 0x5150F074; arr[9] = 0x8D24468B;
        arr[10] = 0x016A304E; arr[11] = 0x51016A50; arr[12] = 0x54FF016A; arr[13] = 0xC4832824; arr[14] = 0xEB585914;
        arr[15] = 0x5E5958D5; arr[16] = 0xC304C483;
        link = GetScrDataField(ImportPlayerAutoTeamSign);
    }
    return link;
}

void PlayerAutoTeamSign()
{
    int temp = GetMemory(0x5c31cc);

    SetMemory(0x5c31cc, ImportPlayerAutoTeamSign());
    Unused50();
    SetMemory(0x5c31cc, temp);
}

void MakeCoopTeam()
{
    int arr[3];
    int teamCount = GetMemory(0x654D5C), temp, link;

    if (!teamCount && !link)
    {
        arr[0] = 0x417E1068; arr[1] = 0x2414FF00; arr[2] = 0xC304C483;
        link = GetScrDataField(MakeCoopTeam);
        temp = GetMemory(0x5c31cc);
        SetMemory(0x5c31cc, link);
        Unused50();
        SetMemory(0x5c31cc, temp);
        SetMemory(0x5d53a4, 268640519);
    }
}

void RemoveCoopTeamMode()
{
    int arr[6], link, temp;

    if (!link && GetMemory(0x654d5c) == 1)
    {
        arr[0] = 0x4DB8BE56; arr[1] = 0x20680065; arr[2] = 0x6A00418F; arr[3] = 0x54FF5600; arr[4] = 0xC4830824; arr[5] = 0x90C35E0C;
        link = GetScrDataField(RemoveCoopTeamMode);
        temp = GetMemory(0x5c31cc);
        SetMemory(0x5c31cc, link);
        Unused50();
        SetMemory(0x5c31cc, temp);
    }
}

void SetGameTypeCoopMode()
{
    MakeCoopTeam();
    PlayerAutoTeamSign();
}

int WizardBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1635412311; arr[1] = 25714; arr[17] = 425; arr[19] = 50; arr[23] = 34816; 
		arr[24] = 1067869798; arr[26] = 4; arr[28] = 1103626240; arr[29] = 50; arr[32] = 15; 
		arr[33] = 31; arr[53] = 1128792064; arr[54] = 4; arr[59] = 5542432; arr[60] = 1327; 
		arr[61] = 46910208; 
		CancelTimer(FrameTimerWithArg(10, WizardBinTable, WizardBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

void WizardSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1069547520);
		SetMemory(ptr + 0x224, 1069547520);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 34816);
		SetMemory(GetMemory(ptr + 0x22c), 425);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 425);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, WizardBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 0);
	}
}

void DisableObject(int sUnit)
{
    if (IsObjectOn(sUnit))
        ObjectOff(sUnit);
}

void LibraryExitElevInit()
{
    int elev = Object("LibraryElev");

    ObjectOn(elev);
    FrameTimerWithArg(25, elev, DisableObject);
}

void GolemIsDead()
{
    CreateRewardItem(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(self), GetObjectY(self)));
    UniChatMessage(self, MessageDesc(17), 90);
}

void HorrorGolemSummon(int sUnit)
{
    int unit;

    if (IsObjectOn(sUnit))
    {
        unit = CreateObjectAt("StoneGolem", GetObjectX(sUnit), GetObjectY(sUnit));

        SetUnitMaxHealth(unit, 1050);
        SetCallback(unit, 5, GolemIsDead);
        SetCallback(unit, 7, FieldMobHurtHandler);
        UniChatMessage(unit, MessageDesc(18), 180);
        Delete(sUnit);
    }
}

void StrangeWizDead()
{
    int mobMake = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(self), GetObjectY(self));

    UniChatMessage(mobMake, MessageDesc(19), 90);
    DeleteObjectTimer(self, 90);
    FrameTimerWithArg(79, mobMake, HorrorGolemSummon);
}

void SummonStrangeWizard(int sUnit)
{
    int wiz;
    
    if (IsObjectOn(sUnit))
    {
        wiz = CreateObjectAt("Wizard", GetObjectX(sUnit), GetObjectY(sUnit));
        WizardSubProcess(wiz);
        SetCallback(wiz, 3, DefaultMobInitSight);
        SetCallback(wiz, 7, FieldMobHurtHandler);
        SetCallback(wiz, 10, HearAroundEnemy);
        SetUnitScanRange(wiz, 450.0);
        AggressionLevel(wiz, 0.5);
        SetCallback(wiz, 5, StrangeWizDead);
        Delete(sUnit);
    }
}

void RespectStrangeWizard(int sLocation)
{
    int mobMake = CreateObject("InvisibleLightBlueLow", sLocation);

    Effect("SMOKE_BLAST", GetObjectX(mobMake), GetObjectY(mobMake), 0.0, 0.0);
    FrameTimerWithArg(8, mobMake, SummonStrangeWizard);
}

void EntryWizRoom()
{
    int i;

    ObjectOff(self);
    for (i = 0 ; i < 6 ; i ++)
        RespectStrangeWizard(202 + i);
}

int ImportUnitPickupFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x55565300; arr[2] = 0x14245C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02E4AE8B; arr[5] = 0x53560000; arr[6] = 0x2454FF55; arr[7] = 0x0CC48318;
        arr[8] = 0x835B5E5D; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUnitPickupFunc, ImportUnitPickupFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void BerserkerEnergyTouched()
{
    int owner = GetOwner(GetTrigger() - 1);

    if (CurrentHealth(other) && IsAttackedBy(other, owner))
    {
        Damage(other, owner, 500, 14);
        Enchant(other, "ENCHANT_CHARMING", 1.0);
        GreenSparkFx(GetObjectX(self), GetObjectY(self));
    }
}

void BerserkerEnergyLoop(int sUnit)
{
    int owner = GetOwner(sUnit), durate = GetDirection(sUnit);

    while (IsObjectOn(sUnit))
    {
        if (CurrentHealth(owner) && durate)
        {
            if (IsVisibleTo(sUnit, sUnit + 1))
            {
                DeleteObjectTimer(CreateObjectAt("MagicSpark", GetObjectX(sUnit + 1), GetObjectY(sUnit + 1)), 18);
                MoveObject(sUnit + 1, GetObjectX(sUnit + 1) + UnitAngleCos(sUnit + 1, 19.0), GetObjectY(sUnit + 1) + UnitAngleSin(sUnit + 1, 19.0));
                FrameTimerWithArg(1, sUnit, BerserkerEnergyLoop);
                LookWithAngle(sUnit, durate - 1);
                break;
            }
        }
        Delete(sUnit);
        Delete(sUnit + 1);
        break;
    }
}

void CastBerserkerEnergyPar(int sOwner)
{
    int unit;

    if (CurrentHealth(sOwner))
    {
        unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(sOwner) + UnitAngleCos(sOwner, 21.0), GetObjectY(sOwner) + UnitAngleSin(sOwner, 21.0));
        SetOwner(sOwner, SpawnDummyUnitAt("LichLord", unit) - 1);
        LookWithAngle(unit, 31);
        LookWithAngle(unit + 1, GetDirection(sOwner));
        SetCallback(unit + 1, 9, BerserkerEnergyTouched);
        FrameTimerWithArg(1, unit, BerserkerEnergyLoop);
    }
}

void MagicStaffClassUse()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self);

    if (MathAbs(cFps - cTime) < 35)
    {
        UniPrint(other, MessageDesc(60));
        return;
    }
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        FrameTimerWithArg(3, GetCaller(), CastBerserkerEnergyPar);
    }
}

void MagicStaffClassPick()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self);

    if (MathAbs(cFps - cTime) < 10)
        return;
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        AbsoluteWeaponPick(other, self);
        PlayerEquipWeapon(other, self);
        UniPrint(other, MessageDesc(61));
    }
}

int MagicStaffClassCreate(int sUnit)
{
    int unit = CreateObjectAt("SulphorousFlareWand", GetObjectX(sUnit), GetObjectY(sUnit));
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(ptr + 0x2c4, ImportUnitPickupFunc());
        SetMemory(ptr + 0x2e4, MagicStaffClassPick);
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, MagicStaffClassUse);
    }
    return unit;
}

int FallingMeteor(float sX, float sY, int sDamage, float sSpeed)
{
    int mUnit = CreateObjectAt("Meteor", sX, sY);
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec), sDamage);
        SetMemory(ptr + 0x14, GetMemory(ptr + 0x14) | 0x20);
        Raise(mUnit, 255.0);
        SetMemory(ptr + 0x6c, ToInt(sSpeed));
    }
    return mUnit;
}

void MeteorWandClassStrike(int sGlow)
{
    int owner = GetOwner(sGlow);

    if (CurrentHealth(owner))
    {
        if (IsVisibleTo(owner, sGlow))
        {
            SetOwner(owner, FallingMeteor(GetObjectX(sGlow), GetObjectY(sGlow), 310, -8.0));
            PlaySoundAround(sGlow, 85);
        }
        else
            UniPrint(owner, MessageDesc(62));
    }
    Delete(sGlow);
}

void MeteorWandClassUse()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self), glow;

    if (MathAbs(cFps - cTime) < 25)
    {
        UniPrint(other, MessageDesc(63));
        return;
    }
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        glow = CreateObjectAt("Moonglow", GetObjectX(other), GetObjectY(other));
        SetOwner(other, glow);
        FrameTimerWithArg(1, glow, MeteorWandClassStrike);
    }
}

int MeteorWandClassCreate(int sUnit)
{
    int unit = CreateObjectAt("FireStormWand", GetObjectX(sUnit), GetObjectY(sUnit));
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(ptr + 0x2c4, ImportUnitPickupFunc());
        SetMemory(ptr + 0x2e4, MagicStaffClassPick);
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, MeteorWandClassUse);
    }
    return unit;
}

void ForceOfNatueStaffClassUse()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self), glow;

    if (MathAbs(cFps - cTime) < 38)
    {
        UniPrint(other, MessageDesc(64));
        return;
    }
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        CastSpellObjectObject("SPELL_FORCE_OF_NATURE", other, other);
    }
}

int ForceOfNatureStaffCreate(int sUnit)
{
    int unit = CreateObjectAt("InfinitePainWand", GetObjectX(sUnit), GetObjectY(sUnit));
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(ptr + 0x2c4, ImportUnitPickupFunc());
        SetMemory(ptr + 0x2e4, MagicStaffClassPick);
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        SetMemory(ptr + 0x2fc, ForceOfNatueStaffClassUse);
    }
    return unit;
}

void AirshipCaptainSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1076677837);
		SetMemory(ptr + 0x224, 1076677837);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 2049);
		SetMemory(GetMemory(ptr + 0x22c), 400);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 400);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, AirshipCaptainBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 1065353216);
	}
}

int SummonJandor(int sUnit)
{
    int mob = CreateObjectAt("AirshipCaptain", GetObjectX(sUnit), GetObjectY(sUnit));
    
    AirshipCaptainSubProcess(mob);
    return mob;
}

void JandorAttackToTargetUser(int sUnit)
{
    int enemy = ToInt(GetObjectZ(sUnit)), mob = sUnit - 1;

    if (CurrentHealth(enemy) && CurrentHealth(mob))
    {
        CreatureFollow(mob, enemy);
        AggressionLevel(mob, 1.0);
        UniChatMessage(mob, MessageDesc(20), 120);
    }
    Delete(sUnit);
}

void JandorGroupsHandler(int sUnit)
{
    int durate = GetDirection(sUnit);

    while (IsObjectOn(sUnit))
    {
        if (durate)
        {
            FrameTimerWithArg(1, SummonJandor(sUnit) + 1, JandorAttackToTargetUser);
            Raise(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(sUnit), GetObjectY(sUnit)), GetOwner(sUnit));
            FrameTimerWithArg(6, sUnit, JandorGroupsHandler);
            LookWithAngle(sUnit, durate - 1);
            break;
        }
        Delete(sUnit);
        break;
    }
}

void ClearWallAtWaypointPos(int sLocation)
{
    int xPos = FloatToInt(GetWaypointX(sLocation)), yPos = FloatToInt(GetWaypointY(sLocation));
    int spX, spY, tx, ty, rx;

    if (xPos > yPos) xPos += 23;
    else             yPos += 23;
    spX = (xPos + yPos - 22) / 46;
    spY = (xPos - yPos) / 46;
    tx = spX * 46;
    ty = spY * 46;
    rx = (tx + ty) / 2;
    WallOpen(Wall(rx / 23, (rx - ty) / 23));
}

void JandorRemoveWalls()
{
    ClearWallAtWaypointPos(214);
    ClearWallAtWaypointPos(215);
    ClearWallAtWaypointPos(216);
}

void HiddenBookPick()
{
    int mobMake = CreateObject("InvisibleLightBlueLow", 213);

    LookWithAngle(mobMake, 32);
    SetOwner(other, mobMake);
    FrameTimerWithArg(77, mobMake, JandorGroupsHandler);
    FrameTimer(85, JandorRemoveWalls);
    Delete(self);
    UniPrint(other, MessageDesc(65));
}

int LibraryHiddenBook()
{
    int book = CreateObject("CommonSpellBook", 212);
    int ptr = GetMemory(0x750710);

    if (ptr)
    {
        SetMemory(ptr + 0x2c4, ImportUnitPickupFunc());
        SetMemory(ptr + 0x2e4, HiddenBookPick);
    }
    return book;
}

void LibraryPartStart()
{
    int chkSum;

    ObjectOff(self);
    if (chkSum) return;
    chkSum = LibraryHiddenBook();
    ChairDirInit();
    LibraryKey();
    LibraryExitElevInit();
}

void TestTeleport()
{
    float xProfile = 5473.0, yProfile = 3582.0;
    int staff;

    MoveObject(other, xProfile, yProfile);
    if (!staff)
    {
        staff = MagicStaffClassCreate(CreateObjectAt("RedPotion", xProfile, yProfile));
    }
}

int TalkingSkullBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1802264916; arr[1] = 1399287401; arr[2] = 1819047275; arr[17] = 200; arr[19] = 85; 
		arr[21] = 1065353216; arr[23] = 65536; arr[24] = 1065353216; arr[26] = 4; arr[28] = 1106247680; 
		arr[29] = 30; arr[31] = 3; arr[32] = 3; arr[33] = 7; arr[59] = 5542432; 
		arr[60] = 2303; arr[61] = 46917632; 
		CancelTimer(FrameTimerWithArg(10, TalkingSkullBinTable, TalkingSkullBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

void TalkingSkullSubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1076048691);
		SetMemory(ptr + 0x224, 1076048691);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 65536);
		SetMemory(GetMemory(ptr + 0x22c), 325);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 325);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, TalkingSkullBinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 1065353216);
	}
}

int TalkingSkull2BinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1802264916; arr[1] = 1399287401; arr[2] = 1819047275; arr[17] = 325; arr[19] = 110; 
		arr[21] = 1060320051; arr[24] = 1065353216; arr[26] = 4; arr[28] = 1101004800; arr[29] = 80; 
		arr[30] = 1106247680; arr[32] = 7; arr[33] = 14; arr[37] = 1769236816; arr[38] = 1181513062; 
		arr[39] = 1650815593; arr[40] = 7105633; arr[53] = 1133903872; arr[55] = 12; arr[56] = 20; 
		arr[59] = 5544320; arr[60] = 2303; arr[61] = 46917632; 
		CancelTimer(FrameTimerWithArg(10, TalkingSkullBinTable, TalkingSkullBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

void TalkingSkull2SubProcess(int sUnit)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		SetMemory(ptr + 0x220, 1075167887);
		SetMemory(ptr + 0x224, 1075167887);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x5a0, 32768);
		SetMemory(GetMemory(ptr + 0x22c), 360);
		SetMemory(GetMemory(ptr + 0x22c) + 0x4, 360);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, TalkingSkull2BinTable());
		SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x538, 0);
		SetMemory(GetMemory(ptr + 0x2ec) + 0x540, 1065353216);
	}
}

int ChairDir(int sDir)
{
    int arr[8];

    if (sDir < 0)
    {
        arr[0] = 583; arr[1] = 586; arr[2] = 585; arr[3] = 584; arr[4] = 582;
        arr[5] = 579; arr[6] = 580; arr[7] = 581;
    }
    return arr[sDir];
}

void MobInvisibleChairLoop(int sUnit)
{
    int curDir;
    if (CurrentHealth(sUnit))
    {
        if (ToInt(Distance(GetObjectX(sUnit), GetObjectY(sUnit) + 2.0, GetObjectX(sUnit + 1), GetObjectY(sUnit + 1))))
        {
            curDir = ((GetDirection(sUnit) - 16) % 256) / 32;
            if (GetDirection(sUnit + 1) ^ curDir)
            {
                LookWithAngle(sUnit + 1, curDir);
                SetMemory(UnitToPtr(sUnit + 1) + 4, ChairDir(curDir));
                MoveObject(sUnit + 1, 100.0, 100.0);
            }
            else
                MoveObject(sUnit + 1, GetObjectX(sUnit), GetObjectY(sUnit) + 2.0);
        }
        FrameTimerWithArg(1, sUnit, MobInvisibleChairLoop);
    }
    else
        Delete(sUnit + 1);
}

void MobCandleAttached(int sUnit)
{
    if (CurrentHealth(sUnit))
    {
        if (ToInt(Distance(GetObjectX(sUnit), GetObjectY(sUnit) + 2.0, GetObjectX(sUnit + 1), GetObjectY(sUnit + 1))))
            MoveObject(sUnit + 1, GetObjectX(sUnit), GetObjectY(sUnit) + 2.0);
        FrameTimerWithArg(1, sUnit, MobCandleAttached);
    }
    else
        Delete(sUnit + 1);
}

void TouchSoulChairNothing()
{
    return;
}

void TouchSoulChair()
{
    if (IsObjectOn(self)) return;
    if (CurrentHealth(other) && IsAttackedBy(other, self))
    {
        Frozen(self, 0);
        ObjectOn(self);
        AggressionLevel(self, 1.0);
        LookAtObject(self, other);
        SetCallback(self, 5, DefaultMobDead);
        SetCallback(self, 7, FieldMobHurtHandler);
        SetCallback(self, 9, TouchSoulChairNothing);
        PlaySoundAround(self, 657);
        FrameTimerWithArg(1, GetTrigger(), MobInvisibleChairLoop);
        UniChatMessage(self, MessageDesc(21), 150);
    }
}

void TouchSoulCandle()
{
    if (IsObjectOn(self)) return;
    if (CurrentHealth(other) && IsAttackedBy(other, self))
    {
        Frozen(self, 0);
        ObjectOn(self);
        AggressionLevel(self, 1.0);
        LookAtObject(self, other);
        SetCallback(self, 5, DefaultMobDead);
        SetCallback(self, 7, FieldMobHurtHandler);
        SetCallback(self, 9, TouchSoulChairNothing);
        PlaySoundAround(self, 707);
        FrameTimerWithArg(1, GetTrigger(), MobCandleAttached);
        UniChatMessage(self, MessageDesc(22), 150);
    }
}

void ChairDirInit()
{
    string sCandleName = "Candleabra2";
    int mob;

    ChairDir(-1);
    MobClassChairSoul(217, 7);
    MobClassChairSoul(218, 3);
    MobClassChairSoul(219, 1);
    MobClassChairSoul(221, 8);
    MobClassChairSoul(222, 2);
    MobClassChairSoul(220, 4);
    MobClassChairSoul(223, 1);
    MobClassChairSoul(224, 6);
    MobClassChairSoul(225, 5);
    MobClassCandleSoul(226, sCandleName);
    MobClassCandleSoul(227, sCandleName);
    MobClassCandleSoul(228, sCandleName);
    MobClassCandleSoul(229, sCandleName);
    MobClassCandleSoul(230, sCandleName);
    MobClassCandleSoul(231, sCandleName);
    MobClassCandleSoul(234, sCandleName);
    MobClassCandleSoul(235, sCandleName);

    MobClassCandleSoul(232, "Candleabra5");
    MobClassCandleSoul(233, "Candleabra5");
}

int MobClassChairSoul(int sLocation, int sChairDir)
{
    int mob = CreateObject("TalkingSkull", sLocation);

    UnitNoCollide(CreateObjectAt("DarkWoodenChair" + IntToString(sChairDir), GetObjectX(mob), GetObjectY(mob) + 2.0));
    Frozen(mob + 1, 1);
    ObjectOff(mob);
    Frozen(mob, 1);
    TalkingSkullSubProcess(mob);
    SetCallback(mob, 9, TouchSoulChair);

    return mob;
}

int MobClassCandleSoul(int sLocation, string sCandleName)
{
    int mob = CreateObject("TalkingSkull", sLocation);

    UnitNoCollide(CreateObjectAt(sCandleName, GetObjectX(mob), GetObjectY(mob) + 2.0));
    Frozen(mob + 1, 1);
    ObjectOff(mob);
    Frozen(mob, 1);
    TalkingSkull2SubProcess(mob);
    SetCallback(mob, 9, TouchSoulCandle);

    return mob;
}

int NetClientExec()
{
    int arr[3];

    arr[0] = 0xdf;
    return GetScrDataField(NetClientExec);
}

void ClientSetMemory(int user, int targetAddr, int byte)
{
    int ptr = NetClientExec();

    SetMemory(ptr + 1, targetAddr - 0x6d495c);
    SetMemory(ptr + 5, byte);
    NetClientSend(user, ptr, 6);
}

void DelayLink(int pUnit)
{
    ClientSetMemory(pUnit, 0x69ba98 + 0, 0);
    ClientSetMemory(pUnit, 0x69ba98 + 1, 0x10);
    ClientSetMemory(pUnit, 0x69ba98 + 2, 0x75);
}

void ClientEntry(int cliUnit)
{
    int scrNumber;

    CancelTimer(FrameTimerWithArg(10, ClientMain, ClientMain));
    scrNumber = GetMemory(GetMemory(0x83395c) + 8);
    //6A 00 6A 00/ 68 7F 00 00/ 00 E8 02 63/ DB FF 83 C4/ 0C 68 B0 95/ 4B 00 C3 90: 24Byte
    ClientSetMemory(cliUnit, 0x751000, 0x6a);
    ClientSetMemory(cliUnit, 0x751001, 0x00);
    ClientSetMemory(cliUnit, 0x751002, 0x6a);
    ClientSetMemory(cliUnit, 0x751003, 0x00);
    ClientSetMemory(cliUnit, 0x751004, 0x68);
    ClientSetMemory(cliUnit, 0x751005, scrNumber & 0xff);
    ClientSetMemory(cliUnit, 0x751006, (scrNumber >> 8) & 0xff);
    ClientSetMemory(cliUnit, 0x751007, 0);
    ClientSetMemory(cliUnit, 0x751008, 0);
    ClientSetMemory(cliUnit, 0x751009, 0xe8);
    ClientSetMemory(cliUnit, 0x75100a, 0x02);
    ClientSetMemory(cliUnit, 0x75100b, 0x63);
    ClientSetMemory(cliUnit, 0x75100c, 0xdb);
    ClientSetMemory(cliUnit, 0x75100d, 0xff);
    ClientSetMemory(cliUnit, 0x75100e, 0x83);
    ClientSetMemory(cliUnit, 0x75100f, 0xc4);
    ClientSetMemory(cliUnit, 0x751010, 0x0c);
    ClientSetMemory(cliUnit, 0x751011, 0x68);
    ClientSetMemory(cliUnit, 0x751012, 0x10);
    ClientSetMemory(cliUnit, 0x751013, 0xde);
    ClientSetMemory(cliUnit, 0x751014, 0x43);
    ClientSetMemory(cliUnit, 0x751015, 0x00);
    ClientSetMemory(cliUnit, 0x751016, 0xc3);
    FrameTimerWithArg(1, cliUnit, DelayLink);
}

int ImportNetSendClient()
{
    int arr[15], link, fNumb;

    if (!link)
    {
        arr[0] = 0x40EBC068; arr[1] = 0x72506800; arr[2] = 0x83500050; arr[3] = 0x54FF10EC; arr[4] = 0x44891424;
        arr[5] = 0x54FF0C24; arr[6] = 0x44891424; arr[7] = 0x54FF0824; arr[8] = 0x44891424; arr[9] = 0x54FF0424;
        arr[10] = 0x04891424; arr[11] = 0x2454FF24; arr[12] = 0x10C48318; arr[13] = 0x08C48358; arr[14] = 0x909090C3;
        ImportNetSendClient;
        fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * fNumb + 0x1c));
    }
    return link;
}

void NetClientSend(int plrUnit, int buffPtr, int buffSize)
{
    //netClientSend,0x0040EBC0
    int plrPtr = UnitToPtr(plrUnit), plrIdx;
    int temp = GetMemory(0x5c31ac);

    if (plrPtr)
    {
        if (GetMemory(plrPtr + 0x08) & 0x04)
        {
            plrIdx = GetMemory(GetMemory(GetMemory(plrPtr + 0x2ec) + 0x114) + 0x810);
            //5c31ac
            SetMemory(0x5c31ac, ImportNetSendClient());
            PushObject(plrIdx, ToFloat(1), ToFloat(buffPtr), ToFloat(buffSize));
            SetMemory(0x5c31ac, temp);
        }
    }
}

void ModifyPlayMusicNumber(int bgmNumb)
{
    int link = PlayMusicPacket();

    SetMemory(link, 0x6400e5 ^ (bgmNumb << 8));
}

int PlayMusicPacket()
{
    int packet = 0x6466e5, link;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, PlayMusicPacket, PlayMusicPacket));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void NetPlayBgm(int user)
{
    if (CurrentHealth(user))
    {
        NetClientSend(user, PlayMusicPacket(), 3);
    }
}

int FixCallOpcode(int curAddr, int targetAddr)
{
    SetMemory(curAddr + 1, targetAddr - curAddr - 5);
}

int ImportWriteBinaryFile()
{
    int arr[17], link, fNumb;

    if (!link)
    {
        arr[0] = 0xDB624BE8; arr[1] = 0x246850FF; arr[2] = 0xFF005882; arr[3] = 0x485AE830; arr[4] = 0xC483FFE1;
        arr[5] = 0x74C08508; arr[6] = 0x748B5624; arr[7] = 0x768B0424; arr[8] = 0x8D0E8B04; arr[9] = 0x50500476; arr[10] = 0x5651016A; arr[11] = 0xE149D1E8;
        arr[12] = 0x10C483FF; arr[13] = 0xCB64FAE8; arr[14] = 0x04C483FF; arr[15] = 0x04C4835E; arr[16] = 0x909090C3;
        ImportWriteBinaryFile;
        fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * fNumb + 0x1c));
        FixCallOpcode(link + 0, 0x507250);
        FixCallOpcode(link + 0xd, 0x56586c);
        FixCallOpcode(link + 0x2c, 0x565a02);
        FixCallOpcode(link + 0x34, 0x407533);
    }
    return link;
}

void WriteBinaryFile(string fileName, int stream)
{
    int temp = 0x5c310c, fNumb;

    fileName = ToStr(GetMemory(0x97bb40 + (SToInt(fileName) * 4)));
    SetMemory(0x5c310c, ImportWriteBinaryFile());
    WriteBinaryFile;
    fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
    Unused20(GetMemory(GetMemory(0x75ae28) + (0x30 * fNumb + 0x1c)));
    SetMemory(0x5c310c, temp);
}

int ShowMessageBoxImport()
{
    int arr[9], link, fNumb;

    if (!link)
    {
        arr[0] = 0x006A5650; arr[1] = 0x216A006A; arr[2] = 0xDB6243E8; arr[3] = 0x0470FFFF; arr[4] = 0x35FF30FF; arr[5] = 0x006E08E4;
        arr[6] = 0xCF89F3E8; arr[7] = 0x18C483FF; arr[8] = 0x90C3585E;
        ShowMessageBoxImport;
        fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * fNumb) + 0x1c);
        FixCallOpcode(link + 8, 0x507250);
        FixCallOpcode(link + 0x18, 0x449a10);
    }
    return link;
}

void ShowMessageBoxCore(int ttDest, int cDest)
{
    int link, temp = GetMemory(0x5c3108), fNumb;

    ShowMessageBoxCore;
    fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
    link = GetMemory(GetMemory(0x75ae28) + (0x30 * fNumb) + 0x1c);

    SetMemory(0x5c3108, ShowMessageBoxImport());
    Unused1f(link);
    SetMemory(0x5c3108, temp);
}

void ShowMessageBox(string title, string content)
{
    int ttDest[100], cDest[100], fNumb, link;
    int ttPtr = GetMemory(0x97bb40 + (SToInt(title) * 4));
    int cPtr = GetMemory(0x97bb40 + (SToInt(content) * 4));

    ShowMessageBox;
    fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
    link = GetMemory(GetMemory(0x75ae28) + (0x30 * fNumb) + 0x1c);
    NoxUtf8ToUnicode(ttPtr, link + 8);
    NoxUtf8ToUnicode(cPtr, link + 408);

    ShowMessageBoxCore(link + 8, link + 408);
}

int ImportMemAlloc()
{
    int arr[7], link, fNumb;

    if (!link)
    {
        arr[0] = 0x49E85055; arr[1] = 0x50FFDB62; arr[2] = 0xCB2553E8; arr[3] = 0x1DE850FF; arr[4] = 0x83FFDB62; arr[5] = 0x5D5808C4; arr[6] = 0x909090C3;
        ImportMemAlloc;
        fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
        link = GetMemory(GetMemory(0x75ae28) + ((0x30 * fNumb) + 0x1c));
        FixCallOpcode(link + 2, 0x507250);
        FixCallOpcode(link + 8, 0x403560);
        FixCallOpcode(link + 0x0e, 0x507230);
    }
    return link;
}

int MemAlloc(int size)
{
    int temp = GetMemory(0x5c3208), ptr;

    SetMemory(0x5c3208, ImportMemAlloc());
    ptr = GetCharacterData(size);
    SetMemory(0x5c3208, temp);
    return ptr;
}

int ImportMemFree()
{
    int arr[5], link, fNumb;

    if (!link)
    {
        arr[0] = 0x624AE850; arr[1] = 0xE850FFDB; arr[2] = 0xFFCB3251; arr[3] = 0x5804C483; arr[4] = 0x909090C3;
        ImportMemFree;
        fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
        link = GetMemory(GetMemory(0x75ae28) + ((0x30 * fNumb) + 0x1c));
        FixCallOpcode(link + 1, 0x507250);
        FixCallOpcode(link + 7, 0x40425d);
    }
    return link;
}

void MemFree(int ptr)
{
    int temp = GetMemory(0x5c3108);

    SetMemory(0x5c3108, ImportMemFree());
    Unused1f(ptr);
    SetMemory(0x5c3108, temp);
}

int AnimateRealloc(int ptr, int imgCount)
{
    int alloc = MemAlloc(24);
    int iLinkTable = MemAlloc((imgCount + 1) * 4);

    SetMemory(alloc, 0x10);
    SetMemory(alloc + 4, iLinkTable);
    SetMemory(alloc + 8, imgCount);
    SetMemory(alloc + 12, 2);
    SetMemory(alloc + 16, 0);
    SetMemory(alloc + 20, 0);
    SetMemory(ptr + 92, alloc);
    return iLinkTable;
}

void ImageTableMapping(int dest, int src, int count)
{
    int i;

    for (i = 0 ; i < count ; i ++)
        SetMemory(dest + (i * 4), GetMemory(src + (i * 4)));
    SetMemory(dest + (i * 4), 0);
}

int MakeAnimateImage(int thingId, int imgTable)
{
    int ptr = GetMemory(GetMemory(0x69f224) + (thingId * 4));
    int imgPtr = GetMemory(ptr + 92), mapped, freePtr = 0;
    int imgCount = GetMemory(imgTable);

    while (1)
    {
        if (GetMemory(imgPtr) == 0x08)
            1;
        else if (GetMemory(imgPtr + 0x8) ^ imgCount)
            freePtr = GetMemory(imgPtr + 4);
        else
        {
            mapped = GetMemory(imgPtr + 4);
            break;
        }
        mapped = AnimateRealloc(ptr, imgCount);
        if (freePtr)
            MemFree(freePtr);
        break;
    }
    ImageTableMapping(mapped, imgTable + 4, imgCount);
    SetMemory(ptr + 116, 134719);
    SetMemory(ptr + 88, 0x4bbd60);
}

int DrawImageAt(float x, float y, int thingId)
{
    int unit = CreateObjectAt("AirshipBasketShadow", x, y);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x04, thingId);
    return unit;
}

int GetImageTableFirstImgPtr(int iTablePtr)
{
    return GetMemory(iTablePtr + 4);
}

int ImagePtrFromID(int imgId)
{
    return GetMemory(0x694864) + (12 * imgId);
}

void InnerImageZeroHeight(int thingId)
{
    int ptr = GetMemory(GetMemory(0x69f224) + (thingId * 4));

    if (GetMemory(ptr + 20) >> 0x10)
        SetMemory(ptr + 20, GetMemory(ptr + 20) & 0xffff);
    if (GetMemory(ptr + 32) & 0x400000)
        SetMemory(ptr + 32, GetMemory(ptr + 32) ^ 0x400000);
}

void InnerImageSwap(int thingId, int imgId)
{
    int ptr = GetMemory(GetMemory(0x69f224) + (thingId * 4));
    int imgPtr = GetMemory(ptr + 92);
    SetMemory(ptr + 116, imgId);

    if (GetMemory(imgPtr) == 0x10)
    {
        SetMemory(imgPtr, 0x08);
        MemFree(GetMemory(imgPtr + 4));
    }
    SetMemory(ptr + 88, 0x4bcc20);
    SetMemory(imgPtr + 4, ImagePtrFromID(imgId));
}

int ImportRemoveSpriteFromThingId()
{
    int arr[16], link, fNumb;

    if (!link)
    {
        arr[0] = 0x5008EC83; arr[1] = 0x6D3DC0A1; arr[2] = 0x24448900; arr[3] = 0x623EE808; arr[4] = 0x4489FFDB; arr[5] = 0x8B560424;
        arr[6] = 0x850C2474; arr[7] = 0x8B1B74F6; arr[8] = 0xFF082444; arr[9] = 0x000170B6; arr[10] = 0x768B5600; arr[11] = 0x75F0396C;
        arr[12] = 0x94AAE805; arr[13] = 0x5E58FFD0; arr[14] = 0x585EE1EB; arr[15] = 0xC308C483;
        ImportRemoveSpriteFromThingId;
        fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
        link = GetMemory(GetMemory(0x75ae28) + ((0x30 * fNumb) + 0x1c));
        FixCallOpcode(link + 0x0d, 0x507250);
        FixCallOpcode(link + 0x31, 0x45a4e0);
    }
    return link;
}

void RemoveSpriteFromThingId(int thingId)
{
    int temp = GetMemory(0x5c3108);

    SetMemory(0x5c3108, ImportRemoveSpriteFromThingId());
    Unused1f(thingId);
    SetMemory(0x5c3108, temp);
}

int ImportReupdateSpriteFromThingId()
{
    int arr[26], link;

    if (!link)
    {
        arr[0] = 0x500CEC83; arr[1] = 0x6D3DC0A1; arr[2] = 0x24448900; arr[3] = 0x623EE808; arr[4] = 0x4489FFDB; arr[5] = 0x8B510424; arr[6] = 0x69F2240D; 
        arr[7] = 0x810C8B00; arr[8] = 0x10244C89; arr[9] = 0x24748B56; arr[10] = 0x74F68510; arr[11] = 0x24448B31; arr[12] = 0x70B6FF0C; arr[13] = 0x8B000001; 
        arr[14] = 0xC8396C4E; arr[15] = 0x4C8B1D75; arr[16] = 0x46C71824; arr[17] = 0x00000068; arr[18] = 0x58418B00; arr[19] = 0x012C8689; arr[20] = 0x418B0000; 
        arr[21] = 0x3086895C; arr[22] = 0x5E000001; arr[23] = 0x595ECBEB; arr[24] = 0x0CC48358; arr[25] = 0x909090C3;
        ImportReupdateSpriteFromThingId;
        link = GetMemory(GetMemory(0x75ae28) + ((0x30 * GetMemory(0x979740 + ((GetMemory(0x75ae40) - 6) * 4))) + 0x1c));
        FixCallOpcode(link + 0xd, 0x507250);
    }
    return link;
}

void ReupdateSpriteFromThingId(int thingId)
{
    int temp = GetMemory(0x5c3108);

    SetMemory(0x5c3108, ImportReupdateSpriteFromThingId());
    Unused1f(thingId);
    SetMemory(0x5c3108, temp);
}

int ImportRemoveTextDrawPrevSprite()
{
    int arr[23], link, fNumb;

    if (!link)
    {
        arr[0] = 0x500CEC83; arr[1] = 0x6D3DC0A1; arr[2] = 0x24448900; arr[3] = 0x623EE80C; arr[4] = 0x8B51FFDB; arr[5] = 0x244C8908; arr[6] = 0x04408D0C;
        arr[7] = 0x4C89088B; arr[8] = 0x4C8B0824; arr[9] = 0x85561024; arr[10] = 0x8B2874C9; arr[11] = 0x748B6C41; arr[12] = 0xB1FF1024; arr[13] = 0x00000170;
        arr[14] = 0x1475F039; arr[15] = 0x8B58418B; arr[16] = 0x390C2474; arr[17] = 0x510974F0; arr[18] = 0xD09493E8; arr[19] = 0x04C483FF; arr[20] = 0x5ED4EB59;
        arr[21] = 0xC4835859; arr[22] = 0x9090C30C;
        ImportRemoveTextDrawPrevSprite;
        fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
        link = GetMemory(GetMemory(0x75ae28) + ((0x30 * fNumb) + 0x1c));
        FixCallOpcode(link + 0x0d, 0x507250);
        FixCallOpcode(link + 0x48, 0x45a4e0);
    }
    return link;
}

void RemoveTextDrawPrevSprite(int thingId, int fPtr)
{
    int temp = GetMemory(0x5c3108), argPtr, fNumb;

    RemoveTextDrawPrevSprite;
    fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
    argPtr = GetMemory(GetMemory(0x75ae28) + ((0x30 * fNumb) + 0x1c));
    SetMemory(0x5c3108, ImportRemoveTextDrawPrevSprite());
    Unused1f(argPtr);
    SetMemory(0x5c3108, temp);
}

void MappingTextDrawCode(int ptr)
{
    SetMemory(ptr + 0, 0x8B20EC83); SetMemory(ptr + 4, 0x84EA040D);
    SetMemory(ptr + 8, 0x56555300); SetMemory(ptr + 12, 0x3424748B); 
    SetMemory(ptr + 16, 0xAC3D8B57); SetMemory(ptr + 20, 0x8B00853B);
    SetMemory(ptr + 24, 0x00012086); SetMemory(ptr + 28, 0x72C83900); 
    SetMemory(ptr + 32, 0xE03D8B06); SetMemory(ptr + 36, 0x570084C9);
    SetMemory(ptr + 40, 0xCE336FE8); SetMemory(ptr + 44, 0x988e8bff); //SetMemory(ptr + 44, 0xC00D8BFF); 
    SetMemory(ptr + 48, 0x51000000); //SetMemory(ptr + 48, 0x510083C8);
    SetMemory(ptr + 52, 0xCE3293E8);
    SetMemory(ptr + 56, 0x244C8BFF); SetMemory(ptr + 60, 0x0C468B3C); 
    SetMemory(ptr + 64, 0x8B08C483); SetMemory(ptr + 68, 0x118B1059);
    SetMemory(ptr + 72, 0x2914698B); SetMemory(ptr + 76, 0x105E8BD8); 
    SetMemory(ptr + 80, 0x518BD001); SetMemory(ptr + 84, 0x704E8B04);
    SetMemory(ptr + 88, 0x4489EA29); SetMemory(ptr + 92, 0xDA011024); 
    SetMemory(ptr + 96, 0x14245489); SetMemory(ptr + 100, 0xA16C4E8B);
    SetMemory(ptr + 104, 0x0069F224); SetMemory(ptr + 108, 0x8B88048B); 
    SetMemory(ptr + 112, 0xD2850450); SetMemory(ptr + 116, 0x00BA0575);
    SetMemory(ptr + 120, 0x8B0058D7); SetMemory(ptr + 124, 0x8B142444); 
    SetMemory(ptr + 128, 0x5010244C); SetMemory(ptr + 132, 0x006A5251);
    SetMemory(ptr + 136, 0xCEE58FE8); SetMemory(ptr + 140, 0x10C483FF); 
    SetMemory(ptr + 144, 0x000001B8); SetMemory(ptr + 148, 0x5D5E5F00);
    SetMemory(ptr + 152, 0x20C4835B); SetMemory(ptr + 156, 0x909090C3);
    FixCallOpcode(ptr + 40, 0x434460);
    FixCallOpcode(ptr + 52, 0x434390);
    FixCallOpcode(ptr + 136, 0x43f6e0);
}

void ModifyThingClassDescription(int thingId, string desc, int textColor)
{
    int tPtr = GetMemory(GetMemory(0x69f224) + (thingId * 4));
    int dest = MemAlloc(48), prevPtr = GetMemory(tPtr + 4);
    int src = GetMemory(0x97bb40 + (SToInt(desc) * 4));

    NoxUtf8ToUnicode(src, dest);
    if (textColor)
        SetMemory(tPtr + 48, textColor);
    SetMemory(tPtr + 4, dest);
    if (prevPtr)
        MemFree(prevPtr);
}

void ModifyThingClassDrawFunction(int thingId, int fPtr)
{
    int tPtr = GetMemory(GetMemory(0x69f224) + (thingId * 4));

    SetMemory(tPtr + 88, fPtr);
}

int BuildTextDrawFunction()
{
    /*int zeroOffset = 0x5cea5c;
    int dest = MemAlloc(168), prev = GetMemory(zeroOffset);

    MappingTextDrawCode(dest);
    SetMemory(zeroOffset, dest);
    if (prev)
        MemFree(prev);
    return dest;*/
    int offset = 0x5cebdc;
    
    MappingTextDrawCode(offset);
    return offset;
}

int HumanDustImageTable()
{
    int imgCount = 13;
    int arr[13], fNumb;

    arr[0] = ImagePtrFromID(136381); arr[1] = ImagePtrFromID(136382); arr[2] = ImagePtrFromID(136383); arr[3] = ImagePtrFromID(136385);
    arr[4] = ImagePtrFromID(136386); arr[5] = ImagePtrFromID(136387); arr[6] = ImagePtrFromID(136388); arr[7] = ImagePtrFromID(136389);
    arr[8] = ImagePtrFromID(136390); arr[9] = ImagePtrFromID(136392); arr[10] = ImagePtrFromID(136393); arr[11] = ImagePtrFromID(136394);
    arr[12] = ImagePtrFromID(136395);
    HumanDustImageTable;
    fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
    return GetMemory(GetMemory(0x75ae28) + ((0x30 * fNumb) + 0x1c));
}

int SkullImageTable()
{
    int imgCount = 8;
    int arr[8], fNumb;

    arr[0] = ImagePtrFromID(39827); arr[1] = ImagePtrFromID(39828); arr[2] = ImagePtrFromID(39829); arr[3] = ImagePtrFromID(39830);
    arr[4] = ImagePtrFromID(39831); arr[5] = ImagePtrFromID(39832); arr[6] = ImagePtrFromID(39833); arr[7] = ImagePtrFromID(39834);
    SkullImageTable;
    fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
    return GetMemory(GetMemory(0x75ae28) + ((0x30 * fNumb) + 0x1c));
}

int SpinGalavDoorImageTable()
{
    int imgCount = 32;
    int arr[32], fNumb;

    arr[0] = ImagePtrFromID(16808); arr[1] = ImagePtrFromID(16809); arr[2] = ImagePtrFromID(16810); arr[3] = ImagePtrFromID(16811);
    arr[4] = ImagePtrFromID(16812); arr[5] = ImagePtrFromID(16813); arr[6] = ImagePtrFromID(16814); arr[7] = ImagePtrFromID(16815);
    arr[8] = ImagePtrFromID(16816); arr[9] = ImagePtrFromID(16817); arr[10] = ImagePtrFromID(16818); arr[11] = ImagePtrFromID(16819);
    arr[12] = ImagePtrFromID(16820); arr[13] = ImagePtrFromID(16821); arr[14] = ImagePtrFromID(16822); arr[15] = ImagePtrFromID(16823);
    arr[16] = ImagePtrFromID(16824); arr[17] = ImagePtrFromID(16825); arr[18] = ImagePtrFromID(16826); arr[19] = ImagePtrFromID(16827);
    arr[20] = ImagePtrFromID(16828); arr[21] = ImagePtrFromID(16829); arr[22] = ImagePtrFromID(16830); arr[23] = ImagePtrFromID(16831);
    arr[24] = ImagePtrFromID(16832); arr[25] = ImagePtrFromID(16833); arr[26] = ImagePtrFromID(16834); arr[27] = ImagePtrFromID(16835);
    arr[28] = ImagePtrFromID(16836); arr[29] = ImagePtrFromID(16837); arr[30] = ImagePtrFromID(16838); arr[31] = ImagePtrFromID(16839);
    SpinGalavDoorImageTable;
    fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
    return GetMemory(GetMemory(0x75ae28) + ((0x30 * fNumb) + 0x1c));
}

int BigMagicShieldImageTable()
{
    int imgCount = 11;
    int arr[11], fNumb;

    arr[0] = ImagePtrFromID(138217); arr[1] = ImagePtrFromID(138218); arr[2] = ImagePtrFromID(138219); arr[3] = ImagePtrFromID(138220);
    arr[4] = ImagePtrFromID(138221); arr[5] = ImagePtrFromID(138222); arr[6] = ImagePtrFromID(138223); arr[7] = ImagePtrFromID(138224);
    arr[8] = ImagePtrFromID(138225); arr[9] = ImagePtrFromID(138226); arr[10] = ImagePtrFromID(138227);
    BigMagicShieldImageTable;
    fNumb = GetMemory(0x979740 + ((GetMemory(0x75ae40) - 4) * 4));
    return GetMemory(GetMemory(0x75ae28) + ((0x30 * fNumb) + 0x1c));
}

void SomeObjectChangeToInnerImage()
{
    MakeAnimateImage(2516, HumanDustImageTable());
    InnerImageZeroHeight(2516);
    RemoveSpriteFromThingId(2516);
    MakeAnimateImage(1428, SkullImageTable());
    InnerImageZeroHeight(1428);
    RemoveSpriteFromThingId(1428);
    MakeAnimateImage(1426, SpinGalavDoorImageTable());
    InnerImageZeroHeight(1426);
    RemoveSpriteFromThingId(1426);
    MakeAnimateImage(1440, BigMagicShieldImageTable());
    InnerImageZeroHeight(1440);
    RemoveSpriteFromThingId(1440);
    InnerImageSwap(1430, 112664);
    InnerImageZeroHeight(1430);
    CommonClassTextDrawSetting();
}

void CommonClassTextDrawSetting()
{
    int ptr = BuildTextDrawFunction();

    ModifyThingClassDescription(2461, "스페셜 샾 바로가기", 0x7e1);
    ModifyThingClassDrawFunction(2461, ptr);
    RemoveSpriteFromThingId(2461);
    ModifyThingClassDescription(1418, "인벤토리 무적화 비콘", 0x7e1);
    ModifyThingClassDrawFunction(1418, ptr);
    RemoveSpriteFromThingId(1418);
    ModifyThingClassDescription(1427, "스페셜 샵 나가기", 0xffa0);
    ModifyThingClassDrawFunction(1427, ptr);
    RemoveSpriteFromThingId(1427);
}

int ImageResourceDrawFunction(int bptr)
{
    int arr[55];

    arr[0] = 0x83EC8B55; arr[1] = 0x8B5608EC; arr[2] = 0x358B0845; arr[3] = 0x0069F224; arr[4] = 0x8BFC4589; arr[5] = 0x348B6C40; arr[6] = 0xF8758986;
    arr[7] = 0x5D5350A1; arr[8] = 0x60768B00; arr[9] = 0x1374F039; arr[10] = 0xB8F8758B; arr[11] = 0x004BCC20; arr[12] = 0x8B584689; arr[13] = 0x4689FC75;
    arr[14] = 0x5EC03158; arr[15] = 0x5D08C483; arr[16] = 0x909090C3; arr[17] = 0x83EC8B55; arr[18] = 0x8B5620EC; arr[19] = 0xE8560C75; arr[20] = 0xFFFFFFAC;
    arr[21] = 0x8504C483; arr[22] = 0x8B2274C0; arr[23] = 0xC0850846; arr[24] = 0x31561B74; arr[25] = 0x708B66F6; arr[26] = 0x4860A108; arr[27] = 0x348D0069;
    arr[28] = 0xB0048DF6; arr[29] = 0x8BF04589; arr[30] = 0xEC458900; arr[31] = 0xE445895E; arr[32] = 0x2674C085; arr[33] = 0x0130B68B; arr[34] = 0x768B0000;
    arr[35] = 0xFC758904; arr[36] = 0x4589068B; arr[37] = 0x04468BF8; arr[38] = 0x8BF44589; arr[39] = 0x758BF045; arr[40] = 0x8B3089F4; arr[41] = 0xF631FC45;
    arr[42] = 0x758D3089; arr[43] = 0x04468B08; arr[44] = 0xE836FF50; arr[45] = 0xFFD6BAA4; arr[46] = 0x5008C483; arr[47] = 0x85E4458B; arr[48] = 0x8B1074C0;
    arr[49] = 0x758BFC45; arr[50] = 0x8B3089F8; arr[51] = 0x758BF045; arr[52] = 0x583089EC; arr[53] = 0x20C4835E; arr[54] = 0x9090C35D;
    StreamCopy(GetScrDataField(ImageResourceDrawFunction) + 4, bptr, 55);
    return bptr + 0x44;
}

void ApplyImageResource(int thingId, int rscPtr, int drawF)
{
    int chandle = GetMemory(0x5d5350);
    int tPtr = GetMemory(GetMemory(0x69f224) + (thingId * 4));
    int imgSec = GetMemory(GetMemory(tPtr + 0x5c) + 0x04);

    //SetMemory(tPtr + 0x54, chandle);
    SetMemory(tPtr + 0x60, chandle);
    SetMemory(tPtr + 0x58, drawF);
    SetMemory(imgSec + 4, rscPtr);
}

int GetScrDataField(int functionName)
{
    return GetMemory(GetMemory(0x75ae28) + (0x30 * functionName + 0x1c));
}

int GetScrCodeField(int functionName)
{
    return GetMemory(GetMemory(0x75ae28) + (0x30 * functionName + 0x20));
}

int ImportStreamCopy()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x50515756; arr[1] = 0xDB6247E8; arr[2] = 0xE8C88BFF; arr[3] = 0xFFDB6240; arr[4] = 0x39E8F88B; arr[5] = 0x8BFFDB62; arr[6] = 0x58A5F3F0; arr[7] = 0xC35E5F59;
        link = GetScrDataField(ImportStreamCopy);
        FixCallOpcode(link + 4, 0x507250);
        FixCallOpcode(link + 0xb, 0x507250);
        FixCallOpcode(link + 0x12, 0x507250);
    }
    return link;
}

void StreamCopy(int src, int dst, int len)
{
    int temp = GetMemory(0x5c3320);

    SetMemory(0x5c3320, ImportStreamCopy());
    GroupRunAway(src, dst, len);
    SetMemory(0x5c3320, temp);
}

void ResourceImageData1() { }
void ResourceImageBuilding() { }
void ResourceImageData2() { }

void UserImageInit()
{
    int f = ImageResourceDrawFunction(0x7510c4);

    ApplyImageResource(363, GetScrCodeField(ResourceImageData1) + 4, f);
    ApplyImageResource(1442, GetScrCodeField(ResourceImageBuilding) + 4, f);
    ApplyImageResource(770, GetScrCodeField(ResourceImageData2) + 4, f);
}

void CancelPlayerDialogWithPTR(int plrPtr)
{
    if (GetMemory(GetMemory(plrPtr + 0x2ec) + 0x11c))
    {
        SetMemory(GetMemory(plrPtr + 0x2ec) + 0x11c, 0);
        SetMemory(GetMemory(GetMemory(plrPtr + 0x2ec) + 0x114) + 0xe60, 0x10);
    }
}

int ImportCheckSelfDamage()
{
    int arr[14], link;

    if (!link)
    {
        arr[0] = 0x4C8B5651; arr[1] = 0xC9850C24; arr[2] = 0x748B2374; arr[3] = 0xF6851024; arr[4] = 0xF1391B74; arr[5] = 0x8B501374; arr[6] = 0x0001FC86;
        arr[7] = 0x74C08500; arr[8] = 0x58F08B05; arr[9] = 0xEB58ECEB; arr[10] = 0xC3595E04; arr[11] = 0x68595E90; arr[12] = 0x004E17B0; arr[13] = 0x909090C3;
        link = GetScrDataField(ImportCheckSelfDamage);
    }
    return link;
}

void SelfDamageClassEntry(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        SetMemory(ptr + 0x2cc, ImportCheckSelfDamage());
}

void SelfDamageClassMapExit()
{
    int i, pTable = 0x62f9e0, ptr;
    int link = GetScrDataField(SelfDamageClassMapExit);

    for (i = 31 ; i >= 0 ; Unused59(link, Unknownb9(link) - 1))
    {
        SetMemory(link + 8, GetMemory(pTable));
        if (ptr)
        {
            SetMemory(ptr + 0x2cc, 0x4e17b0);
            SetMemory(ptr + 0x2d4, 0x54d2b0);
            if (GetMemory(ptr + 0x2e8) ^ 0x4E62F0)      //@brief. 관객모드가 아닐 경우에만 되돌립니다//
                SetMemory(GetMemory(pTable) + 0x2e8, 0x4f8100);     //@brief. 업데이트 되돌리기//
            CancelPlayerDialogWithPTR(GetMemory(pTable));
        }
        Unused59(link + 4, Unknownb9(link + 4) + 0x12dc);
    }
}

void ChangePlayerDeathSound(int handle, int soundNumber) //@brief. 유저가 죽었을 때 효과음을 변경합니다
{
    SetMemory(handle + 0x258, soundNumber);  //@brief. SoundList.txt 파일을 참고하세요
}

int CallNode54d2b0()
{
    int arr[40];

    if (!arr[0])
    {
        arr[0] = 0x54d2d1;
        arr[1] = 0x54d2e3;
        arr[2] = 0x54d2f3;
        arr[3] = 0x54d30a;
        arr[4] = 0x54d348;
        arr[5] = 0x54d375;
        arr[6] = 0x54d3aa;
        arr[7] = 0x54d45c;
        arr[8] = 0x54d47b;
        arr[9] = 0x54d513;
        arr[10] = 0x54d527;
        arr[11] = 0x54d566;
        arr[12] = 0x54d574;
        arr[13] = 0x54d588;
        arr[14] = 0x54d594;
        arr[15] = 0x54d5a6;
        arr[16] = 0x54d5b2;
        arr[17] = 0x54d5c4;
        arr[18] = 0x54d5d1;
        arr[19] = 0x54d5e2;
        arr[20] = 0x54d5f4;
        arr[21] = 0x54d610;
        arr[22] = 0x54d622;
        arr[23] = 0x54d62c;
        arr[24] = 0x54d639;
        arr[25] = 0x54d642;
        arr[26] = 0x54d65b;
        arr[27] = 0x54d662;
        arr[28] = 0x54d668;
        arr[29] = 0x54d67a;
        arr[30] = 0x54d680;
        arr[31] = 0x54d693;
        arr[32] = 0x54d6a6;
        arr[33] = 0x54d727;
        arr[34] = 0x54d72d;
        arr[35] = 0x54d733;
        arr[36] = 0x54d73d;
        arr[37] = 0x54d749;
        arr[38] = 0x54d782;
    }
    return GetScrDataField(CallNode54d2b0);
}

int DiePlayerHandlerCopiedCode()
{
    int arr[314], link;

    if (!link)
    {
        link = GetScrDataField(DiePlayerHandlerCopiedCode);
        OpcodeCopiesAdvance(link, CallNode54d2b0(), 0x54d2b0, 0x54d794);
    }
    return link;
}

void DiePlayerHandlerEntry(int plrUnit)  //@brief. 해당 유저를 재정의된 시스템에 등록합니다
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
    {
        SetMemory(ptr + 0x2d4, DiePlayerHandlerCopiedCode());  //@brief. 플레이어 데스 재정의 핸들러 등록!
        SetMemory(ptr + 0x2e8, PlayerUpdate4f8100());       //@brief. 플레이어 업데이트 재정의 핸들러 등록!
    }
}

int Callnode4f8100()
{
    int node[20], link;

    if (!link)
    {
        node[0] = 0x4f8145;
        node[1] = 0x4f816e;
        node[2] = 0x4f81ad;
        node[3] = 0x4f820b;
        node[4] = 0x4f8218;
        node[5] = 0x4f8221;
        node[6] = 0x4f826b;
        node[7] = 0x4f8326;
        node[8] = 0x4f836e;
        node[9] = 0x4f8381;
        node[10] = 0x4f8387;
        node[11] = 0x4f838f;
        node[12] = 0x4f83a3;
        node[13] = 0x4f83ac;
        node[14] = 0x4f83c3;
        node[15] = 0x4f83dc;
        node[16] = 0x4f83eb;
        node[17] = 0x4f8407;
        node[18] = 0; //nullptr
        link = GetScrDataField(Callnode4f8100);
    }
    return link;
}

int PlayerUpdate4f8100()    //@brief. 유저 업데이트 복사본
{
    int codes[200], link;

    if (!link)
    {
        link = GetScrDataField(PlayerUpdate4f8100);
        OpcodeCopiesAdvance(link, Callnode4f8100(), 0x4f8100, 0x4f8414);
        FixCallOpcode(link + 0x287, PlayerUpdate4f8460());  //@brief. 4f8460으로 링크
    }
    return link;
}

int PlayerUpdate4f8460()
{
    int arr[75], link;

    if (!link)
    {
        arr[0] = 0x530CEC83; arr[1] = 0x748B5655; arr[2] = 0x31571C24; arr[3] = 0xECBE8BC0; arr[4] = 0x89000002; arr[5] = 0x89202444; arr[6] = 0x8A142444;
        arr[7] = 0xF8835847; arr[8] = 0x83427721; arr[9] = 0x077404F8; arr[10] = 0x8C8524FF; arr[11] = 0x8B004F99; arr[12] = 0x84EA0415; arr[13] = 0x88AE8B00;
        arr[14] = 0xA1000000; arr[15] = 0x0085B3FC; arr[16] = 0xE8D1EA29; arr[17] = 0x1776C239; arr[18] = 0x00040068; arr[19] = 0x4CDEE800; arr[20] = 0xC483F28D;
        arr[21] = 0x74C08504; arr[22] = 0x90806812; arr[23] = 0x68C3004F; arr[24] = 0x004F9983; arr[25] = 0x850B68C3; arr[26] = 0x68C3004F; arr[27] = 0x00002000;
        arr[28] = 0x8D4CBBE8; arr[29] = 0x04C483F2; arr[30] = 0x4A74C085; arr[31] = 0x0114878B; arr[32] = 0x80F60000; arr[33] = 0x00000E60; arr[34] = 0x313B7501;
        arr[35] = 0x10888AC9; arr[36] = 0x51000008; arr[37] = 0x9E5227E8; arr[38] = 0x04C483F2; arr[39] = 0x2674C085; arr[40] = 0x000006BB; arr[41] = 0x08583900;
        arr[42] = 0x978B3A74; arr[43] = 0x00000114; arr[44] = 0x8AC03150; arr[45] = 0x00081082; arr[46] = 0x71E85000; arr[47] = 0x83F29E52; arr[48] = 0xC08508C4;
        arr[49] = 0x95E8DF74; arr[50] = 0x85F28D4C; arr[51] = 0x560F74C0; arr[52] = 0x00011BE8; arr[53] = 0x04C48300; arr[54] = 0x4F850B68; arr[55] = 0x8368C300;
        arr[56] = 0xC3004F99; arr[57] = 0x01148F8B; arr[58] = 0xD2310000; arr[59] = 0x0810918A; arr[60] = 0xE8520000; arr[61] = 0xF29E52A8; arr[62] = 0x5604C483;
        arr[63] = 0x9C255FE8; arr[64] = 0x04C483F2; arr[65] = 0x4F850B68; arr[66] = 0x9090C300;
        link = GetScrDataField(PlayerUpdate4f8460);
        FixCallOpcode(link + 0x4d, 0x40a5c0);
        FixCallOpcode(link + 0x70, 0x40a5c0);
        FixCallOpcode(link + 0x94, 0x51ab50);
        FixCallOpcode(link + 0xba, 0x51abc0);
        FixCallOpcode(link + 0xc6, 0x40a5f0);
        // FixCallOpcode(link + 0xd0, 0x4f7ef0);       //@todo. 여기를 서브클래싱 해줘야 한다!
        FixCallOpcode(link + 0xd0, PlayerRespawn004f7ef0());       //@brief. 서브클래싱 링크
        FixCallOpcode(link + 0xf3, 0x51ac30);
        // FixCallOpcode(link + 0xfc, 0x4f7ef0);           //@brief. todo
        FixCallOpcode(link + 0xfc, PlayerRespawn004f7ef0());           //@brief. todo
    }
    return link;
}

int Callnode004f7ef0()
{
    int node[21], link;

    if (!link)
    {
        node[0] = 0x4f7ef7;
        node[1] = 0x4f7f1b;
        node[2] = 0x4f7f48;
        node[3] = 0x4f7f59;
        node[4] = 0x4f7f7c;
        node[5] = 0x4f7f8b;
        node[6] = 0x4f7f98;
        node[7] = 0x4f7fb5;
        node[8] = 0x4f7fd6;
        node[9] = 0x4f7ff1;
        node[10] = 0x4f800d;
        node[11] = 0x4f801a;
        node[12] = 0x4f8028;
        node[13] = 0x4f802f;
        node[14] = 0x4f803d;
        node[15] = 0x4f8055;
        node[16] = 0x4f807a;
        node[17] = 0x4f8087;
        node[18] = 0x4f80a1;
        node[19] = 0; //nullptr
        link = GetScrDataField(Callnode004f7ef0);
    }
    return link;
}

int PlayerRespawn004f7ef0()     //@brief. 유저 리스폰 복사본
{
    int codes[115], link;

    if (!link)
    {
        link = GetScrDataField(PlayerRespawn004f7ef0);
        OpcodeCopiesAdvance(link, Callnode004f7ef0(), 0x4f7ef0, 0x4f80b4);
        SetMemory(link + 0x62, 0x16a9090);
        SetMemory(link + 0x94, (GetMemory(link + 0x94) & (~0xffff)) ^ 0x9090);
        FixCallOpcode(link + 0x9b, RedrawOnRespawn());
    }
    return link;
}

int RedrawOnRespawn()
{
    int arr[16], link;

    if (!link)
    {
        arr[0] = 0x50EC8B55; arr[1] = 0x758B5651; arr[2] = 0xF88E8B08; arr[3] = 0x85000001; arr[4] = 0x8B2674C9; arr[5] = 0x00251041; arr[6] = 0x85000001; arr[7] = 0x511274C0;
        arr[8] = 0x1F8AE856; arr[9] = 0x595EFFDA; arr[10] = 0x41E85651; arr[11] = 0x5EFFDA1F; arr[12] = 0xF0898B59; arr[13] = 0xEB000001; arr[14] = 0x58595ED6; arr[15] = 0x9090C35D;
        link = GetScrDataField(RedrawOnRespawn);
        FixCallOpcode(link + 0x21, 0x4f2fb0);
        FixCallOpcode(link + 0x2a, 0x4f2f70);
    }
    return link;
}