//@ignore_object_type

int player[20];
int MapLang = 0;
int Gvar_6[10];
int Gvar_9[40]; //wizard
int tower[25];
string ObsTypeName;
int MobFieldFunc;
int MapLastUnit;
int HCenterUnit;
int PlrInven[10], PlrNodePtr[10];

int EnableMemoryReadWriteFunction(int t) {}

int ImportUniChatCore()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0xC0685657; arr[1] = 0x6800528A; arr[2] = 0x00507250; arr[3] = 0x8B2414FF; arr[4] = 0x2414FFF8;
        arr[5] = 0x14FFF08B; arr[6] = 0x56505724; arr[7] = 0x102454FF; arr[8] = 0x5E14C483; arr[9] = 0x9090C35F;
        CancelTimer(FrameTimerWithArg(10, ImportUniChatCore, ImportUniChatCore));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniChatCore(int plrPtr, int sPtr, int sTime)
{
    int temp = GetMemory(0x5c3320);

    SetMemory(0x5c3320, ImportUniChatCore());
    GroupRunAway(sPtr, plrPtr, sTime);
    SetMemory(0x5c3320, temp);
}

int ImportUniPrintCore()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x9EB06856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x502414FF;
        arr[5] = 0x2454FF56; arr[6] = 0x10C4830C; arr[7] = 0x9090C35E; 
        CancelTimer(FrameTimerWithArg(10, ImportUniPrintCore, ImportUniPrintCore));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniPrintCore(int plrPtr, int sPtr)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportUniPrintCore());
    Unused5a(sPtr, plrPtr);
    SetMemory(0x5c31f4, temp);
}

int GetByteValue(int ptr)
{
    return GetMemory(ptr) & 0xff;
}

void WriteAddressWordValue(int addr, int word)
{
    int temp = GetMemory(addr) & 0xffff0000;
    SetMemory(addr, temp | word);
}

void NoxUtf8ToUnicode(int src, int dest)
{
    int i = 0, byt;

    while (1)
    {
        byt = GetByteValue(src + i);
        if (!byt) break;
        if (!(byt & 0x80))
        {
            WriteAddressWordValue(dest, byt);
            i ++;
        }
        else if ((byt & 0xe0) == 0xc0)
        {
            WriteAddressWordValue(dest, ((byt & 0x1f) <<6) | (GetByteValue(src + i + 1) & 0x3f));
            i += 2;
        }
        else if ((byt & 0xf0) == 0xe0)
        {
            WriteAddressWordValue(dest, ((byt & 0xf) << 12) | ((GetByteValue(src + i + 1) & 0x3f) << 6) | (GetByteValue(src + i + 2) & 0x3f));
            i += 3;
        }
        dest += 2;
    }
    WriteAddressWordValue(dest, 0);
}

void UniPrint(int sUnit, string sMsg)
{
    int wDest[300];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
        {
            CancelTimer(FrameTimerWithArg(10, UniPrint, UniPrint));
            link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        }
        NoxUtf8ToUnicode(str, link + 8);
        UniPrintCore(ptr, link + 8);
    }
}

void UniChatMessage(int sUnit, string sMsg, int duration)
{
    int wDest[300];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
        {
            CancelTimer(FrameTimerWithArg(10, UniChatMessage, UniChatMessage));
            link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        }
        NoxUtf8ToUnicode(str, link + 12);
        UniChatCore(ptr, link + 12, duration);
    }
}

void UniPrintToAll(string sMsg)
{
    int wDest[300];
    int plrPtr = 0x62f9e0, link, str = SToInt(sMsg), i;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, UniPrint, UniPrint));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c)) + 4;
    }
    str = GetMemory(0x97bb40 + (str * 4));
    NoxUtf8ToUnicode(str, link);
    for (i = 0 ; i < 32 ; i ++)
    {
        if (GetMemory(plrPtr))
            UniPrintCore(GetMemory(plrPtr), link);
        plrPtr += 0x12dc;
    }
}

void GiveHideInventory(int unit, int headNode)
{
    int curNode = headNode, delNode;

    while (IsObjectOn(curNode))
    {
        if (IsObjectOn(ToInt(GetObjectZ(curNode))))
            Pickup(unit, ToInt(GetObjectZ(curNode)));
        delNode = curNode;
        curNode = GetOwner(curNode);
        Delete(delNode);
    }
}

int AddMyInvenList(int inv, int prevNode)
{
    int unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(inv), GetObjectY(inv));

    if (IsObjectOn(prevNode))
    {
        SetOwner(prevNode, unit);
    }
    Raise(unit, inv);
    return unit;
}

void ClearInvenNodes(int headNode)
{
    int curNode = headNode, delNode;

    while (IsObjectOn(curNode))
    {
        curNode = GetOwner(curNode);
        if (ToInt(GetObjectZ(delNode)))
            Delete(ToInt(GetObjectZ(delNode)));
        Delete(delNode);
    }
}

int HideInventoryOnPlayerDeath(int cur, int tempLocation)
{
    int inv = cur, prevNode = 0;

    if (IsObjectOn(inv))
    {
        while (inv)
        {
            MoveObject(inv, GetWaypointX(tempLocation), GetWaypointY(tempLocation));
            prevNode = AddMyInvenList(inv, prevNode);
            inv = GetPreviousItem(inv);
        }
    }
    return prevNode;
}

void DelayGiveItem(int ptr)
{
	int owner = GetOwner(ptr), item = ToInt(GetObjectZ(ptr));

	if (CurrentHealth(owner) && IsObjectOn(item))
		Pickup(owner, item);
	Delete(ptr);
}

void DelayPickup(int owner, int item)
{
	int unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(owner), GetObjectY(owner));

	Raise(unit, item);
	SetOwner(owner, unit);
	FrameTimerWithArg(1, unit, DelayGiveItem);
}

int ShirtAndPantSorting(int inv, int unit)
{
	int cur = inv, resUnit = 0;

	while (cur)
	{
		if (HasClass(cur, "ARMOR"))
		{
			if (HasSubclass(cur, "PANTS") || HasSubclass(cur, "SHIRT"))
			{
				Drop(unit, cur);
				DelayPickup(unit, cur);
				resUnit = cur;
			}
		}
		cur = GetPreviousItem(cur);
	}
	return resUnit;
}

int ShirtAndPantDropMakeNode(int unit, int prevNode, int tempLocation)
{
    int inv = GetLastItem(unit);

    while (inv)
    {
        if (HasClass(inv, "ARMOR"))
        {
            if (HasSubclass(inv, "PANTS") || HasSubclass(inv, "SHIRT"))
            {
                Drop(unit, inv);
                MoveObject(inv, GetWaypointX(tempLocation), GetWaypointY(tempLocation));
                prevNode = AddMyInvenList(inv, prevNode);
            }
        }
        inv = GetPreviousItem(inv);
    }
    return prevNode;
}

int FirstNormalItemPtr(int unit)
{
    int inv = GetLastItem(unit);

    while (inv)
    {
        if (HasClass(inv, "ARMOR"))
        {
            if (HasSubclass(inv, "PANTS") || HasSubclass(inv, "SHIRT"))
            {
                inv = GetPreviousItem(inv);
                continue;
            }
        }
        break;
    }
    return inv;
}

int DrawMagicIcon(int wp)
{
    int unit = CreateObject("AirshipBasketShadow", wp);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x04, 1416);
    return unit;
}

int CheckPlayerInput(int plr_unit)
{
    int ptr = UnitToPtr(plr_unit), temp;

    if (ptr)
    {
        temp = GetMemory(GetMemory(ptr + 0x2ec) + 0x114);
        if (temp)
            return GetMemory(0x81b960 + (GetMemory(temp + 0x810) * 3072));
    }
    return 0;
}

void SetUnitVoice(int unit, int set)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(set));
}

void SetUnitFlags(int unit, int flag)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x10, flag);
}

int GetUnitFlags(int unit)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x10);
    return 0;
}

void UnitNoCollide(int unit)
{
    SetUnitFlags(unit, GetUnitFlags(unit) ^ 0x40);
}

void UnitLinkBinScript(int unit, int binScrAddr)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, binScrAddr);
}

void UnitZeroFleeRange(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0); //Flee Range set to 0
}

void PoisonImmuneUnit(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x0c, GetMemory(ptr + 0x0c) ^ 0x200);
}

void SetUnitScanRange(int unit, float range)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x520, ToInt(range));
    }
}

void SetUnitSpeed(int unit, float ratio)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x224, ToInt(ratio));
}

void BomberSetMonsterCollide(int bombUnit)
{
    int ptr = UnitToPtr(bombUnit);

    if (ptr)
        SetMemory(ptr + 0x2b8, 0x4e83b0);
}

void SetUnitMass(int unit, float ms)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x78, ToInt(ms));
}

int IsPoisonedUnit(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x21c) & 0xff;
    return 0;
}

void SetUnitMaxHealth(int unit, int amount)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x22c), amount);
        SetMemory(GetMemory(ptr + 0x22c) + 0x4, amount);
    }
}

int VoiceList(int num)
{
    int list[75], addr, k;

    if (!list[0])
    {
        addr = GetMemory(0x663eec);
        for (k = 0 ; k < 75 ; k ++)
        {
            list[k] = addr;
            addr = GetMemory(addr + 0x4c);
        }
    }
    return list[num];
}

int ImportCreateAtFunc()
{
    int arr[20], link;

    if (!link)
    {
        arr[0] = 0xAA506856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xFF502414; arr[4] = 0x50042454;
        arr[5] = 0x082454FF; arr[6] = 0x4085048B; arr[7] = 0x680097BB; arr[8] = 0x004E3810; arr[9] = 0x2454FF50;
        arr[10] = 0x08C48304; arr[11] = 0xF685F08B; arr[12] = 0x006A0A74; arr[13] = 0x2454FF56; arr[14] = 0x08C48314;
        arr[15] = 0x50723068; arr[16] = 0x54FF5600; arr[17] = 0xC4830424; arr[18] = 0x5EC03118; arr[19] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportCreateAtFunc, ImportCreateAtFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int CreateObjectAt(string name, float x, float y)
{
    int temp = GetMemory(0x5c3160), res;

    SetMemory(0x5c3160, ImportCreateAtFunc());
    res = CreateMover(SToInt(name), ToInt(x), y);
    SetMemory(0x5c3160, temp);
    if (res) return GetMemory(res + 0x2c);
    else return 0;
}

void CalleeArg(int arg)
{
    CalleeArg(arg);
}

void CallFunctionWithArg(int func, int arg)
{
    int link, ptr;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, CalleeArg, CalleeArg));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x20));
        Delete(ptr);
    }
    else
    {
        SetMemory(link + 0x10, func);
        CalleeArg(arg);
    }
}

string ToStr(int x)
{
    StopScript(x);
}

int SToInt(string x)
{
    StopScript(x);
}

int ColorMaidenAt(int red, int grn, int blue, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("Bear2", xProfile, yProfile);
    int ptr1 = GetMemory(0x750710), k;

    SetMemory(ptr1 + 4, 1385);
    for (k = 0 ; k < 32 ; k ++)
        SetMemory(ptr1 + 0x230 + (k * 4), 0x400);
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x178, 0xa0);
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 4, grn | (blue << 8) | (red << 16) | (grn << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 8, blue | (red << 8) | (grn << 16) | (blue << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 12, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 16, grn | (blue << 8));

    return unit;
}

int WizardRedBinTable()
{
	int arr[62], link, unit;
	if (!link)
	{
		arr[0] = 1635412311; arr[1] = 1699898482; arr[2] = 100; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 80000; arr[17] = 300; arr[18] = 100; arr[19] = 50; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 40; arr[24] = 1067869798; 
		arr[25] = 0; arr[26] = 4; arr[27] = 4; arr[28] = 0; arr[29] = 0; 
		arr[30] = 0; arr[31] = 0; arr[32] = 0; arr[33] = 0; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 0; arr[38] = 0; arr[39] = 0; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 1128792064; arr[54] = 4; 
		arr[55] = 0; arr[56] = 0; arr[57] = 0; arr[58] = 0; arr[59] = 0; 
		arr[60] = 0; arr[61] = 0; 
		unit = CreateObject("AmbBeachBirds", GetMemory(GetMemory(0x83c7fc)));
		Raise(unit, WizardRedBinTable);
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * ToInt(GetObjectZ(unit)) + 0x1c));
		Delete(unit);
	}
	return link;
}

int MaidenBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1684627789; arr[1] = 28261; arr[24] = 1065688760; arr[27] = 1; arr[28] = 1106247680; 
		arr[29] = 35; arr[30] = 1101004800; arr[31] = 2; arr[32] = 22; arr[33] = 30; 
		arr[58] = 5546320; arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, MaidenBinTable, MaidenBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int GoonBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1852796743; arr[19] = 80; arr[24] = 1066192077; arr[26] = 4; arr[28] = 1106247680; 
		arr[29] = 25; arr[30] = 1092616192; arr[31] = 4; arr[32] = 22; arr[33] = 30; 
		arr[34] = 2; arr[35] = 3; arr[36] = 20; arr[57] = 5548176; arr[58] = 5546608; 
		arr[59] = 5543680; 
		CancelTimer(FrameTimerWithArg(10, GoonBinTable, GoonBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int StrongWizardWhiteBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1869771859; arr[1] = 1767335790; arr[2] = 1685217658; arr[3] = 1953065047; arr[4] = 101; 
		arr[19] = 1; arr[24] = 1065772646; arr[37] = 1701996870; arr[38] = 1819042146; arr[53] = 1128792064; 
		arr[55] = 20; arr[56] = 30; arr[57] = 5547984; 
		CancelTimer(FrameTimerWithArg(10, StrongWizardWhiteBinTable, StrongWizardWhiteBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int WeirdlingBeastBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1919509847; arr[1] = 1852402788; arr[2] = 1634026087; arr[3] = 29811; arr[24] = 1065353216; 
		arr[26] = 4; arr[28] = 1101004800; arr[29] = 20; arr[31] = 8; arr[32] = 8; 
		arr[33] = 16; arr[57] = 5548112; arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, WeirdlingBeastBinTable, WeirdlingBeastBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int BlackWidowBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1667329090; arr[1] = 1684625259; arr[2] = 30575; arr[24] = 1069547520; arr[26] = 4; 
		arr[27] = 3; arr[28] = 1097859072; arr[29] = 25; arr[31] = 8; arr[32] = 13; 
		arr[33] = 21; arr[34] = 50; arr[35] = 3; arr[36] = 9; arr[37] = 1684631635; 
		arr[38] = 1884516965; arr[39] = 29801; arr[53] = 1128792064; arr[55] = 20; arr[56] = 28; 
		arr[59] = 5544896; arr[61] = 45071360; 
		CancelTimer(FrameTimerWithArg(10, BlackWidowBinTable, BlackWidowBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int FireSpriteBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1701996870; arr[1] = 1769107539; arr[2] = 25972; arr[17] = 85; arr[18] = 25; 
		arr[19] = 90; arr[21] = 1065353216; arr[23] = 65544; arr[24] = 1065353216; arr[37] = 1801545047; 
		arr[38] = 1701996870; arr[39] = 1819042146; arr[53] = 1128792064; arr[55] = 15; arr[56] = 21; 
		arr[58] = 5545472; 
		CancelTimer(FrameTimerWithArg(10, FireSpriteBinTable, FireSpriteBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int AirshipCaptainBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1936877889; arr[1] = 1131440488; arr[2] = 1635020897; arr[3] = 28265; arr[17] = 130; 
		arr[18] = 100; arr[19] = 60; arr[21] = 1065353216; arr[23] = 32768; arr[24] = 1067869798; 
		arr[26] = 4; arr[28] = 1106247680; arr[29] = 20; arr[31] = 8; arr[32] = 12; 
		arr[33] = 20; arr[57] = 5547984; arr[58] = 5546320; arr[59] = 5542432; 
		CancelTimer(FrameTimerWithArg(10, AirshipCaptainBinTable, AirshipCaptainBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int LichLord2BinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1751345484; arr[1] = 1685221196; arr[24] = 1065353216; arr[25] = 1; arr[26] = 4; 
		arr[27] = 7; arr[28] = 1108082688; arr[29] = 50; arr[30] = 1106247680; arr[31] = 11; 
		arr[32] = 13; arr[33] = 21; arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, LichLord2BinTable, LichLord2BinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int LichLordBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1751345484; arr[1] = 1685221196; arr[17] = 20; arr[19] = 100; arr[21] = 1065353216; 
		arr[24] = 1065353216; arr[25] = 1; arr[26] = 4; arr[27] = 7; arr[28] = 1108082688; 
		arr[29] = 50; arr[30] = 1092616192; arr[32] = 9; arr[33] = 17; arr[57] = 5548288; 
		arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, LichLordBinTable, LichLordBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int HecubahWithOrbBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1969448264; arr[1] = 1466458466; arr[2] = 1332245609; arr[3] = 25202; arr[17] = 250; 
		arr[18] = 100; arr[19] = 90; arr[21] = 1065353216; arr[24] = 1066192077; arr[25] = 1; 
		arr[26] = 6; arr[27] = 5; arr[37] = 1952539972; arr[38] = 1818313320; arr[39] = 1634879084; 
		arr[40] = 1852140903; arr[41] = 116; arr[53] = 1133903872; arr[55] = 19; arr[56] = 25; 
		CancelTimer(FrameTimerWithArg(10, HecubahWithOrbBinTable, HecubahWithOrbBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int BomberGreenBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1651339074; arr[1] = 1917284965; arr[2] = 7234917; arr[17] = 20; arr[19] = 80; 
		arr[21] = 1065353216; arr[24] = 1065353216; arr[37] = 1819043161; arr[38] = 1951627119; arr[39] = 1750299233; 
		arr[40] = 29807; arr[53] = 1128792064; arr[55] = 7; arr[56] = 11; arr[57] = 5548112; 
		arr[58] = 5547856; 
		CancelTimer(FrameTimerWithArg(10, BomberGreenBinTable, BomberGreenBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int HecubahBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1969448264; arr[1] = 6840674; arr[17] = 300; arr[19] = 100; arr[21] = 1065353216; 
		arr[24] = 1065353216; arr[25] = 1; arr[26] = 4; arr[27] = 7; arr[28] = 1108082688; 
		arr[29] = 50; arr[30] = 1092616192; arr[32] = 10; arr[33] = 18; arr[57] = 5548288; 
		arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, HecubahBinTable, HecubahBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int TalkingSkullBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1802264916; arr[1] = 1399287401; arr[2] = 1819047275; arr[24] = 1065353216; arr[28] = 1106247680; 
		arr[29] = 20; arr[31] = 11; arr[32] = 9; arr[33] = 17; arr[58] = 5546320; 
		arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, TalkingSkullBinTable, TalkingSkullBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int GreenFrogBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1701147207; arr[1] = 1869760110; arr[2] = 103; arr[24] = 1065353216; arr[28] = 1101004800; 
		arr[29] = 20; arr[31] = 10; arr[32] = 6; arr[33] = 11; arr[59] = 5544320; 
		CancelTimer(FrameTimerWithArg(10, GreenFrogBinTable, GreenFrogBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int GetUnitThingID(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x4);
    return 0;
}

void SetUnitStatus(int unit, int stat)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            SetMemory(temp + 0x5a0, stat);
    }
}

int GetUnitStatus(int unit)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            return GetMemory(temp + 0x5a0);
    }
    return 0;
}

int ImportGetSpellNumber()
{
	int arr[11], link;

	if (!link)
	{
		arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x4085048B; arr[3] = 0x680097BB; arr[4] = 0x004243F0; arr[5] = 0x2454FF50;
		arr[6] = 0x08C48304; arr[7] = 0x50723068; arr[8] = 0x54FF5000; arr[9] = 0xC4830424; arr[10] = 0xC3C0310C;
        CancelTimer(FrameTimerWithArg(10, ImportGetSpellNumber, ImportGetSpellNumber));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int GetSpellNumber(string spell)
{
	int temp = GetMemory(0x5c3204), res;

	SetMemory(0x5c3204, ImportGetSpellNumber());
	res = Unused5e(spell);
	SetMemory(0x5c3204, temp);
	return res * 4;
}

int ImportUnitToPtrFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x511B6068; arr[3] = 0x54FF5000; arr[4] = 0xC4830424;
        arr[5] = 0x7230680C; arr[6] = 0xFF500050; arr[7] = 0x83042454; arr[8] = 0xC03108C4; arr[9] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportUnitToPtrFunc, ImportUnitToPtrFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int UnitToPtr(int unit)
{
    int temp = GetMemory(0x5c336c), res;
    SetMemory(0x5c336c, ImportUnitToPtrFunc());
    res = Unknownb8(unit);
    SetMemory(0x5c336c, temp);
	return res;
}

int GetOwner(int unit)
{
    int ptr = UnitToPtr(unit), res;

    if (ptr)
    {
        res = GetMemory(ptr + 0x1fc);
        if (res)
            return GetMemory(res + 0x2c);
    }
    return 0;
}

int GetMemory(int addr)
{
    return Unknownb9(addr);
}

void SetMemory(int addr, int value)
{
    Unused59(addr, value);
}

void ImportBinTable()
{
    WizardRedBinTable();
    BlackWidowBinTable();
    FireSpriteBinTable();
    MaidenBinTable();
    AirshipCaptainBinTable();
    StrongWizardWhiteBinTable();
    WeirdlingBeastBinTable();
    GoonBinTable();
}

void InitNpcDialogLibrary()
{
    ImportTellStoryUniNamePartB();
    ImportTellStoryUniNamePartA();
}

void InitMapDecorations()
{
    FrameTimerWithArg(1, 0, InitGauntletChest);
    FrameTimerWithArg(2, 1, InitGauntletChest);
    FrameTimerWithArg(3, 2, InitGauntletChest);
    FrameTimerWithArg(4, 3, InitGauntletChest);
    FrameTimerWithArg(5, 4, InitGauntletChest);
}

int CheckGameKorLanguage()
{
    if (GetMemory(0x611c04))
        return GetMemory(GetMemory(GetMemory(0x611c04))) == 0xc774d300;
    return 0;
}

void MapInitialize()
{
    int t = EnableMemoryReadWriteFunction(0);

    MapLastUnit = CreateObject("InvisibleLightBlueLow", 1);
    MusicEvent();
    CallFunctionWithArg(0, 0);
    CallFunctionWithArgInt(0, 0);
    ImportBinTable();
    ImportCreateAtFunc();
    ImportUnitToPtrFunc();
    ImportGetSpellNumber();
    ImportUniChatCore();
    ImportUniPrintCore();
    ImportCheckSelfDamage();
    VoiceList(0);
    MasterUnit();
    initializeGuardTower(25);
    MathSine(1, 1.0 / 57.3);
    InitInvPropertiesSet();
    
    MapLang = !CheckGameKorLanguage();
    ObjectOn(Object("mainSwitchForPlayer"));
    FrameTimer(10, PreservePlayerLoop);
    FrameTimer(20, loopIsVisbleTower);
    FrameTimerWithArg(50, 0, HostPlayerTeleport);
    FrameTimer(5, InitMapDecorations);
    FrameTimer(2, InitNpcDialogLibrary);
    FrameTimer(1, SetGameTypeCoopMode);
}

int MasterUnit()
{
    int unit;

    if (!unit)
    {
        MoveWaypoint(137, 5000.0, 200.0);
        unit = CreateObject("Hecubah", 137);
        Frozen(unit, 1);
    }
    return unit;
}

void TurnOffLights()
{
    int door;

    if (!door)
        door = Object("ServiceDoor");
    if (IsLocked(door))
    {
        UniPrint(other, "도시 지하 공동구로 향하는 엘리베이터의 게이트가 열렸습니다.");
        UnlockDoor(door);
    }
    else
    {
        UniPrint(other, "게이트를 잠궜습니다.");
        LockDoor(door);
    }
}

void initializeGuardTower(int max)
{
    int k;
    for (k = max - 1 ; k >= 0 ; k --)
        tower[k] = Object("attackTop" + IntToString(k + 1));
}

float WayRatioX(int wp1, int wp2)
{
    return (GetWaypointX(wp1) - GetWaypointX(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float WayRatioY(int wp1, int wp2)
{
    return (GetWaypointY(wp1) - GetWaypointY(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float GetSineValue(int wp, float c)
{
    float x_ratio = WayRatioX(wp, wp + 1), y_ratio = WayRatioY(wp, wp + 1), res;

    res = GetWaypointX(wp) - GetWaypointX(wp + 1);
    MoveWaypoint(wp + 1, GetWaypointX(wp) - (c * y_ratio) - x_ratio, GetWaypointY(wp) + (c * x_ratio) - y_ratio);
    return res;
}

float MathSine(int angle, float size)
{
    float var_0[91];
    int i, k;
 
    if (!ToInt(var_0[90]))
    {
        MoveWaypoint(angle + 1, GetWaypointX(angle), GetWaypointY(angle) - 1.0);
        for (i = 0 ; i <= 90 ; i ++)
        {
            var_0[i] = GetSineValue(angle, size);
            Delete(k + i + 1);
        }
        return var_0[0];
    }
    k = angle / 90;
    i = angle - (k * 90);

    if (k % 2) i = 90 - i;
    if ((angle / 180) % 2) return -var_0[i] * size;
	else return var_0[i] * size;
}

float UnitAngleCos(int unit, float size)
{
    return MathSine((GetDirection(unit) * 45 / 32) + 90, size);
}

float UnitAngleSin(int unit, float size)
{
    return MathSine(GetDirection(unit) * 45 / 32, size);
}

float UnitRatioX(int unit, int target, float size)
{
    return (GetObjectX(unit) - GetObjectX(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float UnitRatioY(int unit, int target, float size)
{
    return (GetObjectY(unit) - GetObjectY(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

int CheckPlayerSkillFlag(int sPlr)
{
    return player[sPlr + 10] & 0x02;
}

int CheckPlayerSkillFlag2(int sPlr)
{
    return player[sPlr + 10] & 0x04;
}

int CheckPlayerSkillFlag3(int sPlr)
{
    return player[sPlr + 10] & 0x08;
}

void SetPlayerSkillFlag(int sPlr)
{
    player[sPlr + 10] = player[sPlr + 10] ^ 0x02;
}

void SetPlayerSkillFlag2(int sPlr)
{
    player[sPlr + 10] = player[sPlr + 10] ^ 0x04;
}

void SetPlayerSkillFlag3(int sPlr)
{
    player[sPlr + 10] = player[sPlr + 10] ^ 0x08;
}

int CheckPlayerDeathFlag(int sPlr)
{
    return player[sPlr + 10] & 0x80000000;
}

void SetPlayerDeathFlag(int sPlr)
{
    player[sPlr + 10] = player[sPlr + 10] ^ 0x80000000;
}

void EmptyAll(int sUnit)
{
    while (GetLastItem(sUnit))
        Delete(GetLastItem(sUnit));
}

void PlayerJoinTheMap(int sPlr)
{
    EmptyAll(player[sPlr]);
    if (CheckPlayerDeathFlag(sPlr))
    {
        SetPlayerDeathFlag(sPlr);
        GiveHideInventory(player[sPlr], PlrNodePtr[sPlr]);
    }
    if (CheckPlayerSkillFlag3(sPlr))
        PlayerAllEnchantments(player[sPlr]);
    Enchant(player[sPlr], "ENCHANT_ANCHORED", 0.0);
    MoveObject(player[sPlr], GetWaypointX(14), GetWaypointY(14));
    DeleteObjectTimer(CreateObject("BlueRain", 14), 20);
    AudioEvent("BlindOff", 14);
}

void PlayerFailJoin(int sUnit)
{
    Enchant(sUnit, "ENCHANT_FREEZE", 0.0);
    Enchant(sUnit, "ENCHANT_BLINDED", 0.0);
    Enchant(sUnit, "ENCHANT_ANTI_MAGIC", 0.0);
    Enchant(sUnit, "ENCHANT_ANCHORED", 0.0);
    MoveObject(sUnit, GetWaypointX(15), GetWaypointY(15));
    if (HasClass(sUnit, "PLAYER"))
    {
        UniPrint(sUnit, "지금 지도에 플레이어가 너무 많아서 입장하실 수 없습니다");
        UniPrint(sUnit, "Failed join the map- Too may players on the map");
    }
}

void PlayerClassOnInit(int plr, int unit)
{
    player[plr] = unit;
    player[plr + 10] = 1;
    ChangeGold(unit, -GetGold(unit));
    SelfDamageClassEntry(unit);
}

void getPlayer()
{
    int plr, i;

    if (CurrentHealth(other))
    {
        plr = CheckPlayer();
        for (i = 9 ; i >= 0 && plr < 0 ; i --)
        {
            if (!MaxHealth(player[i]))
            {
                PlayerClassOnInit(i, GetCaller());
                plr = i;
                break;
            }
        }
        if (plr + 1)
            PlayerJoinTheMap(plr);
        else
            PlayerFailJoin(other);
    }
}

int GetWordValue(int num)
{
	return num & 0xffff;
}

void WriteAddressByteValue(int addr, int byt)
{
	int temp = GetMemory(addr) & 0xffffff00;
	SetMemory(addr, temp | byt);
}

int NoxUnicodeToUtf8(int src, int destPtr)
{
	int i, byt, dest = destPtr;

	for (i = 0 ; i < 20 ; i ++)
	{
		byt = GetWordValue(GetMemory(src));
        if (!byt) break;
		if (byt < 0x80)
		{
			WriteAddressByteValue(dest, byt);
			dest ++;
		}
		else if (byt < 0x800)
		{
			WriteAddressByteValue(dest, ((byt >> 6) & 0x1f) | 0xc0);
			WriteAddressByteValue(dest + 1, (byt & 0x3f) | 0x80);
			dest += 2;
		}
		else
		{
			WriteAddressByteValue(dest, ((byt >> 12) & 0x0f) | 0xe0);
			WriteAddressByteValue(dest + 1, ((byt >> 6) & 0x3f) | 0x80);
			WriteAddressByteValue(dest + 2, (byt & 0x3f) | 0x80);
			dest += 3;
		}
        src += 2;
	}
    WriteAddressByteValue(dest, 0);
	return dest - destPtr;
}

string PlayerIngameNick(int sUnit)
{
    string emptyName = {
        "00:01234567890123456789abcd0123456789abxyz", "01:01234567890123456789abcd0123456789abxyz",
        "02:01234567890123456789abcd0123456789abxyz", "03:01234567890123456789abcd0123456789abxyz",
        "04:01234567890123456789abcd0123456789abxyz", "05:01234567890123456789abcd0123456789abxyz",
        "06:01234567890123456789abcd0123456789abxyz", "07:01234567890123456789abcd0123456789abxyz",
        "08:01234567890123456789abcd0123456789abxyz", "09:01234567890123456789abcd0123456789abxyz",
        "10:01234567890123456789abcd0123456789abxyz", "11:01234567890123456789abcd0123456789abxyz",
        "12:01234567890123456789abcd0123456789abxyz", "13:01234567890123456789abcd0123456789abxyz",
        "14:01234567890123456789abcd0123456789abxyz", "15:01234567890123456789abcd0123456789abxyz",
        "16:01234567890123456789abcd0123456789abxyz", "17:01234567890123456789abcd0123456789abxyz",
        "18:01234567890123456789abcd0123456789abxyz", "19:01234567890123456789abcd0123456789abxyz",
        "20:01234567890123456789abcd0123456789abxyz", "21:01234567890123456789abcd0123456789abxyz",
        "22:01234567890123456789abcd0123456789abxyz", "23:01234567890123456789abcd0123456789abxyz",
        "24:01234567890123456789abcd0123456789abxyz", "25:01234567890123456789abcd0123456789abxyz",
        "26:01234567890123456789abcd0123456789abxyz", "27:01234567890123456789abcd0123456789abxyz",
        "28:01234567890123456789abcd0123456789abxyz", "29:01234567890123456789abcd0123456789abxyz",
        "30:01234567890123456789abcd0123456789abxyz", "31:01234567890123456789abcd0123456789abxyz"};
    int ptr = UnitToPtr(sUnit), plrIndex, destPtr, srcPtr;
    
    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 4)
        {
            plrIndex = GetMemory(GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x810);
            destPtr = GetMemory(0x97bb40 + ((SToInt(emptyName) + plrIndex) * 4));
            srcPtr = GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x889;
            NoxUnicodeToUtf8(srcPtr, destPtr);
            return ToStr(SToInt(emptyName) + plrIndex);
        }
    }
    return "NULL";
}

void CancelPlayerDialogWithPTR(int plrPtr)
{
    if (GetMemory(GetMemory(plrPtr + 0x2ec)) + 0x11c)
    {
        SetMemory(GetMemory(plrPtr + 0x2ec) + 0x11c, 0);
        SetMemory(GetMemory(GetMemory(plrPtr + 0x2ec) + 0x114) + 0xe60, 0x10);
    }
}

void CancelPlayerDialog(int plrUnit)
{
    int temp = UnitToPtr(plrUnit);

    if (temp)
        CancelPlayerDialogWithPTR(temp);
}

void PlayerFree(int sPlr)
{
    CancelPlayerDialog(player[sPlr]);
    player[sPlr + 10] = 0;
    player[sPlr] = 0;
}

void PlayerOnDeath(int sPlr)
{
    PlrNodePtr[sPlr] = HideInventoryOnPlayerDeath(PlrInven[sPlr], 123 + sPlr);
    PlrNodePtr[sPlr] = ShirtAndPantDropMakeNode(player[sPlr], PlrNodePtr[sPlr], 123 + sPlr);
    if (MapLang)
        UniPrintToAll(PlayerIngameNick(player[sPlr]) + " was shot down by the enemy.");
    else
        UniPrintToAll(PlayerIngameNick(player[sPlr]) + " 님께서 적에게 격추되었습니다");
}

void PlayerCheckUseSkill(int sPlr)
{
    if (HasEnchant(player[sPlr], "ENCHANT_SNEAK"))
    {
        EnchantOff(player[sPlr], "ENCHANT_SNEAK");
        RemoveTreadLightly(player[sPlr]);
        if (CheckPlayerSkillFlag2(sPlr))
            WindBooster(player[sPlr]);
    }
    else if (CheckPlayerSkillFlag(sPlr))
    {
        if (CheckPlayerInput(player[sPlr]) == 47)
            ShotRailGun(player[sPlr]);
    }
    if (CheckPlayerSkillFlag3(sPlr))
        PlayerPoisonAutoCure(player[sPlr]);
}

void PreservePlayerLoop()
{
    int i, topItem[10], sortUnit;

    for (i = 9 ; i >= 0 ; i --)
    {
        while (1)
        {
            if (MaxHealth(player[i]))
            {
                if (GetUnitFlags(player[i]) & 0x40)
                    1;
                else if (CurrentHealth(player[i]))
                {
                    PlayerCheckUseSkill(i);
                    if (topItem[i] ^ GetLastItem(player[i]))
                    {
                        if (!HasEnchant(GetLastItem(player[i]), "ENCHANT_INVULNERABLE"))
                            Enchant(GetLastItem(player[i]), "ENCHANT_INVULNERABLE", 0.0);
                        sortUnit = ShirtAndPantSorting(GetPreviousItem(GetLastItem(player[i])), player[i]);
                        if (sortUnit)
                            topItem[i] = sortUnit;
                        else
                            topItem[i] = GetLastItem(player[i]);
                    }
                    else PlrInven[i] = FirstNormalItemPtr(player[i]);
                    break;
                }
                else
                {
                    if (CheckPlayerDeathFlag(i)) break;
                    else
                    {
                        PlayerOnDeath(i);
                        SetPlayerDeathFlag(i);
                    }
                    break;
                }
            }
            if (player[i + 10])
                PlayerFree(i);
            break;
        }
    }
    FrameTimer(1, PreservePlayerLoop);
}

int DummyUnitCreateAt(string sName, float sX, float sY)
{
    int dUnit = CreateObjectAt(sName, sX, sY);

    ObjectOff(dUnit);
    Damage(dUnit, 0, MaxHealth(dUnit) + 1, -1);
    Frozen(dUnit, 1);
    return dUnit;
}

void RailGunLoop(int gUnit)
{
    int owner = GetOwner(gUnit), dUnit, count = GetDirection(gUnit);

    while (IsObjectOn(gUnit))
    {
        if (CurrentHealth(owner) && count)
        {
            if (IsVisibleTo(gUnit, gUnit + 1) || IsVisibleTo(gUnit + 1, gUnit))
            {
                dUnit = DummyUnitCreateAt("Demon", GetObjectX(gUnit), GetObjectY(gUnit));
                SetOwner(owner, dUnit);
                DeleteObjectTimer(dUnit, 1);
                SetCallback(dUnit, 9, DeathTouched);
                MoveObject(gUnit, GetObjectX(gUnit) + GetObjectZ(gUnit), GetObjectY(gUnit) + GetObjectZ(gUnit + 1));
                LookWithAngle(gUnit, count - 1);
                FrameTimerWithArg(1, gUnit, RailGunLoop);
                Effect("LIGHTNING", GetObjectX(gUnit), GetObjectY(gUnit), GetObjectX(gUnit + 1), GetObjectY(gUnit + 1));
                break;
            }
        }
        Delete(gUnit);
        Delete(gUnit + 1);
        break;
    }
}

void ShotRailGun(int sUnit)
{
    int unit;

    if (CurrentHealth(sUnit))
    {
        if (HasEnchant(sUnit, "ENCHANT_CROWN"))
        {
            if (MapLang)
                UniPrint(sUnit, "please wait... cooldown");
            else
                UniPrint(sUnit, "쿨다운 입니다...");
        }
        else
        {
            unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(sUnit) + UnitAngleCos(sUnit, 25.0), GetObjectY(sUnit) + UnitAngleSin(sUnit, 25.0));
            SetOwner(sUnit, CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)) - 1);
            LookWithAngle(unit, 24);
            Raise(unit, UnitAngleCos(sUnit, 24.0));
            Raise(unit + 1, UnitAngleSin(sUnit, 24.0));
            FrameTimerWithArg(1, unit, RailGunLoop);
            if (MapLang)
                UniChatMessage(sUnit, "MISAKA: Rail Gun!!", 90);
            else
                UniChatMessage(sUnit, "레일건!!", 90);
            Enchant(sUnit, "ENCHANT_CROWN", 10.0);
        }
    }
}

void WindBooster(int sUnit)
{
    PushObjectTo(sUnit, UnitAngleCos(sUnit, 108.0), UnitAngleSin(sUnit, 108.0));
    Effect("RICOCHET", GetObjectX(sUnit), GetObjectY(sUnit), 0.0, 0.0);
    Enchant(sUnit, "ENCHANT_RUN", 0.1);
}

int checkMapBoundary(int location)
{
    float pos_x = GetWaypointX(location);
    float pos_y = GetWaypointY(location);

    if (pos_x > 100.0 && pos_y > 100.0 && pos_x < 5532.0 && pos_y < 5600.0)
        return 1;
    else
        return 0;
}

void DeathTouched()
{
    int owner = GetOwner(self);

    if (CurrentHealth(other) && IsAttackedBy(other, owner))
    {
        Damage(other, owner, 200, 13);
        Enchant(other, "ENCHANT_CHARMING", 0.8);
    }
}

void InitStack()
{
    int k;

    for (k = 9 ; k >= 0 ; k --)
        StackIndex(k);
}

int StackIndex(int num)
{
    int arr[10];
    int cur;

    if (num < 10) //push_data
    {
        if (cur == 10)
        {
            UniPrintToAll("스택이 포화상태 입니다.");
            return -1;
        }
        arr[cur] = num;
        cur ++;
        return 0;
    }
    if (!cur)
    {
        UniPrintToAll("스택이 비어있습니다.");
        return -1;
    }
    cur --;
    return arr[cur];
}

int CheckPlayer()
{
    int k;

    for (k = 9 ; k >= 0 ; k --)
    {
        if (IsCaller(player[k]))
            return k;
    }
    return -1;
}

void buyYourPet()
{
    int unit;
    int idx;
    int plr = CheckPlayer();
    //location: 134
    if (GetGold(other) >= 70000 && plr >= 0)
    {
        idx = StackIndex(10);
        if (idx >= 0)
        {
            if (MapLang)
                UniPrint(other, "I purchased a bodyguard.");
            else
                UniPrint(other, "잔도를 구입하셨습니다.");
            MoveWaypoint(134, GetObjectX(other), GetObjectY(other));
            unit = CreateObject("AirshipCaptain", 134);
            CreateObject("InvisibleLightBlueHigh", 134);
            LookWithAngle(unit + 1, plr);
            Raise(unit + 1, ToFloat(idx));
            SetOwner(player[plr], unit);
            ChangeGold(other, -70000);
            SetCallback(unit, 3, XandorWeapon);
            SetCallback(unit, 5, XandorDead);
            SetDialog(unit, "NORMAL", guardUnit, nullPointer);
        }
    }
    else
    {
        if (MapLang)
            UniPrintToAll("There is not enough gold coins. The bodyguard is 70,000 won.");
        else
            UniPrintToAll("금화가 부족합니다. 잔도는 7만원 입니다.");
    }
}

void XandorDead()
{
    int ptr = GetTrigger() + 1;

    DeleteObjectTimer(self, 60);
    StackIndex(ToInt(GetObjectZ(ptr)));
    Delete(ptr);
}

void XandorWeapon()
{
    int plr = GetDirection(GetTrigger() + 1);

    if (!MaxHealth(player[plr]))
        Damage(self, 0, 9999, 14);
    else if (CurrentHealth(self))
    {
        if (CurrentHealth(other))
        {
            Effect("SENTRY_RAY", GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other));
            Damage(other, player[plr], 75, 16);
        }
        if (!HasEnchant(self, "ENCHANT_VILLAIN"))
        {
            Enchant(self, "ENCHANT_VILLAIN", 0.0);
            FrameTimerWithArg(22, GetTrigger(), XandorResetSight);
        }
    }
}

void XandorResetSight(int unit)
{
    EnchantOff(unit, "ENCHANT_VILLAIN");
    Enchant(unit, "ENCHANT_BLINDED", 0.1);
    AggressionLevel(unit, 1.0);
}

void guardUnit()
{
    if (!IsAttackedBy(self, other) && !HasEnchant(other, "ENCHANT_VILLAIN"))
    {
        Enchant(other, "ENCHANT_VILLAIN", 3.0);
        CreatureFollow(self, other);
        AggressionLevel(self, 0.83);
        if (MapLang)
            UniChatMessage(self, "잔도, 남은체력: " + IntToString(CurrentHealth(self)), 150);
        else
            UniChatMessage(self, "Jandor, HP: " + IntToString(CurrentHealth(self)), 150);
        MoveWaypoint(141, GetObjectX(self), GetObjectY(self));
        AudioEvent("BigGong", 141);
    }
}

void nullPointer()
{
    //dummy_function
}

int FloatToInt(float x)
{
    int i, result = 0;
    float pos = x;

    if (pos < 0.0) pos = -pos;
    pos = pos / 2147483648.0;
    if (pos < 2.0)
    { 
        for (i = 0 ; i < 32 ; i ++)
        {
            if (pos >= 1.0)
            {
                result ++;
                pos -= 1.0;
            }
            if (i != 31) result = result << 1;
            pos *= 2.0;
        }
    }
    else result = 0x7fffffff;
    if (x < 0.0) return -result;
    else return result;
}

void DestroyWallAtUnitPos(int sUnit)
{
    int xPos = FloatToInt(GetObjectX(sUnit)), yPos = FloatToInt(GetObjectY(sUnit));
    int spX, spY, tx, ty, rx;

    if (xPos > yPos) xPos += 23;
    else             yPos += 23;
    spX = (xPos + yPos - 22) / 46;
    spY = (xPos - yPos) / 46;
    tx = spX * 46;
    ty = spY * 46;
    rx = (tx + ty) / 2;
    WallBreak(Wall(rx / 23, (rx - ty) / 23));
}

int GetUnit1C(int sUnit)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        return GetMemory(ptr + 0x1c);
    return 0;
}

void SetUnit1C(int sUnit, int sData)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        SetMemory(ptr + 0x1c, sData);
}

void OrbClassCollide()
{
    int owner = GetOwner(self);

    while (1)
    {
        if (CurrentHealth(other) && IsAttackedBy(other, owner))
        {
            Damage(other, owner, 300, 14);
            Enchant(other, "ENCHANT_CHARMING", 0.3);
            Effect("YELLOW_SPARKS", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
        }
        else if (!GetCaller())
            DestroyWallAtUnitPos(self);
        else
            break;
        Delete(self);
        break;
    }
}

int OrbClassTakeShot(int sOwner)
{
    int mis = CreateObjectAt("DeathBall", GetObjectX(sOwner) + UnitAngleCos(sOwner, 17.0), GetObjectY(sOwner) + UnitAngleSin(sOwner, 17.0));
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2e8, 5483536); //projectile update
    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    CancelTimer(FrameTimerWithArg(10, OrbClassCollide, OrbClassCollide));
    SetMemory(ptr + 0x2fc, GetMemory(GetMemory(0x83395c) + 8));
    SetOwner(sOwner, mis);
    return mis;
}

void OrbClassUseStaff()
{
    int cFps = GetMemory(0x84ea04);
    int cTime = GetUnit1C(self);

    if (MathAbs(cFps - cTime) < 12)
        return;
    if (CurrentHealth(other))
    {
        SetUnit1C(self, cFps);
        PushObject(OrbClassTakeShot(other), 22.0, GetObjectX(other), GetObjectY(other));
        PlaySoundAround(other, 221);
    }
}

int OrbClassUseFunctionNumber()
{
    StopScript(OrbClassUseStaff);
}

int OrbClassCreate(int sUnit)
{
    int staff = CreateObjectAt("OblivionOrb", GetObjectX(sUnit), GetObjectY(sUnit));
    int ptr = GetMemory(0x750710);

    OblivionSetting(staff);
    SetMemory(ptr + 0x2dc, ImportUseItemFunc());
    SetMemory(ptr + 0x2fc, OrbClassUseFunctionNumber());
    return staff;
}

void ShopClassTradeOrb()
{
    if (GetAnswer(self) ^ 1) return;
    if (GetGold(other) >= 50000)
    {
        EnchantOff(other, "ENCHANT_INVULNERABLE");
        EnchantOff(other, "ENCHANT_SHIELD");
        SetUnitHealth(other, 3000);
        ChangeGold(other, -50000);
        OrbClassCreate(other);
        TellStoryUnitName("oAo", "GUITrade.c:TradeVendorAccept", "씹사기 지팡이\n구입 완료!");
        UniPrint(other, "거래가 완료되었습니다! 구입하신 망각의 지팡이는 당신 아래에 있어요");
    }
    else
    {
        if (MapLang)
            UniPrint(other, " * There is not enough money. The purchase of a magic wand is 50,000 won..");
        else
            UniPrint(other, " * 돈이 충분치 않습니다 . 망각의 지팡이 구입은 5만원 입니다 .");
    }
}

void ShopClassDescTradeOrb()
{
    TellStoryUnitName("oAo", "Wiz02:NecroSpiders", "씹사기 지팡이");
    UniPrint(other, "망각의 지팡이를 구입하시겠어요? 1개당 50,000 골드가 요구됩니다");
}

int ShopClassOblivionOrbMarket(int sLocation)
{
    int shop = DummyUnitCreateAt("WizardWhite", GetWaypointX(sLocation), GetWaypointY(sLocation));

    LookWithAngle(shop, 160);
    SetDialog(shop, "YESNO", ShopClassDescTradeOrb, ShopClassTradeOrb);
    StoryPic(shop, "MaleWizardRobe");
    return shop;
}

void goIndoorDunmir() {
    MoveObject(other, GetWaypointX(67), GetWaypointY(67));
}

void outIndoorDunmir() {
    MoveObject(other, GetWaypointX(68), GetWaypointY(68));
}

void LoopManageKeys(int sArg)
{
    int key[5], ptr;

    if (IsLocked(GauntletGate(sArg)) && !GetDirection(key[sArg]))
    {
        key[sArg] = CreateObject(GauntletKeyName(sArg), sArg + 117);
        ptr = GetMemory(0x750710);
        SetMemory(ptr + 0x2c8, ImportAllowAllDrop());
        LookWithAngle(key[sArg], 1);
        if (MapLang)
            UniPrintToAll("Key " + GauntletKeyName(sArg) + " is Respawned.");
        else
            UniPrintToAll("열쇠 " + GauntletKeyName(sArg) + " 를 재 생성 했습니다.");
    }
    SecondTimerWithArg(3, (sArg + 1) % 5, LoopManageKeys);
}

void InitGateset()
{
    GauntletGate(-1);
    SecondTimerWithArg(5, 0, LoopManageKeys);
}

string GauntletKeyName(int sNum)
{
    string sName = {"SilverKey", "GoldKey", "GoldKey", "SapphireKey", "RubyKey"};
    
    return ToStr(SToInt(sName) + sNum);
}

int GauntletGate(int num)
{
    int data[5];

    if (num < 0)
    {
        data[0] = Object("GauntletDoorR");
        data[1] = Object("noKeepGate1");
        data[2] = Object("gearGate");
        data[3] = Object("MidCityGate1");
        data[4] = Object("rubyDoor");
        return 0;
    }
    return data[num];
}

void CaptainTakeBreak() {
    if (CurrentHealth(self) < 5000 - 400) {
        UniChatMessage(self, "Rules.c:Deaths", 90);
        Damage(self, other, 5000, 14);
    }
}

int CreateYellowPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 639); //YellowPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateBlackPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 641); //BlackPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateWhitePotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 640); //WhitePotion
    SetMemory(ptr + 12, GetMemory(ptr + 12) ^ 0x20);
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CheckPotionThingID(int unit)
{
    int thingID = GetUnitThingID(unit), x = unit;

    if (thingID == 639)
        x = CreateYellowPotion(125, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 640)
        x = CreateWhitePotion(100, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 641)
        x = CreateBlackPotion(85, GetObjectX(unit), GetObjectY(unit));
    if (x ^ unit) Delete(unit);
    return x;
}

void MonsterDeathHandler()
{
    CallFunctionWithArgInt(ItemDropFuncPtr() + Random(0, 9), self);
    DeleteObjectTimer(self, 60);
}

void hurtEvent() {
    if (HasClass(other, "WEAPON") && HasSubclass(other,"CHAKRAM"))
        MoveObject(other, GetObjectX(self), GetObjectY(self));
    else if (HasClass(other, "MISSILE") && HasSubclass(other, "MISSILE_COUNTERSPELL"))
    {
        CastSpellObjectObject("SPELL_COUNTERSPELL", self, self);
        RestoreHealth(self, 100);
    }
}
void collisionMonster()
{
    int plr;
    if (CurrentHealth(self) && HasClass(other, "WEAPON") && HasSubclass(other, "ARROW"))
    {
        plr = CheckOwner(other);
        if (plr >= 0)
        {
            if (CurrentHealth(player[plr]) && MaxHealth(player[plr]) == 150)
            {
                MoveWaypoint(140, GetObjectX(self), GetObjectY(self));
                MoveObject(self, 4294.0, 4041.0);
                MoveObject(self, GetWaypointX(140), GetWaypointY(140));
                if (GetWaypointX(140) > 300.0)
                    DeleteObjectTimer(CreateObject("ForceOfNatureCharge", 140), 28);
                AudioEvent("CharmSuccess", 140);
                Damage(self, player[plr], 99, 13);
                Effect("SENTRY_RAY", GetWaypointX(140), GetWaypointY(140), GetObjectX(player[plr]), GetObjectY(player[plr]));
            }
        }
    }
}

int CheckOwner(int unit)
{
    int k;

    for (k = 9 ; k >= 0 ; k --)
    {
        if (IsOwnedBy(unit, player[k]))
            return k;
    }
    return -1;
}

void loopIsVisbleTower()
{
    int idx = idx % 25;
    int k;
    int mis;

    if (CurrentHealth(tower[idx]))
    {
        for (k = 9 ; k >= 0 ; k --)
        {
            if (CurrentHealth(player[k]) && IsVisibleTo(tower[idx], player[k]))
            {
                MoveWaypoint(138, GetObjectX(tower[idx]) - UnitRatioX(tower[idx], player[k], 40.0), GetObjectY(tower[idx]) - UnitRatioY(tower[idx], player[k], 40.0));
                mis = CreateObject("DeathBallFragment", 138);
                SetOwner(MasterUnit(), mis);
                PushObject(mis, -47.0, GetObjectX(player[k]), GetObjectY(player[k]));
            }
        }
    }
    idx ++;
    FrameTimer(1, loopIsVisbleTower);
}

void settingFinalBoss()
{
    int boss = Object("FinalBoss");
    Enchant(boss, "ENCHANT_VAMPIRISM", 0.0);
    SetCallback(boss, 5, setDeathFromBoss);
    SetCallback(boss, 7, beAttackedByBoss);
    FrameTimerWithArg(10, boss, absoluteDurabilityFromArmor);
    FrameTimerWithArg(20, boss, absoluteDurabilityFromWeapon);
}

void absoluteDurabilityFromWeapon(int arg_0) {
    int var_0;
    var_0 = GetLastItem(arg_0);
    while(var_0 != 0) {
        if (HasClass(var_0, "WEAPON") && HasEnchant(var_0, "ENCHANT_INVULNERABLE") != true) {
            Enchant(var_0, "ENCHANT_INVULNERABLE", 0.0);
        }
        var_0 = GetPreviousItem(var_0);
    }
}
void absoluteDurabilityFromArmor(int arg_0) {
    int var_0;
    var_0 = GetLastItem(arg_0);
    while(var_0 != 0)
    {
        if (HasClass(var_0, "ARMOR") && !HasEnchant(var_0, "ENCHANT_INVULNERABLE"))
            Enchant(var_0, "ENCHANT_INVULNERABLE", 0.0);
        var_0 = GetPreviousItem(var_0);
    }
}
void beAttackedByBoss()
{
    int r_pic;

    if (CurrentHealth(self))
    {
        if (CurrentHealth(other))
        {
            if (!HasEnchant(self,"ENCHANT_BURNING"))
            {
                r_pic = Random(0, 2);
                Enchant(self, "ENCHANT_BURNING", 6.0);
                if (!r_pic)
                {
                    MoveWaypoint(108, GetObjectX(self), GetObjectY(self));
                    CastSpellObjectLocation("SPELL_EARTHQUAKE", self, GetWaypointX(108), GetWaypointY(108));
                    CastSpellObjectLocation("SPELL_EARTHQUAKE", self, GetWaypointX(108), GetWaypointY(108));
                    DeleteObjectTimer(CreateObject("ManaBombCharge", 108), 60);
                    Enchant(self, "ENCHANT_INVULNERABLE", 0.0);
                    Enchant(self, "ENCHANT_FREEZE", 0.0);
                    AudioEvent("ManaBombCast", 108);
                    FrameTimerWithArg(57, GetTrigger(), manaBombStrike);
                }
                else if (r_pic == 1)
                {
                    straightFist();
                    FrameTimerWithArg(30, GetTrigger(), DisableBossStable);
                }
                else
                {
                    MoveWaypoint(108, GetObjectX(self), GetObjectY(self));
                    r_pic = CreateObject("InvisibleLightBlueHigh", 108);
                    CreateObject("InvisibleLightBlueHigh", 108);
                    Raise(r_pic, ToFloat(GetTrigger()));
                    Raise(r_pic + 1, ToFloat(GetCaller()));
                    FrameTimerWithArg(Random(1, 90), r_pic, BossCastMeteor);
                    if (!Random(0, 2))
                        FrameTimerWithArg(Random(91, 120), GetTrigger(), teleportToRandomLocation);
                }
            }
        }
        else {
            if (HasClass(other, "FIRE"))
                teleportToRandomLocation(self);
            else if (HasClass(other, "MISSILE"))
            {
                if (GetUnitThingID(other) ^ 706) return;
                CastSpellObjectObject("SPELL_COUNTERSPELL", self, self);
                RestoreHealth(self, 30);
            }
        }
    }
}

void DisableBossStable(int unit)
{
    EnchantOff(unit, "ENCHANT_FREEZE");
    EnchantOff(unit, "ENCHANT_INVULNERABLE");
}

void manaBombStrike(int unit)
{
    int k;

    if (CurrentHealth(unit))
    {
        DisableBossStable(unit);
        Effect("WHITE_FLASH", GetObjectX(unit), GetObjectY(unit), 0.0, 0.0);
        CastSpellObjectLocation("SPELL_EARTHQUAKE", unit, GetObjectX(unit), GetObjectY(unit));
        for (k = 9 ; k >= 0 ; k --)
        {
            if (CurrentHealth(player[k]))
            {
                if (Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(player[k]), GetObjectY(player[k])) < 380.0)
                    Damage(player[k], unit, 150, 17);
            }
        }
    }
}
void straightFist()
{
    int k;
    int unit;
    float pos_x = UnitRatioX(self, other, -30.0);
    float pos_y = UnitRatioY(self, other, -30.0);
    string name = "Wizard";
    string magic = "SPELL_FIST";

    MoveWaypoint(108, GetObjectX(self) + pos_x, GetObjectY(self) + pos_y);
    Enchant(self, "ENCHANT_FREEZE", 1.0);
    Enchant(self, "ENCHANT_INVULNERABLE", 1.0);

    unit = CreateObject("InvisibleLightBlueHigh", 108);
    for (k = 0 ; k < 18 ; k ++)
    {
        MoveWaypoint(108, GetWaypointX(108) + pos_x, GetWaypointY(108) + pos_y);
        if (checkMapBoundary(108))
        {
            CreateObject(name, 108);
            DeleteObjectTimer(unit + (k * 2) + 1, 1);
            SetOwner(self, unit + (k * 2) + 1);
            CastSpellObjectLocation(magic, unit + (k * 2) + 1, GetWaypointX(108), GetWaypointY(108));
        }
    }
    Delete(unit);
}

void BossCastMeteor(int ptr)
{
    int boss = ToInt(GetObjectZ(ptr));
    int enemy = ToInt(GetObjectZ(ptr + 1));

    if (CurrentHealth(boss) && CurrentHealth(enemy))
    {
        if (MapLang)
            UniChatMessage(boss, "Meteor SHOT_!!", 90);
        else
            UniChatMessage(boss, "메테오_!!", 90);
        CastSpellObjectLocation("SPELL_METEOR", boss, GetObjectX(enemy), GetObjectY(enemy));
        CastSpellObjectLocation("SPELL_BURN", boss, GetObjectX(enemy), GetObjectY(enemy));
    }
    Delete(ptr);
    Delete(ptr + 1);
}

void setDeathFromBoss()
{
    MoveWaypoint(108, GetObjectX(self), GetObjectY(self));
    Effect("WHITE_FLASH", GetWaypointX(108), GetWaypointY(108), 0.0, 0.0);
    Effect("JIGGLE", GetWaypointX(108), GetWaypointY(108), 75.0, 0.0);
    AudioEvent("FlagCapture", 108);
    if (MapLang)
        UniPrintToAll(" Victory__!! The final boss monster is dead __!! ");
    else
        UniPrintToAll(" 승리__!! 최종 보스를 죽이셨습니다 __!! ");
    StrVictory();
}

void teleportToRandomLocation(int arg_0) {
    int pic_idx = Random(0,6);
    int arr[7];

    if (!arr[0])
    {
        arr[0] = 13; arr[1] = 1194; arr[2] = 115; arr[3] = 1422; arr[4] = 1429; arr[5] = 1387; arr[6] = 116;
    }
    Effect("TELEPORT", GetObjectX(arg_0), GetObjectY(arg_0), 0.0, 0.0);
    MoveObject(arg_0, GetWaypointX(arr[pic_idx]), GetWaypointY(arr[pic_idx]));
    Effect("TELEPORT", GetObjectX(arg_0), GetObjectY(arg_0), 0.0, 0.0);
    AudioEvent("BlindOff", arr[pic_idx]);
}

void initializeSearchIndex(int sUnit)
{
    ImportUnitCollideFunc();
    ImportUseItemFunc();
    ImportUnitDieFunc();
    ImportUnitDropFunc();
    FrameTimerWithArg(1, sUnit, SearchAllNpcs);
    InitStack();
    LockDoor(Object("ServiceDoor"));
}

int GetUnitOffset1C(int sUnit)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        return GetMemory(ptr + 0x1c);
    return 0;
}

void NPCRemoveInventory(int sUnit)
{
    int iCount = GetUnitOffset1C(sUnit);
    int cur = sUnit + 2, i;

    for (i = 0 ; i < iCount ; i ++)
        Delete(cur + (i * 2));
}

void NpcArmorProperty(int sUnit)
{
    int aPtr;

    if (IsObjectOn(sUnit))
        SetArmorProperties(sUnit, 5, Random(3, 5), Random(0, 20), Random(0, 20));
}

void NPCSetInventoryCount(int sUnit)
{
    int ptr = UnitToPtr(sUnit), count = 0, cur;

    if (ptr)
    {
        cur = GetLastItem(sUnit);
        while (cur)
        {
            if (HasClass(cur, "ARMOR"))
                NpcArmorProperty(cur);
            count ++;
            cur = GetPreviousItem(cur);
        }
        SetMemory(ptr + 0x1c, count);
    }
}

void NPCDeathHandler()
{
    NPCRemoveInventory(GetTrigger());
    MonsterDeathHandler();
}

void ProcessNPCPrepare(int sUnit)
{
    SetCallback(sUnit, 5, NPCDeathHandler);
    SetCallback(sUnit, 7, hurtEvent);
    SetCallback(sUnit, 9, collisionMonster);
    NPCSetInventoryCount(sUnit);
}

void RewardClassProc(int sUnit)
{
    CallFunctionWithArgInt(ItemDropFuncPtr() + Random(0, 8), sUnit);
    Delete(sUnit);
}

void SearchResultHandler(int sUnit)
{
    int thingID = GetUnitThingID(sUnit);

    if (thingID == 1343)
        ProcessNPCPrepare(sUnit);
    else if (thingID == 2672)
        RewardClassProc(sUnit);
    else if (thingID == 2675)
        ProcessFieldMonsterMarker(sUnit);
    else if (thingID == 2670)
        ProcessAdvanceFieldMobMarker(sUnit);
}

void SearchAllNpcs(int sCur)
{
    int i;

    for (i = 0 ; i < 20 ; i ++)
        SearchResultHandler(sCur + (i * 2));
    if (sCur < MapLastUnit)
        FrameTimerWithArg(1, sCur + (i * 2), SearchAllNpcs);
    else
    {
        UnlockDoor(Object("StartIxDoorL"));
        UnlockDoor(Object("StartIxDoorR"));
        InitGateset();
        HCenterUnit = DrawMagicIcon(14);
        FrameTimer(1, settingFinalBoss);
        FrameTimer(2, PlaceWarSkillMarket);
        FrameTimer(15, InitObstacleCreate);
        if (MapLang)
            UniPrintToAll(" Unit searching Process is over... ");
        else
            UniPrintToAll(" 유닛 검색이 모두 끝났습니다 ... ");
        FrameTimer(30, StartBgmLoop);
        FrameTimer(3, MapSignSetting);
    }
}

void setJoney(int arg_0)
{
    JournalEntry(player[arg_0], "던미르 마을의 최종 보스를 죽이세요 .", 2);
    if (MaxHealth(player[arg_0]) == 150) {
        JournalEntry(player[arg_0], "전사의 스킬: 늑데의 눈, 작살, 조심스럽게 걷기", 1);
    }
}
void StrVictory()
{
	int arr[13];
	string name = "ManaBombOrb";
	int i = 0;
	arr[0] = 2613312; arr[1] = 301998097; arr[2] = 7080064; arr[3] = 1099186194; arr[4] = 35653889; arr[5] = 268762112; arr[6] = 33718242; arr[7] = 16777488; arr[8] = 132155394; arr[9] = 134217985; 
	arr[10] = 570458248; arr[11] = 2086650888; arr[12] = 536999970; 
	while(i < 13)
	{
		drawStrVictory(arr[i], name);
		i ++;
	}
}

void drawStrVictory(int arg_0, string name)
{
	int count;
	int i;
	float pos_x;
	float pos_y;

	if (!count)
	{
		pos_x = GetWaypointX(108);
		pos_y = GetWaypointY(108);
	}
	for (i = 1 ; i > 0 && count < 403 ; i <<= 1)
	{
		if (i & arg_0)
			CreateObject(name, 108);
		if (count % 38 == 37)
			MoveWaypoint(108, GetWaypointX(108) - 74.000000, GetWaypointY(108) + 2.000000);
		else
			MoveWaypoint(108, GetWaypointX(108) + 2.000000, GetWaypointY(108));
		count ++;
	}
	if (count >= 403)
	{
		count = 0;
		MoveWaypoint(108, pos_x, pos_y);
	}
}

void HorTalkStart()
{
    if (!IsAttackedBy(other, MasterUnit()))
        GoBackHome(other);
}
void WarriorListen() {
}
void WarriorIdle() {
}
void WarriorEngage() {
}

void noKeepHere()
{
    if (IsLocked(Object("noKeepGate1")))
    {
        if (MapLang)
            UniPrintToAll("Administrator: You can't go into an orchard without a key !");
        else
            UniPrintToAll("관리자: 열쇠 없이는 과수원에 들어갈 수 없지 !");
        MoveObject(other, GetWaypointX(116), GetWaypointY(116));
    }
}

void enterBossRoom()
{
    ObjectOff(self);
    if (MapLang)
        UniPrintToAll("You entered the final boss room.");
    else
        UniPrintToAll("보스 방에 입장하셨습니다.");
    FrameTimerWithArg(1, Object("FinalBoss"), ShowBossHp);
}

void ShowBossHp(int boss)
{
    if (CurrentHealth(boss))
    {
        if (MapLang)
            UniChatMessage(MasterUnit(), "FinalBossHP: " + IntToString(CurrentHealth(boss)) + "/ " + IntToString(MaxHealth(boss)), 90);
        else
            UniChatMessage(MasterUnit(), "보스 체력현황: " + IntToString(CurrentHealth(boss)) + "/ " + IntToString(MaxHealth(boss)), 90);
        SecondTimerWithArg(4, boss, ShowBossHp);
    }
}

void pickKeyThenTeleportNpcs()
{
    if (Distance(GetObjectX(other), GetObjectY(other), GetWaypointX(120), GetWaypointY(120)) < 200.0)
    {
        MoveObject(Object("dropNpc1"), GetWaypointX(120), GetWaypointY(120));
        MoveObject(Object("dropNpc2"), GetWaypointX(120), GetWaypointY(120));
        if (MapLang)
            UniChatMessage(Object("dropNpc1"), "Key thief! I will kill you", 150);
        else
            UniChatMessage(Object("dropNpc1"), "잡았다 요놈 ...! 흐흐흐 ...", 150);
        Effect("SMOKE_BLAST", GetWaypointX(120), GetWaypointY(120), 0.0, 0.0);
        ObjectOff(self);
    }
    else if (Distance(GetObjectX(other), GetObjectY(other), GetWaypointX(121), GetWaypointY(121)) < 200.0)
    {
        MoveObject(Object("dropNpc3"), GetWaypointX(121), GetWaypointY(121));
        MoveObject(Object("dropNpc4"), GetWaypointX(121), GetWaypointY(121));
        Effect("SMOKE_BLAST", GetWaypointX(121), GetWaypointY(121), 0.0, 0.0);
        ObjectOff(self);
    }
}

float ToFloat(int x)
{
    StopScript(x);
}

int ToInt(float x)
{
    StopScript(x);
}

void SetUnitHealth(int unit, int amount)
{
    Damage(unit, 0, CurrentHealth(unit) - 1, -1);
    Pickup(unit, CreateObject("RottenMeat", 1));
    Damage(unit, 0, CurrentHealth(unit) - amount, -1);
}

void MovingSewerRows()
{
    int row;
    int k;

    if (!row)
    {
        row = Object("SewerRowBase");
        AudioEvent("SpikeBlockMove", 73);
        ObjectOff(self);
    }
    if (GetObjectX(row) <= 1184.0)
    {
        for (k = 3 ; k >= 0 ; k --)
            MoveObject(row + (k*2), GetObjectX(row + (k* 2)) + 2.0, GetObjectY(row + (k*2)) + 2.0);
        FrameTimer(1, MovingSewerRows);
    }
}

int ImportPlayerAutoTeamSign()
{
    int arr[17], link;

    if (!link)
    {
        arr[0] = 0x4191D068; arr[1] = 0x50515600; arr[2] = 0x000020B9; arr[3] = 0xF9E0B800; arr[4] = 0xC9850062;
        arr[5] = 0x8B492774; arr[6] = 0x12DC0530; arr[7] = 0xF6850000; arr[8] = 0x5150F074; arr[9] = 0x8D24468B;
        arr[10] = 0x016A304E; arr[11] = 0x51016A50; arr[12] = 0x54FF016A; arr[13] = 0xC4832824; arr[14] = 0xEB585914;
        arr[15] = 0x5E5958D5; arr[16] = 0xC304C483;
        CancelTimer(FrameTimerWithArg(10, ImportPlayerAutoTeamSign, ImportPlayerAutoTeamSign));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void PlayerAutoTeamSign()
{
    int temp = GetMemory(0x5c3178);

    SetMemory(0x5c3178, ImportPlayerAutoTeamSign());
    GetHost();
    SetMemory(0x5c3178, temp);
}

void MakeCoopTeam()
{
    int arr[3];
    int teamCount = GetMemory(0x654D5C), temp, link;

    if (!teamCount && !link)
    {
        arr[0] = 0x417E1068; arr[1] = 0x2414FF00; arr[2] = 0xC304C483;
        CancelTimer(FrameTimerWithArg(10, MakeCoopTeam, MakeCoopTeam));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        temp = GetMemory(0x5c3178);
        SetMemory(0x5c3178, link);
        GetHost();
        SetMemory(0x5c3178, temp);
        SetMemory(0x5d53a4, 268640519);
    }
}

void RemoveCoopTeamMode()
{
    int arr[6], link, temp;

    if (!link && GetMemory(0x654d5c) == 1)
    {
        arr[0] = 0x4DB8BE56; arr[1] = 0x20680065; arr[2] = 0x6A00418F; arr[3] = 0x54FF5600; arr[4] = 0xC4830824; arr[5] = 0x90C35E0C;
        CancelTimer(FrameTimerWithArg(10, RemoveCoopTeamMode, RemoveCoopTeamMode));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        temp = GetMemory(0x5c3178);
        SetMemory(0x5c3178, link);
        GetHost();
        SetMemory(0x5c3178, temp);
    }
}

void MapExit()
{
    SelfDamageClassMapExit();
    MusicEvent();
    RemoveCoopTeamMode();
    ResetHostileCritter();
}

void SetGameTypeCoopMode()
{
    CancelTimer(FrameTimerWithArg(10, FieldMobSwordsman, FieldMobSwordsman));
    MobFieldFunc = GetMemory(GetMemory(0x83395c) + 8);
    MakeCoopTeam();
    PlayerAutoTeamSign();
    SetHostileCritter();
}

string WeaponList(int sIdx)
{
    string sName = {
        "WarHammer", "GreatSword", "Longsword", "Sword", "MorningStar",
        "OgreAxe", "BattleAxe", "CrossBow", "Bow", "StaffWooden",
        "RoundChakram", "OblivionHalberd", "OblivionHeart", "OblivionWierdling", "OblivionOrb"
    };
    return ToStr(SToInt(sName) + sIdx);
}

string PotionList(int sIdx)
{
    string sName = {
        "RedPotion", "BluePotion", "CurePoisonPotion", "VampirismPotion", "HastePotion",
        "InvisibilityPotion", "InfravisionPotion", "InvulnerabilityPotion", "ShieldPotion", "ShockProtectPotion",
        "PoisonProtectPotion", "FireProtectPotion", "YellowPotion", "BlackPotion", "WhitePotion"
    };
    return ToStr(SToInt(sName) + sIdx);
}

string ArmorList(int sIdx)
{
    string sName = {
        "OrnateHelm", "Breastplate", "PlateArms", "PlateBoots", "PlateLeggings",
        "ChainCoif", "ChainLeggings", "ChainTunic", "SteelHelm", "SteelShield",
        "WoodenShield", "ConjurerHelm", "LeatherArmbands", "LeatherArmor", "LeatherArmoredBoots",
        "LeatherBoots", "LeatherHelm", "LeatherLeggings", "MedievalCloak", "MedievalPants",
        "MedievalShirt", "WizardRobe", "WizardHelm"
    };
    return ToStr(SToInt(sName) + sIdx);
}

string OblivionList(int sIdx)
{
    string sName = {
        "OblivionHalberd", "OblivionHeart", "OblivionWierdling", "OblivionOrb"
    };
    return ToStr(SToInt(sName) + sIdx);
}

string StaffList(int sIdx)
{
    string sName = {
        "DeathRayWand", "FireStormWand", "ForceWand", "LesserFireballWand", "InfinitePainWand",
        "SulphorousFlareWand", "SulphorousShowerWand"
    };
    return ToStr(SToInt(sName) + sIdx);
}

int WeaponPower(int num)
{
    int addr[6];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4; addr[1] = 0x5BA714; addr[2] = 0x5BA72C; addr[3] = 0x5BA744; addr[4] = 0x5BA75C; addr[5] = 0x5BA774;
        return 0;
    }
    return GetMemory(addr[num]);
}

int ArmorQuality(int num)
{
    int addr[6];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4; addr[1] = 0x5BA7A4; addr[2] = 0x5BA7BC; addr[3] = 0x5BA7D4; addr[4] = 0x5BA7EC; addr[5] = 0x5BA804;
        return 0;
    }
    return GetMemory(addr[num]);
}

int MaterialList(int num)
{
    int addr[6];

    if (!addr[0])
    {
        //Lv.3 ~ 7, null
        addr[0] = 0x5a00a4; addr[1] = 0x5ba834; addr[2] = 0x5ba84c; addr[3] = 0x5ba864; addr[4] = 0x5ba87c; addr[5] = 0x5ba894;
        return 0;
    }
    return GetMemory(addr[num]);
}

int WeaponEffect(int num)
{
    int addr[37];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4;
        addr[1] = 0x5BA1BC; addr[2] = 0x5BA1D4; addr[3] = 0x5BA1EC; addr[4] = 0x5BA204; addr[5] = 0x5BA21C; addr[6] = 0x5BA234; addr[7] = 0x5BA24C; addr[8] = 0x5BA264;
        addr[9] = 0x5BA27C; addr[10] = 0x5BA294; addr[11] = 0x5BA2AC; addr[12] = 0x5BA2C4; addr[13] = 0x5BA2DC; addr[14] = 0x5BA2F4; addr[15] = 0x5BA30C; addr[16] = 0x5BA324;
        addr[17] = 0x5BA33C; addr[18] = 0x5BA354; addr[19] = 0x5BA36C; addr[20] = 0x5BA384; addr[21] = 0x5BA39C; addr[22] = 0x5BA3B4; addr[23] = 0x5BA3CC; addr[24] = 0x5BA3E4;
        addr[25] = 0x5BA3FC; addr[26] = 0x5BA414; addr[27] = 0x5BA42C; addr[28] = 0x5BA444;
        addr[29] = 0x5BA63C; addr[30] = 0x5BA654; addr[31] = 0x5BA66C; addr[32] = 0x5BA684;
        addr[33] = 0x5BA69C; addr[34] = 0x5BA6B4; addr[35] = 0x5BA6CC; addr[36] = 0x5BA6E4;
        return 0;
    }
    return GetMemory(addr[num]);
}

int ArmorEffect(int num)
{
    int addr[21];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4;
        addr[1] = 0x5BA45C; addr[2] = 0x5BA474; addr[3] = 0x5BA48C; addr[4] = 0x5BA4A4; addr[5] = 0x5BA4BC; addr[6] = 0x5BA4D4; addr[7] = 0x5BA4EC; addr[8] = 0x5BA504;
        addr[9] = 0x5BA51C; addr[10] = 0x5BA534; addr[11] = 0x5BA54C; addr[12] = 0x5BA564; addr[13] = 0x5BA57C; addr[14] = 0x5BA594; addr[15] = 0x5BA5AC; addr[16] = 0x5BA5C4;
        addr[17] = 0x5BA5DC; addr[18] = 0x5BA5F4; addr[19] = 0x5BA60C; addr[20] = 0x5BA624;
        return 0;
    }
    return GetMemory(addr[num]);
}

void SetWeaponProperties(int sUnit, int power, int mt_lv, int wfx1, int wfx2)
{
    int k, ptr = UnitToPtr(sUnit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2b4), WeaponPower(power));
        SetMemory(GetMemory(ptr + 0x2b4) + 4, MaterialList(mt_lv));
        SetMemory(GetMemory(ptr + 0x2b4) + 8, WeaponEffect(wfx1));
        SetMemory(GetMemory(ptr + 0x2b4) + 12, WeaponEffect(wfx2));
        for (k = 31 ; k >= 0 ; k --)
            SetMemory(ptr + 0x230 + (k * 4), 0x200);
    }
}

void SetArmorProperties(int sUnit, int qual, int mt_lv, int afx1, int afx2)
{
    int k, ptr = UnitToPtr(sUnit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2b4), ArmorQuality(qual));
        SetMemory(GetMemory(ptr + 0x2b4) + 4, MaterialList(mt_lv));
        SetMemory(GetMemory(ptr + 0x2b4) + 8, ArmorEffect(afx1));
        SetMemory(GetMemory(ptr + 0x2b4) + 12, ArmorEffect(afx2));
        for (k = 31 ; k >= 0 ; k --)
            SetMemory(ptr + 0x230 + (k * 4), 0x200);
    }
}

void OblivionCopies(int sUnit)
{
    int nUnit = CreateObjectAt("OblivionHeart", GetObjectX(sUnit), GetObjectY(sUnit));
    int dPtr = GetMemory(0x750710), sPtr = UnitToPtr(sUnit);

    if (dPtr && sPtr)
    {
        SetMemory(dPtr + 0x1ec, GetMemory(sPtr + 0x1ec));
        SetMemory(dPtr + 0x1f0, GetMemory(sPtr + 0x1f0));
        SetMemory(dPtr + 4, GetMemory(sPtr + 4));
        SetMemory(dPtr + 0x2c4, GetMemory(sPtr + 0x2c4));
        SetMemory(dPtr + 0x2c8, GetMemory(sPtr + 0x2c8));
        SetMemory(dPtr + 0x2f8, GetMemory(sPtr + 0x2f8));
        SetMemory(GetMemory(dPtr + 0x2b4), GetMemory(GetMemory(sPtr + 0x2b4)));
        SetMemory(GetMemory(dPtr + 0x2b4) + 4, GetMemory(GetMemory(sPtr + 0x2b4) + 4));
        SetMemory(GetMemory(dPtr + 0x2b4) + 8, GetMemory(GetMemory(sPtr + 0x2b4) + 8));
        SetMemory(GetMemory(dPtr + 0x2b4) + 0xc, GetMemory(GetMemory(sPtr + 0x2b4) + 0xc));
    }
}

void OblivionDrop()
{
    if (MaxHealth(other))
    {
        MoveObject(self, GetObjectX(other), GetObjectY(other));
        OblivionCopies(self);
    }
    Delete(self);
}

int CalleeArgInt(int arg)
{
    return CalleeArgInt(arg);
}

int CallFunctionWithArgInt(int func, int arg)
{
    int link;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, CalleeArgInt, CalleeArgInt));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x20));
        return 0;
    }
    else
    {
        SetMemory(link + 0x10, func);
        return CalleeArgInt(arg);
    }
}

void FlareWandMissile(int sWand)
{
    int ptr = UnitToPtr(sWand), sAddr;

    if (ptr)
    {
        if (GetMemory(ptr + 4) == 227 || GetMemory(ptr + 4) == 228)
        {
            sAddr = GetMemory(ptr + 0x2e0) + 4;
            SetMemory(sAddr, 0x74616544);
            SetMemory(sAddr + 0x04, 0x6c614268);
            SetMemory(sAddr + 0x08, 0x6172466c);
            SetMemory(sAddr + 0x0c, 0x6e656d67);
            SetMemory(sAddr + 0x10, 0x74);
        }
    }
}

int ItemDropFuncPtr()
{
    StopScript(ItemDropHotPotion);
}

int ItemDropHotPotion(int sUnit)
{
    return CreateObjectAt("RedPotion", GetObjectX(sUnit), GetObjectY(sUnit));
}

int ItemDropPotions(int sUnit)
{
    return CheckPotionThingID(CreateObjectAt(PotionList(Random(0, 14)), GetObjectX(sUnit), GetObjectY(sUnit)));
}

int ItemDropWeapon(int sUnit)
{
    int wUnit = CreateObjectAt(WeaponList(Random(0, 13)), GetObjectX(sUnit), GetObjectY(sUnit));

    OblivionSetting(wUnit);
    if (Random(0, 3))
        SetWeaponProperties(wUnit, Random(0, 5), Random(0, 5), Random(0, 36), Random(0, 36));
    return wUnit;
}

int ItemDropArmor(int sUnit)
{
    int aUnit = CreateObjectAt(ArmorList(Random(0, 22)), GetObjectX(sUnit), GetObjectY(sUnit));

    if (Random(0, 3))
        SetArmorProperties(aUnit, Random(0, 5), Random(0, 5), Random(0, 20), Random(0, 20));
    return aUnit;
}

int ItemDropGold(int sUnit)
{
    string gName = {"QuestGoldChest", "QuestGoldPile", "Gold"};
    int gUnit = CreateObjectAt(ToStr(SToInt(gName) + Random(0, 2)), GetObjectX(sUnit), GetObjectY(sUnit));

    SetMemory(GetMemory(GetMemory(0x750710) + 0x2b4), Random(1000, 5000));
    return gUnit;
}

int ItemDropGerms(int sUnit)
{
    string gName = {"Ruby", "Emerald", "Diamond", "Emerald", "Ruby"};
    
    return CreateObjectAt(ToStr(SToInt(gName) + Random(0, 4)), GetObjectX(sUnit), GetObjectY(sUnit));
}

int ItemDropConsumeEquip(int sUnit)
{
    string wName = {"FanChakram", "Quiver"};
    int wUnit = CreateObjectAt(ToStr(SToInt(wName) + Random(0, 1)), GetObjectX(sUnit), GetObjectY(sUnit));

    SetMemory(GetMemory(GetMemory(0x750710) + 0x2e0), 0xffff);
    if (Random(0, 5))
        SetWeaponProperties(wUnit, Random(0, 5), Random(0, 5), Random(0, 36), Random(0, 36));
    return wUnit;
}

int ItemMagicalStaff(int sUnit)
{
    int wand = CreateObjectAt(StaffList(Random(0, 6)), GetObjectX(sUnit), GetObjectY(sUnit));
    
    FlareWandMissile(wand);
    return wand;
}

int ItemDropSpecial(int sUnit)
{
    string sName = {"Fear", "AmuletofManipulation", "AnkhTradable", "AmuletofCombat", "AmuletofNature", "Candle1", "BottleCandle"};
    int pic = Random(0, 6);
    int unit = CreateObjectAt(ToStr(SToInt(sName) + pic), GetObjectX(sUnit), GetObjectY(sUnit));
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2c4, 5190112);
    SetMemory(ptr + 0x2dc, ImportUseItemFunc());
    CancelTimer(FrameTimerWithArg(10, UseItemFunc1, UseItemFunc1));
    SetMemory(ptr + 0x2fc, GetMemory(GetMemory(0x83395c) + 8) + pic);
    return unit;
}

int ItemDropClassLichKey(int sUnit)
{
    return CreateObjectAt("RedOrbKeyOfTheLich", GetObjectX(sUnit), GetObjectY(sUnit));
}

int ItemOblivion(int sUnit)
{
    int wUnit = CreateObjectAt(OblivionList(Random(0, 2)), GetObjectX(sUnit), GetObjectY(sUnit));
    int wPtr = GetMemory(0x750710);

    if (wPtr && wUnit)
    {
        SetMemory(wPtr + 0x2c4, 0x53a720);
        SetMemory(wPtr + 0x2c8, ImportAllowAllDrop());
        //CancelTimer(FrameTimerWithArg(10, OblivionDrop, OblivionDrop));
        //SetMemory(wPtr + 0x2fc, GetMemory(GetMemory(0x83395c) + 8));
        SetWeaponProperties(wUnit, Random(0, 5), Random(0, 5), Random(0, 36), Random(0, 36));
    }
    return wUnit;
}

void OblivionSetting(int sUnit)
{
    int wPtr = UnitToPtr(sUnit), thingID;

    if (wPtr)
    {
        thingID = GetMemory(wPtr + 4);
        if (thingID >= 222 && thingID <= 225)
        {
            SetMemory(wPtr + 0x2c4, 0x53a720);
            SetMemory(wPtr + 0x2c8, ImportAllowAllDrop());
        }
    }
}

void UnitTeleportToUnitAndHealBuffFx(int sUnit, int dUnit)
{
    float xProfile, yProfile;
    int dUnitPtr = UnitToPtr(dUnit);

    if (dUnitPtr)
    {
        xProfile = ToFloat(GetMemory(dUnitPtr + 0x38));
        yProfile = ToFloat(GetMemory(dUnitPtr + 0x3c));
        MoveObject(sUnit, xProfile, yProfile);
        Effect("GREATER_HEAL", xProfile, yProfile, xProfile, yProfile - 160.0);
    }
}

void BuffHealingHealth(int sUnit)
{
    int owner, count = GetDirection(sUnit);

    while (IsObjectOn(sUnit))
    {
        owner = GetOwner(sUnit);
        if (CurrentHealth(owner) && count)
        {
            UnitTeleportToUnitAndHealBuffFx(sUnit, owner);
            RestoreHealth(owner, 1);
            LookWithAngle(sUnit, count - 1);
            FrameTimerWithArg(2, sUnit, BuffHealingHealth);
            break;
        }
        Delete(sUnit);
        break;
    }
}

void UseItemFunc1()
{
    Delete(self);
    Enchant(other, "ENCHANT_SHOCK", 120.0);
}

void UseItemFunc2()
{
    int home = HCenterUnit;
    Delete(self);
    if (IsVisibleTo(other, home) || IsVisibleTo(home, other))
    {
        if (MapLang)
            UniPrint(other, "Space movement failed: already around destination");
        else
            UniPrint(other, "공간이동 실패: 이미 목적지 주변에 있음");
    }
    else
    {
        Effect("SMOKE_BLAST", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        MoveObject(other, GetObjectX(home), GetObjectY(home));
        Effect("TELEPORT", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    }
}

void UseItemFunc3()
{
    if (CurrentHealth(other))
    {
        Delete(self);
        SplashDamage(GetCaller(), 200, GetObjectX(other), GetObjectY(other), 180.0);
        Effect("WHITE_FLASH", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        DeleteObjectTimer(CreateObjectAt("ManaBombCharge", GetObjectX(other), GetObjectY(other)), 24);
    }
}

void UseItemFunc4()
{
    int trap;

    if (CurrentHealth(other))
    {
        trap = CreateObjectAt("BearTrap", GetObjectX(other), GetObjectY(other));
        SetOwner(other, trap);
        Delete(self);
        if (MapLang)
            UniPrint(other, "A bear trap has been created on the floor. And pick it up and put it in inventory.");
        else
            UniPrint(other, "바닥에 곰덫이 생성되었습니다. 줍기를 통해 인벤토리에 넣을 수 있습니다");
    }
}

void UseItemFunc5()
{
    int trap;

    if (CurrentHealth(other))
    {
        trap = CreateObjectAt("PoisonGasTrap", GetObjectX(other), GetObjectY(other));
        SetOwner(other, trap);
        Delete(self);
        if (MapLang)
            UniPrint(other, "A poison gas trap has been created on the floor. And pick it up and put it in inventory");
        else
            UniPrint(other, "바닥에 독가스 함정이 생성되었습니다. 줍기를 통해 인벤토리에 넣을 수 있습니다");
    }
}

void UseItemFunc6()
{
    if (CurrentHealth(other))
    {
        RestoreHealth(other, MaxHealth(other) - CurrentHealth(other));
        if (IsPoisonedUnit(other))
        {
            CastSpellObjectObject("SPELL_CURE_POISON", other, other);
            if (IsPoisonedUnit(other))
                CastSpellObjectObject("SPELL_CURE_POISON", other, other);
        }
        Enchant(other, "ENCHANT_REFLECTIVE_SHIELD", 120.0);
        Delete(self);
        if (MapLang)
            UniPrint(other, "With the power of one million Gwanghwamun candles ...! (Full health recovery + Poison treatment, reflex shield for 2 minutes)");
        else
            UniPrint(other, "100만 광화문 촛불의 힘으로...! (체력 풀회복 + 맹독 치료, 2분 간 반사방어막)");
    }
}

void UseItemFunc7()
{
    int sUnit;

    if (CurrentHealth(other))
    {
        Delete(self);
        if (HasEnchant(other, "ENCHANT_VILLAIN")) return;
        sUnit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(other), GetObjectY(other));
        SetOwner(other, sUnit);
        LookWithAngle(sUnit, 225);
        FrameTimerWithArg(1, sUnit, BuffHealingHealth);
        Enchant(other, "ENCHANT_VILLAIN", 15.0);
        Enchant(sUnit, "ENCHANT_RUN", 0.0);
        if (MapLang)
            UniPrint(other, "cheer up Mr.Lee  ~ (Increases health recovery rate for 15 seconds)");
        else
            UniPrint(other, "힘을내요 미스터리~ (15 초간 체력회복 속도 증가)");
    }
}

int ImportUnitDropFunc() //0x2fc
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x55565300; arr[2] = 0x14245C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02FCAE8B; arr[5] = 0x53560000; arr[6] = 0x2454FF55; arr[7] = 0x0CC48318;
        arr[8] = 0x835B5E5D; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUnitDropFunc, ImportUnitDropFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int ImportUseItemFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x1424748B; arr[3] = 0x18246C8B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUseItemFunc, ImportUseItemFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void InitInvPropertiesSet()
{
    WeaponEffect(0);
    ArmorEffect(0);
    WeaponPower(0);
    ArmorQuality(0);
    MaterialList(0);
}

int ImportUnitDieFunc()
{
    int arr[9], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x8B565000; arr[2] = 0x8B102474; arr[3] = 0x00022886;
        arr[4] = 0x006A5600; arr[5] = 0x2454FF50; arr[6] = 0x0CC48314; arr[7] = 0xC483585E;
        arr[8] = 0x9090C304; 
        CancelTimer(FrameTimerWithArg(10, ImportUnitDieFunc, ImportUnitDieFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void ObstacleNameTable()
{
    string sType = {
        "Barrel", "Barrel2", "BarrelLOTD", "WaterBarrel", "PiledBarrels1",
        "PiledBarrels2", "LargeBarrel1", "LargeBarrel2", "Crate1", "Crate2",
        "DarkCrate1", "DarkCrate2", "Coffin1", "Coffin2", "Coffin3",
        "Coffin4",
        "BarrelBreaking", "BarrelBreaking", "BarrelBreakingLOTD", "WaterBarrelBreaking", "PiledBarrels1Breaking",
        "PiledBarrels2Breaking", "LargeBarrelBreaking1", "LargeBarrelBreaking2", "CrateBreaking1", "CrateBreaking2",
        "DarkCrateBreaking1", "DarkCrateBreaking2", "CoffinBreaking1", "CoffinBreaking2", "CoffinBreaking3",
        "CoffinBreaking4"
    };
    ObsTypeName = sType;
}

void ObstacleBreaking()
{
    int idx = GetDirection(self), pic;
    float xProfile = GetObjectX(self), yProfile = GetObjectY(self);

    Delete(self);
    pic = CreateObjectAt(ToStr(SToInt(ObsTypeName) + idx + 16), xProfile, yProfile);
    //if (Random(0, 2)) return;
    CallFunctionWithArgInt(ItemDropFuncPtr() + Random(0, 9), pic);
}

int PlacingObstacle(int sUtype, float xProfile, float yProfile, int hitP)
{
    int obst = CreateObjectAt(ToStr(SToInt(ObsTypeName) + sUtype), xProfile, yProfile);
    int sPtr = GetMemory(0x750710);

    if (obst)
    {
        LookWithAngle(obst, sUtype);
        CancelTimer(FrameTimerWithArg(10, ObstacleBreaking, ObstacleBreaking));
        SetMemory(sPtr + 0x228, GetMemory(GetMemory(0x83395c) + 8));
        SetMemory(sPtr + 0x2d4, ImportUnitDieFunc());
        SetUnitMaxHealth(obst, hitP);
    }
    return obst;
}

void InitObstacleCreate2()
{
    PlacingObstacle(2, 5036.0, 5472.0, 200);
    PlacingObstacle(2, 5010.0, 5450.0, 200);
    PlacingObstacle(6, 5072.0, 5056.0, 200);
    PlacingObstacle(12, 5061.5, 4604.5, 200);
    PlacingObstacle(0, 472.0, 3177.0, 85);
    PlacingObstacle(0, 285.0, 3422.0, 85);
    PlacingObstacle(1, 252.0, 3441.0, 85);
    PlacingObstacle(3, 239.0, 3406.0, 100);
    PlacingObstacle(0, 216.0, 3432.0, 100);
    PlacingObstacle(2, 1549.0, 1994.0, 100);
    PlacingObstacle(2, 1570.0, 2021.0, 100);
    PlacingObstacle(2, 1523.0, 1958.0, 100);
    PlacingObstacle(6, 923.0, 640.0, 125);
    PlacingObstacle(3, 3115.0, 3790.0, 125);
    PlacingObstacle(1, 2803.0, 3595.5, 125);
    PlacingObstacle(1, 4917.5, 2197.5, 60);
    PlacingObstacle(11, 3542.0, 4943.5, 125);
    PlacingObstacle(0, 3450.5, 4830.5, 100);
    PlacingObstacle(0, 3588.5, 4868.333, 85);
    PlacingObstacle(0, 3584.5, 4901.5, 100);
    PlacingObstacle(1, 3618.667, 4853.333, 100);
    PlacingObstacle(1, 3493.5, 4788.5, 100);
    PlacingObstacle(2, 3321.5, 3814.5, 125);
    PlacingObstacle(0, 3141.5, 3766.5, 200);
    PlacingObstacle(0, 2977.5, 3933.5, 250);
    PlacingObstacle(1, 1504.5, 4428.5, 250);
    PlacingObstacle(11, 2512.5, 3634.5, 225);
}

void InitObstacleCreate()
{
    ObstacleNameTable();
    PlacingObstacle(0, 3504.0, 4921.0, 100);
    PlacingObstacle(11, 3541.0, 4891.0, 100);
    PlacingObstacle(5, 3588.0, 4822.0, 100);
    PlacingObstacle(10, 3542.0, 4776.0, 100);
    PlacingObstacle(1, 3475.0, 4806.0, 100);
    PlacingObstacle(7, 3634.0, 4896.0, 100);
    PlacingObstacle(11, 3505.333, 4874.667, 100);
    PlacingObstacle(6, 3115.0, 4239.5, 100);
    PlacingObstacle(0, 3347.5, 3828.5, 100);
    PlacingObstacle(3, 3301.5, 3843.5, 100);
    PlacingObstacle(1, 4086.5, 1237.5, 100);
    PlacingObstacle(0, 3343.5, 2194.5, 100);
    PlacingObstacle(11, 1718.0, 5017.0, 100);
    PlacingObstacle(11, 1783.0, 5090.0, 100);
    PlacingObstacle(11, 1817.0, 5123.0, 100);
    PlacingObstacle(11, 1750.0, 5054.0, 100);
    PlacingObstacle(1, 1369.0, 4572.0, 100);
    PlacingObstacle(0, 1451.0, 4496.0, 30);
    PlacingObstacle(1, 1646.0, 4176.0, 70);
    PlacingObstacle(1, 1722.0, 4178.0, 70);
    PlacingObstacle(1, 1792.0, 4032.0, 70);
    PlacingObstacle(1, 1671.0, 4197.0, 70);
    PlacingObstacle(1, 1818.0, 4056.0, 70);
    PlacingObstacle(3, 3406.0, 3894.0, 100);
    PlacingObstacle(5, 3474.0, 3952.0, 100);
    PlacingObstacle(0, 3513.0, 4050.0, 100);
    FrameTimer(1, InitObstacleCreate2);
}

void GreenSparkFx(float xProfile, float yProfile)
{
    int fxTarget = CreateObjectAt("MonsterGenerator", xProfile, yProfile);

    Damage(fxTarget, 0, 1, -1);
    Delete(fxTarget);
}

void PlayerPoisonAutoCure(int sUnit)
{
    if (IsPoisonedUnit(sUnit))
    {
        CastSpellObjectObject("SPELL_CURE_POISON", sUnit, sUnit);
        Effect("VIOLET_SPARKS", GetObjectX(sUnit), GetObjectY(sUnit), 0.0, 0.0);
    }
}

void PlayerAllEnchantments(int sPlrUnit)
{
    Enchant(sPlrUnit, "ENCHANT_PROTECT_FROM_ELECTRICITY", 0.0);
    Enchant(sPlrUnit, "ENCHANT_PROTECT_FROM_FIRE", 0.0);
    Enchant(sPlrUnit, "ENCHANT_PROTECT_FROM_POISON", 0.0);
    Enchant(sPlrUnit, "ENCHANT_VAMPIRISM", 0.0);
    Enchant(sPlrUnit, "ENCHANT_REFLECTIVE_SHIELD", 0.0);
}

void CommonAllEncDesc()
{
    TellStoryUnitName("AmuletDrop", "War05A.scr:HoundGreeting", "올엔첸 구입");
    if (MapLang)
        UniChatMessage(self, "Would you like to buy all-enchantment?\nVarious useful buffs always last\nneed gold: 50000", 120);
    else
        UniChatMessage(self, "올엔첸을 구입하겠습니까?\n각종 유용한 버프가 항상 지속됩니다\n5만원 필요!", 120);
}

void CommonAllEncTrade()
{
    int plr;

    if (GetAnswer(self) ^ 1) return;
    plr = CheckPlayer();
    if (plr + 1)
    {
        if (GetGold(other) >= 50000)
        {
            if (CheckPlayerSkillFlag3(plr))
            {
                if (MapLang)
                    UniPrint(other, "You have already learned this ability");
                else
                    UniPrint(other, "이미 이 능력을 배우셨습니다");
            }
            else
            {
                ChangeGold(other, -50000);
                MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
                SetPlayerSkillFlag3(plr);
                GreenSparkFx(GetWaypointX(1), GetWaypointY(1));
                PlayerAllEnchantments(other);
                Effect("WHITE_FLASH", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
                AudioEvent("SpellPopOffBook", 1);
                if (MapLang)
                    UniPrint(other, "I learned the 'All-Enchant' ability. Useful encent is always maintained and not poisoned");
                else
                    UniPrint(other, "'올엔첸트' 능력을 배웠습니다. 유용한 엔첸트가 항상 유지되며 독에 걸리지 않습니다");
            }
        }
        else
        {
            if (MapLang)
                UniChatMessage(self, "Transaction failure: insufficient balance", 120);
            else
                UniChatMessage(self, "거래실패: 잔액이 부족합니다", 120);
        }
    }
}

void WarWindBoosterDesc()
{
    TellStoryUnitName("AmuletDrop", "War05C.scr:SisterSad", "전사 스킬구입");
    if (MapLang)
        UniChatMessage(self, "Purchase the Warrior's new skill 'Wind Booster' \n10,000 won required!", 120);
    else
        UniChatMessage(self, "전사의 새로운 스킬 '윈드 부스터'을 구입합니다\n10000원 필요!", 120);
}

void WarSkill2MarketTrade()
{
    int plr;

    if (GetAnswer(self) ^ 1) return;
    plr = CheckPlayer();
    if (plr + 1)
    {
        if (GetGold(other) >= 10000)
        {
            if (CheckPlayerSkillFlag2(plr))
            {
                if (MapLang)
                    UniPrint(other, "You have already learned this ability");
                else
                    UniPrint(other, "이미 이 능력을 배우셨습니다");
            }
            else
            {
                ChangeGold(other, -10000);
                MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
                SetPlayerSkillFlag2(plr);
                GreenSparkFx(GetWaypointX(1), GetWaypointY(1));
                Effect("WHITE_FLASH", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
                AudioEvent("SpellPopOffBook", 1);
                if (MapLang)
                    UniPrint(other, "I learned the 'Wind Booster' ability. It fires whenever you cast a skill called TreadLightly.");
                else
                    UniPrint(other, "'윈드 부스터' 능력을 배웠습니다. 조심스럽게 걷기 를 시전할 때 마다 발동됩니다");
            }
        }
        else
        {
            if (MapLang)
                UniChatMessage(self, "Transaction failure: insufficient balance", 120);
            else
                UniChatMessage(self, "거래실패: 잔액이 부족합니다", 120);
        }
    }
}

void WarSkillMarketDesc()
{
    TellStoryUnitName("AmuletDrop", "War02A:BartenderTalk1fStart", "레일건 구입");
    if (MapLang)
        UniChatMessage(self, "I will purchase the new 'Rail Gun' skill of the warrior. \n20,000 won required!", 120);
    else
        UniChatMessage(self, "전사의 새로운 스킬 '레일건'을 구입합니다\n20000원 필요!", 120);
}

void WarSkillMarketTrade()
{
    int plr;

    if (GetAnswer(self) ^ 1) return;
    plr = CheckPlayer();
    if (plr + 1)
    {
        if (GetGold(other) >= 20000)
        {
            if (CheckPlayerSkillFlag(plr))
            {
                if (MapLang)
                    UniPrint(other, "You have already learned this ability");
                else
                    UniPrint(other, "이미 이 능력을 배우셨습니다");
            }
            else
            {
                ChangeGold(other, -20000);
                MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
                SetPlayerSkillFlag(plr);
                GreenSparkFx(GetWaypointX(1), GetWaypointY(1));
                Effect("WHITE_FLASH", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
                AudioEvent("SpellPopOffBook", 1);
                if (MapLang)
                    UniPrint(other, "I learned the 'railgun' ability. Fired whenever the J key is pressed.");
                else
                    UniPrint(other, "'레일건' 능력을 배웠습니다. J 키를 누를 때 마다 발동됩니다");
            }
        }
        else
        {
            if (MapLang)
                UniChatMessage(self, "Transaction failure: insufficient balance", 120);
            else
                UniChatMessage(self, "거래실패: 잔액이 부족합니다", 120);
        }
    }
}

void PlaceWarSkillMarket()
{
    int market = DummyUnitCreateAt("Horrendous", 5267.0, 3285.0);

    LookWithAngle(DummyUnitCreateAt("Swordsman", 5238.5, 3311.5), 160);
    LookWithAngle(DummyUnitCreateAt("UrchinShaman", 5152.5, 3325.5), -32);
    LookWithAngle(market, 160);
    SetDialog(market, "YESNO", WarSkillMarketDesc, WarSkillMarketTrade);
    StoryPic(market, "HorrendousPic");
    StoryPic(market + 1, "GearhartPic");
    StoryPic(market + 2, "MalePic12");
    SetDialog(market + 1, "YESNO", WarWindBoosterDesc, WarSkill2MarketTrade);
    SetDialog(market + 2, "YESNO", CommonAllEncDesc, CommonAllEncTrade);
    ShopClassOblivionOrbMarket(26);
}

void ZombieWhenDead()
{
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    if (MaxHealth(self))
        Damage(self, 0, 100, 14);
    DeleteObjectTimer(CreateObject("MediumFlame", 1), 150);
    MonsterDeathHandler();
    Effect("SPARK_EXPLOSION", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
    AudioEvent("BurnCast", 1);
}

int FieldMobSwordsman(int sUnit)
{
    int mob = CreateObjectAt("Swordsman", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 125);
    return mob;
}

int FieldMobBat(int sUnit)
{
    int mob = CreateObjectAt("Bat", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 64);
    return mob;
}

int FieldMobGreenFrog(int sUnit)
{
    int mob = CreateObjectAt("GreenFrog", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 64);
    UnitLinkBinScript(mob, GreenFrogBinTable());
    return mob;
}

int FieldMobArcher(int sUnit)
{
    int mob = CreateObjectAt("Archer", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 98);
    return mob;
}

int FieldMobWasp(int sUnit)
{
    int mob = CreateObjectAt("Wasp", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 64);
    return mob;
}

int FieldMobGiantLeech(int sUnit)
{
    int mob = CreateObjectAt("GiantLeech", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 120);
    return mob;
}

int FieldMobUrchin(int sUnit)
{
    int mob = CreateObjectAt("Urchin", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 98);
    return mob;
}

int FieldMobBomber(int sUnit)
{
    string bName = {"Bomber", "BomberBlue", "BomberGreen", "BomberYellow"};
    int mob = CreateObjectAt(ToStr(SToInt(bName) + Random(0, 3)), GetObjectX(sUnit), GetObjectY(sUnit));

    UnitLinkBinScript(mob, BomberGreenBinTable());
    BomberSetMonsterCollide(mob);
    SetUnitMaxHealth(mob, 135);
    return mob;
}

int FieldMobMystic(int sUnit)
{
    int mob = CreateObjectAt("Wizard", GetObjectX(sUnit), GetObjectY(sUnit));

    Enchant(mob, "ENCHANT_ANCHORED", 0.0);
    SetUnitMaxHealth(mob, 175);
    return mob;
}

int FieldMobBlackBear(int sUnit)
{
    int mob = CreateObjectAt("BlackBear", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 275);
    return mob;
}

int FieldMobBlackWolf(int sUnit)
{
    int mob = CreateObjectAt("BlackWolf", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 225);
    return mob;
}

int FieldMobBear(int sUnit)
{
    int mob = CreateObjectAt("Bear", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 325);
    return mob;
}

int FieldMobScopion(int sUnit)
{
    int mob = CreateObjectAt("Scorpion", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 260);
    return mob;
}

int FieldMobShade(int sUnit)
{
    int mob = CreateObjectAt("Shade", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 170);
    return mob;
}

int FieldMobSpider(int sUnit)
{
    int mob = CreateObjectAt("BlackWidow", GetObjectX(sUnit), GetObjectY(sUnit));

    UnitLinkBinScript(mob, BlackWidowBinTable());
    SetUnitMaxHealth(mob, 170);
    SetUnitVoice(mob, 33);
    return mob;
}

int FieldMobSkeleton(int sUnit)
{
    int mob = CreateObjectAt("Skeleton", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 250);
    return mob;
}

int FieldMobSkeletonLord(int sUnit)
{
    int mob = CreateObjectAt("SkeletonLord", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 306);
    return mob;
}

int FieldMobGargoyle(int sUnit)
{
    int mob = CreateObjectAt("EvilCherub", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 108);
    return mob;
}

int FieldMobZombie(int sUnit)
{
    int mob = CreateObjectAt("Zombie", GetObjectX(sUnit), GetObjectY(sUnit));

    ObjectOff(mob);
    SetUnitMaxHealth(mob, 240);
    SetCallback(mob, 5, ZombieWhenDead);
    return mob;
}

int FieldMobVileZombie(int sUnit)
{
    int mob = CreateObjectAt("VileZombie", GetObjectX(sUnit), GetObjectY(sUnit));

    ObjectOff(mob);
    SetUnitMaxHealth(mob, 325);
    SetUnitSpeed(mob, 2.4);
    SetCallback(mob, 5, ZombieWhenDead);
    return mob;
}

int FieldMobGhost(int sUnit)
{
    int mob = CreateObjectAt("Ghost", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 98);
    return mob;
}

int FieldMobLich(int sUnit)
{
    int mob = CreateObjectAt("Lich", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 360);
    SetUnitStatus(mob, GetUnitStatus(mob) ^ 0x20);
    UnitLinkBinScript(mob, LichLordBinTable());
    return mob;
}

int FieldMobLichLord(int sUnit)
{
    int mob = CreateObjectAt("LichLord", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 450);
    SetUnitStatus(mob, GetUnitStatus(mob) ^ 0x20);
    UnitLinkBinScript(mob, LichLord2BinTable());
    return mob;
}

int FieldMobMecaGolem(int sUnit)
{
    int mob = CreateObjectAt("MechanicalGolem", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 800);
    return mob;
}

int FieldMobNecromancer(int sUnit)
{
    int unit = CreateObjectAt("Necromancer", GetObjectX(sUnit), GetObjectY(sUnit));
    int uec = GetMemory(GetMemory(0x750710) + 0x2ec);

    SetUnitMaxHealth(unit, 325);
    if (uec)
    {
        SetMemory(uec + 0x528, ToInt(1.0));
        SetMemory(uec + 0x520, ToInt(400.0));
        uec += 0x5d0;
        SetMemory(uec + GetSpellNumber("SPELL_LIGHTNING"), 0x40000000);
		SetMemory(uec + GetSpellNumber("SPELL_SHIELD"), 0x10000000);
        SetMemory(uec + GetSpellNumber("SPELL_SLOW"), 0x20000000);
		SetMemory(uec + GetSpellNumber("SPELL_INVISIBILITY"), 0x10000000);
		SetMemory(uec + GetSpellNumber("SPELL_FIREBALL"), 0x40000000);
        SetMemory(uec + GetSpellNumber("SPELL_INVERSION"), 0x8000000);
        SetMemory(uec + GetSpellNumber("SPELL_COUNTERSPELL"), 0x8000000);
    }
    return unit;
}

int FieldMobFireFairy(int sUnit)
{
    int mob = CreateObjectAt("FireSprite", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 130);
    SetUnitStatus(mob, GetUnitStatus(mob) ^ 0x10000);
    UnitLinkBinScript(mob, FireSpriteBinTable());
    return mob;
}

int FieldMobJandor(int sUnit)
{
    int mob = CreateObjectAt("AirshipCaptain", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 325);
    UnitLinkBinScript(mob, AirshipCaptainBinTable());
    return mob;
}

int FieldMobEmberDemon(int sUnit)
{
    string mName = {"EmberDemon", "MeleeDemon"};
    int mob = CreateObjectAt(ToStr(SToInt(mName) + Random(0, 1)), GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 160);
    return mob;
}

int FieldMobWhiteWizard(int sUnit)
{
    int mob = CreateObjectAt("WizardWhite", GetObjectX(sUnit), GetObjectY(sUnit));

    Enchant(mob, "ENCHANT_ANCHORED", 0.0);
    SetUnitMaxHealth(mob, 275);
    return mob;
}

int FieldMobHecubahWithOrb(int sUnit)
{
    int mob = CreateObjectAt("HecubahWithOrb", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 375);
    SetUnitStatus(mob, GetUnitStatus(mob) ^ 0x10000);
    UnitLinkBinScript(mob, HecubahWithOrbBinTable());
    return mob;
}

int FieldMobOgre(int sUnit)
{
    int mob = CreateObjectAt("OgreBrute", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 295);
    return mob;
}

int FieldMobOgreAxe(int sUnit)
{
    int mob = CreateObjectAt("GruntAxe", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 260);
    return mob;
}

int FieldMobOgreLord(int sUnit)
{
    int mob = CreateObjectAt("OgreWarlord", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 325);
    return mob;
}

int FieldMobGoon(int sUnit)
{
    int mob = CreateObjectAt("Goon", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 225);
    PoisonImmuneUnit(mob);
    UnitLinkBinScript(mob, GoonBinTable());
    return mob;
}

int FieldMobFemale(int sUnit)
{
    int mob = ColorMaidenAt(Random(0, 255), Random(0, 255), Random(0, 255), GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 325);
    PoisonImmuneUnit(mob);
    SetUnitVoice(mob, 7);
    UnitLinkBinScript(mob, MaidenBinTable());

    return mob;
}

int FieldMobBeast(int sUnit)
{
    int mob = CreateObjectAt("WeirdlingBeast", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 240);
    UnitLinkBinScript(mob, WeirdlingBeastBinTable());
    return mob;
}

int FieldMobStoneGolem(int sUnit)
{
    int mob = CreateObjectAt("StoneGolem", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 700);
    return mob;
}

int FieldMobDryad(int sUnit)
{
    int mob = CreateObjectAt("WizardGreen", GetObjectX(sUnit), GetObjectY(sUnit));

    Enchant(mob, "ENCHANT_ANCHORED", 0.0);
    SetUnitMaxHealth(mob, 225);
    return mob;
}

int FieldMobShaman(int sUnit)
{
    int mob = CreateObjectAt("UrchinShaman", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 128);
    return mob;
}

int FieldMobHorrendous(int sUnit)
{
    int mob = CreateObjectAt("Horrendous", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 420);
    SetUnitSpeed(mob, 1.4);
    return mob;
}

int FieldMobDemon(int sUnit)
{
    int mob = CreateObjectAt("Demon", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 500);
    return mob;
}

int FieldMobMimic(int sUnit)
{
    int mob = CreateObjectAt("Mimic", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 600);
    return mob;
}

int FieldMobBeholder(int sUnit)
{
    int mob = CreateObjectAt("Beholder", GetObjectX(sUnit), GetObjectY(sUnit));

    Enchant(mob, "ENCHANT_ANCHORED", 0.0);
    SetUnitMaxHealth(mob, 400);
    return mob;
}

int FieldMobSmallWhiteSpider(int sUnit)
{
    int mob = CreateObjectAt("SmallAlbinoSpider", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 75);
    SetUnitSpeed(mob, 1.1);
    return mob;
}

int FieldMobWhiteWolf(int sUnit)
{
    int mob = CreateObjectAt("WhiteWolf", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 175);
    return mob;
}

int FieldMobAlbinoSpider(int sUnit)
{
    int mob = CreateObjectAt("AlbinoSpider", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 160);
    return mob;
}

int FieldMobMecaFlier(int sUnit)
{
    int mob = CreateObjectAt("FlyingGolem", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 75);
    return mob;
}

int FieldMobImp(int sUnit)
{
    int mob = CreateObjectAt("SmallSpider", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 50);
    SetUnitSpeed(mob, 1.3);
    return mob;
}

int FieldMobSmallSpider(int sUnit)
{
    int mob = CreateObjectAt("SmallAlbinoSpider", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 75);
    SetUnitSpeed(mob, 1.1);
    return mob;
}

int FieldMobWolf(int sUnit)
{
    int mob = CreateObjectAt("Wolf", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitMaxHealth(mob, 140);
    return mob;
}

int FieldMobHecubah(int sUnit)
{
    int mob = CreateObjectAt("Hecubah", GetObjectX(sUnit), GetObjectY(sUnit));

    SetUnitStatus(mob, GetUnitStatus(mob) ^ 0x20);
    UnitLinkBinScript(mob, HecubahBinTable());
    SetUnitMaxHealth(mob, 550);
    return mob;
}

int FieldMobTalkingSkull(int sUnit)
{
    int mob = CreateObjectAt("TalkingSkull", GetObjectX(sUnit), GetObjectY(sUnit));

    Enchant(mob, "ENCHANT_VAMPIRISM", 0.0);
    SetUnitSpeed(mob, 2.7);
    UnitLinkBinScript(mob, TalkingSkullBinTable());
    SetUnitMaxHealth(mob, 240);
    return mob;
}

int FieldMobFireballWiz(int sUnit)
{
    int mob = CreateObjectAt("StrongWizardWhite", GetObjectX(sUnit), GetObjectY(sUnit));

    UnitLinkBinScript(mob, StrongWizardWhiteBinTable());
    SetUnitMaxHealth(mob, 260);
    return mob;
}

void CommonFieldMonsterProperty(int sMob)
{
    RetreatLevel(sMob, 0.0);
    UnitZeroFleeRange(sMob);
    if (IsObjectOn(sMob))
        SetCallback(sMob, 5, MonsterDeathHandler);
    else
        ObjectOn(sMob);
    SetCallback(sMob, 7, hurtEvent);
    SetCallback(sMob, 9, collisionMonster);
}

int GoldAmount(int sUnit)
{
    int gPtr = UnitToPtr(sUnit);
    if (gPtr)
    {
        if (GetMemory(gPtr + 0x14))
            return GetMemory(GetMemory(gPtr + 0x2b4));
    }
    return 0;
}

int ProcessFieldMonsterMarker(int sUnit)
{
    int sArg;
    int uPtr, sFunc;

    if (IsObjectOn(sUnit))
    {
        uPtr = UnitToPtr(sUnit);
        if (uPtr)
        {
            sArg = GetMemory(uPtr + 0x14);
            sFunc = MobFieldFunc + Random(sArg & 0xff, (sArg >> 8) & 0xff);
            CommonFieldMonsterProperty(CallFunctionWithArgInt(sFunc, sUnit));
        }
        Delete(sUnit);
    }
}

int ProcessAdvanceFieldMobMarker(int sUnit)
{
    int sArg, arr[4];

    if (IsObjectOn(sUnit))
    {
        sArg = GoldAmount(sUnit);
        if (sArg)
        {
            arr[0] = sArg & 0xff;
            arr[1] = (sArg >> 8) & 0xff;
            arr[2] = (sArg >> 16) & 0xff;
            arr[3] = (sArg >> 24) & 0xff;
            CommonFieldMonsterProperty(CallFunctionWithArgInt(MobFieldFunc + arr[Random(0, 3)], sUnit));
        }
        Delete(sUnit);
    }
}

void ResetHostileCritter()
{
	//SetMemory(0x833e64, 0x55b);		//CarnivorousPlant
	//SetMemory(0x833e70, 1329);		//FishBig
	//SetMemory(0x833e74, 1330);		//FishSmall
	//SetMemory(0x833e78, 1359);		//Rat
	SetMemory(0x833e7c, 1313);		//GreenFrog
}

void SetHostileCritter()
{
	//SetMemory(0x833e64, 0x540);		//CarnivorousPlant
	//SetMemory(0x833e70, 0x540);		//FishBig
	//SetMemory(0x833e74, 0x540);		//FishSmall
	//SetMemory(0x833e78, 0x540);		//Rat
	SetMemory(0x833e7c, 0x540);		//GreenFrog
}

void UnitVisibleSplash()
{
    int parent = GetOwner(self);
    int spIdx = ToInt(GetObjectZ(parent + 1));

    if (CurrentHealth(GetOwner(parent)))
    {
        if (Distance(GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other)) <= GetObjectX(parent))
        {
            Damage(other, GetOwner(parent), ToInt(GetObjectZ(parent)), 14);
            Enchant(other, "ENCHANT_CHARMING", 0.08);
        }
    }
}

void SplashDamage(int owner, int dam, float x, float y, float range)
{
    int ptr = CreateObjectAt("InvisibleLightBlueHigh", range, y) + 2, k, SplashIdx;

    SplashIdx ++;
    Raise(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(ptr), GetObjectY(ptr)), SplashIdx);
    SetOwner(owner, ptr - 2);
    Raise(ptr - 2, ToFloat(dam));
    for (k = 0 ; k < 4 ; k ++)
    {
        DeleteObjectTimer(CreateObjectAt("WeirdlingBeast", x, y), 1);
        UnitNoCollide(ptr + k);
        LookWithAngle(ptr + k, k * 64);
        SetOwner(ptr - 2, ptr + k);
        SetCallback(ptr + k, 3, UnitVisibleSplash);
    }
    DeleteObjectTimer(ptr - 2, 2);
}

int BgmTable(int idx)
{
	int misc[30];

	if (idx < 0)
	{
		misc[1] = 33; misc[2] = 33; misc[3] = 33; misc[4] = 32; misc[5] = 60;
		misc[6] = 46; misc[7] = 86; misc[8] = 48; misc[9] = 33; misc[10] = 38;
		misc[11] = 32; misc[12] = 39; misc[13] = 36; misc[14] = 73; misc[15] = 264;
		misc[16] = 236; misc[17] = 216; misc[18] = 265; misc[19] = 254; misc[20] = 239;
		misc[21] = 244; misc[22] = 274; misc[23] = 181; misc[24] = 99; misc[25] = 112;
		misc[26] = 68; misc[27] = 150; misc[28] = 118; misc[29] = 54;
		return 0;
	}
	return misc[idx];
}

void PlayMapBgm(int num)
{
	Music(num, 100);
}

void MapBgmLoop()
{
	int key = Random(1, 29);
	MusicEvent();
	SecondTimerWithArg(3, key, PlayMapBgm);
	SecondTimer(BgmTable(key) + 3, MapBgmLoop);
}

void StartBgmLoop()
{
    FrameTimerWithArg(1, ReadStringAddress(0x979740), DisplayMapVersion);
	BgmTable(-1);
	SecondTimer(2, MapBgmLoop);
}

//0x974ac0

string ReadStringAddress(int t)
{
    return ToStr((t - 0x97bb40) / 4);
}

void DisplayMapVersion(string sArg)
{
    int sPtr = 0x974ac0;

    if (MapLang)
        UniPrintToAll("Map Version:::");
    else
        UniPrintToAll("맵 버전:::");
    UniPrintToAll(sArg);
}


int ImportUnitCollideFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x14246C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUnitCollideFunc, ImportUnitCollideFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int MathAbs(int num)
{
    if (num < 0)
        num = -num;
    return num;
}

int CheckSignDelay(int sPtr, int gap)
{
    int cFps = GetMemory(0x84ea04);

    if (MathAbs(cFps - GetMemory(sPtr)) > gap)
    {
        SetMemory(sPtr, cFps);
        return 1;
    }
    return 0;
}

void SignNotification()
{
    int wDest[300];
    int otPtr = GetMemory(0x979720), sePtr = GetMemory(0x979724);
    int link;

    if (otPtr && sePtr)
    {
        if (CheckSignDelay(GetMemory(sePtr + 0x2e0) + 100, 60))
        {
            CancelTimer(FrameTimerWithArg(10, SignNotification, SignNotification));
            if (!link)
                link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
            NoxUtf8ToUnicode(GetMemory(GetMemory(sePtr + 0x2e0)), link);
            UniPrintCore(otPtr, link);
        }
    }
}

void RegistSignMessage(int sUnit, string sMsg)
{
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg);

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        //NoxUtf8ToUnicode(str, GetMemory(ptr + 0x2e0));
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        CancelTimer(FrameTimerWithArg(10, SignNotification, SignNotification));
        SetMemory(ptr + 0x2fc, GetMemory(GetMemory(0x83395c) + 8));
        SetMemory(GetMemory(ptr + 0x2e0), str);
    }
}

void MapSignSetting()
{
    if (MapLang)
    {
        RegistSignMessage(Object("DunmirSign1"), "Sign: There is GS-24 Hours Market");
        RegistSignMessage(Object("DunmirSign2"), "Sign: Sinchon Bar (unlimit support SOJU)");
        RegistSignMessage(Object("DunmirSign3"), "In the front, there is a machine room facing the underground sewer.");
        RegistSignMessage(Object("DunmirSign4"), "Selling Oblivion Staff! You can buy it by clicking on the well and you need 50,000 gold.");
        RegistSignMessage(Object("DunmirSign5"), "If you give 70,000 won to this well, a strong bodyguard will be summoned.");
        RegistSignMessage(Object("DunmirSign6"), "HANARO Mart: Everything except the world has nothing.");
        RegistSignMessage(Object("DunmirSign7"), "DunmirFinalBoss's Entrance: you need ruby key and SapphireKey");
        RegistSignMessage(Object("DunmirSign8"), "You can find even more cool items through secret areas hidden all over the map.");
    }
    else
    {
        RegistSignMessage(Object("DunmirSign1"), "표지판: 이곳은 GS25시 편의점 이다");
        RegistSignMessage(Object("DunmirSign2"), "표지판: 신촌 감성주점 (소주 무한리필)");
        RegistSignMessage(Object("DunmirSign3"), "저 앞은 ,지하 하수도로 향하는 기계실 입니다");
        RegistSignMessage(Object("DunmirSign4"), "망각의 지팡이를 판매하고 있어요! 우물을 클릭하면 구입할 수 있고 5만 골드가 필요해요");
        RegistSignMessage(Object("DunmirSign5"), "이 우물에 7만원을 준다면 잔도가 소환될 것이에요");
        RegistSignMessage(Object("DunmirSign6"), "하나로 마트: 세상 모든 물건 없는 것 빼고 다 있습니다");
        RegistSignMessage(Object("DunmirSign7"), "던미르 최종 보스의 방 입구. 이곳에 들어가기 위해서는 루비, 사파이어 열쇠가 필요");
        RegistSignMessage(Object("DunmirSign8"), "맵 곳곳에 숨겨진 비밀구역을 통해 더욱 멋진 아이템을 만나보실 수 있어요");
    }
}

int ImportUniBroadcast()
{
    int arr[6], link;

    if (!link)
    {
        arr[0] = 0x4D9FD068; arr[1] = 0x72506800; arr[2] = 0x14FF0050; arr[3] = 0x106A5024;
        arr[4] = 0x0C2454FF; arr[5] = 0xC310C483;
        CancelTimer(FrameTimerWithArg(10, ImportUniBroadcast, ImportUniBroadcast));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniBroadcast(string sMsg)
{
    int wDest[300];
    int temp = GetMemory(0x5c3108), link, str = GetMemory(0x97bb40 + (SToInt(sMsg) * 4));

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, UniBroadcast, UniBroadcast));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    NoxUtf8ToUnicode(str, link + 4);
    SetMemory(0x5c3108, ImportUniBroadcast());
    Unused1f(link + 4);
    SetMemory(0x5c3108, temp);
}

void GameGuideMessage()
{
    if (MapLang)
        UniBroadcast("How to play:\nRaid the village of Dunmir and destroy all enemies.\nWin by killing the last boss of Dunmir Village");
    else
        UniBroadcast("게임방법:\n던미르 마을을 습격하여 모든 적들을 파괴하세요.\n던미르 마을의 마지막 보스를 죽이면 승리합니다");
}

void HostPlayerTeleport(int sUnit)
{
    MoveObject(sUnit, GetWaypointX(14), GetWaypointY(14));
    FrameTimerWithArg(1, Object("MapFirstUnitScan"), initializeSearchIndex);
    FrameTimer(180, GameGuideMessage);
}

void KorPick()
{
    UniPrint(other, "한글 언어모드 선택됨");
    HostPlayerTeleport(other);
}

void EngPick()
{
    UniPrint(other, "English Language");
    MapLang = 1;
    HostPlayerTeleport(other);
}

void HostPlayerSelectLanguage()
{
    MoveObject(GetHost(), GetWaypointX(12), GetWaypointY(12));
    UniPrint(GetHost(), "언어를 선택하세요");
    UniPrint(GetHost(), "Please select map language");
    RegistSignMessage(Object("LangSign1"), "Language: Korea");
    RegistSignMessage(Object("LangSign2"), "Language: US");
}

int ImportCheckSelfDamage()
{
    int arr[14], link;

    if (!link)
    {
        arr[0] = 0x4C8B5651; arr[1] = 0xC9850C24; arr[2] = 0x748B2374; arr[3] = 0xF6851024; arr[4] = 0xF1391B74; arr[5] = 0x8B501374; arr[6] = 0x0001FC86;
        arr[7] = 0x74C08500; arr[8] = 0x58F08B05; arr[9] = 0xEB58ECEB; arr[10] = 0xC3595E04; arr[11] = 0x68595E90; arr[12] = 0x004E17B0; arr[13] = 0x909090C3;
        CancelTimer(FrameTimerWithArg(10, ImportCheckSelfDamage, ImportCheckSelfDamage));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void SelfDamageClassEntry(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        SetMemory(ptr + 0x2cc, ImportCheckSelfDamage());
}

void SelfDamageClassMapExit()
{
    int pTable = 0x62f9e0, i;

    for (i = 31 ; i >= 0 ; i --)
    {
        if (GetMemory(pTable))
        {
            SetMemory(GetMemory(pTable) + 0x2cc, 0x4e17b0);
            SetMemory(GetMemory(pTable) + 0x2d4, 0x54d2b0);
            CancelPlayerDialogWithPTR(GetMemory(pTable));
        }
        pTable += 0x12dc;
    }
}

int ImportTellStoryUniNamePartB()
{
    int arr[84], link;

    if (!link)
    {
        arr[0] = 0x0424448B; arr[1] = 0x0824548B; arr[2] = 0x008CEC81; arr[3] = 0xC0850000; arr[4] = 0xEC9A8B53; arr[5] = 0x55000002; arr[6] = 0x02ECA88B;
        arr[7] = 0x0F570000; arr[8] = 0x00012184; arr[9] = 0x0840F600; arr[10] = 0x17840F04; arr[11] = 0x8B000001; arr[12] = 0x00A824BC; arr[13] = 0xFF850000;
        arr[14] = 0x0108840F; arr[15] = 0xC9830000; arr[16] = 0x89C033FF; arr[17] = 0x00011C95; arr[18] = 0xAEF25600; arr[19] = 0x748DD1F7; arr[20] = 0xF92B1624;
        arr[21] = 0x7489C18B; arr[22] = 0xF78B1024; arr[23] = 0x10247C8B; arr[24] = 0xC602E9C1; arr[25] = 0xD0142444; arr[26] = 0x152444C6; arr[27] = 0x8BA5F303;
        arr[28] = 0x5CC868C8; arr[29] = 0x1F6A0056; arr[30] = 0xF303E183; arr[31] = 0xC9C8B8A4; arr[32] = 0x4C8D0069; arr[33] = 0x51503E24; arr[34] = 0x0C2454FF;
        arr[35] = 0xB824848B; arr[36] = 0x66000000; arr[37] = 0x842484C7; arr[38] = 0x00000000; arr[39] = 0x38938A00; arr[40] = 0x8D000008; arr[41] = 0x00083ABB;
        arr[42] = 0x24948800; arr[43] = 0x000000AA; arr[44] = 0x86248489; arr[45] = 0x8A000000; arr[46] = 0x10C48307; arr[47] = 0x2374C084; arr[48] = 0x31FFC983;
        arr[49] = 0xF7AEF2C0; arr[50] = 0x8DCF29D1; arr[51] = 0x8B7A2454; arr[52] = 0x8BF78BC1; arr[53] = 0x02E9C1FA; arr[54] = 0xC88BA5F3; arr[55] = 0xF303E183;
        arr[56] = 0x8B2FEBA4; arr[57] = 0x5CD1640D; arr[58] = 0x68158B00; arr[59] = 0xA1005CD1; arr[60] = 0x005CD16C; arr[61] = 0x7A244C89; arr[62] = 0x700D8B66;
        arr[63] = 0x89005CD1; arr[64] = 0x897E2454; arr[65] = 0x00822484; arr[66] = 0x89660000; arr[67] = 0x0086248C; arr[68] = 0x858B0000; arr[69] = 0x00000114;
        arr[70] = 0x4E542068; arr[71] = 0x31016A00; arr[72] = 0x8A006AC9; arr[73] = 0x00081088; arr[74] = 0x24548D00; arr[75] = 0x00876820; arr[76] = 0x51520000;
        arr[77] = 0x142454FF; arr[78] = 0xB424948B; arr[79] = 0x6A000000; arr[80] = 0xC4835200; arr[81] = 0x5D5F5E20; arr[82] = 0x8CC4815B; arr[83] = 0xC3000000;
        CancelTimer(FrameTimerWithArg(10, ImportTellStoryUniNamePartB, ImportTellStoryUniNamePartB));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int ImportTellStoryUniNamePartA()
{
    int arr[19], link;

    if (!link)
    {
        arr[0] = 0x8DE06856; arr[1] = 0x50680054; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x8B2414FF; 
        arr[5] = 0xBB40B50C; arr[6] = 0x148B0097; arr[7] = 0x97BB4085; arr[8] = 0x50685100; arr[9] = 0x520040AF; 
        arr[10] = 0x042454FF; arr[11] = 0x97200D8B; arr[12] = 0xC4830097; arr[13] = 0x24A15008; arr[14] = 0x50009797; 
        arr[15] = 0x2454FF51; arr[16] = 0x10C48314; arr[17] = 0xC483C031; arr[18] = 0x90C35E08;
        CancelTimer(FrameTimerWithArg(10, ImportTellStoryUniNamePartA, ImportTellStoryUniNamePartA));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        SetMemory(link + 2, ImportTellStoryUniNamePartB());
    }
    return link;
}

void TellStoryUnitName(string sAudio, string sDesc, string sUnitName)
{
    int temp = GetMemory(0x5c3290), src = GetMemory(0x97bb40 + (SToInt(sUnitName) * 4));

    SetMemory(0x5c3290, ImportTellStoryUniNamePartA());
    NoxUtf8ToUnicode(src, 0x69C9C8);
    TellStory(sAudio, sDesc);
    SetMemory(0x5c3290, temp);
}

int ImportRemoveSneakDelay()
{
    int arr[7], link;

    if (!link)
    {
        arr[0] = 0x72506850; arr[1] = 0x14FF0050; arr[2] = 0xC3006824; arr[3] = 0x046A004F; arr[4] = 0x2454FF50; arr[5] = 0x10C48308; arr[6] = 0x9090C358;
        CancelTimer(FrameTimerWithArg(10, ImportRemoveSneakDelay, ImportRemoveSneakDelay));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void RemoveTreadLightly(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit), temp = GetMemory(0x5c336c);

    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 0x04)
        {
            SetMemory(0x5c336c, ImportRemoveSneakDelay());
            Unknownb8(ptr);
            SetMemory(0x5c336c, temp);
        }
    }
}

int ImportAllowAllDrop()
{
	int arr[19], link;

	if (!link)
	{
		arr[0] = 0x550CEC83; arr[1] = 0x14246C8B; arr[2] = 0x24748B56; arr[3] = 0xECAE391C; arr[4] = 0x74000001; arr[5] = 0xC0315E08; arr[6] = 0x0CC4835D;
		arr[7] = 0x0845F6C3; arr[8] = 0x68207404; arr[9] = 0x0053EBF0; arr[10] = 0x2454FF56; arr[11] = 0x08C48304; arr[12] = 0x0F74C085; arr[13] = 0x53EC8068;
		arr[14] = 0x56016A00; arr[15] = 0x082454FF; arr[16] = 0x680CC483; arr[17] = 0x004ED301; arr[18] = 0x909090C3;
		CancelTimer(FrameTimerWithArg(10, ImportAllowAllDrop, ImportAllowAllDrop));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int ImportPlaySoundAround()
{
	int arr[17], link;

	if (!link)
	{
		arr[0] = 0x50196068; arr[1] = 0x72506800; arr[2] = 0x50560050; arr[3] = 0x082454FF;
		arr[4] = 0x54FFF08B; arr[5] = 0x006A0824; arr[6] = 0x5650006A; arr[7] = 0x1C2454FF;
		arr[8] = 0x5810C483; arr[9] = 0x08C4835E; arr[10] = 0x909090C3;
		CancelTimer(FrameTimerWithArg(10, ImportPlaySoundAround, ImportPlaySoundAround));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

void PlaySoundAround(int sUnit, int sNumber)
{
	int unitPtr = UnitToPtr(sUnit), temp = GetMemory(0x5c325c);

	if (unitPtr)
	{
		SetMemory(0x5c325c, ImportPlaySoundAround());
		Unused74(unitPtr, sNumber);
		SetMemory(0x5c325c, temp);
	}
}

int ImportChestCollide()
{
	int arr[14], link;

	if (!link)
	{
		arr[0] = 0x50565551; arr[1] = 0x1824748B; arr[2] = 0x14246C8B; arr[3] = 0x02FC858B; arr[4] = 0x10680000; arr[5] = 0x55005073; arr[6] = 0x54FF5056;
		arr[7] = 0x5E580C24; arr[8] = 0xF0858B5D; arr[9] = 0x83000002; arr[10] = 0xC08504C4; arr[11] = 0x595D5E58; arr[12] = 0x40680574; arr[13] = 0xC3004E9C;
		CancelTimer(FrameTimerWithArg(10, ImportChestCollide, ImportChestCollide));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int FindRubyKey(int unit)
{
	int inv = GetLastItem(unit);

	while (inv)
	{
		if (GetUnitThingID(inv) == 2182)
			return inv;
		inv = GetPreviousItem(inv);
	}
	return 0;
}

void ChestCollide()
{
	int cFps = GetMemory(0x84ea04);
	int ptr = UnitToPtr(self), key, item;

	if (ptr && HasClass(other, "PLAYER"))
	{
		if (MathAbs(cFps - GetMemory(ptr + 0x2e4)) > 30)
		{
			SetMemory(ptr + 0x2e4, cFps);
			if (!GetMemory(ptr + 0x2f0))
			{
				if (FindRubyKey(other))
				{
					Delete(FindRubyKey(other));
					item = CreateObjectAt("RewardMarker", GetObjectX(self) + UnitRatioX(other, self, 32.0), GetObjectY(self) + UnitRatioY(other, self, 32.0));
                    RewardClassProc(item);
					SetMemory(ptr + 0x2f0, 1);
					UniPrint(other, "리치 열쇠를 사용하여 잠긴 금고를 열었습니다");
				}
				else
				{
					PlaySoundAround(other, 1012);
					UniPrint(other, "이 금고를 열려면 리치 열쇠가 필요합니다");
				}
			}
		}
	}
}

int ChestCollideFuncNumber()
{
	StopScript(ChestCollide);
}

void ChangeChestHandler(int chestObj)
{
	int ptr = UnitToPtr(chestObj);

	if (ptr)
	{
		SetMemory(ptr + 0x2b8, ImportChestCollide());
		SetMemory(ptr + 0x2fc, ChestCollideFuncNumber());
	}
}

void InitGauntletChest(int multiple)
{
    string boxName = "DunmirBox";
    int i;

    multiple *= 10;
    for (i = 0 ; i < 10 ; i ++)
        ChangeChestHandler(Object(boxName + IntToString(multiple + i + 1)));
}