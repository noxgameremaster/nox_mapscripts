//@ignore_object_type


//2020.02.04 11:15 004c7681 error

int MineMobLZone = 1, HiveDieFunc;
int HomeLocation;
int DungeonDestLoc;
object SpProperty;
int IxThunderTrap;
int MobMuseumCount = 20, LastCreatedUnit;
int MagicRoomCount = 20;
int LavaRoomKeyAmount = 60;
int DungeonArr[30];
int DungeonPick, DungeonCur;
int GForestPtr;
int TombRndPick;
int LastUnitPtr;
int player[20];
int MFrogVarPtr, LastRoomFlag = 1;
int EnableMemoryReadWriteFunction(int t) {}


int ImportAllowAllDrop()
{
	int arr[19], link;

	if (!link)
	{
		arr[0] = 0x550CEC83; arr[1] = 0x14246C8B; arr[2] = 0x24748B56; arr[3] = 0xECAE391C; arr[4] = 0x74000001; arr[5] = 0xC0315E08; arr[6] = 0x0CC4835D;
		arr[7] = 0x0845F6C3; arr[8] = 0x68207404; arr[9] = 0x0053EBF0; arr[10] = 0x2454FF56; arr[11] = 0x08C48304; arr[12] = 0x0F74C085; arr[13] = 0x53EC8068;
		arr[14] = 0x56016A00; arr[15] = 0x082454FF; arr[16] = 0x680CC483; arr[17] = 0x004ED301; arr[18] = 0x909090C3;
		CancelTimer(FrameTimerWithArg(10, ImportAllowAllDrop, ImportAllowAllDrop));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int SpecialPropertyGet()
{
    int wPtr, res;

    if (!res)
    {
        wPtr = UnitToPtr(SpProperty);
        if (wPtr)
            res = GetMemory(GetMemory(wPtr + 0x2b4) + 4);
    }
    return res;
}

int EquipedGetThirdProperty(int eqip)
{
    int ptr = UnitToPtr(eqip);

    if (ptr)
        return GetMemory(GetMemory(ptr + 0x2b4) + 8);
    return 0;
}

int IsMagicWeapon(int weap)
{
    //SetMemory(GetMemory(ptr + 0x2b4) + 4, MaterialList(mt_lv));
    int wPtr = UnitToPtr(weap);

    if (wPtr)
    {
        wPtr = GetMemory(wPtr + 0x2b4);
        if (wPtr)
            return GetMemory(wPtr + 4) == SpecialPropertyGet();
    }
    return 0;
}

int PlayerEquipedWeapon(int unit)
{
    int ptr = UnitToPtr(unit), pic;
    
    if (ptr)
    {
        pic = GetMemory(GetMemory(ptr + 0x2ec) + 0x68);
        if (pic)
            return GetMemory(pic + 0x2c);
    }
    return 0;
}

int UserDamageArrowCreateThing(int owner, float x, float y, int dam, int thingID)
{
    int unit = CreateObjectAt("MercArcherArrow", x, y);
    int ptr = GetMemory(0x750710);

    SetOwner(owner, unit);
    //SetMemory(ptr + 0x14, 0x32);
    if (thingID)
        SetMemory(ptr + 0x04, thingID);
    SetMemory(GetMemory(ptr + 0x2bc) + 4, dam);
    return unit;
}

int MasterMob()
{
    int unit;

    if (!unit)
    {
        unit = CreateObject("Hecubah", 233);
        Frozen(unit, 1);
    }
    return unit;
}

float IntToFloat(int x)
{
    int i, pos = x;
    float result = 0.0;
 
    if (pos < 0) pos = -pos;
    for (i = 0; i < 32; i ++)
    {
        if (pos & 0x80000000) result += 1.0;
        pos = pos << 1;
        if (i != 31) result *= 2.0;
    }
    if (x < 0) return -result;
    else return result;
}

float DistanceUnitToUnit(int unit1, int unit2)
{
    return Distance(GetObjectX(unit1), GetObjectY(unit1), GetObjectX(unit2), GetObjectY(unit2));
}

void DelayYellowLightning(int ptr)
{
	int i, max = GetDirection(ptr);

	if (IsObjectOn(ptr))
	{
		for (i = 0 ; i < max ; i ++)
			CastSpellObjectObject("SPELL_LIGHTNING", ptr + i, ptr + i + 1);
	}
}

void YellowLightningFx(float x1, float y1, float x2, float y2, int dur)
{
	int unit = CreateObjectAt("InvisibleLightBlueHigh", x1, y1) + 2, count, i;
	float vectX, vectY;

	CreateObjectAt("InvisibleLightBlueHigh", x2, y2);
	vectX = UnitRatioX(unit - 1, unit - 2, 32.0);
	vectY = UnitRatioY(unit - 1, unit - 2, 32.0);
	count = FloatToInt(DistanceUnitToUnit(unit - 2, unit - 1) / 32.0);
	DeleteObjectTimer(CreateObjectAt("InvisibleLightBlueHigh", x1, y1), dur);
	for (i = 0 ; i < count ; i ++)
	{
		MoveObject(unit - 2, GetObjectX(unit - 2) + vectX, GetObjectY(unit - 2) + vectY);
		DeleteObjectTimer(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit - 2), GetObjectY(unit - 2)), dur);
		if (IsVisibleTo(unit + i, unit + i + 1))
			LookWithAngle(unit, i + 1);
		else break;
	}
	Delete(unit - 1);
	Delete(unit - 2);
	FrameTimerWithArg(1, unit, DelayYellowLightning);
}

float UnitRatioX(int unit, int target, float size)
{
    return (GetObjectX(unit) - GetObjectX(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float UnitRatioY(int unit, int target, float size)
{
    return (GetObjectY(unit) - GetObjectY(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

int ToInt(float x)
{
    StopScript(x);
}

float ToFloat(int x)
{
    StopScript(x);
}

int SToInt(string x)
{
    StopScript(x);
}

string ToStr(int x)
{
    StopScript(x);
}

int GetMemory(int addr)
{
    return Unknownb9(addr);
}

void SetMemory(int addr, int value)
{
    Unused59(addr, value);
}

int IsPoisonedUnit(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x21c) & 0xff;
    return 0;
}

int GetOwner(int unit)
{
    int ptr = UnitToPtr(unit), res;

    if (ptr)
    {
        res = GetMemory(ptr + 0x1fc);
        if (res)
            return GetMemory(res + 0x2c);
    }
    return 0;
}

int ImportUnitToPtrFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x511B6068; arr[3] = 0x54FF5000; arr[4] = 0xC4830424;
        arr[5] = 0x7230680C; arr[6] = 0xFF500050; arr[7] = 0x83042454; arr[8] = 0xC03108C4; arr[9] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportUnitToPtrFunc, ImportUnitToPtrFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int UnitToPtr(int unit)
{
    int temp = GetMemory(0x5c336c), res;
    SetMemory(0x5c336c, ImportUnitToPtrFunc());
    res = Unknownb8(unit);
    SetMemory(0x5c336c, temp);
	return res;
}

int ImportPlayerAutoTeamSign()
{
    int arr[17], link;

    if (!link)
    {
        arr[0] = 0x4191D068; arr[1] = 0x50515600; arr[2] = 0x000020B9; arr[3] = 0xF9E0B800; arr[4] = 0xC9850062;
        arr[5] = 0x8B492774; arr[6] = 0x12DC0530; arr[7] = 0xF6850000; arr[8] = 0x5150F074; arr[9] = 0x8D24468B;
        arr[10] = 0x016A304E; arr[11] = 0x51016A50; arr[12] = 0x54FF016A; arr[13] = 0xC4832824; arr[14] = 0xEB585914;
        arr[15] = 0x5E5958D5; arr[16] = 0xC304C483;
        CancelTimer(FrameTimerWithArg(10, ImportPlayerAutoTeamSign, ImportPlayerAutoTeamSign));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void PlayerAutoTeamSign()
{
    int temp = GetMemory(0x5c3178);

    SetMemory(0x5c3178, ImportPlayerAutoTeamSign());
    GetHost();
    SetMemory(0x5c3178, temp);
}

void MakeCoopTeam()
{
    int arr[3];
    int teamCount = GetMemory(0x654D5C), temp, link;

    if (!teamCount && !link)
    {
        arr[0] = 0x417E1068; arr[1] = 0x2414FF00; arr[2] = 0xC304C483;
        CancelTimer(FrameTimerWithArg(10, MakeCoopTeam, MakeCoopTeam));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        temp = GetMemory(0x5c3178);
        SetMemory(0x5c3178, link);
        GetHost();
        SetMemory(0x5c3178, temp);
        SetMemory(0x5d53a4, 268640519);
    }
}

void RemoveCoopTeamMode()
{
    int arr[6], link, temp;

    if (!link && GetMemory(0x654d5c) == 1)
    {
        arr[0] = 0x4DB8BE56; arr[1] = 0x20680065; arr[2] = 0x6A00418F; arr[3] = 0x54FF5600; arr[4] = 0xC4830824; arr[5] = 0x90C35E0C;
        CancelTimer(FrameTimerWithArg(10, RemoveCoopTeamMode, RemoveCoopTeamMode));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        temp = GetMemory(0x5c3178);
        SetMemory(0x5c3178, link);
        GetHost();
        SetMemory(0x5c3178, temp);
    }
}

void SetGameTypeCoopMode()
{
    MakeCoopTeam();
    PlayerAutoTeamSign();
}

int ImportCreateAtFunc()
{
    int arr[20], link;

    if (!link)
    {
        arr[0] = 0xAA506856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xFF502414; arr[4] = 0x50042454;
        arr[5] = 0x082454FF; arr[6] = 0x4085048B; arr[7] = 0x680097BB; arr[8] = 0x004E3810; arr[9] = 0x2454FF50;
        arr[10] = 0x08C48304; arr[11] = 0xF685F08B; arr[12] = 0x006A0A74; arr[13] = 0x2454FF56; arr[14] = 0x08C48314;
        arr[15] = 0x50723068; arr[16] = 0x54FF5600; arr[17] = 0xC4830424; arr[18] = 0x5EC03118; arr[19] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportCreateAtFunc, ImportCreateAtFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

float GetSineValue(int wp, float c)
{
    float x_ratio = WayRatioX(wp, wp + 1), y_ratio = WayRatioY(wp, wp + 1), res;

    res = GetWaypointX(wp) - GetWaypointX(wp + 1);
    MoveWaypoint(wp + 1, GetWaypointX(wp) - (c * y_ratio) - x_ratio, GetWaypointY(wp) + (c * x_ratio) - y_ratio);
    return res;
}

float WayRatioX(int wp1, int wp2)
{
    return (GetWaypointX(wp1) - GetWaypointX(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float WayRatioY(int wp1, int wp2)
{
    return (GetWaypointY(wp1) - GetWaypointY(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float MathSine(int angle, float size)
{
    float var_0[91];
    int i, k;
 
    if (!ToInt(var_0[90]))
    {
        MoveWaypoint(angle + 1, GetWaypointX(angle), GetWaypointY(angle) - 1.0);
        for (i = 0 ; i <= 90 ; i ++)
        {
            var_0[i] = GetSineValue(angle, size);
            Delete(k + i + 1);
        }
        return var_0[0];
    }
    k = angle / 90;
    i = angle - (k * 90);

    if (k % 2) i = 90 - i;
    if ((angle / 180) % 2) return -var_0[i] * size;
	else return var_0[i] * size;
}

float UnitAngleCos(int unit, float size)
{
    return MathSine((GetDirection(unit) * 45 / 32) + 90, size);
}

float UnitAngleSin(int unit, float size)
{
    return MathSine(GetDirection(unit) * 45 / 32, size);
}

int CreateObjectAt(string name, float x, float y)
{
    int temp = GetMemory(0x5c3160), res;

    SetMemory(0x5c3160, ImportCreateAtFunc());
    res = CreateMover(SToInt(name), ToInt(x), y);
    SetMemory(0x5c3160, temp);
    if (res) return GetMemory(res + 0x2c);
    else return 0;
}

int ImportGetSpellNumber()
{
	int arr[11], link;

	if (!link)
	{
		arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x4085048B; arr[3] = 0x680097BB; arr[4] = 0x004243F0; arr[5] = 0x2454FF50;
		arr[6] = 0x08C48304; arr[7] = 0x50723068; arr[8] = 0x54FF5000; arr[9] = 0xC4830424; arr[10] = 0xC3C0310C;
        CancelTimer(FrameTimerWithArg(10, ImportGetSpellNumber, ImportGetSpellNumber));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int GetSpellNumber(string spell)
{
	int temp = GetMemory(0x5c3204), res;

	SetMemory(0x5c3204, ImportGetSpellNumber());
	res = Unused5e(spell);
	SetMemory(0x5c3204, temp);
	return res * 4;
}

int CreateYellowPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 639); //YellowPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateBlackPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 641); //BlackPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateWhitePotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 640); //WhitePotion
    SetMemory(ptr + 12, GetMemory(ptr + 12) ^ 0x20);
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CheckPotionThingID(int unit)
{
    int thingID = GetUnitThingID(unit), x = unit;

    if (thingID == 639)
        x = CreateYellowPotion(125, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 640)
        x = CreateWhitePotion(100, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 641)
        x = CreateBlackPotion(85, GetObjectX(unit), GetObjectY(unit));
    if (x ^ unit) Delete(unit);

    return x;
}

void GreenSparkFx(float xProfile, float yProfile)
{
    int fxTarget = CreateObjectAt("MonsterGenerator", xProfile, yProfile);

    Damage(fxTarget, 0, 1, -1);
    Delete(fxTarget);
}

int ImportGreenLightningFunc()
{
    int arr[21], link;

    if (!arr[0])
    {
		arr[0] = 0x5D685657; arr[1] = 0x68004042; arr[2] = 0x00523790; arr[3] = 0x50725068; arr[4] = 0x35606800;
		arr[5] = 0x106A0040; arr[6] = 0x042454FF; arr[7] = 0x8B08C483; arr[8] = 0x2414FFF0; arr[9] = 0x14FFF88B;
		arr[10] = 0x0C468924; arr[11] = 0x892414FF; arr[12] = 0x14FF0846; arr[13] = 0x04468924; arr[14] = 0x892414FF;
		arr[15] = 0xFF565706; arr[16] = 0x830C2454; arr[17] = 0xFF5608C4; arr[18] = 0x830C2454; arr[19] = 0x5F5E10C4; arr[20] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportGreenLightningFunc, ImportGreenLightningFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void GreenLightningFx(int x1, int y1, int x2, int y2, int time)
{
    int temp = GetMemory(0x5c321c);

    SetMemory(0x5c321c, ImportGreenLightningFunc());
    Effect(ToStr(x1), ToFloat(y1), ToFloat(x2), ToFloat(y2), ToFloat(time));
    SetMemory(0x5c321c, temp);
}

void GreenLightningEffect(float x1, float y1, float x2, float y2)
{
    GreenLightningFx(FloatToInt(x1), FloatToInt(y1), FloatToInt(x2), FloatToInt(y2), 25);
}

int FloatToInt(float x)
{
    int i, result = 0;
    float pos = x;

    if (pos < 0.0) pos = -pos;
    pos = pos / 2147483648.0;
    if (pos < 2.0)
    { 
        for (i = 0 ; i < 32 ; i ++)
        {
            if (pos >= 1.0)
            {
                result ++;
                pos -= 1.0;
            }
            if (i != 31) result = result << 1;
            pos *= 2.0;
        }
    }
    else result = 0x7fffffff;
    if (x < 0.0) return -result;
    else return result;
}

void UnitLinkBinScript(int unit, int binScrAddr)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, binScrAddr);
}

void UnitZeroFleeRange(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0); //Flee Range set to 0
}

void UnitPickupEvent(int unit, int func)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x300, func);
}

void PoisonImmuneUnit(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x0c, GetMemory(ptr + 0x0c) ^ 0x200);
}

void SetUnitScanRange(int unit, float range)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x520, ToInt(range));
    }
}

int GetUnitStatus(int unit)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            return GetMemory(temp + 0x5a0);
    }
    return 0;
}

void SetUnitStatus(int unit, int stat)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            SetMemory(temp + 0x5a0, stat);
    }
}

void SetUnitFlags(int unit, int flag)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x10, flag);
}

void UnitNoCollide(int unit)
{
    SetUnitFlags(unit, GetUnitFlags(unit) ^ 0x40);
}

int GetUnitFlags(int unit)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x10);
    return 0;
}

void DisableMagicalProperties(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
	    SetMemory(ptr + 0xc, GetMemory(ptr + 0xc) ^ 0x1);
}

void SetUnitSpeed(int unit, float ratio)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x224, ToInt(ratio));
}

void BomberSetMonsterCollide(int bombUnit)
{
    int ptr = UnitToPtr(bombUnit);

    if (ptr)
        SetMemory(ptr + 0x2b8, 0x4e83b0);
}

void SetUnitMass(int unit, float ms)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x78, ToInt(ms));
}

void SetUnitMaxHealth(int unit, int amount)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x22c), amount);
        SetMemory(GetMemory(ptr + 0x22c) + 0x4, amount);
    }
}

int DummyUnitCreate(string name, int wp)
{
    int unit = CreateObject(name, wp);

    if (CurrentHealth(unit))
    {
        ObjectOff(unit);
        Damage(unit, 0, MaxHealth(unit) + 1, -1);
        Frozen(unit, 1);
    }
    return unit;
}

int DummyUnitCreateAt(string name, float xProfile, float yProfile)
{
    int dum = CreateObjectAt(name, xProfile, yProfile);

    if (CurrentHealth(dum))
    {
        ObjectOff(dum);
        Damage(dum, 0, MaxHealth(dum) + 1, -1);
        Frozen(dum, 1);
        //SetUnitMass(dum, 99999.0);
        //SetUnitFlags(dum, GetUnitFlags(dum) ^ 0x2000);
    }
    return dum;
}

void SetWeaponProperties(int ptr, int power, int mt_lv, int wfx1, int wfx2)
{
    int k;

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2b4), WeaponPower(power));
        SetMemory(GetMemory(ptr + 0x2b4) + 4, MaterialList(mt_lv));
        SetMemory(GetMemory(ptr + 0x2b4) + 8, WeaponEffect(wfx1));
        SetMemory(GetMemory(ptr + 0x2b4) + 12, WeaponEffect(wfx2));
        for (k = 31 ; k >= 0 ; k --)
            SetMemory(ptr + 0x230 + (k * 4), 0x200);
    }
}

void SetArmorProperties(int ptr, int qual, int mt_lv, int afx1, int afx2)
{
    int k;

    SetMemory(GetMemory(ptr + 0x2b4), ArmorQuality(qual));
    SetMemory(GetMemory(ptr + 0x2b4) + 4, MaterialList(mt_lv));
    SetMemory(GetMemory(ptr + 0x2b4) + 8, ArmorEffect(afx1));
    SetMemory(GetMemory(ptr + 0x2b4) + 12, ArmorEffect(afx2));
    for (k = 31 ; k >= 0 ; k --)
        SetMemory(ptr + 0x230 + (k * 4), 0x200);
}

int WeaponPower(int num)
{
    int addr[6];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4; addr[1] = 0x5BA714; addr[2] = 0x5BA72C; addr[3] = 0x5BA744; addr[4] = 0x5BA75C; addr[5] = 0x5BA774;
        return 0;
    }
    return GetMemory(addr[num]);
}

int ArmorQuality(int num)
{
    int addr[6];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4; addr[1] = 0x5BA7A4; addr[2] = 0x5BA7BC; addr[3] = 0x5BA7D4; addr[4] = 0x5BA7EC; addr[5] = 0x5BA804;
        return 0;
    }
    return GetMemory(addr[num]);
}

int MaterialList(int num)
{
    int addr[6];

    if (!addr[0])
    {
        //Lv.3 ~ 7, null
        addr[0] = 0x5a00a4; addr[1] = 0x5ba834; addr[2] = 0x5ba84c; addr[3] = 0x5ba864; addr[4] = 0x5ba87c; addr[5] = 0x5ba894;
        return 0;
    }
    return GetMemory(addr[num]);
}

int WeaponEffect(int num)
{
    int addr[37];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4;
        addr[1] = 0x5BA1BC; addr[2] = 0x5BA1D4; addr[3] = 0x5BA1EC; addr[4] = 0x5BA204; addr[5] = 0x5BA21C; addr[6] = 0x5BA234; addr[7] = 0x5BA24C; addr[8] = 0x5BA264;
        addr[9] = 0x5BA27C; addr[10] = 0x5BA294; addr[11] = 0x5BA2AC; addr[12] = 0x5BA2C4; addr[13] = 0x5BA2DC; addr[14] = 0x5BA2F4; addr[15] = 0x5BA30C; addr[16] = 0x5BA324;
        addr[17] = 0x5BA33C; addr[18] = 0x5BA354; addr[19] = 0x5BA36C; addr[20] = 0x5BA384; addr[21] = 0x5BA39C; addr[22] = 0x5BA3B4; addr[23] = 0x5BA3CC; addr[24] = 0x5BA3E4;
        addr[25] = 0x5BA3FC; addr[26] = 0x5BA414; addr[27] = 0x5BA42C; addr[28] = 0x5BA444;
        addr[29] = 0x5BA63C; addr[30] = 0x5BA654; addr[31] = 0x5BA66C; addr[32] = 0x5BA684;
        addr[33] = 0x5BA69C; addr[34] = 0x5BA6B4; addr[35] = 0x5BA6CC; addr[36] = 0x5BA6E4;
        return 0;
    }
    return GetMemory(addr[num]);
}

int ArmorEffect(int num)
{
    int addr[21];

    if (!addr[0])
    {
        addr[0] = 0x5a00a4;
        addr[1] = 0x5BA45C; addr[2] = 0x5BA474; addr[3] = 0x5BA48C; addr[4] = 0x5BA4A4; addr[5] = 0x5BA4BC; addr[6] = 0x5BA4D4; addr[7] = 0x5BA4EC; addr[8] = 0x5BA504;
        addr[9] = 0x5BA51C; addr[10] = 0x5BA534; addr[11] = 0x5BA54C; addr[12] = 0x5BA564; addr[13] = 0x5BA57C; addr[14] = 0x5BA594; addr[15] = 0x5BA5AC; addr[16] = 0x5BA5C4;
        addr[17] = 0x5BA5DC; addr[18] = 0x5BA5F4; addr[19] = 0x5BA60C; addr[20] = 0x5BA624;
        return 0;
    }
    return GetMemory(addr[num]);
}

void InitInvPropertiesSet()
{
    WeaponEffect(0);
    ArmorEffect(0);
    WeaponPower(0);
    ArmorQuality(0);
    MaterialList(0);
    ImportAllowAllDrop();
}

void CheckSpecialItem(int ptr)
{
    int id = GetMemory(ptr + 0x04);

    if (id >= 222 && id <= 225)
    {
        SetMemory(ptr + 0x2c4, 0x53a720);
        SetMemory(ptr + 0x2c8, ImportAllowAllDrop());
    }
    else if (id == 1178)
        SetMemory(GetMemory(ptr + 0x2e0), 0xffff);
    else if (id == 1168)
        SetMemory(GetMemory(ptr + 0x2e0), 0xffff);
}

int GetUnitThingID(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 4);
    return 0;
}

int CalleeArgInt(int arg)
{
    return CalleeArgInt(arg);
}

int CallFunctionWithArgInt(int func, int arg)
{
    int link;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, CalleeArgInt, CalleeArgInt));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x20));
        return 0;
    }
    else
    {
        SetMemory(link + 0x10, func);
        return CalleeArgInt(arg);
    }
}

void CalleeArg(int arg)
{
    CalleeArg(arg);
}

void CallFunctionWithArg(int func, int arg)
{
    int link;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, CalleeArg, CalleeArg));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x20));
    }
    else
    {
        SetMemory(link + 0x10, func);
        CalleeArg(arg);
    }
}

void Callee()
{
    Callee();
}

void CallFunction(int func)
{
    int link;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, Callee, Callee));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x20));
    }
    else
    {
        SetMemory(link + 4, func);
        Callee();
    }
}

int FieldItemFuncPtr()
{
    StopScript(HotPotion);
}

int HotPotion(int wp)
{
    return CreateObject("RedPotion", wp);
}

int PotionItemDrop(int wp)
{
    return CheckPotionThingID(CreateObject(ToStr(SToInt(PotionList()) + Random(0, 12)), wp));
}

int NormalWeaponItemDrop(int wp)
{
    int unit = CreateObject(ToStr(SToInt(WeaponList()) + Random(0, 7)), wp);
    int ptr = GetMemory(0x750710);

    CheckSpecialItem(ptr);
    return unit;
}

int NormalArmorItemDrop(int wp)
{
    return CreateObject(ToStr(SToInt(ArmorList()) + Random(0, 17)), wp);
}

int MoneyDrop(int wp)
{
    string name = {"QuestGoldChest", "QuestGoldPile", "Gold"};
    int money = CreateObject(ToStr(SToInt(name) + Random(0, 2)), wp);
    SetMemory(GetMemory(GetMemory(0x750710) + 0x2b4), Random(1000, 8000));
    return money;
}

int SomeGermDrop(int wp)
{
    string name = {"Ruby", "Ruby", "Ruby", "Emerald", "Emerald", "Diamond"};
    return CreateObject(ToStr(SToInt(name) + Random(0, 5)), wp);
}

int WeaponItemDrop(int wp)
{
    int unit = CreateObject(ToStr(SToInt(WeaponList()) + Random(0, 12)), wp);
    int ptr = GetMemory(0x750710);

    CheckSpecialItem(ptr);
    SetWeaponProperties(ptr, Random(0, 5), Random(0, 5), Random(0, 36), Random(0, 36));
    return unit;
}

int ArmorItemDrop(int wp)
{
    int unit = CreateObject(ToStr(SToInt(ArmorList()) + Random(0, 18)), wp);
    int ptr = GetMemory(0x750710);

    SetArmorProperties(ptr, Random(0, 5), Random(0, 5), Random(0, 20), Random(0, 20));
    return unit;
}

int ShurikenDrop(int wp)
{
    string nameT = {"FanChakram", "FanChakram", "RoundChakram"};
    int unit = CreateObject(ToStr(SToInt(nameT) + Random(0, 2)), wp);
    int ptr = GetMemory(0x750710);

    CheckSpecialItem(ptr);
    SetWeaponProperties(ptr, Random(0, 5), Random(0, 5), Random(0, 36), Random(0, 36));
    return unit;
}

string PotionList()
{
    string name = {
        "RedPotion", "CurePoisonPotion", "YellowPotion", "BlackPotion",
        "VampirismPotion", "Mushroom", "PoisonProtectPotion", "ShockProtectPotion",
        "FireProtectPotion", "HastePotion", "ShieldPotion", "InvulnerabilityPotion",
        "RedPotion2"
    };
    return name;
}

string WeaponList()
{
    string name = {
        "GreatSword", "Longsword", "Sword", "MorningStar",
        "OgreAxe", "StaffWooden", "BattleAxe", "FanChakram",
        "RoundChakram", "WarHammer", "OblivionHalberd", "OblivionWierdling",
        "OblivionHeart"
    };
    return name;
}

string ArmorList()
{
    string name = {
        "OrnateHelm", "Breastplate", "PlateArms", "PlateBoots",
        "PlateLeggings", "MedievalCloak", "ChainCoif", "ChainLeggings",
        "ChainTunic", "SteelHelm", "LeatherArmbands", "LeatherArmor",
        "LeatherArmoredBoots", "LeatherBoots", "LeatherHelm", "LeatherLeggings",
        "MedievalPants", "MedievalShirt", "SteelShield"
    };
    return name;
}

string MagicalStaffList()
{
    string name = {
        "DeathRayWand", "FireStormWand", "LesserFireballWand", "InfinitePainWand", "SulphorousFlareWand",
        "SulphorousShowerWand", "ForceWand"
    };
    return name;
}

void CreateRewardItem(int cur)
{
    MoveWaypoint(1, GetObjectX(cur), GetObjectY(cur));
    Delete(cur);
    CallFunctionWithArgInt(FieldItemFuncPtr() + Random(0, 8), 1);
}

void FieldItemSearchingLoop(int cur)
{
    int count, i;

    for (i = 0 ; i < 10 ; i ++)
    {
        if (cur < LastUnitPtr)
        {
            if (GetUnitThingID(cur) == 2672)
                CreateRewardItem(cur);
            cur += 2;
        }
        else
        {
            return;
        }
    }
    FrameTimerWithArg(1, cur, FieldItemSearchingLoop);
}

void FieldItemSearchStart(int cur)
{
    if (IsObjectOn(cur))
        FieldItemSearchingLoop(cur);
    else
        UniPrintToAll("Search Failed!");
}

void SetUnitVoice(int unit, int set)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(set));
}

int VoiceList(int num)
{
    int list[75], addr, k;

    if (!list[0])
    {
        addr = GetMemory(0x663eec);
        for (k = 0 ; k < 75 ; k ++)
        {
            list[k] = addr;
            addr = GetMemory(addr + 0x4c);
        }
    }
    return list[num];
}

int ColorMaidenAt(int red, int grn, int blue, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("Bear2", xProfile, yProfile);
    int ptr1 = GetMemory(0x750710), k;

    SetMemory(ptr1 + 4, 1385);
    for (k = 0 ; k < 32 ; k ++)
        SetMemory(ptr1 + 0x230 + (k * 4), 0x400);
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x178, 0xa0);
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 4, grn | (blue << 8) | (red << 16) | (grn << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 8, blue | (red << 8) | (grn << 16) | (blue << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 12, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 16, grn | (blue << 8));
    SetUnitVoice(unit, 7);
    UnitLinkBinScript(unit, MaidenBinTable());

    return unit;
}

void MapExit()
{
    MusicEvent();
    SelfDamageClassMapExit();
    RemoveCoopTeamMode();
    FixAllPlayerDialogBug();
    ResetWallTreeInfo();
    ResetHostileCritter();
}

int GhostBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1936681031; arr[1] = 116; arr[24] = 1069547520; arr[27] = 1; arr[28] = 1097859072; 
		arr[29] = 10; arr[31] = 4; arr[32] = 7; arr[33] = 15; arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, GhostBinTable, GhostBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int BomberGreenBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1651339074; arr[1] = 1917284965; arr[2] = 7234917; arr[17] = 20; arr[19] = 80; 
		arr[21] = 1065353216; arr[24] = 1065353216; arr[37] = 1819043161; arr[38] = 1951627119; arr[39] = 1750299233; 
		arr[40] = 29807; arr[53] = 1128792064; arr[55] = 7; arr[56] = 11; arr[57] = 5548112; 
		arr[58] = 5547856; 
		CancelTimer(FrameTimerWithArg(10, BomberGreenBinTable, BomberGreenBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int LichLordBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1751345484; arr[1] = 1685221196; arr[17] = 20; arr[19] = 100; arr[21] = 1065353216; 
		arr[24] = 1065353216; arr[25] = 1; arr[26] = 4; arr[27] = 7; arr[28] = 1108082688; 
		arr[29] = 50; arr[30] = 1092616192; arr[32] = 9; arr[33] = 17; arr[57] = 5548288; 
		arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, LichLordBinTable, LichLordBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int MechanicalGolemBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1751344461; arr[1] = 1667853921; arr[2] = 1866951777; arr[3] = 7169388; arr[19] = 30; 
		arr[24] = 1065353216; arr[26] = 4; arr[27] = 5; arr[28] = 1112014848; arr[29] = 30; 
		arr[30] = 1120403456; arr[31] = 2; arr[32] = 30; arr[33] = 45; arr[34] = 3; 
		arr[35] = 2; arr[36] = 8; arr[58] = 5545616; arr[59] = 5544288; 
		CancelTimer(FrameTimerWithArg(10, MechanicalGolemBinTable, MechanicalGolemBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int HecubahWithOrbBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1969448264; arr[1] = 1466458466; arr[2] = 1332245609; arr[3] = 25202; arr[17] = 250; 
		arr[18] = 100; arr[19] = 90; arr[21] = 1065353216; arr[24] = 1066192077; arr[25] = 1; 
		arr[26] = 6; arr[27] = 5; arr[37] = 1952539972; arr[38] = 1818313320; arr[39] = 1634879084; 
		arr[40] = 1852140903; arr[41] = 116; arr[53] = 1133903872; arr[55] = 19; arr[56] = 25; 
		CancelTimer(FrameTimerWithArg(10, HecubahWithOrbBinTable, HecubahWithOrbBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int AirshipCaptainBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1936877889; arr[1] = 1131440488; arr[2] = 1635020897; arr[3] = 28265; arr[17] = 130; 
		arr[18] = 100; arr[19] = 60; arr[21] = 1065353216; arr[23] = 32768; arr[24] = 1067869798; 
		arr[26] = 4; arr[28] = 1106247680; arr[29] = 20; arr[31] = 8; arr[32] = 12; 
		arr[33] = 20; arr[57] = 5547984; arr[58] = 5546320; arr[59] = 5542432; 
		CancelTimer(FrameTimerWithArg(10, AirshipCaptainBinTable, AirshipCaptainBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int FireSpriteBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1701996870; arr[1] = 1769107539; arr[2] = 25972; arr[17] = 85; arr[18] = 25; 
		arr[19] = 90; arr[21] = 1065353216; arr[23] = 65544; arr[24] = 1065353216; arr[37] = 1801545047; 
		arr[38] = 1701996870; arr[39] = 1819042146; arr[53] = 1128792064; arr[55] = 15; arr[56] = 21; 
		arr[58] = 5545472; 
		CancelTimer(FrameTimerWithArg(10, FireSpriteBinTable, FireSpriteBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int WeirdlingBeastBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1919509847; arr[1] = 1852402788; arr[2] = 1634026087; arr[3] = 29811; arr[24] = 1065353216; 
		arr[26] = 4; arr[28] = 1101004800; arr[29] = 20; arr[31] = 8; arr[32] = 8; 
		arr[33] = 16; arr[57] = 5548112; arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, WeirdlingBeastBinTable, WeirdlingBeastBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int WizardRedBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1635412311; arr[1] = 1699898482; arr[2] = 100; arr[16] = 80000; arr[17] = 300; 
		arr[18] = 100; arr[19] = 50; arr[21] = 1065353216; arr[24] = 1067869798; arr[26] = 4; 
		arr[27] = 4; arr[37] = 1801545047; arr[38] = 1701996870; arr[39] = 1819042146; arr[53] = 1133903872; 
		arr[55] = 11; arr[56] = 17; 
		CancelTimer(FrameTimerWithArg(10, WizardRedBinTable, WizardRedBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int HecubahBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1969448264; arr[1] = 6840674; arr[17] = 300; arr[19] = 100; arr[21] = 1065353216; 
		arr[24] = 1065353216; arr[25] = 1; arr[26] = 4; arr[27] = 7; arr[28] = 1108082688; 
		arr[29] = 50; arr[30] = 1092616192; arr[32] = 10; arr[33] = 18; arr[57] = 5548288; 
		arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, HecubahBinTable, HecubahBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int TalkingSkullBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1802264916; arr[1] = 1399287401; arr[2] = 1819047275; arr[24] = 1065353216; arr[28] = 1106247680; 
		arr[29] = 20; arr[31] = 11; arr[32] = 9; arr[33] = 17; arr[58] = 5546320; 
		arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, TalkingSkullBinTable, TalkingSkullBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int ShopkeeperBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1886349395; arr[1] = 1885693291; arr[2] = 29285; arr[25] = 1; arr[26] = 6; 
		arr[27] = 1; arr[28] = 1114636288; arr[29] = 30; arr[31] = 4; arr[32] = 9; 
		arr[33] = 17; arr[57] = 5548288; arr[58] = 5545472; arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, ShopkeeperBinTable, ShopkeeperBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int UrchinBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1751347797; arr[1] = 28265; arr[19] = 1; arr[24] = 1065353216; arr[26] = 4; 
		arr[37] = 1919248451; arr[38] = 1916887669; arr[39] = 7827314; arr[53] = 1133903872; arr[54] = 4; 
		arr[55] = 20; arr[56] = 30; 
		CancelTimer(FrameTimerWithArg(10, UrchinBinTable, UrchinBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int BlackWidowBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1667329090; arr[1] = 1684625259; arr[2] = 30575; arr[24] = 1069547520; arr[26] = 4; 
		arr[27] = 3; arr[28] = 1097859072; arr[29] = 25; arr[31] = 8; arr[32] = 13; 
		arr[33] = 21; arr[34] = 50; arr[35] = 3; arr[36] = 9; arr[37] = 1684631635; 
		arr[38] = 1884516965; arr[39] = 29801; arr[53] = 1128792064; arr[55] = 20; arr[56] = 28; 
		arr[59] = 5544896; arr[61] = 45071360; 
		CancelTimer(FrameTimerWithArg(10, BlackWidowBinTable, BlackWidowBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int GoonBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1852796743; arr[19] = 80; arr[24] = 1066192077; arr[26] = 4; arr[28] = 1106247680; 
		arr[29] = 25; arr[30] = 1092616192; arr[31] = 4; arr[32] = 22; arr[33] = 30; 
		arr[34] = 2; arr[35] = 3; arr[36] = 20; arr[57] = 5548176; arr[58] = 5546608; 
		arr[59] = 5543680; 
		CancelTimer(FrameTimerWithArg(10, GoonBinTable, GoonBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int StrongWizardWhiteBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1869771859; arr[1] = 1767335790; arr[2] = 1685217658; arr[3] = 1953065047; arr[4] = 101; 
		arr[19] = 1; arr[24] = 1065772646; arr[37] = 1701996870; arr[38] = 1819042146; arr[53] = 1128792064; 
		arr[55] = 20; arr[56] = 30; arr[57] = 5547984; 
		CancelTimer(FrameTimerWithArg(10, StrongWizardWhiteBinTable, StrongWizardWhiteBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int MaidenBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1684627789; arr[1] = 28261; arr[24] = 1065688760; arr[27] = 1; arr[28] = 1106247680; 
		arr[29] = 35; arr[30] = 1101004800; arr[31] = 2; arr[32] = 22; arr[33] = 30; 
		arr[58] = 5546320; arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, MaidenBinTable, MaidenBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int Shopkeeper2BinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1886349395; arr[1] = 1885693291; arr[2] = 29285; arr[24] = 1065353216; arr[27] = 1; 
		arr[28] = 1106247680; arr[29] = 18; arr[31] = 8; arr[32] = 8; arr[33] = 15; 
		arr[58] = 5547856; arr[59] = 5542432; 
		CancelTimer(FrameTimerWithArg(10, Shopkeeper2BinTable, Shopkeeper2BinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int WispBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1886611831; arr[24] = 1065353216; arr[37] = 1751607628; arr[38] = 1852403316; arr[39] = 1819230823; 
		arr[40] = 116; arr[53] = 1133903872; arr[55] = 12; arr[56] = 20; 
		CancelTimer(FrameTimerWithArg(10, WispBinTable, WispBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int LichLord2BinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1751345484; arr[1] = 1685221196; arr[24] = 1065353216; arr[25] = 1; arr[26] = 4; 
		arr[27] = 7; arr[28] = 1108082688; arr[29] = 50; arr[30] = 1106247680; arr[31] = 11; 
		arr[32] = 13; arr[33] = 21; arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, LichLord2BinTable, LichLord2BinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int NecromancerBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1919116622; arr[1] = 1851878767; arr[2] = 7497059; arr[24] = 1065353216; arr[25] = 1; 
		arr[26] = 2; arr[28] = 1103626240; arr[29] = 30; arr[30] = 1092616192; arr[31] = 11; 
		arr[32] = 7; arr[33] = 15; arr[34] = 1; arr[35] = 1; arr[36] = 10; 
		arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, NecromancerBinTable, NecromancerBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int GreenFrogBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1701147207; arr[1] = 1869760110; arr[2] = 103; arr[24] = 1065353216; arr[28] = 1101004800; 
		arr[29] = 20; arr[31] = 10; arr[32] = 6; arr[33] = 11; arr[59] = 5544320; 
		CancelTimer(FrameTimerWithArg(10, GreenFrogBinTable, GreenFrogBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int RatBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 7627090; arr[24] = 1065353216; arr[28] = 1101004800; arr[29] = 15; arr[31] = 16; 
		arr[32] = 13; arr[33] = 21; arr[59] = 5544320; 
		CancelTimer(FrameTimerWithArg(10, RatBinTable, RatBinTable));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

void SetupHomeTeleport(int cur)
{
    MoveWaypoint(1, GetObjectX(cur), GetObjectY(cur));
    Delete(cur);
    TeleportSetupDestUnit(1, HomeLocation);
}

void CheckMarkerObject(int cur)
{
    int thingID = GetUnitThingID(cur);

    if (thingID == 2672) //RewardMarker
        CreateRewardItem(cur);
    else if (thingID == 2675) //NecromancerMarker
        MarkerMonsterSpawn(cur);
    else if (thingID == 2688) //Ankh
        SetupHomeTeleport(cur);
}

void SearchEnd(int cur)
{
    ImportUseItemFunc();
    ImportUnitCollideFunc();
    ImportUnitDieFunc();
    UniPrintToAll("유닛서칭 완료");
    FrameTimer(5, InitGarageRoom);
    FrameTimerWithArg(10, 271, RingAnkhObstacles);
}

void SearchSomeObject(int startUnit)
{
    int i, cur = startUnit;

    for (i = 0 ; i < 20 ; i ++)
    {
        if (cur < LastCreatedUnit)
        {
            CheckMarkerObject(cur);
            cur += 2;
        }
        else
        {
            SearchEnd(cur);
            return;
        }
    }
    FrameTimerWithArg(1, cur, SearchSomeObject);
}

void MapInitialize()
{
    int t = EnableMemoryReadWriteFunction(0);

    LastCreatedUnit = MasterMob();
    MusicEvent();
    InitInvPropertiesSet();
    ImportUnitToPtrFunc();
    ImportPlayerAutoTeamSign();
    ImportCreateAtFunc();
    ImportGreenLightningFunc();
    ImportGetSpellNumber();
    ImportUniChatCore();
    ImportUniPrintCore();
    ImportTellStoryUniNamePartA();
    ImportTellStoryUniNamePartB();
    MathSine(1, 1.0 / 57.3);
    CallFunction(0);
    CallFunctionWithArg(0, 0);
    CallFunctionWithArgInt(0, 0);
    VoiceList(0);
    FrameTimer(10, SetGameTypeCoopMode);
    FrameTimer(1, MapDelayInit);
    FrameTimer(2, WallTreeHandler);
}

void FieldMonsterOnDeath()
{
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    CallFunctionWithArgInt(FieldItemFuncPtr() + Random(0, 8), 1);
    DeleteObjectTimer(self, 150);
}

int CheckPlayerInput(int plr_unit)
{
    int ptr = UnitToPtr(plr_unit), temp;

    if (ptr)
    {
        temp = GetMemory(GetMemory(ptr + 0x2ec) + 0x114);
        if (temp)
            return GetMemory(0x81b960 + (GetMemory(temp + 0x810) * 3072));
    }
    return 0;
}

int CheckPlayer()
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        if (IsCaller(player[i]))
            return i;
    }
    return -1;
}

void PlayerOnJoin(int plr)
{
    if (CheckPlayerDeathFlag(plr))
        SetPlayerDeathFlag(plr);
    if (CheckPlayerAllEncFlag(plr))
        AlwaysAllEnchantments(plr);
    MoveObject(player[plr], GetWaypointX(227), GetWaypointY(227));
    Effect("TELEPORT", GetWaypointX(227), GetWaypointY(227), 0.0, 0.0);
    AudioEvent("BlindOff", 227);
}

void PlayerFailed()
{
    MoveObject(other, GetWaypointX(12), GetWaypointY(12));
    UniPrint(other, "지도 입장에 실패했습니다");
}

void PlayerOnInit(int plr)
{
    ChangeGold(player[plr], -GetGold(player[plr]));
    SelfDamageClassEntry(player[plr]);
}

void PlayerEntryPoint()
{
    int i, plr;

    if (CurrentHealth(other))
    {
        plr = CheckPlayer();
        for (i = 9 ; i >= 0 && plr < 0 ; i --)
        {
            if (!MaxHealth(player[i]))
            {
                player[i] = GetCaller();
                player[i + 10] = 1;
                plr = i;
                PlayerOnInit(plr);
                break;
            }
        }
        if (plr + 1)
            PlayerOnJoin(plr);
        else
            PlayerFailed();
    }
}

void PlayerFastJoin()
{
    int plr;

    if (CurrentHealth(other))
    {
        plr = CheckPlayer();
        if (plr + 1)
            MoveObject(other, GetWaypointX(13), GetWaypointY(13));
        else
            MoveObject(other, GetWaypointX(12), GetWaypointY(12));
    }
}

int PlacingPlayerStartBeacon(int wp)
{
    int unit = CreateObject("Maiden", wp);

    UnitNoCollide(CreateObject("TeleportWake", wp));
    Frozen(unit, 1);
    Damage(unit, 0, MaxHealth(unit) + 1, -1);
    SetCallback(unit, 9, PlayerEntryPoint);

    return unit;
}

int CheckPlayerAllEncFlag(int plr)
{
    return player[plr + 10] & 0x08;
}

void SetPlayerAllEncFlag(int plr)
{
    player[plr + 10] = player[plr + 10] ^ 0x08;
}

int CheckPlayerSkillFlag(int plr)
{
    return player[plr + 10] & 0x04;
}

void SetPlayerSkillFlag(int plr)
{
    player[plr + 10] = player[plr + 10] ^ 0x04;
}

int CheckPlayerDeathFlag(int plr)
{
    return player[plr + 10] & 0x02;
}

void SetPlayerDeathFlag(int plr)
{
    player[plr + 10] = player[plr + 10] ^ 0x02;
}

void PlayerOnShutdown(int plr)
{
    FixPlayerDialogBug(plr);
    player[plr + 10] = 0;
    player[plr] = 0;
}

void ShirtAndPantDrop(int unit)
{
    int inv = GetLastItem(unit);

    while (IsObjectOn(inv))
    {
        if (HasClass(inv, "ARMOR"))
        {
            if (HasSubclass(inv, "PANTS") || HasSubclass(inv, "SHIRT"))
                Drop(unit, inv);
        }
        inv = GetPreviousItem(inv);
    }
}

void PlayerOnDeath(int plr)
{
    ShirtAndPantDrop(player[plr]);
}

void CheckPlayerMagicWeapon(int plrUnit)
{
    int weap = PlayerEquipedWeapon(plrUnit);
    int mat;

    if (weap)
    {
        if (GetDirection(weap) && GetPlayerAction(plrUnit) ^ 12)
        {
            mat = GetDirection(weap);
            if (mat == 1)
                FrameTimerWithArg(8, plrUnit, ShotEnergyParSword); 
            else if (mat == 2)
                FrameTimerWithArg(8, plrUnit, ShotLaiserSword); 
            else if (mat == 3)
                FrameTimerWithArg(8, plrUnit, ShotRingOfArrow); 
            else
                FrameTimerWithArg(6, plrUnit, ShotWarpSword); 
        }
    }
}

void PoisonAutoCure(int plr)
{
    if (CheckPlayerAllEncFlag(plr))
    {
        if (IsPoisonedUnit(player[plr]))
        {
            CastSpellObjectObject("SPELL_CURE_POISON", player[plr], player[plr]);
            Effect("VIOLET_SPARKS", GetObjectX(player[plr]), GetObjectY(player[plr]), 0.0, 0.0);
        }
    }
}

void PlayerPreserveLoop()
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        while (1)
        {
            if (MaxHealth(player[i]))
            {
                if (GetUnitFlags(player[i]) & 0x40)
                    1;
                else if (CurrentHealth(player[i]))
                {
                    PoisonAutoCure(i);
                    if (HasEnchant(player[i], "ENCHANT_SNEAK"))
                    {
                        EnchantOff(player[i], "ENCHANT_SNEAK");
                        RemoveTreadLightly(player[i]);
                        if (CheckPlayerSkillFlag(i))
                            FrameTimerWithArg(1, player[i], PlayerCheckUseNewSkill);
                    }
                    if (CheckPlayerInput(player[i]) == 6)
                        CheckPlayerMagicWeapon(player[i]);
                    break;
                }
                else
                {
                    if (!CheckPlayerDeathFlag(i))
                    {
                        SetPlayerDeathFlag(i);
                        PlayerOnDeath(i);
                    }
                    break;
                }
            }
            if (player[i + 10])
            {
                PlayerOnShutdown(i);
            }
            break;
        }
    }
    FrameTimer(1, PlayerPreserveLoop);
}

void SwitchingGBlock()
{
    ObjectOff(self);
    ObjectGroupToggle(23);
    FrameTimerWithArg(90, GetTrigger(), EnableObject);
}

void MapDelayInit()
{
    IxThunderTrap = CreateObject("MovableStatueVictory5SW", 149);
    CreateObject("MovableStatueVictory5NE", 150);
    TombRndPick = Random(0, 9);
    PlacingPlayerStartBeacon(13);
    FrameTimer(1, PlayerPreserveLoop);
    FrameTimerWithArg(1, Object("FirstProcMarker"), SearchSomeObject);
    DungeonDestLoc = CreateObject("BlueSummons", 11);
    HomeLocation = DrawMagicIcon(11);
    FrameTimerWithArg(3, DungeonDestLoc, SetupStartPartPortals);
    SecondTimer(5, PlaceDefItemMain);
    FrameTimer(7, PlaceWarNewSkillShop);
    SecondTimer(10, ThisMapStartMent);
    SpProperty = Object("WSpecialProperty");
    CancelTimer(FrameTimerWithArg(10, HiveDestroyEvent, HiveDestroyEvent));
    HiveDieFunc = GetMemory(GetMemory(0x83395c) + 8);

    FrameTimer(1, SetHostileCritter);
    FrameTimer(10, ExpandCampainInit);
}

int UndeadMonsterInit()
{
    int mUnit = CreateObject("InvisibleLightBlueLow", 14);
    int lessons = 40;
    string name = {
        "Skeleton", "SkeletonLord", "Zombie", "VileZombie",
        "EvilCherub", "SpittingSpider", "Ghost", "Spider"
    };
    int hpTable[8];

    hpTable[0] = 250; hpTable[1] = 306; hpTable[2] = 98; hpTable[3] = 325;
    hpTable[4] = 75; hpTable[5] = 135; hpTable[6] = 64; hpTable[7] = 160;
    Raise(mUnit, lessons);
    return mUnit;
}

void RemoveUndeadRoomWalls(int mUnit)
{
    Delete(mUnit);
    WallGroupOpen(1);
    UniPrintToAll("철창이 열렸습니다");
}

int InfiniteLifePixie(int owner)
{
	int pxie = 0, ptr;

	if (CurrentHealth(owner))
	{
		pxie = CreateObjectAt("Pixie", GetObjectX(owner), GetObjectY(owner));
		ptr = GetMemory(0x750710);
		SetOwner(owner, pxie);
		ObjectOff(pxie);
		UnitNoCollide(pxie);
		SetMemory(GetMemory(ptr + 0x2ec) + 20, 0);
		SetMemory(ptr + 0xc, GetMemory(ptr + 0xc) ^ 0x1);
		SetMemory(GetMemory(ptr + 0x2ec) + 24, 0);
		Enchant(pxie, "ENCHANT_INFRAVISION", 0.0);
		Enchant(pxie, "ENCHANT_SLOWED", 0.0);
	}
    return pxie;
}

void LichLordDie()
{
    Delete(GetTrigger() + 1);
    FieldMonsterOnDeath();
}

void ZombieWhenDead()
{
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    if (MaxHealth(self))
        Damage(self, 0, 100, 14);
    DeleteObjectTimer(CreateObject("MediumFlame", 1), 150);
    FieldMonsterOnDeath();
    Effect("SPARK_EXPLOSION", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
    AudioEvent("BurnCast", 1);
}

void UndeadMonsterOnDead()
{
    int mUnit = GetOwner(GetTrigger() + 1);
    int count;

    //LookWithAngle(mUnit, GetDirection(mUnit) + 1);
    //if (GetDirection(mUnit) >= ToInt(GetObjectZ(mUnit)))
    //    RemoveUndeadRoomWalls(mUnit);
    count ++;
    if (count == 40)
        RemoveUndeadRoomWalls(mUnit);
    FieldMonsterOnDeath();
    DeleteObjectTimer(self, 90);
    Delete(GetTrigger() + 1);
}

int UndeadMonster(int ptr)
{
    int initPtr = ToInt(GetObjectZ(ptr));
    int dataPtr = initPtr + 8;
    int rnd = Random(0, 7);
    int unit = CreateObjectAt(ToStr(GetMemory(dataPtr) + rnd), GetObjectX(ptr), GetObjectY(ptr));

    SetOwner(GetMemory(initPtr), CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)));
    dataPtr += 4;
    SetUnitMaxHealth(unit, GetMemory(dataPtr + (4 * rnd)));
    SetCallback(unit, 5, UndeadMonsterOnDead);
    return unit;
}

void SummonUndeadMonster(int ptr)
{
    int count = GetDirection(ptr);

    if (IsObjectOn(ptr))
    {
        if (count)
        {
            UndeadMonster(ptr);
            LookWithAngle(ptr, count - 1);
            FrameTimerWithArg(1, ptr, SummonUndeadMonster);
        }
        else
            Delete(ptr);
    }
}

void InitUndeadRoom()
{
    int link, unit = UndeadMonsterInit();

    ObjectOff(self);
    CancelTimer(FrameTimerWithArg(10, UndeadMonsterInit, UndeadMonsterInit));
    link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    LookWithAngle(CreateObject("InvisibleLightBlueLow", 15), 20);
    LookWithAngle(CreateObject("InvisibleLightBlueLow", 16), 20);
    Raise(unit + 1, link);
    Raise(unit + 2, link);
    FrameTimerWithArg(1, unit + 1, SummonUndeadMonster);
    FrameTimerWithArg(1, unit + 2, SummonUndeadMonster);
}

void SummonedUnitAI(int mob)
{
    int target = ToInt(GetObjectZ(mob + 1));

    if (CurrentHealth(mob) && CurrentHealth(target))
    {
        CreatureFollow(mob, target);
        AggressionLevel(mob, 1.0);
    }
}

void GeneratorDestroy()
{
    int dFunc = ToInt(GetObjectZ(GetTrigger() + 3));

    Delete(GetTrigger() + 1);
    Delete(GetTrigger() + 2);
    if (dFunc)
        CallFunction(dFunc);
    Delete(GetTrigger() + 3);
}

int GeneratorOnDetectPlayer(int mgen)
{
    float dist, temp = 9999.0;
    int i, res = 0;

    for (i = 9 ; i >= 0 ; i --)
    {
        if (CurrentHealth(player[i]))
        {
            if (IsVisibleTo(player[i], mgen) || IsVisibleTo(mgen, player[i]))
            {
                dist = Distance(GetObjectX(player[i]), GetObjectY(player[i]), GetObjectX(mgen), GetObjectY(mgen));
                if (dist < temp)
                {
                    temp = dist;
                    res = player[i];
                }
            }
        }
    }
    return res;
}

void SummonedMobDetected()
{
    int target = GetTrigger() + 1;

    if (HasEnchant(self, "ENCHANT_PROTECT_FROM_MAGIC"))
        EnchantOff(self, "ENCHANT_PROTECT_FROM_MAGIC");
    MoveObject(target, GetObjectX(self), GetObjectY(self));
    if (ToInt(GetObjectZ(target)) ^ GetCaller())
    {
        Raise(target, GetCaller());
        CreatureFollow(self, other);
        AggressionLevel(self, 1.0);
    }
}

void SummonedMobIdleCountdown(int point)
{
    int owner = GetOwner(point), count = GetDirection(point);

    while (IsObjectOn(point))
    {
        if (CurrentHealth(owner))
        {
            if (HasEnchant(owner, "ENCHANT_PROTECT_FROM_MAGIC"))
            {
                if (count)
                {
                    SecondTimerWithArg(1, point, SummonedMobIdleCountdown);
                    LookWithAngle(point, count - 1);
                    break;
                }
                else
                {
                    RemoveGeneratorMonster(owner);
                }
            }
            EnchantOff(owner, "ENCHANT_DETECTING");
        }
        Delete(point);
        break;
    }
}

void SummonedMobLostEnemy()
{
    int target;

    if (HasEnchant(self, "ENCHANT_DETECTING")) return;
    Enchant(self, "ENCHANT_DETECTING", 20.0);
    Enchant(self, "ENCHANT_PROTECT_FROM_MAGIC", 20.0);
    target = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(self), GetObjectY(self));
    SetOwner(self, target);
    LookWithAngle(target, 15);
    SecondTimerWithArg(1, target, SummonedMobIdleCountdown);
}

void GeneratorMonsterDie()
{
    int mgen = GetOwner(GetTrigger() + 1);

    if (GetDirection(mgen + 2))
        LookWithAngle(mgen + 2, GetDirection(mgen + 2) - 1);
    DeleteObjectTimer(self, 150);
    Delete(GetTrigger() + 1);
}

void RemoveGeneratorMonster(int mob)
{
    int mgen = GetOwner(mob + 1);

    if (GetDirection(mgen + 2))
        LookWithAngle(mgen + 2, GetDirection(mgen + 2) - 1);
    Delete(mob);
    Delete(mob + 1);
}

void GeneratorMonsterSpawn(int mgen, int target)
{
    int unit;
    string mobName = ToStr(ToInt(GetObjectZ(mgen + 1)));

    LookWithAngle(mgen + 2, GetDirection(mgen + 2) + 1);
    MoveWaypoint(1, GetObjectX(mgen) + UnitRatioX(target, mgen, 22.0), GetObjectY(mgen) + UnitRatioY(target, mgen, 22.0));
    unit = CreateObject(mobName, 1);
    SetOwner(mgen, CreateObject("InvisibleLightBlueLow", 1));
    Raise(unit + 1, target);
    FrameTimerWithArg(1, unit, SummonedUnitAI);
    SetUnitMaxHealth(unit, ToInt(GetObjectZ(mgen + 2)));
    RetreatLevel(unit, 0.0);
    ResumeLevel(unit, 1.0);
    SetCallback(unit, 3, SummonedMobDetected);
    SetCallback(unit, 5, GeneratorMonsterDie);
    SetCallback(unit, 13, SummonedMobLostEnemy);
    LookAtObject(unit, target);
    GreenLightningEffect(GetObjectX(mgen), GetObjectY(mgen), GetWaypointX(1), GetWaypointY(1));
    AudioEvent("MonsterGeneratorSpawn", 1);
}

void GeneratorAliveLoop(int mgen)
{
    int count, target;

    if (CurrentHealth(mgen))
    {
        count = GetDirection(mgen + 1);
        if (count)
            LookWithAngle(mgen + 1, count - 1);
        else
        {
            if (GetDirection(mgen + 2) < 4)
            {
                target = GeneratorOnDetectPlayer(mgen);
                if (target)
                {
                    GeneratorMonsterSpawn(mgen, target);
                    LookWithAngle(mgen + 1, 60);
                }
            }
        }
        FrameTimerWithArg(3, mgen, GeneratorAliveLoop);
    }
}

int GenDestroyFuncNumber()
{
    StopScript(GeneratorDestroy);
}

int PlacingGenerator(string mobName, int mobHp, int posUnit, int dFunc)
{
    int ptr, unit;

    if (posUnit > GetHost())
        unit = CreateObjectAt(mobName + "Generator", GetObjectX(posUnit), GetObjectY(posUnit));
    else
        unit = CreateObjectAt(mobName + "Generator", GetWaypointX(posUnit), GetWaypointY(posUnit));
    if (CurrentHealth(unit))
    {
        ptr = GetMemory(0x750710);
        Raise(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)), mobName);
        //+1: dir= summonTimer, z= stringNumber
        Raise(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)), mobHp);
        //+2: dir= summonAmount, z= mobHp
        Raise(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)), dFunc);
        //+3: z= destroy function
        SetMemory(GetMemory(ptr + 0x2ec) + 0x3c, GenDestroyFuncNumber());
        SetUnitMaxHealth(unit, 500);
        ObjectOff(unit);
        FrameTimerWithArg(1, unit, GeneratorAliveLoop);
    }
    return unit;
}

void ForestGenDestroy()
{
    int count;

    count ++;
    if (count ^ 4) return;
    else
    {
        WallGroupOpen(2);
        UniPrintToAll("벽이 열렸습니다");
    }
}

int ForestGenDFunc()
{
    StopScript(ForestGenDestroy);
}

void PutTetrisGen(int ptr)
{
    int dFunc = ForestGenDFunc();

    PlacingGenerator("Bear", 325, ptr, dFunc);
    PlacingGenerator("Shade", 180, ptr + 1, dFunc);
    PlacingGenerator("Shade", 180, ptr + 2, dFunc);
    PlacingGenerator("Bear", 325, ptr + 3, dFunc);
}

void VKTrollDie()
{
    int count;
    int pin = GetTrigger() + 1;

    count ++;
    if (count >= 4)
    {
        FrameTimerWithArg(60, ToInt(GetObjectZ(GetOwner(pin))), PutTetrisGen);
    }
    FieldMonsterOnDeath();
    Delete(pin);
}

int SummonTroll(int pUnit)
{
    int unit = CreateObjectAt("Troll", GetObjectX(pUnit), GetObjectY(pUnit));

    CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit));
    SetUnitMaxHealth(unit, 320);
    RetreatLevel(unit, 0.0);
    ResumeLevel(unit, 1.0);
    SetCallback(unit, 5, VKTrollDie);
    Effect("SMOKE_BLAST", GetObjectX(unit), GetObjectY(unit), 0.0, 0.0);
    return unit;
}

void VKBatDie()
{
    int pin = GetTrigger() + 1;

    MoveObject(pin, GetObjectX(self), GetObjectY(self));
    Delete(self);
    SetOwner(GetOwner(pin), SummonTroll(pin) + 1);
    Effect("SPARK_EXPLOSION", GetObjectX(pin), GetObjectY(pin), 0.0, 0.0);
    Delete(pin);
}

int SummonBat(int pUnit)
{
    int unit = CreateObjectAt("Bat", GetObjectX(pUnit), GetObjectY(pUnit));

    SetOwner(pUnit, CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)));
    SetUnitMaxHealth(unit, 120);
    SetCallback(unit, 5, VKBatDie);
    Effect("SMOKE_BLAST", GetObjectX(unit), GetObjectY(unit), 0.0, 0.0);
    return unit;
}

void ForestRoomSumBat(int pUnit)
{
    int i;

    for (i = 0 ; i < 4 ; i ++)
    {
        Raise(pUnit + i, pUnit);
        SummonBat(pUnit + i);
    }
}

void ForestRoomInit()
{
    int unit = CreateObject("InvisibleLightBlueLow", 17);

    FrameTimerWithArg(65, CreateObject("InvisibleLightBlueLow", 18) - 1, ForestRoomSumBat);
    CreateObject("InvisibleLightBlueLow", 19);
    CreateObject("InvisibleLightBlueLow", 20);
    ObjectOff(self);
}

int FxBurnningZombie(float xProfile, float yProfile)
{
    int fxU = CreateObjectAt("Zombie", xProfile, yProfile);

    UnitNoCollide(fxU);
    ObjectOff(fxU);
    Damage(fxU, 0, MaxHealth(fxU) + 1, 1);
    return fxU;
}

void FinalUnitDeath()
{
    int mUnit = GetOwner(GetTrigger() + 1);

    FieldMonsterOnDeath();
    Delete(GetTrigger() + 1);
    LookWithAngle(mUnit, GetDirection(mUnit) - 1);
    if (!GetDirection(mUnit))
    {
        SetupDungeonExit(354);
        WallGroupOpen(3);
        UniPrintToAll("벽이 개방됩니다!!");
    }
    Effect("EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
}

int SummonFireSprite(int wp)
{
    int unit = CreateObject("FireSprite", wp);

    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x10000);
    UnitLinkBinScript(unit, FireSpriteBinTable());
    SetUnitMaxHealth(unit, 98);
    SetUnitSpeed(unit, 2.5);
    SetCallback(unit, 5, FieldMonsterOnDeath);
    return unit;
}

int SummonFireFairy(int pUnit)
{
    int unit = CreateObjectAt("FireSprite", GetObjectX(pUnit), GetObjectY(pUnit));

    SetOwner(GetOwner(pUnit), CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit)));
    SetUnitMaxHealth(unit, 192);
    SetUnitSpeed(unit, 2.5);
    SetCallback(unit, 5, FinalUnitDeath);
    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x10000);
    UnitLinkBinScript(unit, FireSpriteBinTable());
    return unit;
}

void JandorDie()
{
    MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
    Effect("EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
    Delete(self);
    SummonFireFairy(GetTrigger() + 1);
    Delete(GetTrigger() + 1);
}

int SummonJandor(int pUnit)
{
    int unit = CreateObjectAt("AirshipCaptain", GetObjectX(pUnit), GetObjectY(pUnit));

    SetOwner(GetOwner(pUnit), CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit)));
    SetUnitMaxHealth(unit, 325);
    RetreatLevel(unit, 0.0);
    AggressionLevel(unit, 1.0);
    SetCallback(unit, 5, JandorDie);
    UnitLinkBinScript(unit, AirshipCaptainBinTable());
    return unit;
}

void RedDemonDie()
{
    MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
    Effect("EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
    Delete(self);
    SummonJandor(GetTrigger() + 1);
    Delete(GetTrigger() + 1);
}

int SummonRedDemon(int pUnit)
{
    int unit = CreateObjectAt("Demon", GetObjectX(pUnit), GetObjectY(pUnit));

    SetOwner(GetOwner(pUnit), CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit)));
    SetUnitMaxHealth(unit, 480);
    UnitZeroFleeRange(unit);
    SetCallback(unit, 5, RedDemonDie);
    return unit;
}

void OrbHecubahDie()
{
    MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
    Effect("EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
    Delete(self);
    SummonRedDemon(GetTrigger() + 1);
    Delete(GetTrigger() + 1);
}

int SummonOrbHecubah(int pUnit)
{
    int unit = CreateObjectAt("HecubahWithOrb", GetObjectX(pUnit), GetObjectY(pUnit));

    SetOwner(GetOwner(pUnit), CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit)));
    SetUnitMaxHealth(unit, 400);
    UnitZeroFleeRange(unit);
    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x10000);
    UnitLinkBinScript(unit, HecubahWithOrbBinTable());
    RetreatLevel(unit, 0.0);
    SetCallback(unit, 5, OrbHecubahDie);
    return unit;
}

void MecaGolemDie()
{
    MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
    Effect("EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
    Delete(self);
    SummonOrbHecubah(GetTrigger() + 1);
    Delete(GetTrigger() + 1);
}

int SummonMecaGolem(int pUnit)
{
    int unit = CreateObjectAt("MechanicalGolem", GetObjectX(pUnit), GetObjectY(pUnit));

    SetOwner(GetOwner(pUnit), CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit)));
    SetUnitMaxHealth(unit, 600);
    UnitLinkBinScript(unit, MechanicalGolemBinTable());
    SetCallback(unit, 5, MecaGolemDie);
    return unit;
}

void PowerfulLichDie()
{
    MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
    Effect("EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
    Delete(self);
    SummonMecaGolem(GetTrigger() + 1);
    Delete(GetTrigger() + 1);
}

int SummonDarkLich(int pUnit)
{
    int unit = CreateObjectAt("Lich", GetObjectX(pUnit), GetObjectY(pUnit));

    SetOwner(GetOwner(pUnit), CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit)));
    SetUnitMaxHealth(unit, 325);
    UnitZeroFleeRange(unit);
    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x20);
    UnitLinkBinScript(unit, LichLordBinTable());
    SetCallback(unit, 5, PowerfulLichDie);
    return unit;
}

void PowerfulSkeletonDie()
{
    MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
    Effect("EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
    Delete(self);
    SummonDarkLich(GetTrigger() + 1);
    Delete(GetTrigger() + 1);
}

int SummonSkeletonLord(int pUnit)
{
    int unit = CreateObjectAt("SkeletonLord", GetObjectX(pUnit), GetObjectY(pUnit));

    SetOwner(GetOwner(pUnit), CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit)));
    SetUnitMaxHealth(unit, 306);
    SetCallback(unit, 5, PowerfulSkeletonDie);
    return unit;
}

void PowerfulBombDie()
{
    MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
    Effect("EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
    Delete(self);
    SummonSkeletonLord(GetTrigger() + 1);
    Delete(GetTrigger() + 1);
}

int SummonBomber(int pUnit)
{
    string bombName = {"Bomber", "BomberBlue", "BomberGreen", "BomberYellow"};
    int unit = CreateObjectAt(ToStr(SToInt(bombName) + Random(0, 3)), GetObjectX(pUnit), GetObjectY(pUnit));

    SetOwner(GetOwner(pUnit), CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit)));
    SetUnitMaxHealth(unit, 180);
    BomberSetMonsterCollide(unit);
    UnitLinkBinScript(unit, BomberGreenBinTable());
    SetCallback(unit, 5, PowerfulBombDie);
    return unit;
}

void PowerfulGhostDie()
{
    MoveObject(GetTrigger() + 1, GetObjectX(self), GetObjectY(self));
    Effect("EXPLOSION", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
    Delete(self);
    SummonBomber(GetTrigger() + 1);
    Delete(GetTrigger() + 1);
}

int PowerfulGhost(int pUnit)
{
    int unit = CreateObjectAt("Ghost", GetObjectX(pUnit), GetObjectY(pUnit));

    SetOwner(GetOwner(pUnit), CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(unit), GetObjectY(unit)));
    SetUnitMaxHealth(unit, 128);
    SetCallback(unit, 5, PowerfulGhostDie);
    UnitLinkBinScript(unit, GhostBinTable());
    return unit;
}

void TransformDarkKnight()
{
    int pth;

    if (CurrentHealth(other) && MaxHealth(self))
    {
        if (HasClass(other, "PLAYER"))
        {
            pth = GetTrigger() + 1;
            PowerfulGhost(pth);
            GreenSparkFx(GetObjectX(pth), GetObjectY(pth));
            //DeleteObjectTimer(PowerfulGhost(pth), 24);
            Effect("WHITE_FLASH", GetObjectX(pth), GetObjectY(pth), 0.0, 0.0);
            Delete(self);
            Delete(pth);
        }
    }
}

void SpawnDarkKnight(int ptr)
{
    int count = GetDirection(ptr + 1), unit;

    if (IsObjectOn(ptr))
    {
        if (count < GetDirection(ptr))
        {
            MoveWaypoint(1, GetObjectX(ptr + count + 1), GetObjectY(ptr + count + 1));
            unit = DummyUnitCreate("Beholder", 1);
            SetOwner(ptr, CreateObject("InvisibleLightBlueHigh", 1));
            SetCallback(unit, 9, TransformDarkKnight);
            LookWithAngle(ptr + 1, count + 1);
            FrameTimerWithArg(1, ptr, SpawnDarkKnight);
        }
    }
}

void ThirdRoomInit()
{
    int unit = CreateObject("InvisibleLightBlueLow", 33), i;

    LookWithAngle(unit, 12);
    ObjectOff(self);
    for (i = 0 ; i < 12 ; i ++)
        CreateObject("InvisibleLightBlueLow", i + 21);
    FrameTimerWithArg(1, unit, SpawnDarkKnight);
}

void RemoveGolemWalls()
{
    int i;
    ObjectOff(self);

    for (i = 0 ; i < 3 ; i ++)
        WallOpen(Wall(102 + i, 146 + i));
    UniPrint(other, "벽이 열립니다...");
}

void RockGolemDie()
{
    int mid = GetOwner(GetTrigger() + 1);

    FieldMonsterOnDeath();
    LookWithAngle(mid, GetDirection(mid) - 1);
    if (!GetDirection(mid))
    {
        WallGroupOpen(4);
        UniPrintToAll("벽이 열렸습니다. 다음 구간으로 이동하세요");
    }
    Delete(GetTrigger() + 1);
}

void RockGolemHurtNone()
{
    return;
}

void RockGolemHurt()
{
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    DeleteObjectTimer(CreateObjectAt("BigSmoke", GetObjectX(self), GetObjectY(self)), 21);
    SetCallback(self, 7, RockGolemHurtNone);
    HitLocation(self, GetObjectX(self), GetObjectY(self));
    AggressionLevel(self, 1.0);
    Enchant(self, "ENCHANT_VAMPIRISM", 0.0);
    Enchant(self, "ENCHANT_INFRAVISION", 0.0);
    AudioEvent("DemonHurt", 1);
    UniChatMessage(self, "이 녀석이 겁도없구나?\n감히 잠자는 사자의 콧털을 건드려?\n피떡갈비를 만들어 주겠다!", 150);
}

void StartSummonStoneGolem(int ptr)
{
    int mid, unit;

    if (IsObjectOn(ptr))
    {
        if (GetDirection(ptr)) return;
        mid = GetOwner(ptr);
        unit = CreateObjectAt("StoneGolem", GetObjectX(ptr), GetObjectY(ptr));

        SetOwner(mid, CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)));
        SetUnitMaxHealth(unit, 600);
        AggressionLevel(unit, 0.0);
        LookAtObject(unit, mid);
        SetCallback(unit, 5, RockGolemDie);
        SetCallback(unit, 7, RockGolemHurt);
        Effect("SMOKE_BLAST", GetObjectX(unit), GetObjectY(unit), 0.0, 0.0);
        FrameTimerWithArg(1, ptr + 1, StartSummonStoneGolem);
    }
}

void GolemRoomInit()
{
    int unit = CreateObject("InvisibleLightBlueLow", 60), i, count = 0;

    ObjectOff(self);
    for (i = 34 ; i <= 59 ; i ++)
    {
        SetOwner(unit, CreateObject("InvisibleLightBlueLow", i));
        count ++;
    }
    LookWithAngle(unit, count);
    LookWithAngle(CreateObject("InvisibleLightBlueLow", 60), 1);
    FrameTimerWithArg(1, unit + 1, StartSummonStoneGolem);
}

void BeastOnDeath()
{
    FieldMonsterOnDeath();
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    Delete(self);
    DeleteObjectTimer(CreateObject("BreakingSoup", 1), 20);
}

int SummonBeast(int pUnit)
{
    int unit = CreateObjectAt("WeirdlingBeast", GetObjectX(pUnit), GetObjectY(pUnit));

    SetUnitMaxHealth(unit, 225);
    UnitZeroFleeRange(unit);
    UnitLinkBinScript(unit, WeirdlingBeastBinTable());
    RetreatLevel(unit, 0.0);
    AggressionLevel(unit, 1.0);
    SetCallback(unit, 5, BeastOnDeath);
    return unit;
}

void ReleaseBeastFromHive(int ptr)
{
    int count = GetDirection(ptr);

    if (IsObjectOn(ptr))
    {
        if (count)
        {
            SummonBeast(ptr);
            LookWithAngle(ptr, count - 1);
            FrameTimerWithArg(3, ptr, ReleaseBeastFromHive);
            Effect("SMOKE_BLAST", GetObjectX(ptr), GetObjectY(ptr), 0.0, 0.0);
        }
        else
            Delete(ptr);
    }
}

void EnableObject(int unit)
{
    ObjectOn(unit);
}

void RedKeyClearWalls()
{
    int i;

    ObjectOff(self);

    if (GetUnitThingID(GetLastItem(other)) ^ 2182)
    {
        FrameTimerWithArg(90, GetTrigger(), EnableObject);
        UniPrint(other, "출구를 열기 위해서는 붉은리치 키가 필요합니다. 만약 가지고 있다면 키를 인벤토리 최하단으로 옮긴 후 다시 시도해보세요 (버리고 다시줍기)");
    }
    else
    {
        for (i = 0 ; i < 6 ; i ++)
            WallOpen(Wall(15 + i, 69 - i));
        Delete(GetLastItem(other));
        UniPrint(other, "붉은키를 스위치에 꽂아넣었습니다. 출구가 열립니다");
    }
}

void HiveDestroyEvent()
{
    int unit, pUnit = GetTrigger() + 1;

    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    Delete(self);
    CreateObject("WaspNestDestroy", 1);
    if (GetDirection(pUnit))
    {
        CreateObjectAt("RedOrbKeyOfTheLich", GetObjectX(pUnit), GetObjectY(pUnit));
        AudioEvent("KeyDrop", 1);
    }
    else
    {
        unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(pUnit), GetObjectY(pUnit));
        LookWithAngle(unit, Random(2, 5));
        FrameTimerWithArg(1, unit, ReleaseBeastFromHive);
    }
    Delete(pUnit);
    AudioEvent("WaspHiveBreak", 1);
}

int SpawnHives(int wp, int func)
{
	int hive = CreateObject("WaspNest", wp);
    int ptr = GetMemory(0x750710);
	
    SetUnitMaxHealth(hive, 520);
    CreateObject("InvisibleLightBlueHigh", wp);
    SetMemory(ptr + 0x2d4, ImportUnitDieFunc());
    SetMemory(ptr + 0x2fc, func);

    return hive;
}

void PlacingHives(int ptr)
{
    int count = GetDirection(ptr), hive;

    if (IsObjectOn(ptr))
    {
        if (count)
        {
            MoveWaypoint(1, GetObjectX(ptr), GetObjectY(ptr));
            hive = SpawnHives(1, HiveDieFunc);
            if (ToInt(GetObjectZ(ptr)) && TombRndPick == count - 1)
                LookWithAngle(hive + 1, 1);
            LookWithAngle(ptr, count - 1);
            MoveObject(ptr, GetObjectX(ptr) + 46.0, GetObjectY(ptr) + 46.0);
            FrameTimerWithArg(1, ptr, PlacingHives);
        }
        else
            Delete(ptr);
    }
}

void TombPartInit()
{
    int unit = CreateObject("InvisibleLightBlueHigh", 61);

    LookWithAngle(CreateObject("InvisibleLightBlueHigh", 62), 10);
    LookWithAngle(unit, 10);
    Raise(unit + Random(0, 1), 1);
    FrameTimerWithArg(1, unit, PlacingHives);
    FrameTimerWithArg(1, unit + 1, PlacingHives);
    ObjectOff(self);
}

void PrisonGenDestroy()
{
    int count;

    count ++;
    if (count ^ 10) return;
    else
    {
        WallGroupOpen(5);
        UniPrintToAll("벽이 열렸습니다");
    }
}

int PrisonGenDFunc()
{
    StopScript(PrisonGenDestroy);
}

void PrisonPartInit()
{
    int dFunc = PrisonGenDFunc();

    ObjectOff(self);
    PlacingGenerator("Skeleton", 250, 63, dFunc);
    PlacingGenerator("Shade", 225, 64, dFunc);
    PlacingGenerator("SkeletonLord", 306, 65, dFunc);
    PlacingGenerator("Skeleton", 225, 66, dFunc);
    PlacingGenerator("SkeletonLord", 306, 67, dFunc);
    PlacingGenerator("Shade", 225, 68, dFunc);
    PlacingGenerator("OgreBrute", 306, 69, dFunc);
    PlacingGenerator("GruntAxe", 225, 70, dFunc);
    PlacingGenerator("OgreWarlord", 350, 71, dFunc);
    PlacingGenerator("EvilCherub", 98, 72, dFunc);
}

float FloatTable(int num)
{
    float arr[28], count;
    int k;

    if (num < 0)
    {
        count = 27.0;
        for (k = 27 ; k >= 0 ; k --)
        {
            arr[k] = count;
            count -= 1.0;
        }
        return ToFloat(0);
    }
    return arr[num];
}

int NumberData(int num)
{
    int data[10];

    if (!data[0])
    {
        data[0] = 110729622; data[1] = 239354980; data[2] = 252799126; data[3] = 110643350; data[4] = 143194521;
        data[5] = 126382367; data[6] = 110719382; data[7] = 71583903; data[8] = 110717334; data[9] = 110684566;
        return 0;
    }
    return data[num];
}

void DisplayNumber(float x, float y, int bytes, string orb)
{
    float pos_x = x, pos_y = y;
    int idx = 0, k;

    for (k = 1 ; !(k & 0x10000000) ; k <<= 1)
    {
        if (bytes & k)
            CreateObjectAt(orb, pos_x, pos_y);
        if (idx % 4 == 3)
        {
            pos_x = x;
            pos_y += 2.0;
        }
        else
            pos_x += 2.0;
        idx ++;
    }
}

int DrawNumber(int num, float x, float y)
{
    int ptr = CreateObjectAt("RedPotion", x, y) + 1;

    Delete(ptr - 1);
    if (num)
    {
        if (num >= 10 && num < 100)
            DisplayNumber(x, y, NumberData(num / 10), "ManaBombOrb");
        DisplayNumber(x + 12.0, y, NumberData(num % 10), "ManaBombOrb");
    }
    LookWithAngle(CreateObjectAt("InvisibleLightBlueLow", x, y), 1);

    return ptr;
}

void RemovePreviousDrawing(int ptr)
{
    int pic = ptr, do = 1;

    while (do && IsObjectOn(pic))
    {
        if (GetDirection(pic))
            do = 0;
        Delete(pic);
        pic ++;
    }
}

void RemoveSchoolWalls()
{
    int i;

    for (i = 0 ; i < 12 ; i ++)
        WallOpen(Wall(221 + i, 219 + i));
}

void RemoveSchoolRewardWalls()
{
    int i;

    if (i) return;
    for (i = 0 ; i < 15 ; i ++)
        WallOpen(Wall(221 + i, 243 - i));
}

void RhombusPut(int wp, float x_low, float x_high, float y_low, float y_high)
{
    float x = RandomFloat(y_low, y_high), y = RandomFloat(0.0, x_high - x_low);

    MoveWaypoint(wp, x_high - y_high + x - y, x + y);
}

void QuizErrorEvent(int idx)
{
    string wizName = {"Beholder", "Wizard", "WizardWhite"};
    int arr[8];

    if (idx < 8)
    {
        if (CurrentHealth(arr[idx]))
            1;
        else
        {
            RhombusPut(1, 4934.0, 5328.0, 5068.0, 5328.0);
            arr[idx] = CreateObject(ToStr(SToInt(wizName) + Random(0, 2)), 1);
            SetUnitMaxHealth(arr[idx], 275);
            SetCallback(arr[idx], 5, FieldMonsterOnDeath);
            Enchant(arr[idx], "ENCHANT_ANCHORED", 0.0);
            Raise(arr[idx], 240.0);
        }
        FrameTimerWithArg(1, idx + 1, QuizErrorEvent);
    }
}

void DisplayInputPass(int pLink)
{
    string name = "입력된 숫자: ";

    name += (IntToString(GetMemory(pLink)) + IntToString(GetMemory(pLink + 4)) + IntToString(GetMemory(pLink + 8)) + IntToString(GetMemory(pLink + 12)));
    UniPrint(other, name);
}

int MatchingCheck(int link)
{
    int pLink = link + 20;
    int sol = GetMemory(link + 8);
    int mySol = (GetMemory(pLink) * 1000) + (GetMemory(pLink + 4) * 100) + (GetMemory(pLink + 8) * 10) + GetMemory(pLink + 12);

    return sol == mySol;
}

void PressKeyEnter()
{
    int link, pLink;
    int index = GetDirection(self);

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, QuizMethodClass, QuizMethodClass));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        pLink = link + 16;
    }
    if (GetMemory(link + 8))
    {
        SetMemory(pLink + 4 + (GetMemory(pLink) * 4), index);
        SetMemory(pLink, (GetMemory(pLink) + 1) % 4);
        DisplayInputPass(pLink + 4);
        if (GetMemory(pLink)) return;
        if (MatchingCheck(link))
        {
            SetMemory(link + 8, 0);
            SetMemory(link + 12, GetMemory(link + 12) + 1);
            if (GetMemory(link + 12) < 5)
                UniPrintToAll("정답입니다!! 아직 다음 문제가 남아있습니다. 선생님께 문제를 달라고 하세요");
            else
            {
                WallGroupOpen(38);
                FrameTimer(30, RemoveSchoolWalls);
                UniPrintToAll("정답입니다!! 모든 문제를 풀었습니다");
            }
        }
        else
        {
            FrameTimerWithArg(3, 0, QuizErrorEvent);
            UniPrintToAll("오답입니다!! 문제를 곰곰히 다시 생각해보세요");
        }
    }
}

void KeyPadInit(int num)
{
    int padUnit, curNum = num - 1;

    if (num)
    {
        padUnit = Object("PressNum" + IntToString(curNum));
        LookWithAngle(padUnit, curNum);
        DisplayNumber(GetObjectX(padUnit), GetObjectY(padUnit), NumberData(curNum), "ManaBombOrb");
        FrameTimerWithArg(1, curNum, KeyPadInit);
    }
}

void QuizMethodClass()
{
    int left, right, res, quizNum;
    int index, arr[4];

    if (Random(0, 1))
    {
        left = Random(24, 99);
        right = Random(24, 99);
        res = left * right;
    }
    else
    {
        left = Random(400, 4999);
        right = Random(400, 4999);
        res = left + right;
    }
    index = 0;
    arr[0] = 0;
    arr[1] = 0;
    arr[2] = 0;
    arr[3] = 0;
}

void ShowMethodThisQuiz(int unit, int link)
{
    string quizName = "퀴즈[" + IntToString(GetMemory(link + 12) + 1) + "/5]: ";

    if (GetMemory(link) < 100)
        quizName += (IntToString(GetMemory(link)) + "x" + IntToString(GetMemory(link + 4)) + "=?");
    else
        quizName += (IntToString(GetMemory(link)) + "+" + IntToString(GetMemory(link + 4)) + "=?");
    if (unit) //Says
        UniChatMessage(unit, quizName, 180);
    else
        UniPrintToAll(quizName);
}

void OnlyDisplayQuiz(int link)
{
    ShowMethodThisQuiz(0, link);
}

void ShowThisQuiz()
{
    int link;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, QuizMethodClass, QuizMethodClass));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    if (GetMemory(link + 12) < 5)
    {
        if (GetMemory(link + 8))
            ShowMethodThisQuiz(self, link);
        else
        {
            QuizMethodClass();
            FrameTimerWithArg(5, link, OnlyDisplayQuiz);
        }
    }
    else
    {
        RemoveSchoolRewardWalls();
        UniChatMessage(self, "문제를 모두 풀었어\n어서 다음 방으로 가!", 150);
    }
}

void SchoolZoneInit()
{
    int teach = DummyUnitCreate("WizardGreen", 73);

    ObjectOff(self);
    LookWithAngle(teach, 32);
    SetDialog(teach, "AA", ShowThisQuiz, ShowThisQuiz);

    NumberData(0);
    FloatTable(-1);
    KeyPadInit(10);
    UniChatMessage(teach, "선생님: 이리와서 5 문제좀 풀고가렴", 150);
}

void FixPlayerDialogBug(int plr)
{
    int temp;

    if (MaxHealth(player[plr]))
    {
        temp = UnitToPtr(player[plr]);
        if (GetMemory(GetMemory(temp + 0x2ec)) + 0x11c)
        {
            SetMemory(GetMemory(temp + 0x2ec) + 0x11c, 0);
            SetMemory(GetMemory(GetMemory(temp + 0x2ec) + 0x114) + 0xe60, 0x10);
        }
    }
}

void FixAllPlayerDialogBug()
{
    int k, temp;

    for (k = 9 ; k >= 0 ; k --)
        FixPlayerDialogBug(k);
}

void SnowFakerDescription()
{
    TellStoryUnitName("AwardGuide", "War09c:CainAsk", "죽어가는 자");
    UniChatMessage(self, "물약 1개만 주세여...", 150);
}

int CheckHasPotion(int unit)
{
    int cur = GetLastItem(unit);

    while (IsObjectOn(cur))
    {
        if (HasSubclass(cur, "HEALTH_POTION") && HasClass(cur, "FOOD"))
            return cur;
        cur = GetPreviousItem(cur);
    }
    return 0;
}

int SpawnTalkSkull(int pUnit)
{
    int unit = CreateObjectAt("TalkingSkull", GetObjectX(pUnit), GetObjectY(pUnit));

    SetUnitSpeed(unit, 3.2);
    UnitLinkBinScript(unit, TalkingSkullBinTable());
    SetUnitMaxHealth(unit, 160);
    SetCallback(unit, 5, FieldMonsterOnDeath);
    return unit;
}

int SpawnHecubah(int pUnit)
{
    int unit = CreateObjectAt("Hecubah", GetObjectX(pUnit), GetObjectY(pUnit));

    UnitLinkBinScript(unit, HecubahBinTable());
    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x20);
    UnitZeroFleeRange(unit);
    SetUnitMaxHealth(unit, 420);
    RetreatLevel(unit, 0.0);
    return unit;
}

int SpawnRedWizard(int wp)
{
    int unit = CreateObject("WizardRed", wp);

    UnitLinkBinScript(unit, WizardRedBinTable());
    UnitZeroFleeRange(unit);
    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x8000);
    SetUnitMaxHealth(unit, 1280);
    RetreatLevel(unit, 0.0);

    return unit;
}

void CoverFistImageLoop(int unit)
{
    int parent = GetOwner(unit);

    if (CurrentHealth(parent))
    {
        if (ToInt(Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(parent), GetObjectY(parent))))
            MoveObject(unit, GetObjectX(parent), GetObjectY(parent));
        FrameTimerWithArg(1, unit, CoverFistImageLoop);
    }
    else
        Delete(unit);
}

void CoverFistImage(int unit)
{
    int iUnit = CreateObjectAt("SmallFist", GetObjectX(unit), GetObjectY(unit));

    UnitNoCollide(iUnit);
    Frozen(iUnit, 1);
    SetOwner(unit, iUnit);
    FrameTimerWithArg(1, iUnit, CoverFistImageLoop);
}

void ReleaseSkulls(int ptr)
{
    int count = GetDirection(ptr), unit;

    if (IsObjectOn(ptr))
    {
        if (count < 30)
        {
            unit = SpawnTalkSkull(ptr);
            CoverFistImage(unit);
            AggressionLevel(unit, 1.0);
            RetreatLevel(unit, 0.0);
            ResumeLevel(unit, 1.0);
            SetUnitScanRange(unit, 500.0);
            LookWithAngle(ptr, count + 1);
            FrameTimerWithArg(2, ptr, ReleaseSkulls);
            DeleteObjectTimer(CreateObjectAt("BigSmoke", GetObjectX(ptr), GetObjectY(ptr)), 18);
            UniChatMessage(unit, "으헤헤헷", 150);
        }
        else
            Delete(ptr);
    }
}

void RWizDeath()
{
    FrameTimerWithArg(3, CreateObjectAt("InvisibleLightBlueLow", GetObjectX(self), GetObjectY(self)), ReleaseSkulls);
    WallGroupOpen(6);
}

void SnowFakerAnswer()
{
    int pic, rwiz;

    if (GetAnswer(self) ^ 1) return;
    if (MaxHealth(self))
    {
        pic = CheckHasPotion(other);
        if (pic)
        {
            MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
            Delete(self);
            rwiz = SpawnRedWizard(1);
            SetCallback(rwiz, 5, RWizDeath);
            Delete(pic);
            Effect("COUNTERSPELL_EXPLOSION", GetObjectX(rwiz), GetObjectY(rwiz), 0.0, 0.0);
            CastSpellObjectLocation("SPELL_TURN_UNDEAD", rwiz, GetObjectX(rwiz), GetObjectY(rwiz));
            UniChatMessage(rwiz, "드디어 봉인이 풀렸다!\n이제 넌 필요없으니 꺼져버려", 150);
        }
        else
            UniChatMessage(self, "포션이 없나보군...", 150);
    }
}

void SnowMountainInit()
{
    int unit = CreateObject("WoundedApprentice", 74);

    Frozen(unit, 1);
    StoryPic(unit, "WoundedConjurerPic");
    SetDialog(unit, "YESNO", SnowFakerDescription, SnowFakerAnswer);
    ObjectOff(self);
}

int ForestUrchin(int pUnit)
{
    int unit = CreateObjectAt("Urchin", GetObjectX(pUnit), GetObjectY(pUnit));

    UnitLinkBinScript(unit, UrchinBinTable());
    UnitZeroFleeRange(unit);
    ResumeLevel(unit, 1.0);
    SetUnitMaxHealth(unit, 125);
    return unit;
}

int ForestWolf(int pUnit)
{
    int unit = CreateObjectAt("WhiteWolf", GetObjectX(pUnit), GetObjectY(pUnit));

    SetUnitMaxHealth(unit, 180);
    return unit;
}

int ForestGoon(int pUnit)
{
    int unit = CreateObjectAt("Goon", GetObjectX(pUnit), GetObjectY(pUnit));

    UnitLinkBinScript(unit, GoonBinTable());
    SetUnitMaxHealth(unit, 180);
    SetUnitSpeed(unit, 2.2);
    PoisonImmuneUnit(unit);
    return unit;
}

int ForestBat(int pUnit)
{
    int unit = CreateObjectAt("Bat", GetObjectX(pUnit), GetObjectY(pUnit));

    SetUnitMaxHealth(unit, 125);
    PoisonImmuneUnit(unit);
    return unit;
}

int ForestMobFunc()
{
    StopScript(ForestUrchin);
}

void GeneralForUnitDead()
{
    int count, ptr = GForestPtr;

    FieldMonsterOnDeath();
    count ++;
    if (count >= ToInt(GetObjectZ(ptr)))
    {
        WallGroupOpen(8);
        UniPrintToAll("다음 구간으로 향하는 벽이 개방되었습니다");
    }
}

void GeneralForestSpawn(int ptr)
{
    int count = GetDirection(ptr), unit;

    if (IsObjectOn(ptr))
    {
        if (count)
        {
            unit = CallFunctionWithArgInt(ForestMobFunc() + Random(0, 3), ptr);
            SetCallback(unit, 5, GeneralForUnitDead);
            RetreatLevel(unit, 0.0);
            LookWithAngle(ptr, count - 1);
            FrameTimerWithArg(1, ptr, GeneralForestSpawn);
        }
    }
}

void GeneralForestInit()
{
    int unit = CreateObject("InvisibleLightBlueLow", 75);

    LookWithAngle(unit, 30);
    Raise(unit, GetDirection(unit));
    FrameTimerWithArg(1, unit, GeneralForestSpawn);
    GForestPtr = unit;
    ObjectOff(self);

    WallGroupOpen(7);
}

int MovingPlant(int pos)
{
    int mob = CreateObjectAt("CarnivorousPlant", GetObjectX(pos), GetObjectY(pos));

    UnitZeroFleeRange(mob);
    SetUnitSpeed(mob, 2.5);
    SetUnitMaxHealth(mob, 325);
    AggressionLevel(mob, 1.0);
    RetreatLevel(mob, 0.0);
    ResumeLevel(mob, 1.0);
    return mob;
}

void PlantGoCenter(int tempUnit)
{
    int mobUnit = GetOwner(tempUnit);
    int destLocation = GetDirection(tempUnit);

    if (CurrentHealth(mobUnit))
    {
        //Move(mobUnit, destLocation);
        Walk(mobUnit, GetWaypointX(destLocation), GetWaypointY(destLocation));
        AggressionLevel(mobUnit, 1.0);
    }
    Delete(tempUnit);
}

void OgreSummonPlants(int ptr)
{
    int count = GetDirection(ptr), mob;
    int tempUnit;

    if (IsObjectOn(ptr))
    {
        if (count)
        {
            mob = MovingPlant(ptr);
            SetCallback(mob, 5, FieldMonsterOnDeath);
            LookWithAngle(ptr, count - 1);
            tempUnit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(mob), GetObjectY(mob));
            SetOwner(mob, tempUnit);
            LookWithAngle(tempUnit, 80);
            FrameTimerWithArg(1, tempUnit, PlantGoCenter);
            FrameTimerWithArg(1, ptr, OgreSummonPlants);
        }
        else
            Delete(ptr);
    }
}

void OgreGateInterlock()
{
    int i;

    for (i = 0 ; i < 8 ; i ++)
        UnlockDoor(Object("OgreLockGate" + IntToString(i + 1)));
}

void RemoveOgreWallLast()
{
    WallGroupOpen(10);
}

void RemoveOgreWalls()
{
    int count, mgen;

    count ++;
    if (count ^ 4) return;
    CancelTimer(FrameTimerWithArg(10, RemoveOgreWallLast, RemoveOgreWallLast));
    mgen = PlacingGenerator("OgreWarlord", 325, CreateObject("InvisibleLightBlueLow", 89), GetMemory(GetMemory(0x83395c) + 8));
    Enchant(mgen, "ENCHANT_FREEZE", 0.0);
    SetUnitMaxHealth(mgen, 900);
    WallGroupOpen(9);
    UniPrintToAll("벽이 열렸습니다");
}

void NothingOfProcess()
{
    return;
}

void TouchOgreSkull()
{
    if (MaxHealth(self))
    {
        Effect("YELLOW_SPARKS", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
        UniChatMessage(self, "뿅!!", 150);
        RemoveOgreWalls();
        Delete(self);
        Delete(GetTrigger() + 1);
    }
}

void OgrePartMakeSkull2(int wp)
{
    int skll = CreateObject("Maiden", wp);

    Frozen(CreateObject("SpinningSkull", wp), 1);
    Frozen(skll, 1);
    SetDialog(skll, "AA", TouchOgreSkull, NothingOfProcess);
}

void MakeOgrePartNext()
{
    int mobMake;

    OgrePartMakeSkull2(85);
    OgrePartMakeSkull2(86);
    OgrePartMakeSkull2(87);
    OgrePartMakeSkull2(88);
    mobMake = CreateObject("RedPotion", 199) + 1;
    FrameTimerWithArg(1, CreateObject("InvisibleLightBlueLow", 81), OgreSummonPlants);
    FrameTimerWithArg(2, CreateObject("InvisibleLightBlueLow", 82), OgreSummonPlants);
    FrameTimerWithArg(3, CreateObject("InvisibleLightBlueLow", 83), OgreSummonPlants);
    FrameTimerWithArg(4, CreateObject("InvisibleLightBlueLow", 84), OgreSummonPlants);
    LookWithAngle(mobMake, 4);
    LookWithAngle(mobMake + 1, 4);
    LookWithAngle(mobMake + 2, 4);
    LookWithAngle(mobMake + 3, 4);
}

void MakeOgrelords()
{
    if (MaxHealth(self))
    {
        FrameTimer(1, MakeOgrePartNext);
        FrameTimer(3, OgreGateInterlock);
        GreenSparkFx(GetObjectX(self), GetObjectY(self));
        Delete(self);
        Delete(GetTrigger() + 1);
    }
}

void OgrePartMakeSkull()
{
    int skll = CreateObject("Maiden", 80);

    Frozen(CreateObject("SpinningSkull", 80), 1);
    Frozen(skll, 1);
    SetDialog(skll, "AA", MakeOgrelords, MakeOgrelords);
    AudioEvent("FumbleEffect", 1);
    UniChatMessage(skll, "겁내지 말고 나에게 다가와 나비야!", 150);
}

void OgrePartGenDestroy()
{
    int count;

    count ++;
    if (count ^ 4) return;
    OgrePartMakeSkull();
}

void OgrePartPlaceGens(int posUnit)
{
    int dFunc;

    CancelTimer(FrameTimerWithArg(10, OgrePartGenDestroy, OgrePartGenDestroy));
    dFunc = GetMemory(GetMemory(0x83395c) + 8);

    PlacingGenerator("GruntAxe", 260, posUnit, dFunc);
    PlacingGenerator("GruntAxe", 260, posUnit + 1, dFunc);
    PlacingGenerator("OgreBrute", 306, posUnit + 2, dFunc);
    PlacingGenerator("OgreBrute", 306, posUnit + 3, dFunc);
}

void OgrePartInit()
{
    int unit;

    ObjectOff(self);
    unit = CreateObject("InvisibleLightBlueLow", 76);
    FrameTimerWithArg(1, CreateObject("InvisibleLightBlueLow", 77) - 1, OgrePartPlaceGens);
    CreateObject("InvisibleLightBlueLow", 78);
    CreateObject("InvisibleLightBlueLow", 79);
}

void LavaExitKeyPick()
{
    int count;

    count ++;
    Effect("BLUE_SPARKS", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    Delete(self);
    if (count ^ LavaRoomKeyAmount) return;
    WallGroupOpen(11);
    UniPrintToAll("이 방의 출입구가 열렸습니다");
}

void SpawnLavaExitKey(int posUnit)
{
    int count = GetDirection(posUnit), key;

    if (IsObjectOn(posUnit))
    {
        if (count)
        {
            key = CreateObjectAt("RedOrb", GetObjectX(posUnit), GetObjectY(posUnit));
            CancelTimer(FrameTimerWithArg(10, LavaExitKeyPick, LavaExitKeyPick));
            UnitPickupEvent(key, GetMemory(GetMemory(0x83395c) + 8));
            LookWithAngle(posUnit, count - 1);
            FrameTimerWithArg(1, posUnit, SpawnLavaExitKey);
        }
        else
            Delete(posUnit);
    }
}

void LavaPlaceGens()
{
    PlacingGenerator("MeleeDemon", 160, CreateObject("InvisibleLightBlueLow", 90), 0);
    PlacingGenerator("MeleeDemon", 160, CreateObject("InvisibleLightBlueLow", 91), 0);
    PlacingGenerator("EmberDemon", 135, CreateObject("InvisibleLightBlueLow", 94), 0);
    PlacingGenerator("MeleeDemon", 160, CreateObject("InvisibleLightBlueLow", 95), 0);
    PlacingGenerator("EmberDemon", 135, CreateObject("InvisibleLightBlueLow", 96), 0);
    SummonFireSprite(92);
    SummonFireSprite(92);
    SummonFireSprite(92);
    SummonFireSprite(92);
    SummonFireSprite(93);
    SummonFireSprite(93);
    SummonFireSprite(93);
    SummonFireSprite(93);
}

void LavaRoomInit()
{
    int posUnit;

    ObjectOff(self);
    posUnit = CreateObject("RewardMarker", 90);
    LookWithAngle(posUnit, LavaRoomKeyAmount);
    FrameTimerWithArg(1, posUnit, SpawnLavaExitKey);
    FrameTimer(1, LavaPlaceGens);
    UniPrintToAll("용암 바닥에 떨어진 모든 붉은색 오브를 주우세요!");
}

void WizRunAway()
{
	if (HasEnchant(self, "ENCHANT_ANTI_MAGIC"))
	{
		EnchantOff(self, "ENCHANT_ANTI_MAGIC");
	}
}

void MagicRoomOnDeath()
{
    int mPtr = GetOwner(GetTrigger() + 1);

    FieldMonsterOnDeath();
    Delete(GetTrigger() + 1);
    LookWithAngle(mPtr, GetDirection(mPtr) + 1);
    if (!(GetDirection(mPtr) % 5))
    {
        Raise(mPtr, ToInt(GetObjectZ(mPtr)) + 1);
        FrameTimerWithArg(3, mPtr, SummonMagicRoom);
    }
}

int MagicRoomLowMob1(int posUnit)
{
    int unit = CreateObjectAt("BlackBear", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(unit, 306);
    return unit;
}

int MagicRoomLowMob2(int posUnit)
{
    int unit = CreateObjectAt("Bear", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(unit, 425);
    return unit;
}

int MagicRoomLowMob3(int posUnit)
{
    int unit = CreateObjectAt("Scorpion", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(unit, 260);
    return unit;
}

int MagicRoomMedMob1(int posUnit)
{
    int unit = CreateObjectAt("Horrendous", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitSpeed(unit, 1.3);
    SetUnitMaxHealth(unit, 275);
    return unit;
}

int MagicRoomMedMob2(int parent)
{
    int unit = ColorMaidenAt(0, 64, 225, GetObjectX(parent), GetObjectY(parent));

    SetUnitSpeed(unit, 2.8);
    SetUnitMaxHealth(unit, 306);

    return unit;
}

int MagicRoomMedMob3(int parent)
{
    int unit = CreateObjectAt("Bear2", GetObjectX(parent), GetObjectY(parent));
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 1378);
    SetUnitSpeed(unit, 3.3);
    SetUnitMaxHealth(unit, 325);
    SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x10000);
    UnitLinkBinScript(unit, ShopkeeperBinTable());
    SetUnitVoice(unit, 34);

    return unit;
}

int MagicRoomHighMob1(int parent)
{
    int unit = CreateObjectAt("Wizard", GetObjectX(parent), GetObjectY(parent));

    SetUnitMaxHealth(unit, 260);
    Enchant(unit, "ENCHANT_ANCHORED", 0.0);
    return unit;
}

int MagicRoomHighMob2(int parent)
{
    int unit = CreateObjectAt("Beholder", GetObjectX(parent), GetObjectY(parent));

    SetUnitMaxHealth(unit, 260);
    Enchant(unit, "ENCHANT_ANCHORED", 0.0);
    return unit;
}

int MagicRoomHighMob3(int parent)
{
    int unit = CreateObjectAt("StrongWizardWhite", GetObjectX(parent), GetObjectY(parent));

    UnitLinkBinScript(unit, StrongWizardWhiteBinTable());
    SetUnitMaxHealth(unit, 275);
    return unit;
}

int MagicRoomFinMob1(int parent)
{
    int unit = CreateObjectAt("BlackWidow", GetObjectX(parent), GetObjectY(parent));

    UnitLinkBinScript(unit, BlackWidowBinTable());
    SetUnitMaxHealth(unit, 325);
    SetUnitVoice(unit, 33);
    return unit;
}

int MagicRoomFinMob2(int parent)
{
    int unit = CreateObjectAt("Demon", GetObjectX(parent), GetObjectY(parent));

    SetUnitMaxHealth(unit, 400);
    SetCallback(unit, 8, WizRunAway);
    return unit;
}

int MagicRoomFinMob3(int parent)
{
    int unit = CreateObjectAt("Necromancer", GetObjectX(parent), GetObjectY(parent));
    int uec = GetMemory(GetMemory(0x750710) + 0x2ec);

    SetUnitMaxHealth(unit, 325);
    SetCallback(unit, 8, WizRunAway);
    if (uec)
    {
        SetMemory(uec + 0x528, ToInt(1.0));
        SetMemory(uec + 0x520, ToInt(400.0));
        uec += 0x5d0;
        SetMemory(uec + GetSpellNumber("SPELL_LIGHTNING"), 0x40000000);
		SetMemory(uec + GetSpellNumber("SPELL_SHIELD"), 0x10000000);
        SetMemory(uec + GetSpellNumber("SPELL_SLOW"), 0x20000000);
		SetMemory(uec + GetSpellNumber("SPELL_INVISIBILITY"), 0x10000000);
		SetMemory(uec + GetSpellNumber("SPELL_FIREBALL"), 0x40000000);
        SetMemory(uec + GetSpellNumber("SPELL_INVERSION"), 0x8000000);
        SetMemory(uec + GetSpellNumber("SPELL_COUNTERSPELL"), 0x8000000);
    }
    return unit;
}

void SumMagicRoomReal(int cur)
{
    int func;
    int mob, mPtr = GetOwner(cur), lv;

    if (IsObjectOn(cur))
    {
        lv = ToInt(GetObjectZ(mPtr));
        if (!func)
        {
            CancelTimer(FrameTimerWithArg(10, MagicRoomLowMob1, MagicRoomLowMob1));
            func = GetMemory(GetMemory(0x83395c) + 8);
        }
        mob = CallFunctionWithArgInt(func + (lv * 3) + Random(0, 2), cur);
        SetOwner(mPtr, CreateObjectAt("InvisibleLightBlueLow", GetObjectX(mob), GetObjectY(mob)));
        RetreatLevel(mob, 0.0);
        SetCallback(mob, 5, MagicRoomOnDeath);
        FrameTimerWithArg(1, cur + 1, SumMagicRoomReal);
        Effect("TELEPORT", GetObjectX(mob), GetObjectY(mob), 0.0, 0.0);
    }
}

void RemainBurnnig(int mark)
{
    int mob;

    if (IsObjectOn(mark))
    {
        MoveWaypoint(1, GetObjectX(mark), GetObjectY(mark));
        mob = SummonFireSprite(1);
        SetUnitMaxHealth(mob, 135);
        SetUnitVoice(mob, 54);
        AudioEvent("BurnCast", 1);
        DeleteObjectTimer(CreateObjectAt("Flame", GetObjectX(mark), GetObjectY(mark)), 900);
        Effect("SPARK_EXPLOSION", GetObjectX(mark), GetObjectY(mark), 0.0, 0.0);
        FrameTimerWithArg(1, mark + 1, RemainBurnnig);
    }
}

void RemoveMagicRoomWalls(int posUnit)
{
    Delete(posUnit);
    WallGroupOpen(13);
    FrameTimerWithArg(3, posUnit + 1, RemainBurnnig);
    UniPrintToAll("다음 방으로 통하는 출구가 열렸습니다");
}

void SummonMagicRoom(int posUnit)
{
    int lv = ToInt(GetObjectZ(posUnit));

    if (IsObjectOn(posUnit))
    {
        if (lv < 4)
            SumMagicRoomReal(posUnit + 1);
        else
            FrameTimerWithArg(3, posUnit, RemoveMagicRoomWalls);
    }
}

void RemoveFrontMagicRoomWalls()
{
    WallGroupOpen(12);
}

void MagicRoom2Init()
{
    int posUnit = CreateObject("InvisibleLightBlueLow", 97);

    ObjectOff(self);
    FrameTimer(30, RemoveFrontMagicRoomWalls);
    FrameTimerWithArg(1, posUnit, SummonMagicRoom);
    Enchant(CreateObject("RewardMarkerPlus", 97), "ENCHANT_FREEZE", 0.0);
    Enchant(CreateObject("RewardMarkerPlus", 98), "ENCHANT_FREEZE", 0.0);
    Enchant(CreateObject("RewardMarkerPlus", 99), "ENCHANT_FREEZE", 0.0);
    Enchant(CreateObject("RewardMarkerPlus", 100), "ENCHANT_FREEZE", 0.0);
    Enchant(CreateObject("RewardMarkerPlus", 101), "ENCHANT_FREEZE", 0.0);
    Delete(CreateObject("RewardMarkerPlus", 97));
    SetOwner(posUnit, posUnit + 1);
    SetOwner(posUnit, posUnit + 2);
    SetOwner(posUnit, posUnit + 3);
    SetOwner(posUnit, posUnit + 4);
    SetOwner(posUnit, posUnit + 5);
    WallGroupClose(13);
}

int SummonNPCMonster(float xProfile, float yProfile)
{
    int mob = CreateObjectAt("NPC", xProfile, yProfile);
    int red = Random(0, 255), grn = Random(0, 255), blue = Random(0, 255);
    int ptr = GetMemory(0x750710), k;

    for (k = 0 ; k < 32 ; k ++)
        SetMemory(ptr + 0x230 + (k * 4), 0x400);
    SetMemory(GetMemory(ptr + 0x2ec) + 0x178, 0x40);
    SetMemory(GetMemory(ptr + 0x2ec) + 0x81c, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr + 0x2ec) + 0x81c + 4, grn | (blue << 8) | (red << 16) | (grn << 24));
    SetMemory(GetMemory(ptr + 0x2ec) + 0x81c + 8, blue | (red << 8) | (grn << 16) | (blue << 24));
    SetMemory(GetMemory(ptr + 0x2ec) + 0x81c + 12, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr + 0x2ec) + 0x81c + 16, grn | (blue << 8));
    SetMemory(GetMemory(ptr + 0x2ec) + 0x52c, 0xff); //Strength
    SetUnitSpeed(mob, 3.5);

    return mob;
}

void OpenPartyRoomEntrance1()
{
    int count;

    ObjectOff(self);
    count ++;
    if (count ^ 3) return;
    WallOpen(Wall(177, 105));
    WallOpen(Wall(178, 106));
}

void OpenPartyRoomEntrance2()
{
    int count;

    ObjectOff(self);
    count ++;
    if (count ^ 4) return;
    WallOpen(Wall(186, 96));
    WallOpen(Wall(187, 97));
}

void BarUnitDropKey()
{
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    CreateObject("BlueOrbKeyOfTheLich", 1);
    DeleteObjectTimer(CreateObject("ManaBombCharge", 1), 24);
    AudioEvent("AmuletDrop", 1);
}

void SpawnLotsNpc(int posUnit)
{
    int count = GetDirection(posUnit), npcUnit;
    int top = GetOwner(posUnit);

    if (IsObjectOn(posUnit))
    {
        if (count)
        {
            npcUnit = SummonNPCMonster(GetObjectX(posUnit), GetObjectY(posUnit));
            RetreatLevel(npcUnit, 0.0);
            SetUnitMaxHealth(npcUnit, 275);
            if (GetDirection(top) ^ count)
                SetCallback(npcUnit, 5, FieldMonsterOnDeath);
            else if (ToInt(GetObjectZ(posUnit)))
                SetCallback(npcUnit, 5, BarUnitDropKey);
            LookWithAngle(posUnit, count - 1);
            FrameTimerWithArg(1, posUnit, SpawnLotsNpc);
        }
        else
            Delete(posUnit);
    }
}

void SpawnLotsGirl(int posUnit)
{
    int count = GetDirection(posUnit), npcUnit;
    int top = GetOwner(posUnit);

    if (IsObjectOn(posUnit))
    {
        if (count)
        {
            npcUnit = ColorMaidenAt(255, 0, 0, GetObjectX(posUnit), GetObjectY(posUnit));
            SetUnitMaxHealth(npcUnit, 325);
            if (GetDirection(top) ^ count)
                SetCallback(npcUnit, 5, FieldMonsterOnDeath);
            else if (ToInt(GetObjectZ(posUnit)))
                SetCallback(npcUnit, 5, BarUnitDropKey);
            LookWithAngle(posUnit, count - 1);
            FrameTimerWithArg(1, posUnit, SpawnLotsGirl);
        }
        else
            Delete(posUnit);
    }
}

int CheckHasBlueLichKey(int unit)
{
    int cur = GetLastItem(unit);

    while (cur)
    {
        if (GetUnitThingID(cur) == 2180)
            return cur;
        cur = GetPreviousItem(cur);
    }
    return 0;
}

int CheckHasRedLichKey(int unit)
{
    int cur = GetLastItem(unit);

    while (cur)
    {
        if (GetUnitThingID(cur) == 2182)
            return cur;
        cur = GetPreviousItem(cur);
    }
    return 0;
}

void BarrigatePlace()
{
    int i;

    for (i = 0 ; i < 4 ; i ++)
        SetUnitMaxHealth(CreateObject("LargeBarrel2", i + 113), 500);
}

void OpenPartyRoomExit()
{
    int key = CheckHasBlueLichKey(other);
    if (key)
    {
        ObjectOff(self);
        Delete(key);
        WallGroupOpen(14);
        PlacingGenerator("EmberDemon", 160, 111, 0);
        PlacingGenerator("EmberDemon", 160, 112, 0);
        FrameTimer(1, BarrigatePlace);
        UniPrintToAll("맞은편 벽이 열렸습니다");
    }
    else
        UniPrintToAll("출입구를 열기 위해서는 푸른열쇠가 필요하지만, 당신에게서 푸른열쇠를 찾지 못했습니다");
}

void GateRoomMobs(int posUnit)
{
    int count = GetDirection(posUnit);

    if (IsObjectOn(posUnit))
    {
        if (count)
        {
            SetCallback(MagicRoomHighMob3(posUnit), 5, FieldMonsterOnDeath);
            LookWithAngle(posUnit, count - 1);
            FrameTimerWithArg(1, posUnit, GateRoomMobs);
        }
        else
            Delete(posUnit);
    }
}

void TurnOnBarSwitch()
{
    int count, mark = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(other), GetObjectY(other));
    int mgen = PlacingGenerator("EmberDemon", 225, mark, 0);
    int posUnit = CreateObject("InvisibleLightBlueLow", 117);

    LookWithAngle(posUnit, 2);
    FrameTimerWithArg(1, posUnit, GateRoomMobs);
    SetUnitMass(mgen, 4.0);
    Raise(mgen, 250.0);
    Delete(mark);
    ObjectOff(self);
    count ++;
    if (count ^ 12) return;
    UnlockDoor(Object("BarLockGate1"));
    UnlockDoor(Object("BarLockGate2"));
    UniPrintToAll("아래쪽 도어의 잠금이 해제되었습니다");
}

void OpenBarExitReal()
{
    ObjectOff(self);
    WallGroupOpen(15);
    UniPrintToAll("다음 구간으로 향하는 출입구가 열렸습니다");
}

void PartyRoomInit()
{
    int spawnMark, amount = 20;

    ObjectOff(self);

    PlacingGenerator("Archer", 96, 102, 0);
    PlacingGenerator("Swordsman", 325, 107, 0);
    PlacingGenerator("Archer", 96, 108, 0);
    PlacingGenerator("SkeletonLord", 306, 103, 0);
    PlacingGenerator("Ghost", 64, 104, 0);
    PlacingGenerator("Ghost", 64, 105, 0);
    PlacingGenerator("SkeletonLord", 306, 106, 0);
    spawnMark = CreateObject("InvisibleLightBlueLow", 109);
    LookWithAngle(CreateObject("InvisibleLightBlueLow", 109), amount);
    LookWithAngle(CreateObject("InvisibleLightBlueLow", 110), amount);
    Raise(spawnMark + Random(1, 2), 1);
    LookWithAngle(spawnMark, Random(1, amount));
    SetOwner(spawnMark, spawnMark + 1);
    SetOwner(spawnMark, spawnMark + 2);
    CreateObject("BlackPowderBarrel", 118);
    CreateObject("BlackPowderBarrel2", 119);
    CreateObject("BlackPowderBarrel", 120);
    CreateObject("BlackPowderBarrel2", 121);
    PlacingGenerator("Shade", 160, 122, 0);
    FrameTimerWithArg(1, spawnMark + 1, SpawnLotsNpc);
    FrameTimerWithArg(2, spawnMark + 2, SpawnLotsGirl);
}

void CheckMobMuseumExit()
{
    int count;

    count ++;
    if (count ^ MobMuseumCount) return;
    WallOpen(Wall(97, 219));
    UniPrintToAll("이 방의 출구가 열렸습니다");
}

void MobNothingCollide()
{
    return;
}

void MobWakeOnCollide()
{
    if (CurrentHealth(self) && CurrentHealth(other))
    {
        if (!IsObjectOn(self) && HasClass(other, "PLAYER"))
        {
            Frozen(self, 0);
            ObjectOn(self);
            AggressionLevel(self, 1.0);
            RetreatLevel(self, 0.0);
            SetCallback(self, 5, FieldMonsterOnDeath);
            SetCallback(self, 9, MobNothingCollide);
            CheckMobMuseumExit();
        }
    }
}

void MuseumMobCommon(int mob, int posUnit)
{
    LookAtObject(mob, GetOwner(posUnit));
    SetCallback(mob, 9, MobWakeOnCollide);
    ObjectOff(mob);
    Frozen(mob, 1);
}

int MuseumMobFireSprite(int posUnit)
{
    int mob;

    MoveWaypoint(1, GetObjectX(posUnit), GetObjectY(posUnit));
    mob = SummonFireSprite(1);
    return mob;
}

int MuseumMobHorrendous(int posUnit)
{
    int mob = CreateObjectAt("Horrendous", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 325);
    SetUnitSpeed(mob, 1.5);
    return mob;
}

int MuseumMobSkeletonLord(int posUnit)
{
    int mob = CreateObjectAt("SkeletonLord", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 306);
    return mob;
}

int MuseumMobDemon(int posUnit)
{
    int mob = CreateObjectAt("Demon", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 400);
    return mob;
}

int MuseumMobMystic(int posUnit)
{
    int mob = CreateObjectAt("Wizard", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 275);
    Enchant(mob, "ENCHANT_ANCHORED", 0.0);
    return mob;
}

int MuseumMobDryad(int posUnit)
{
    int mob = CreateObjectAt("WizardGreen", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 260);
    Enchant(mob, "ENCHANT_ANCHORED", 0.0);
    return mob;
}

int MuseumMobNecromancer(int posUnit)
{
    int mob = MagicRoomFinMob3(posUnit);

    return mob;
}

int MuseumMobStoneGolem(int posUnit)
{
    int mob = CreateObjectAt("StoneGolem", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 600);
    return mob;
}

int MuseumMobLich(int posUnit)
{
    int mob = SummonDarkLich(posUnit);

    return mob;
}

int MuseumMobSpider(int posUnit)
{
    int mob = MagicRoomFinMob1(posUnit);

    return mob;
}

int MuseumMobBomber(int posUnit)
{
    int mob = SummonBomber(posUnit);

    SetUnitMaxHealth(mob, 260);
    return mob;
}

int MuseumMobMecaGolem(int posUnit)
{
    int mob = CreateObjectAt("MechanicalGolem", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 700);
    return mob;
}

int MuseumMobOrbHecubah(int posUnit)
{
    return SummonOrbHecubah(posUnit);
}

int MuseumMobMimic(int posUnit)
{
    int mob = CreateObjectAt("Mimic", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 500);
    return mob;
}

int MuseumMobOgrelord(int posUnit)
{
    int mob = CreateObjectAt("OgreWarlord", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 325);
    return mob;
}

int MuseumMobBeholder(int posUnit)
{
    int mob = CreateObjectAt("Beholder", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 325);
    Enchant(mob, "ENCHANT_ANCHORED", 0.0);
    return mob;
}

int MuseumMobWhiteWiz(int posUnit)
{
    int mob = CreateObjectAt("WizardWhite", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 325);
    Enchant(mob, "ENCHANT_ANCHORED", 0.0);
    return mob;
}

int MuseumMobJandor(int posUnit)
{
    return SummonJandor(posUnit);
}

int MuseumMobPurpleGirl(int posUnit)
{
    int mob = ColorMaidenAt(163, 74, 164, GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 306);
    SetUnitSpeed(mob, 2.8);
    return mob;
}

int MuseumMobZombie(int posUnit)
{
    int mob = CreateObjectAt("Zombie", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 260);
    //SetUnitSpeed(mob, 3.5);
    Enchant(mob, "ENCHANT_ETHEREAL", 0.0);
    SetCallback(mob, 5, ZombieWhenDead);
    return mob;
}

int MuseumMobSkeleton(int posUnit)
{
    int mob = CreateObjectAt("Skeleton", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 260);
    return mob;
}

int MuseumMobGargoyle(int posUnit)
{
    int mob = CreateObjectAt("EvilCherub", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 98);
    return mob;
}

int MuseumMobOgreAxe(int posUnit)
{
    int mob = CreateObjectAt("GruntAxe", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 225);
    return mob;
}

int MuseumMobOgre(int posUnit)
{
    int mob = CreateObjectAt("OgreBrute", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 306);
    return mob;
}

int MuseumMobArcher(int posUnit)
{
    int mob = CreateObjectAt("Archer", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 98);
    return mob;
}

int MuseumMobSwordsman(int posUnit)
{
    int mob = CreateObjectAt("Swordsman", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 325);
    return mob;
}

int MuseumMobFlying(int posUnit)
{
    int mob = CreateObjectAt("FlyingGolem", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 64);
    return mob;
}

int MuseumMobSpittingSpider(int posUnit)
{
    int mob = CreateObjectAt("SpittingSpider", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 180);
    return mob;
}

int MuseumMobAlbinoSpider(int posUnit)
{
    int mob = CreateObjectAt("AlbinoSpider", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 160);
    return mob;
}

int MuseumMobBlackSpider(int posUnit)
{
    int mob = CreateObjectAt("Spider", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 180);
    return mob;
}

int MuseumMobWhiteWolf(int posUnit)
{
    int mob = CreateObjectAt("WhiteWolf", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 225);
    return mob;
}

int MuseumMobBlackWolf(int posUnit)
{
    int mob = CreateObjectAt("BlackWolf", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 260);
    return mob;
}

int MuseumMobBear(int posUnit)
{
    int mob = CreateObjectAt("Bear", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 360);
    return mob;
}

int MuseumMobBlackBear(int posUnit)
{
    int mob = CreateObjectAt("BlackBear", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 306);
    return mob;
}

int MuseumMobScorpion(int posUnit)
{
    int mob = CreateObjectAt("Scorpion", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 295);
    return mob;
}

int MuseumMobShade(int posUnit)
{
    int mob = CreateObjectAt("Shade", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 225);
    return mob;
}

int MuseumMobGoon(int posUnit)
{
    int mob = ForestGoon(posUnit);

    SetUnitMaxHealth(mob, 240);
    SetUnitVoice(mob, 63);
    return mob;
}

int MuseumMobEmberDemon(int posUnit)
{
    string mobName = {"EmberDemon", "MeleeDemon", "MeleeDemon"};
    int mob = CreateObjectAt(ToStr(SToInt(mobName) + Random(0, 2)), GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 225);
    return mob;
}

int MuseumMobUrchin(int posUnit)
{
    int mob = CreateObjectAt("Urchin", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 98);
    return mob;
}

int MuseumMobShaman(int posUnit)
{
    int mob = CreateObjectAt("UrchinShaman", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 135);
    return mob;
}

int MuseumMobShopkeeper(int posUnit)
{
    int mob = CreateObjectAt("Bear2", GetObjectX(posUnit), GetObjectY(posUnit));
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, Random(1374, 1381));
    SetUnitStatus(mob, GetUnitStatus(mob) ^ 0x10000);
    SetUnitMaxHealth(mob, 275);
    UnitLinkBinScript(mob, Shopkeeper2BinTable());
    return mob;
}

int MuseumMobWasp(int posUnit)
{
    int mob = CreateObjectAt("Wasp", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 64);
    return mob;
}

int MuseumMobWisp(int posUnit)
{
    int mob = CreateObjectAt("WillOWisp", GetObjectX(posUnit), GetObjectY(posUnit));

    UnitZeroFleeRange(mob);
    SetUnitStatus(mob, GetUnitStatus(mob) ^ 0x20);
    UnitLinkBinScript(mob, WispBinTable());
    SetUnitMaxHealth(mob, 275);
    return mob;
}

int MuseumMobLeech(int posUnit)
{
    int mob = CreateObjectAt("GiantLeech", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 135);
    return mob;
}

int MuseumMobBat(int posUnit)
{
    int mob = CreateObjectAt("Bat", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 98);
    return mob;
}

int MuseumMobSmallSpider(int posUnit)
{
    int mob = CreateObjectAt("SmallSpider", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 75);
    SetUnitSpeed(mob, 0.9);
    return mob;
}

int MuseumMobSmallAlbinoSpider(int posUnit)
{
    int mob = CreateObjectAt("SmallAlbinoSpider", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 84);
    SetUnitSpeed(mob, 1.1);
    return mob;
}

int MuseumMobStrongWizard(int posUnit)
{
    int mob = MagicRoomHighMob3(posUnit);

    return mob;
}

int MuseumMobWolf(int posUnit)
{
    int mob = CreateObjectAt("Wolf", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 160);
    return mob;
}

int MuseumMobNpc(int posUnit)
{
    int mob = SummonNPCMonster(GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 275);
    return mob;
}

int MuseumMobTroll(int posUnit)
{
    int mob = CreateObjectAt("Troll", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 325);
    return mob;
}

int MuseumMobPlant(int posUnit)
{
    int mob = CreateObjectAt("CarnivorousPlant", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 400);
    AggressionLevel(mob, 1.0);
    SetUnitSpeed(mob, 2.5);
    return mob;
}

int MuseumMobImp(int posUnit)
{
    int mob = CreateObjectAt("Imp", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 64);
    return mob;
}

int MuseumMobVileZombie(int posUnit)
{
    int mob = CreateObjectAt("VileZombie", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 325);
    SetUnitSpeed(mob, 3.5);
    Enchant(mob, "ENCHANT_ETHEREAL", 0.0);
    SetCallback(mob, 5, ZombieWhenDead);
    return mob;
}

int MuseumMobTalkingSkull(int posUnit)
{
    int mob = SpawnTalkSkull(posUnit);

    Enchant(mob, "ENCHANT_VAMPIRISM", 0.0);
    return mob;
}

int MuseumMobWeirdling(int posUnit)
{
    int mob = SummonBeast(posUnit);

    return mob;
}

int MuseumMobLichLord(int posUnit)
{
    int mob = CreateObjectAt("LichLord", GetObjectX(posUnit), GetObjectY(posUnit));

    //InfiniteLifePixie(mob);
    SetUnitMaxHealth(mob, 295);
    SetUnitStatus(mob, GetUnitStatus(mob) ^ 0x20);
    UnitZeroFleeRange(mob);
    UnitLinkBinScript(mob, LichLord2BinTable());
    //SetCallback(mob, 5, LichLordDie);
    //Enchant(mob, "ENCHANT_ETHEREAL", 0.0);

    return mob;
}

int MuseumMobMeleeHecubah(int posUnit)
{
    int mob = SpawnHecubah(posUnit);

    return mob;
}

int MuseumMobNecromancerWar(int posUnit)
{
    int mob = CreateObjectAt("Necromancer", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 325);
    SetUnitStatus(mob, GetUnitStatus(mob) ^ 0x20);
    UnitZeroFleeRange(mob);
    UnitLinkBinScript(mob, NecromancerBinTable());
    Enchant(mob, "ENCHANT_RUN", 0.0);
    return mob;
}

int MuseumMobGreenFrog(int posUnit)
{
    int mob = CreateObjectAt("GreenFrog", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 160);
    UnitZeroFleeRange(mob);
    UnitLinkBinScript(mob, GreenFrogBinTable());
    return mob;
}

int MuseumMobRat(int posUnit)
{
    int mob = CreateObjectAt("Rat", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 135);
    UnitZeroFleeRange(mob);
    UnitLinkBinScript(mob, RatBinTable());
    return mob;
}

int MuseumMobBuff(int posUnit)
{
    int mob = CreateObjectAt("Bear", GetObjectX(posUnit), GetObjectY(posUnit));

    SetUnitMaxHealth(mob, 400);
    Enchant(mob, "ENCHANT_VAMPIRISM", 0.0);
    Enchant(mob, "ENCHANT_HASTED", 0.0);
    return mob;
}

void SettingMobSampleLoc(int ptr)
{
    int cur = ptr + 1, index = 0;

    while (IsObjectOn(cur))
    {
        LookWithAngle(cur, index);
        SetOwner(ptr, cur);
        index ++;
        cur ++;
    }
}

void MobModelSummons(int cur)
{
    if (IsObjectOn(cur))
    {
        CancelTimer(FrameTimerWithArg(10, MuseumMobFireSprite, MuseumMobFireSprite));
        MuseumMobCommon(CallFunctionWithArgInt(GetMemory(GetMemory(0x83395c) + 8) + GetDirection(cur), cur), cur);
        FrameTimerWithArg(1, cur + 1, MobModelSummons);
    }
}

int MarkerMonsterSpawn(int markerUnit)
{
    int virtUnit = CreateObjectAt("PlayerWaypoint", GetObjectX(markerUnit), GetObjectY(markerUnit));
    int mob;

    Delete(markerUnit);
    CancelTimer(FrameTimerWithArg(10, MuseumMobFireSprite, MuseumMobFireSprite));
    mob = CallFunctionWithArgInt(GetMemory(GetMemory(0x83395c) + 8) + Random(0, 60), virtUnit);
    if (CurrentHealth(mob))
    {
        RetreatLevel(mob, 0.0);
        if (!HasEnchant(mob, "ENCHANT_ETHEREAL"))
            SetCallback(mob, 5, FieldMonsterOnDeath);
        SetOwner(MasterMob(), mob);
        AggressionLevel(mob, 1.0);
    }
    DeleteObjectTimer(virtUnit, 30);
    return mob;
}

int DrawMagicIcon(int wp)
{
    int unit = CreateObject("AirshipBasketShadow", wp);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x04, 1416);
    return unit;
}

int DrawMagicIconAt(float x, float y)
{
    int unit = CreateObjectAt("AirshipBasketShadow", x, y);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x04, 1416);
    return unit;
}

int PlaceMobSamples()
{
    int i, ptr = CreateObject("InvisibleLightBlueLow", 143);

    for (i = 123 ; i <= 142 ; i ++)
        Enchant(CreateObject("InvisibleLightBlueLow", i), "ENCHANT_VAMPIRISM", 0.0);
    ObjectOff(DrawMagicIcon(143));
    return ptr;
}

void MobMuseumInit()
{
    int loc = PlaceMobSamples();

    ObjectOff(self);
    FrameTimerWithArg(1, loc, SettingMobSampleLoc);
    FrameTimerWithArg(2, loc + 1, MobModelSummons);
}

void KeyBarrelSet(int bar)
{
    int arr[5];
    int ptr = UnitToPtr(bar);

    if (ptr)
    {
        arr[0] = 0x4f646552; arr[1] = 0x654b6272; arr[2] = 0x54664f79; arr[3] = 0x694c6568; arr[4] = 0x6863;
        CancelTimer(FrameTimerWithArg(10, KeyBarrelSet, KeyBarrelSet));
        SetMemory(ptr + 0x2d8, GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c)) + 4);
    }
}

void PlaceLotsBarrels(int lUnit)
{
    int count = GetDirection(lUnit), bar;

    if (IsObjectOn(lUnit))
    {
        if (count)
        {
            bar = CreateObjectAt("BarrelLOTD", GetObjectX(lUnit), GetObjectY(lUnit));
            SetUnitMaxHealth(bar, 400);
            if (GetOwner(lUnit))
            {
                if (count == ToInt(GetObjectZ(lUnit)))
                    KeyBarrelSet(bar);
            }
            LookWithAngle(lUnit, count - 1);
            FrameTimerWithArg(1, lUnit, PlaceLotsBarrels);
        }
    }
}

void BarrelHouseOut()
{
    int key = CheckHasRedLichKey(other);

    if (key)
    {
        ObjectOff(self);
        WallGroupOpen(16);
        Delete(key);
        UniPrintToAll("붉은키를 사용하여 비밀벽을 열었습니다, 이 키는 더 이상 사용되지 않으므로 버립니다");
    }
    else
        UniPrintToAll("이 비밀벽을 열기 위해서는 붉은색 리치 열쇠가 필요합니다");
}

void HousePartInit()
{
    int max = 40;
    int owner = CreateObject("InvisibleLightBlueLow", 147);
    int locUnit = CreateObject("InvisibleLightBlueLow", 144);
    int pic = locUnit + Random(0, 2);

    LookWithAngle(locUnit, max);
    LookWithAngle(CreateObject("InvisibleLightBlueLow", 145), max);
    LookWithAngle(CreateObject("InvisibleLightBlueLow", 146), max);
    SetOwner(owner, pic);
    Raise(pic, Random(1, max));
    FrameTimerWithArg(1, locUnit, PlaceLotsBarrels);
    FrameTimerWithArg(1, locUnit + 1, PlaceLotsBarrels);
    FrameTimerWithArg(1, locUnit + 2, PlaceLotsBarrels);
    ObjectOff(self);
}

void SumWormWhenGolemDestroy(int posUnit)
{
    int amount = GetDirection(posUnit);

    if (IsObjectOn(posUnit))
    {
        if (amount)
        {
            SummonBeast(posUnit);
            LookWithAngle(posUnit, amount - 1);
            FrameTimerWithArg(1, posUnit, SumWormWhenGolemDestroy);
            Effect("SMOKE_BLAST", GetObjectX(posUnit), GetObjectY(posUnit), 0.0, 0.0);
            Effect("DAMAGE_POOF", GetObjectX(posUnit), GetObjectY(posUnit), 0.0, 0.0);
        }
        else
        {
            Effect("THIN_EXPLOSION", GetObjectX(posUnit), GetObjectY(posUnit), 0.0, 0.0);
            Delete(posUnit);
        }
    }
}

void PoolGolemDead()
{
    int mPtr = GetOwner(GetTrigger() + 1);
    int posUnit = CreateObjectAt("PlayerWaypoint", GetObjectX(self), GetObjectY(self));

    LookWithAngle(posUnit, 6);

    FieldMonsterOnDeath();
    Delete(GetTrigger() + 1);
    LookWithAngle(mPtr + 1, GetDirection(mPtr + 1) + 1);
    FrameTimerWithArg(1, posUnit, SumWormWhenGolemDestroy);
    if (GetDirection(mPtr + 1) ^ ToInt(GetObjectZ(mPtr))) return;
    WallGroupOpen(17);
    UniPrintToAll("다음 방으로 가는 통로가 열렸습니다");
}

int PoolGolem(int posUnit)
{
    int mob = CreateObjectAt("StoneGolem", GetObjectX(posUnit), GetObjectY(posUnit));

    SetOwner(posUnit, CreateObjectAt("InvisibleLightBlueLow", GetObjectX(mob), GetObjectY(mob)));
    SetUnitMaxHealth(mob, 600);
    SetCallback(mob, 5, PoolGolemDead);
    return mob;
}

void GolemSummonOnPool(int posUnit)
{
    int count = GetDirection(posUnit);

    if (IsObjectOn(posUnit))
    {
        if (count)
        {
            PoolGolem(posUnit);
            LookWithAngle(posUnit, count - 1);
            FrameTimerWithArg(1, posUnit, GolemSummonOnPool);
        }
    }
}

void IxPoolInit()
{
    int maxCount = 20;
    int mPtr = CreateObject("InvisibleLightBlueLow", 148);
    CreateObject("InvisibleLightBlueLow", 148);

    ObjectOff(self);
    LookWithAngle(mPtr, maxCount);
    Raise(mPtr, maxCount);
    FrameTimerWithArg(1, mPtr, GolemSummonOnPool);
}

void LightningCollide()
{
    int owner;

    if (CurrentHealth(other) && MaxHealth(self))
    {
        owner = GetOwner(GetTrigger() + 1);
        if (IsAttackedBy(other, owner))
        {
            Damage(other, 0, 250, 14);
            Enchant(other, "ENCHANT_CHARMING", 0.1);
        }
    }
}

void ThunderLightningTraps(int ptr)
{
    int max = GetDirection(ptr), unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(ptr), GetObjectY(ptr)), i;
    int owner = GetOwner(ptr), arr[20];
    float dist = DistanceUnitToUnit(ptr, ptr + 1) / IntToFloat(GetDirection(ptr));
    float vectX = UnitRatioX(ptr + 1, ptr, dist), vectY = UnitRatioY(ptr + 1, ptr, dist);

    for (i = 0 ; i < max ; i ++)
    {
        arr[i] = DummyUnitCreateAt("CarnivorousPlant", GetObjectX(unit), GetObjectY(unit));
        SetOwner(owner, CreateObjectAt("InvisibleLightBlueLow", GetObjectX(arr[i]), GetObjectY(arr[i])));
        SetCallback(arr[i], 9, LightningCollide);
        DeleteObjectTimer(arr[i], 1);
        DeleteObjectTimer(arr[i] + 1, 30);
        MoveObject(unit, GetObjectX(unit) + vectX, GetObjectY(unit) + vectY);
    }
    Delete(unit);
    Delete(ptr);
    Delete(ptr + 1);
}

void ResetIxLightningTrap(int ptr)
{
    LookWithAngle(ptr, 0);
}

void StartIxThunderTrap()
{
    int ptr = IxThunderTrap, unit;

    ObjectOff(self);
    if (!GetDirection(ptr))
    {
        unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(ptr), GetObjectY(ptr));
        LookWithAngle(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(ptr + 1), GetObjectY(ptr + 1)) - 1, 12);
        YellowLightningFx(GetObjectX(ptr), GetObjectY(ptr), GetObjectX(ptr + 1), GetObjectY(ptr + 1), 30);
        LookWithAngle(ptr, 1);
        SetOwner(other, unit);
        FrameTimerWithArg(3, unit, ThunderLightningTraps);
        FrameTimerWithArg(80, ptr, ResetIxLightningTrap);
    }
    FrameTimerWithArg(90, GetTrigger(), EnableObject);
}

void PlaceShardMazeGens()
{
    PlacingGenerator("Skeleton", 260, 151, 0);
    PlacingGenerator("EvilCherub", 98, 152, 0);
    PlacingGenerator("EvilCherub", 98, 153, 0);
    PlacingGenerator("SkeletonLord", 306, 154, 0);
    PlacingGenerator("SkeletonLord", 306, 159, 0);
    PlacingGenerator("Skeleton", 260, 160, 0);
    PlacingGenerator("Spider", 180, 155, 0);
    PlacingGenerator("Shade", 160, 156, 0);
}

void PlaceShardMazeGens2()
{
    PlacingGenerator("Shade", 160, 165, 0);
    PlacingGenerator("Imp", 64, 166, 0);
    PlacingGenerator("Wolf", 180, 161, 0);
    PlacingGenerator("Bear", 360, 162, 0);
    PlacingGenerator("Scorpion", 225, 163, 0);
    PlacingGenerator("Spider", 180, 164, 0);
    PlacingGenerator("Urchin", 98, 167, 0);
    PlacingGenerator("AlbinoSpider", 135, 168, 0);
    PlacingGenerator("Skeleton", 260, 169, 0);
    PlacingGenerator("Skeleton", 260, 170, 0);
    PlacingGenerator("SkeletonLord", 306, 171, 0);
    PlacingGenerator("Bear", 360, 184, 0);
    PlacingGenerator("EvilCherub", 98, 185, 0);
}

void PlaceShardMazeGen3()
{
    PlacingGenerator("Ghost", 98, 173, 0);
    PlacingGenerator("Shade", 160, 174, 0);
    PlacingGenerator("Urchin", 98, 175, 0);
    PlacingGenerator("AlbinoSpider", 160, 176, 0);
    PlacingGenerator("SpittingSpider", 175, 177, 0);
    PlacingGenerator("Scorpion", 260, 178, 0);
    PlacingGenerator("SkeletonLord", 306, 179, 0);
    PlacingGenerator("Skeleton", 260, 180, 0);
    PlacingGenerator("EvilCherub", 98, 181, 0);
    PlacingGenerator("UrchinShaman", 135, 172, 0);
    PlacingGenerator("Shade", 160, 182, 0);
    PlacingGenerator("Scorpion", 260, 183, 0);
}

void RemoveShardAfterWall()
{
    ObjectOff(self);
    WallGroupOpen(18);
    FrameTimer(1, PlaceShardMazeGens2);
}

void RemoveShard2()
{
    ObjectOff(self);
    WallGroupOpen(19);
    ObjectGroupOn(20);
    FrameTimer(1, PlaceShardMazeGen3);
}

void ShardMazeInit()
{
    ObjectOff(self);

    CreateObject("BoulderIndestructible", 158);
    SetUnitMaxHealth(CreateObject("BarrelLOTD", 186), 400);
    SetUnitMaxHealth(CreateObject("BarrelLOTD", 187), 400);
    FrameTimer(1, PlaceShardMazeGens);
}

void DungeonMix(int curIdx, int difIdx)
{
    int temp;

    if (curIdx ^ difIdx)
    {
        temp = DungeonArr[curIdx];
        DungeonArr[curIdx] = DungeonArr[difIdx];
        DungeonArr[difIdx] = temp;
    }
}

void MixDungeonTable(int max)
{
    int i;

    for (i = 0 ; i < max ; i ++)
        DungeonMix(i, Random(0, max - 1));
}

int InsertNewDungeon(int dstLUnit)
{
    if (IsObjectOn(dstLUnit))
    {
        DungeonArr[DungeonPick] = dstLUnit;
        DungeonPick ++;
        return 1;
    }
    return 0;
}

void TeleportProgress(int point)
{
    int owner = GetOwner(point), count = GetDirection(point);

    while (1)
    {
        if (CurrentHealth(owner))
        {
            if (count)
            {
                if (DistanceUnitToUnit(point, owner) < 23.0)
                {
                    LookWithAngle(point, count - 1);
                    FrameTimerWithArg(1, point, TeleportProgress);
                    break;
                }
            }
            else
            {
                MoveObject(owner, GetObjectX(ToInt(GetObjectZ(point))), GetObjectY(ToInt(GetObjectZ(point))));
                MoveWaypoint(1, GetObjectX(owner), GetObjectY(owner));
                AudioEvent("BlindOff", 1);
                Effect("TELEPORT", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
                Effect("TELEPORT", GetObjectX(point), GetObjectY(point), 0.0, 0.0);
                Effect("SMOKE_BLAST", GetObjectX(point), GetObjectY(point), 0.0, 0.0);
            }
            EnchantOff(owner, "ENCHANT_BURNING");
        }
        Delete(point);
        Delete(point + 1);
        break;
    }
}

void EntryTeleportPortal()
{
    int point;

    if (CurrentHealth(other))
    {
        if (!HasEnchant(other, "ENCHANT_BURNING"))
        {
            Enchant(other, "ENCHANT_BURNING", 4.0);
            point = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(other), GetObjectY(other));
            CreateObjectAt("VortexSource", GetObjectX(point), GetObjectY(point));
            Raise(point, GetOwner(GetTrigger() + 1));
            SetOwner(other, point);
            LookWithAngle(point, 48);
            Effect("YELLOW_SPARKS", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
            MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
            FrameTimerWithArg(1, point, TeleportProgress);
            AudioEvent("LongBellsUp", 1);
            UniPrint(other, "공간이동을 준비 중 입니다. 공간이동을 취소 하려면 캐릭터를 움직이세요");
        }
    }
}

int TeleportSetupDestUnit(int srcWp, int destUnit)
{
    int telp = CreateObject("WeirdlingBeast", srcWp);

    if (IsObjectOn(destUnit))
    {
        SetUnitMaxHealth(CreateObject("InvisibleLightBlueLow", srcWp) - 1, 10);
        Enchant(CreateObject("InvisibleLightBlueLow", srcWp), "ENCHANT_ANCHORED", 0.0);
        SetOwner(destUnit, telp + 1);
        Damage(telp, 0, MaxHealth(telp) + 1, -1);
        SetCallback(telp, 9, EntryTeleportPortal);
    }
    else
    {
        Delete(telp);
        telp = 0;
    }
    return telp;
}

int DungeonAddAll()
{
    InsertNewDungeon(DrawMagicIcon(192));
    InsertNewDungeon(DrawMagicIcon(193));
    InsertNewDungeon(DrawMagicIcon(194));
    InsertNewDungeon(DrawMagicIcon(195));
    InsertNewDungeon(DrawMagicIcon(196));
    InsertNewDungeon(DrawMagicIcon(197));
    InsertNewDungeon(DrawMagicIcon(198));
    InsertNewDungeon(DrawMagicIcon(199));
    InsertNewDungeon(DrawMagicIcon(200));
    InsertNewDungeon(DrawMagicIcon(201));
    InsertNewDungeon(DrawMagicIcon(202));
    InsertNewDungeon(DrawMagicIcon(203));
    InsertNewDungeon(DrawMagicIcon(204));
    InsertNewDungeon(DrawMagicIcon(205));
    InsertNewDungeon(DrawMagicIcon(206));
    InsertNewDungeon(DrawMagicIcon(207));
    InsertNewDungeon(DrawMagicIcon(208));
    InsertNewDungeon(DrawMagicIcon(209));
    InsertNewDungeon(DrawMagicIcon(232));
    InsertNewDungeon(DrawMagicIcon(247));
    InsertNewDungeon(CreateObject("InvisibleLightBlueLow", 270));
    InsertNewDungeon(CreateObject("InvisibleLightBlueLow", 279));
    InsertNewDungeon(CreateObject("InvisibleLightBlueLow", 301));
    InsertNewDungeon(CreateObject("InvisibleLightBlueLow", 309));
    InsertNewDungeon(DrawMagicIcon(344));
    InsertNewDungeon(DrawMagicIcon(360));
    return DungeonPick;
}

int CheckDungeonLevel(int curLv)
{
    return (curLv < DungeonPick - 1);
}

void ChooseCurrentDungeon(int dstLoc)
{
    int cur = DungeonCur, target;

    if (CheckDungeonLevel(cur))
        target = DungeonArr[cur];
    else
        target = HomeLocation;
    MoveObject(dstLoc, GetObjectX(target), GetObjectY(target));
}

void SetupStartPartPortals(int dstLUnit)
{
    int max = DungeonAddAll();

    FrameTimerWithArg(1, max, MixDungeonTable);
    FrameTimerWithArg(1, max, MixDungeonTable);
    FrameTimerWithArg(1, max, MixDungeonTable);
    FrameTimerWithArg(1, max, MixDungeonTable);
    FrameTimerWithArg(1, max, MixDungeonTable);
    FrameTimerWithArg(3, DungeonDestLoc, ChooseCurrentDungeon);
    FrameTimer(4, PlaceDungeonExit);
    TeleportSetupDestUnit(188, dstLUnit);
    TeleportSetupDestUnit(189, dstLUnit);
    TeleportSetupDestUnit(190, dstLUnit);
    TeleportSetupDestUnit(191, dstLUnit);
}

void VictoryEvent()
{
    if (MaxHealth(self) && CurrentHealth(other))
    {
        DeleteObjectTimer(CreateObjectAt("ManaBombCharge", GetObjectX(self), GetObjectY(self)), 140);
        DeleteObjectTimer(CreateObjectAt("ForceOfNatureCharge", GetObjectX(self), GetObjectY(self)), 120);
        Effect("WHITE_FLASH", GetObjectX(self), GetObjectY(self), 0.0, 0.0);
        Effect("JIGGLE", GetObjectX(self), GetObjectY(self), 20.0, 0.0);
        Delete(self);
        UniPrintToAll("    대단한 당신의 근성... 모든 지역을 클리어 하셨습니다!");
        UniPrintToAll("============ 미션 승리 Mission Complete =============");
    }
}

void AllDungeonClear()
{
    int unit, dst;

    if (unit) return;
    dst = HomeLocation;
    unit = CreateObjectAt("WeirdlingBeast", GetObjectX(dst), GetObjectY(dst));
    SetUnitMaxHealth(unit, 200);
    Damage(unit, 0, MaxHealth(unit) + 1, -1);
    SetCallback(unit, 9, VictoryEvent);
}

void SetupNextDungeonEntrance()
{
    int curLv;

    if (CurrentHealth(other))
    {
        DungeonCur ++;
        curLv = DungeonCur;
        if (CheckDungeonLevel(curLv))
        {
            MoveObject(DungeonDestLoc, GetObjectX(DungeonArr[curLv]), GetObjectY(DungeonArr[curLv]));
            SetOwner(DungeonArr[curLv], GetTrigger() + 1);
        }
        else
            AllDungeonClear();
        SetCallback(self, 9, EntryTeleportPortal);
        GreenSparkFx(GetObjectX(self), GetObjectY(self));
    }
}

int SetupDungeonExit(int srcWp)
{
    int dstLUnit = HomeLocation;
    int unit = TeleportSetupDestUnit(srcWp, dstLUnit);

    SetCallback(unit, 9, SetupNextDungeonEntrance);
    return unit;
}

void PlaceDungeonExit()
{
    SetupDungeonExit(231);
    SetupDungeonExit(210);
    SetupDungeonExit(211);
    SetupDungeonExit(212);
    SetupDungeonExit(213);
    SetupDungeonExit(214);
    SetupDungeonExit(215);
    SetupDungeonExit(216);
    SetupDungeonExit(217);
    SetupDungeonExit(218);
    SetupDungeonExit(219);
    SetupDungeonExit(220);
    SetupDungeonExit(221);
    SetupDungeonExit(222);
    SetupDungeonExit(223);
    SetupDungeonExit(224);
    SetupDungeonExit(225);
    SetupDungeonExit(226);
    SetupDungeonExit(248);
    SetupDungeonExit(278);
    SetupDungeonExit(300);
    SetupDungeonExit(310);
}

void AncientMobCommon(int mob)
{
    RetreatLevel(mob, 0.0);
    SetCallback(mob, 5, FieldMonsterOnDeath);
}

void AncientAreaSpawnMob1(int pUnit)
{
    int count = GetDirection(pUnit);

    if (IsObjectOn(pUnit))
    {
        if (count)
        {
            AncientMobCommon(CallFunctionWithArgInt(ToInt(GetObjectZ(pUnit)), pUnit));
            LookWithAngle(pUnit, count - 1);
            FrameTimerWithArg(1, pUnit, AncientAreaSpawnMob1);
        }
        else
            Delete(pUnit);
    }
}

void RemoveAncientStartWalls()
{
    WallGroupOpen(25);
}

void AncientAreaInit()
{
    int mobMake = CreateObject("InvisibleLightBlueLow", 228);

    LookWithAngle(CreateObject("InvisibleLightBlueLow", 229), 40);
    LookWithAngle(CreateObject("InvisibleLightBlueLow", 230), 40);
    LookWithAngle(mobMake, 40);
    Raise(mobMake, MuseumMobSwordsman);
    Raise(mobMake + 1, MuseumMobJandor);
    Raise(mobMake + 2, MuseumMobShopkeeper);
    FrameTimerWithArg(3, mobMake, AncientAreaSpawnMob1);
    FrameTimerWithArg(3, mobMake + 1, AncientAreaSpawnMob1);
    FrameTimerWithArg(3, mobMake + 2, AncientAreaSpawnMob1);
    ObjectOff(self);
    FrameTimer(40, RemoveAncientStartWalls);
}

void RemoveGateWalls()
{
    int warr[3], pic;

    ObjectOff(self);
    if (!warr[0])
    {
        pic = Random(0, 2);
        warr[0] = Wall(50, 74); warr[1] = Wall(52, 76); warr[2] = Wall(56, 76);
    }
    WallOpen(warr[pic]);
    pic = (pic + 1) % 3;
    UniPrintToAll("주변 어딘가에서 마법벽 하나가 열렸습니다");
}

int SwampPartKey(int wp)
{
    int key;

    if (wp)
        key = CreateObject("RubyKey", wp);
    return key;
}

void CheckGateRubyKey()
{
    int door = Object("RubyKeyGate");

    if (IsLocked(door))
    {
        if (IsObjectOn(SwampPartKey(0)))
            return;
        else
            SwampPartKey(238);
    }
}

void SwampMobSummonHandler(int pUnit)
{
    int amount = GetDirection(pUnit), pic;
    int mob;

    if (IsObjectOn(pUnit))
    {
        if (amount)
        {
            pic = pUnit + Random(0, 3);
            if (ToInt(GetObjectZ(pic)))
            {
                mob = CallFunctionWithArgInt(ToInt(GetObjectZ(pic)), pUnit);
                RetreatLevel(mob, 0.0);
                SetCallback(mob, 5, FieldMonsterOnDeath);
                SetOwner(MasterMob(), mob);
            }
            LookWithAngle(pUnit, amount - 1);
            FrameTimerWithArg(1, pUnit, SwampMobSummonHandler);
        }
        else
        {
            Delete(pUnit);
            Delete(pUnit + 1);
            Delete(pUnit + 2);
            Delete(pUnit + 3);
        }
    }
}

int SetupSwampMobSummon(int wp, int count)
{
    int unit = CreateObject("InvisibleLightBlueLow", wp);

    LookWithAngle(CreateObject("InvisibleLightBlueLow", wp) - 1, count);
    CreateObject("InvisibleLightBlueLow", wp);
    CreateObject("InvisibleLightBlueLow", wp);
    return unit;
}

void SwampStartMobSpawn(int varPtr)
{
    int i;

    for (i = 0 ; i < 7 ; i ++)
        SwampMobSummonHandler(GetMemory(varPtr + (4 * i)));
}

void SwampThemaMobSetting(int varPtr)
{
    int pic[7];

    FrameTimerWithArg(1, varPtr, SwampStartMobSpawn);
    pic[0] = GetMemory(varPtr);
    Raise(pic[0], MuseumMobLeech);
    Raise(pic[0] + 1, MuseumMobShade);
    Raise(pic[0] + 2, MuseumMobWasp);
    Raise(pic[0] + 3, MuseumMobAlbinoSpider);

    pic[1] = GetMemory(varPtr + 4);
    Raise(pic[1], MuseumMobSpider);
    Raise(pic[1] + 1, MuseumMobScorpion);
    Raise(pic[1] + 2, MuseumMobBlackWolf);
    Raise(pic[1] + 3, MuseumMobSpittingSpider);

    pic[2] = GetMemory(varPtr + 8);
    Raise(pic[2], MuseumMobLeech);
    Raise(pic[2] + 1, MuseumMobGoon);
    Raise(pic[2] + 2, MuseumMobWasp);
    Raise(pic[2] + 3, MuseumMobBlackBear);

    pic[3] = GetMemory(varPtr + 12);
    Raise(pic[3], MuseumMobBlackSpider);
    Raise(pic[3] + 1, MuseumMobOgre);
    Raise(pic[3] + 2, MuseumMobOgreAxe);
    Raise(pic[3] + 3, MuseumMobOgrelord);

    pic[4] = GetMemory(varPtr + 16);
    Raise(pic[4], MuseumMobBear);
    Raise(pic[4] + 1, MuseumMobBlackSpider);
    Raise(pic[4] + 2, MuseumMobOgreAxe);
    Raise(pic[4] + 3, MuseumMobOgre);

    pic[5] = GetMemory(varPtr + 20);
    Raise(pic[5], MuseumMobGargoyle);
    Raise(pic[5] + 1, MuseumMobSkeleton);
    Raise(pic[5] + 2, MuseumMobSkeletonLord);
    Raise(pic[5] + 3, MuseumMobSpider);

    pic[6] = GetMemory(varPtr + 24);
    Raise(pic[6], MuseumMobNecromancer);
    Raise(pic[6] + 1, MuseumMobSkeleton);
    Raise(pic[6] + 2, MuseumMobSkeletonLord);
    Raise(pic[6] + 3, MuseumMobLich);
}

void OpenMecaWalls()
{
    int var0;

    ObjectOff(self);
    var0 ++;
    if (var0 ^ 4) return;
    WallGroupOpen(22);
    UniPrintToAll("벽이 열렸습니다");
}

void SwampNPCDescription()
{
    TellStoryUnitName("AwardGuide", "Wiz06b:Delwin2", "경비병");
    UniPrint(other, "꼭 여기를 들어가야 되겠습니까?");
}

void SwampPartTalk()
{
    int pic, rwiz, check;

    if (GetAnswer(self) ^ 1) return;
    if (MaxHealth(self) && !HasEnchant(self, "ENCHANT_ANCHORED") && !check)
    {
        check = 1;
        PlacingGenerator("MechanicalGolem", 700, 243, 0);
        PlacingGenerator("MechanicalGolem", 700, 244, 0);
        PlacingGenerator("MechanicalGolem", 700, 245, 0);
        PlacingGenerator("MechanicalGolem", 700, 246, 0);
        WallGroupOpen(21);
        Enchant(self, "ENCHANT_ANCHORED", 0.0);
        Delete(self);
    }
}

void SwampEntranceNPC(int wp)
{
    int unit = CreateObject("WoundedWarrior", wp);

    CreateObject("InvisibleLightBlueLow", wp);
    Frozen(unit, 1);
    SetDialog(unit, "YESNO", SwampNPCDescription, SwampPartTalk);
    StoryPic(unit, "FentonPic");
}

int SwampInitFuncNum()
{
    StopScript(SwampPartInit);
}

void SwampPartInit()
{
    int arr[7];

    ObjectOff(self);

    arr[0] = SetupSwampMobSummon(234, 30);
    arr[1] = SetupSwampMobSummon(235, 20);
    arr[2] = SetupSwampMobSummon(236, 30);
    arr[3] = SetupSwampMobSummon(237, 30);
    arr[4] = SetupSwampMobSummon(241, 10);
    arr[5] = SetupSwampMobSummon(239, 10);
    arr[6] = SetupSwampMobSummon(240, 10);
    FrameTimerWithArg(3, GetMemory(GetMemory(0x75ae28) + (0x30 * SwampInitFuncNum() + 0x1c)), SwampThemaMobSetting);
    SwampPartKey(238);
    SwampEntranceNPC(242);
}

void SpawnGalavaMobs()
{
    PlacingGenerator("Shade", 260, 260, 0);
    PlacingGenerator("UrchinShaman", 175, 259, 0);
    PlacingGenerator("Swordsman", 325, 261, 0);
    PlacingGenerator("Swordsman", 325, 266, 0);
    PlacingGenerator("Archer", 98, 267, 0);
    PlacingGenerator("EvilCherub", 98, 268, 0);
}

void GalavaGenDestory()
{
    int mobMake;

    //MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    mobMake = SetupSwampMobSummon(254, 30);
    Raise(mobMake, MuseumMobHorrendous);
    Raise(mobMake + 1, MuseumMobSwordsman);
    Raise(mobMake + 2, MuseumMobArcher);
    Raise(mobMake + 3, MuseumMobJandor);
    FrameTimerWithArg(3, mobMake, SwampMobSummonHandler);
    UnlockDoor(Object("GalavaMidGate1"));
    UnlockDoor(Object("GalavaMidGate2"));
    FrameTimer(3, SpawnGalavaMobs);
}

void GalavaAfterRun()
{
    int mgen;

    CancelTimer(FrameTimerWithArg(10, GalavaGenDestory, GalavaGenDestory));
    mgen = PlacingGenerator("Horrendous", 325, 254, GetMemory(GetMemory(0x83395c) + 8));

    SetUnitMaxHealth(mgen, 650);
    ObjectOff(mgen);
}

void GalavaSingleBlockMoving()
{
    if (HasClass(other, "PLAYER"))
    {
        ObjectOff(self);
        SetupDungeonExit(271);
        FrameTimer(3, GalavaAfterRun);
        Move(Object("GalavaBlock"), 249);
        MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
        AudioEvent("SpikeBlockMove", 1);
    }
}

int GalavaGateKey(int arg)
{
    int key;

    if (arg)
        key = CreateObject("SapphireKey", arg);
    return key;
}

void GalavaGateChecking()
{
    int gate = Object("GalavaExitGate");

    if (IsLocked(gate))
    {
        if (IsObjectOn(GalavaGateKey(0))) return;
        else
        {
            GalavaGateKey(253);
            UniPrint(other, "문이 여전히 잠긴 상태에서 열쇠가 지도에서 사라져서 열쇠가 재생성 되었습니다");
        }
    }
    else
    {
        ObjectOff(self);
    }
}

void GalavaPartInit()
{
    ObjectOff(self);
    GalavaGateKey(253);
    PlacingGenerator("Swordsman", 325, 252, 0);
}

void GilmakReset(int block)
{
    Move(block, 264);
}

void GilmakStart()
{
    int block = Object("GilmakBlock");

    ObjectOff(self);
    Move(block, 262);
    FrameTimerWithArg(135, block, GilmakReset);
    FrameTimerWithArg(220, GetTrigger(), EnableObject);
    MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
    AudioEvent("Clank2", 1);
}

void DefaultItemPlacing(int ptr)
{
    int amount = GetDirection(ptr);

    if (IsObjectOn(ptr))
    {
        if (amount)
        {
            CreateObjectAt(ToStr(ToInt(GetObjectZ(ptr))), GetObjectX(ptr), GetObjectY(ptr));
            CreateObjectAt(ToStr(ToInt(GetObjectZ(ptr))), GetObjectX(ptr), GetObjectY(ptr));
            CreateObjectAt(ToStr(ToInt(GetObjectZ(ptr))), GetObjectX(ptr), GetObjectY(ptr));
            CreateObjectAt(ToStr(ToInt(GetObjectZ(ptr))), GetObjectX(ptr), GetObjectY(ptr));
            CreateObjectAt(ToStr(ToInt(GetObjectZ(ptr))), GetObjectX(ptr), GetObjectY(ptr));
            CreateObjectAt(ToStr(ToInt(GetObjectZ(ptr))), GetObjectX(ptr), GetObjectY(ptr));
            MoveObject(ptr, GetObjectX(ptr) - 23.0, GetObjectY(ptr) + 23.0);
            LookWithAngle(ptr, amount - 1);
            FrameTimerWithArg(1, ptr, DefaultItemPlacing);
        }
        else
        {
            Raise(ptr, ToInt(GetObjectZ(ptr)) + 1);
            MoveObject(ptr, GetObjectX(ptr + 1) + 23.0, GetObjectY(ptr + 1) + 23.0);
            MoveObject(ptr + 1, GetObjectX(ptr + 1) + 23.0, GetObjectY(ptr + 1) + 23.0);
            StartDefaultItemCreating(ptr);
        }
    }
}

void StartDefaultItemCreating(int ptr)
{
    int idx = GetDirection(ptr + 1);

    if (idx < 10)
    {
        LookWithAngle(ptr, 15);
        LookWithAngle(ptr + 1, idx + 1);
        DefaultItemPlacing(ptr);
    }
}

void PlaceDefItemMain()
{
    string item = {
        "OrnateHelm", "Breastplate", "PlateArms", "PlateBoots", "PlateLeggings",
        "GreatSword", "RedPotion", "RedPotion", "RedPotion", "CurePoisonPotion"
        };
    int ptr = CreateObject("InvisibleLightBlueLow", 269);
    FrameTimerWithArg(1, CreateObject("InvisibleLightBlueLow", 269) - 1, StartDefaultItemCreating);
    Raise(ptr, item);
}

void OpenSewerExit()
{
    WallGroupOpen(26);
    ObjectOff(self);
}

void IxTemplePartInit()
{
    int mobMake = SetupSwampMobSummon(275, 20);
    int mobMake2 = SetupSwampMobSummon(276, 20);

    Raise(mobMake, MuseumMobAlbinoSpider);
    Raise(mobMake + 1, MuseumMobBlackWolf);
    Raise(mobMake + 2, MuseumMobOgreAxe);
    Raise(mobMake + 3, MuseumMobWasp);
    Raise(mobMake2, MuseumMobBomber);
    Raise(mobMake2 + 1, MuseumMobFlying);
    Raise(mobMake2 + 2, MuseumMobScorpion);
    Raise(mobMake2 + 3, MuseumMobSpider);
    FrameTimerWithArg(1, mobMake, SwampMobSummonHandler);
    FrameTimerWithArg(1, mobMake2, SwampMobSummonHandler);
}

void SewerPartInit()
{
    int mobMake;

    ObjectOff(self);
    PlacingGenerator("Scorpion", 260, 273, 0);
    PlacingGenerator("Bear", 325, 274, 0);

    mobMake = SetupSwampMobSummon(272, 50);
    Raise(mobMake, MuseumMobGoon);
    Raise(mobMake + 1, MuseumMobLeech);
    Raise(mobMake + 2, MuseumMobUrchin);
    Raise(mobMake + 3, MuseumMobSpittingSpider);
    FrameTimerWithArg(3, mobMake, SwampMobSummonHandler);
    FrameTimer(4, IxTemplePartInit);
    FrameTimer(8, MinesPartInit);
}

void MobNoKeepHere()
{
    if (MineMobLZone)
    {
        if (HasClass(other, "MONSTER"))
            PushObjectTo(other, 0.0, -200.0);
    }
}

void FrogCollideHandler()
{
    if (CurrentHealth(other))
    {
        if (CurrentHealth(self) && HasClass(other, "PLAYER"))
        {
            if (HasEnchant(other, "ENCHANT_ANTI_MAGIC"))
                return;
            else
            {
                Enchant(other, "ENCHANT_ANTI_MAGIC", 2.0);
                Damage(other, MasterMob(), 15, 14);
            }
        }
    }
}

void PlaceManyFrogs(int mobMake)
{
    int arr[40], mob;
    int amount = GetDirection(mobMake);

    if (IsObjectOn(mobMake))
    {
        if (amount)
        {
            mob = CreateObjectAt("GreenFrog", GetObjectX(mobMake), GetObjectY(mobMake));
            Enchant(mob, "ENCHANT_INVULNERABLE", 0.0);
            Enchant(mob, "ENCHANT_CONFUSED", 0.0);
            SetCallback(mob, 9, FrogCollideHandler);
            arr[amount - 1] = mob;
            LookWithAngle(mobMake, amount - 1);
            FrameTimerWithArg(1, mobMake, PlaceManyFrogs);
        }
        else
        {
            CancelTimer(FrameTimerWithArg(10, PlaceManyFrogs, PlaceManyFrogs));
            MFrogVarPtr = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c)) + 4;
        }
    }
}

void MinesMobDead()
{
    int count;

    FieldMonsterOnDeath();
    count ++;
    if (count ^ 30) return;
    else
        WallGroupOpen(27);
}

void FrogToOtherMobs(int ptr)
{
    int cur = ptr + 1, i;

    for (i = 0 ; i < 30 ; i ++)
        SetCallback(MuseumMobOgrelord(cur + i), 5, MinesMobDead);
    Delete(ptr);
}

void KillMinesAllFrogs()
{
    int varPtr = MFrogVarPtr, i;

    ObjectOff(self);
    FrameTimerWithArg(3, CreateObject("InvisibleLightBlueLow", 1), FrogToOtherMobs);
    for (i = 0 ; i < 30 ; i ++)
    {
        if (CurrentHealth(GetMemory(varPtr)))
        {
            CreateObjectAt("InvisibleLightBlueLow", GetObjectX(GetMemory(varPtr)), GetObjectY(GetMemory(varPtr)));
            EnchantOff(GetMemory(varPtr), "ENCHANT_INVULNERABLE");
            Damage(GetMemory(varPtr), 0, 100, -1);
        }
        varPtr += 4;
    }
    MineMobLZone = 0;
}

void MinesSpikeBottomToggling(int gpNum)
{
    ObjectGroupToggle(gpNum);
    SecondTimerWithArg(5, gpNum, MinesSpikeBottomToggling);
    AudioEvent("FloorSpikesUp", 281);
}

void MinesPartInit()
{
    int mobMake = CreateObject("InvisibleLightBlueLow", 277);
    
    LookWithAngle(mobMake, 30);
    FrameTimerWithArg(30, mobMake, PlaceManyFrogs);
    PlacingGenerator("Mimic", 480, 280, 0);
    FrameTimerWithArg(45, 28, MinesSpikeBottomToggling);
}

int SetInvincibleInventoryItems(int unit)
{
    int cur = GetLastItem(unit), count = 0;

    while (IsObjectOn(cur))
    {
        if (!HasEnchant(cur, "ENCHANT_INVULNERABLE"))
        {
            if (MaxHealth(cur) ^ CurrentHealth(cur))
                RestoreHealth(cur, MaxHealth(cur) - CurrentHealth(cur));
            Enchant(cur, "ENCHANT_INVULNERABLE", 0.0);
            count ++;
        }
        cur = GetPreviousItem(cur);
    }
    return count;
}

void InvincibleMyItems()
{
    int res;

    if (GetGold(other) >= 3000)
    {
        res = SetInvincibleInventoryItems(other);
        if (res)
        {
            ChangeGold(other, -3000);
            Enchant(other, "ENCHANT_CHARMING", 0.5);
            UniPrint(other, IntToString(res) + " 개 아이템이 처리되었습니다");
        }
        else
            UniPrint(other, "거래실패! 처리할 아이템이 없습니다");
    }
    else
        UniPrint(other, "잔액이 부족합니다. 아이템 무적화 작업은 3천원을 요구합니다!");
}

void MecaGolem2Dead()
{
    int count;

    FieldMonsterOnDeath();
    count ++;
    if (count ^ 16) return;
    WallGroupOpen(29);
}

void MecaGolemSightNothing()
{
    return;
}

void MecaGolemSight()
{
    string ment = "침입자 발견! 적군 살상모드 활성화";
    "나의 강력한 메탈펀치 맛을 보여줘야 겠군...";
    "도망쳐봐야 소용없지! 넌 이미 독안에 든 쥐야";
    "저놈이다! 놈을 잡아라";
    "저런 조그마한 녀석은 한주먹 상대도 안되는데";

    SetCallback(self, 3, MecaGolemSightNothing);
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    AudioEvent("MechGolemPowerUp", 1);
    UniChatMessage(self, ToStr(SToInt(ment) + Random(0, 4)), 120);
}

void MecaGolemGroupPlace()
{
    int arr[16], i;

    ObjectOff(self);
    for (i = 0 ; i < 16 ; i ++)
    {
        arr[i] = MuseumMobMecaGolem(DrawMagicIcon(i + 284));
        SetCallback(arr[i], 3, MecaGolemSight);
        SetCallback(arr[i], 5, MecaGolem2Dead);
        LookWithAngle(arr[i], 32);
    }
}

void KillAllMecaGolem()
{
    int varPtr, i, pic;

    ObjectOff(self);
    CancelTimer(FrameTimerWithArg(10, MecaGolemGroupPlace, MecaGolemGroupPlace));
    varPtr = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));

    for (i = 0 ; i < 16 ; i ++)
    {
        pic = GetMemory(varPtr + (i * 4));
        if (CurrentHealth(pic))
        {
            if (HasEnchant(pic, "ENCHANT_INVULNERABLE"))
                EnchantOff(pic, "ENCHANT_INVULNERABLE");
            if (HasEnchant(pic, "ENCHANT_SHIELD"))
                EnchantOff(pic, "ENCHANT_SHIELD");
            Damage(pic, 0, MaxHealth(pic) + 1, 14);
        }
    }
    UniChatMessage(self, "살인 머신 자폭명령 가동!", 120);
}

void FaceRoomInit()
{
    int mobMake = SetupSwampMobSummon(282, 20);
    int mobMake2 = SetupSwampMobSummon(283, 30);

    ObjectOff(self);
    Raise(mobMake, MuseumMobArcher);
    Raise(mobMake + 1, MuseumMobFlying);
    Raise(mobMake + 2, MuseumMobSwordsman);
    Raise(mobMake + 3, MuseumMobWhiteWolf);
    Raise(mobMake2, MuseumMobBlackSpider);
    Raise(mobMake2 + 1, MuseumMobUrchin);
    Raise(mobMake2 + 2, MuseumMobUrchin);
    Raise(mobMake2 + 3, MuseumMobBat);
    FrameTimerWithArg(3, mobMake, SwampMobSummonHandler);
    FrameTimerWithArg(3, mobMake2, SwampMobSummonHandler);
}

void FinalPartMobMake()
{
    int mobMake = SetupSwampMobSummon(303, 30);

    Raise(mobMake, MuseumMobGargoyle);
    Raise(mobMake + 1, MuseumMobFlying);
    Raise(mobMake + 2, MuseumMobGargoyle);
    Raise(mobMake + 3, MuseumMobFlying);
    FrameTimerWithArg(1, mobMake, SwampMobSummonHandler);
}

void LoadingGearSecond()
{
    int idx = GetDirection(self), groupBase = 32, count;

    ObjectOff(self);
    ObjectGroupOn(groupBase + idx);
    count ++;
    if (count ^ 3) return;
    WallGroupOpen(31);
    FrameTimer(1, FinalPartMobMake);
    UniPrintToAll("맞은편 벽이 열렸습니다");
}

void FinalPartMobMake2()
{
    int mobMake1 = SetupSwampMobSummon(307, 20);
    int mobMake2 = SetupSwampMobSummon(308, 20);

    Raise(mobMake1, MuseumMobFlying);
    Raise(mobMake1 + 1, MuseumMobWisp);
    Raise(mobMake1 + 2, MuseumMobWisp);
    Raise(mobMake1 + 3, MuseumMobFlying);

    Raise(mobMake2, MuseumMobFlying);
    Raise(mobMake2 + 1, MuseumMobWisp);
    Raise(mobMake2 + 2, MuseumMobWisp);
    Raise(mobMake2 + 3, MuseumMobFlying);
}

void RiseFlameOnTorch()
{
    if (GetUnitThingID(other) == 1776) //DunMirFlameBasinLit
    {
        ObjectOn(other);
    }
}

void SpiderBeaconOn()
{
    int count, touch;

    if (IsOwnedBy(other, MasterMob()))
    {
        ObjectOff(self);
        Damage(other, 0, MaxHealth(other) + 1, 14);
        count ++;
        if (count == 16)
        {
            LastRoomFlag = 0;
            WallGroupOpen(30);
            PlacingGenerator("EvilCherub", 98, 304, 0);
            PlacingGenerator("EvilCherub", 98, 305, 0);
            PlacingGenerator("EvilCherub", 98, 306, 0);
            FrameTimer(1, FinalPartMobMake2);
        }
        touch = CreateObjectAt("Maiden", GetObjectX(self), GetObjectY(self));
        Frozen(touch, 1);
        SetCallback(touch, 9, RiseFlameOnTorch);
        DeleteObjectTimer(touch, 1);
        Effect("CYAN_SPARKS", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    }
}

int SmallWhiteSpider(int mobMake)
{
    int mob = MuseumMobSmallAlbinoSpider(mobMake);
    
    SetCallback(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(mobMake), GetObjectY(mobMake)) - 1, 5, LastSpiderDeath);
    SetOwner(MasterMob(), mob);
    return mob;
}

void LastSpiderDeath()
{
    int unit, mob;

    if (LastRoomFlag)
    {
        mob = SmallWhiteSpider(GetTrigger() + 1);
        Effect("SMOKE_BLAST", GetObjectX(mob), GetObjectY(mob), 0.0, 0.0);
    }
    else
        FieldMonsterOnDeath();
    GreenSparkFx(GetObjectX(self), GetObjectY(self));
    DeleteObjectTimer(self, 1);
    Delete(GetTrigger() + 1);
}

void SmallSpiderSummon(int mobMake)
{
    int amount = GetDirection(mobMake);
    int mob;

    if (IsObjectOn(mobMake))
    {
        if (amount)
        {
            SmallWhiteSpider(mobMake);
            LookWithAngle(mobMake, amount - 1);
            FrameTimerWithArg(1, mobMake, SmallSpiderSummon);
        }
        else
        {
            UnlockDoor(Object("SpiderFenceGate"));
            Delete(mobMake);
        }
    }
}

void ThisMapStartMent()
{
    UniPrintToAll("무모한 도전__ v0.1                                       야스카와 제작");
    UniPrintToAll("게임방법: 20여개의 랜덤 방을 모두 돌고오면 미션 클리어 입니다. 간단하쥬? ");
}

void LastRoomInit()
{
    int mobMake = CreateObject("InvisibleLightBlueLow", 302);

    LookWithAngle(Object("LoadGear1"), 0);
    LookWithAngle(Object("LoadGear2"), 1);
    LookWithAngle(Object("LoadGear3"), 2);
    ObjectOff(self);
    LookWithAngle(mobMake, 16);
    FrameTimerWithArg(1, mobMake, SmallSpiderSummon);
}

int SummonTripleArrow(float x, float y, int owner, float force)
{
    int unit = CreateObjectAt("ArcherArrow", x, y);

    SetOwner(owner, unit);
    LookAtObject(unit, owner);
    LookWithAngle(unit, GetDirection(unit) + 128);
    PushObject(unit, force, GetObjectX(owner), GetObjectY(owner));

    return unit;
}

void HarpoonEvent(int owner)
{
    int unit;
    float vectX, vectY;
    float var_3 = 0.1;
    
    if (CurrentHealth(owner))
    {
        vectX = UnitAngleCos(owner, -7.0);
        vectY = UnitAngleSin(owner, -7.0);
        unit = SummonTripleArrow(GetObjectX(owner) - vectX, GetObjectY(owner) - vectY, owner, 13.0);
        while (var_3 < 0.4)
        {
            SummonTripleArrow((var_3 * vectY) + GetObjectX(owner) - vectX, (-var_3 * vectX) + GetObjectY(owner) - vectY, owner, 13.0);
            SummonTripleArrow((-var_3 * vectY) + GetObjectX(owner) - vectX, (var_3 * vectX) + GetObjectY(owner) - vectY, owner, 13.0);
            var_3 += 0.1;
        }
    }
}

void PlayerCheckUseNewSkill(int owner)
{
    if (CurrentHealth(owner))
    {
        if (HasEnchant(owner, "ENCHANT_AFRAID"))
            return;
        else
        {
            Enchant(owner, "ENCHANT_AFRAID", 10.0);
            HarpoonEvent(owner);
        }
    }
}

void DescriptNewSkill()
{
    TellStoryUnitName("SwordsmanHurt", "War06a:NecroAttackJack", "새로운 스킬배우기");
    UniPrint(other, "전사 새로운 능력구입! 조심스럽게 걷기를 시전하면 트리플 에로우 샷이 발사됩니다");
    UniPrint(other, "이 기술을 배우려면 2만원이 필요합니다. 계속 거래하려면 예를 눌러주세요        ");
}

void TradeNewSkill()
{
    int plr;

    if (GetAnswer(self) ^ 1) return;
    if (CurrentHealth(other))
    {
        if (GetGold(other) >= 20000)
        {
            plr = CheckPlayer();
            if (plr + 1)
            {
                if (CheckPlayerSkillFlag(plr))
                    UniPrint(other, "이미 능력을 배웠습니다!");
                else
                {
                    SetPlayerSkillFlag(plr);
                    ChangeGold(other, -20000);
                    MoveWaypoint(1, GetObjectX(other), GetObjectY(other));
                    AudioEvent("AwardSpell", 1);                
                    Effect("WHITE_FLASH", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
                    UniPrint(other, "축하합니다. 새로운 능력을 배웠습니다");
                    UniPrint(other, "이제 조심스럽게 걷기를 시전하면 새로운 능력이 사용됩니다");
                }
            }
        }
        else
            UniPrint(other, "거래실패! 잔액이 부족합니다");
    }
}

void DelayPickOblivionStaff(int staff)
{
    int owner = GetOwner(staff);

    if (CurrentHealth(owner))
        Pickup(owner, staff);
    else
        ClearOwner(staff);
}

void DelayFakePickOblivion(int fakeStaff)
{
    int owner = GetOwner(fakeStaff);

    if (CurrentHealth(owner))
        Pickup(owner, fakeStaff);
    Delete(fakeStaff);
}

void DescriptOblivionStaff()
{
    TellStoryUnitName("SwordsmanHurt", "War08a:PriestProd3", "망각의 지팡이 판매");
    UniPrint(other, "망각의 지팡이를 살거에요? 1개당 9만원 이에요");
}

void TradeOblivionStaff()
{
    int staff, ptr;

    if (GetAnswer(self) ^ 1) return;
    if (CurrentHealth(other))
    {
        if (GetGold(other) >= 90000)
        {
            ChangeGold(other, -90000);
            staff = CreateObjectAt("OblivionOrb", GetObjectX(other), GetObjectY(other));
            ptr = GetMemory(0x750710);
            SetMemory(ptr + 0x2c4, 0x53a720);
            SetMemory(ptr + 0x2c8, ImportAllowAllDrop());
            FrameTimerWithArg(1, CreateObjectAt("OblivionOrb", GetObjectX(other), GetObjectY(other)), DelayFakePickOblivion);
            SetOwner(other, staff);
            FrameTimerWithArg(1, staff, DelayPickOblivionStaff);
            UniPrint(other, "거래가 성공적으로 완료되었습니다!");
        }
        else
            UniPrint(other, "거래실패! 잔액이 부족합니다");
    }
}

void DescriptAllEnchantments()
{
    TellStoryUnitName("SwordsmanHurt", "Wiz02:NecroTaunt", "올엔첸 5만원");
    UniPrint(other, "5만원만 내면 유용한 엔첸트를 항상 유지시킵니다");
}

void TradeAllEnchantments()
{
    int plr;

    if (GetAnswer(self) ^ 1) return;
    if (CurrentHealth(other))
    {
        if (GetGold(other) >= 50000)
        {
            plr = CheckPlayer();
            if (plr + 1)
            {
                if (CheckPlayerAllEncFlag(plr))
                    UniPrint(other, "결제실패! - 이 기능을 이미 구입하셨습니다");
                else
                {
                    SetPlayerAllEncFlag(plr);
                    AlwaysAllEnchantments(plr);
                    ChangeGold(other, -50000);
                    Effect("COUNTERSPELL_EXPLOSION", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
                    UniPrint(other, "항상 엔첸트 유지기능 구입완료");
                    UniChatMessage(self, "결제가 완료되었습니다", 120);
                }
            }
        }
        else
            UniChatMessage(self, "잔액이 부족합니다", 120);
    }
}

void DescriptFastCure()
{
    TellStoryUnitName("SwordsmanHurt", "Con05A.scr:HoundGreeting", "공간이동의 돌\n판매중!");
    UniPrint(other, "공간이동의 돌 1개당 4천원에 팔고 있어요! 시간 나실때 한번 보고가세요 용사님");
    UniPrint(other, "사용 시 마을로 공간이동을 합니다");
}

void DialogResultBuyFastCure()
{
    if (GetAnswer(self) ^ 1) return;
    if (CurrentHealth(other))
    {
        if (GetGold(other) >= 4000)
        {
            ChangeGold(other, -4000);
            FastCurePotionCreate(other);
            UniPrint(other, "거래완료- 구입한 품목은 자신의 발 아래에 생성됩니다");
        }
        else
            UniPrint(other, "거래실패- 잔액이 부족합니다");
    }
}

void DescriptionSpecialWeapon()
{
    string desc =
        "에너지파 소드 [데미지 100의 긴 사거리 관통형 스플래쉬] -11만3천";
        "스타워즈 광선검을 구입합니다 [데미지 200, 짧은 사거리 관통형 스플래쉬] -13만5천";
        "수리검 결계의 검을 구입합니다 [자기 주변 원형범위에 데미지 75의 수리검이 사방으로 퍼져나갑니다] -12만4천";
        "광자폭발의 검을 구입합니다 [주변범위에 데미지 125] -13만";
    int index = GetDirection(self);

    TellStoryUnitName("SwordsmanHurt", "Wiz02B.scr:FrogTalk01", "마법무기 숍");
    UniPrint(other, ToStr(SToInt(desc) + index));
    UniPrint(other, "구입하려면 '예' 를 누릅니다, 다음 항목을 보려면 '아니오' 를 선택하세요");
}

void DialogResultSpecialWeapon()
{
    int pay[4];
    int property1[4];
    int property2[4];
    int index = GetDirection(self);
    int dlgRes = GetAnswer(self), weap;

    if (!pay[0])
    {
        pay[0] = 113000; pay[1] = 135000; pay[2] = 124000; pay[3] = 130000;
        property1[0] = 8; property1[1] = 20; property1[2] = 28; property1[3] = 12;
        property2[0] = 27; property2[1] = 3; property2[2] = 15; property2[3] = 19;
    }
    if (dlgRes == 1)
    {
        if (GetGold(other) >= pay[index])
        {
            weap = CreateObjectAt("GreatSword", GetObjectX(other), GetObjectY(other));
            SetOwner(other, weap);
            SetWeaponProperties(GetMemory(0x750710), 5, 5, property1[index], property2[index]);
            LookWithAngle(weap, index + 1);
            FrameTimerWithArg(1, weap, DelayPickOblivionStaff);
            Enchant(weap, "ENCHANT_RUN", 0.0);
            ChangeGold(other, -pay[index]);
            UniPrint(other, "결제완료!");
        }
        else
            UniPrint(other, "거래실패! --잔액이 부족합니다 (" + IntToString(pay[index] - GetGold(other)) + "원 더 필요)");
    }
    else if (dlgRes == 2)
    {
        LookWithAngle(self, (index + 1) % 4);
        DescriptionSpecialWeapon();
    }
}

void PlaceWarNewSkillShop()
{
    int shop = DummyUnitCreate("Horrendous", 312);

    StoryPic(DummyUnitCreate("WizardWhite", 313), "BlackWizardPic");
    StoryPic(DummyUnitCreate("WizardGreen", 355), "DryadPic");
    StoryPic(DummyUnitCreate("Swordsman", 356), "AldwynPic");
    StoryPic(DummyUnitCreate("BlackWolf", 357), "WolfPic");
    StoryPic(shop, "HorrendousPic");
    SetDialog(shop, "YESNO", DescriptNewSkill, TradeNewSkill);
    SetDialog(shop + 1, "YESNO", DescriptOblivionStaff, TradeOblivionStaff);
    SetDialog(shop + 2, "YESNO", DescriptAllEnchantments, TradeAllEnchantments);
    SetDialog(shop + 3, "YESNO", DescriptionSpecialWeapon, DialogResultSpecialWeapon);
    SetDialog(shop + 4, "YESNO", DescriptFastCure, DialogResultBuyFastCure);
    LookWithAngle(shop + 3, 0);
}

void DrawPeaceStatue(int pUnit)
{
    int stUnit = ToInt(GetObjectZ(pUnit)), varPtr;

    CancelTimer(FrameTimerWithArg(10, PeaceStatueClass, PeaceStatueClass));
    varPtr = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));

    while (1)
    {
        if (IsObjectOn(stUnit))
        {
            if (GetDirection(pUnit) ^ GetDirection(stUnit))
                Delete(stUnit);
            else
                break;
        }
        Raise(pUnit, CreateObjectAt(ToStr(GetMemory(varPtr) + GetDirection(pUnit)), GetObjectX(pUnit), GetObjectY(pUnit)));
        LookWithAngle(ToInt(GetObjectZ(pUnit)), GetDirection(pUnit));
        GreenSparkFx(GetObjectX(pUnit), GetObjectY(pUnit));
        break;
    }
}

void DrawAllPeaceStatue(int stPtr)
{
    int i;

    for (i = 0 ; i < 8 ; i ++)
        DrawPeaceStatue(GetMemory(stPtr + (i * 4)));
}

void PeaceStatueClass()
{
    string stName = {
        "MovableStatueVictory4SE", "MovableStatueVictory4S", "MovableStatueVictory4SW", "MovableStatueVictory4W",
        "MovableStatueVictory4NW", "MovableStatueVictory4N", "MovableStatueVictory4NE", "MovableStatueVictory4E"
    };
    int arr[8], dir = 1;
    int i;

    for (i = 0 ; i < 8 ; i ++)
    {
        arr[i] = CreateObject("InvisibleLightBlueLow", 314 + i);
        LookWithAngle(arr[i], dir);
        LookWithAngle(Object("PeaceBeacon" + IntToString(i + 1)), i);
        dir = (dir + 1) % 8;
    }
}

void TriggeredFireTrap()
{
    int fx;

    if (MaxHealth(self) && CurrentHealth(other))
    {
        fx = CreateObjectAt("TitanFireball", GetObjectX(self), GetObjectY(self));
        CreateObjectAt("TargetBarrel1", GetObjectX(self), GetObjectY(self));
        Delete(self);
        Delete(GetTrigger() + 1);
    }
}

int PutFireTrap(int location)
{
    int trp = CreateObject("WeirdlingBeast", location);

    UnitNoCollide(CreateObject("PoisonGasTrap", location));
    Damage(trp, 0, MaxHealth(trp) + 1, -1);
    SetCallback(trp, 9, TriggeredFireTrap);
    return trp;
}

void FistTrapCountdown(int trp)
{
    int count = GetDirection(trp);

    if (count)
    {
        LookWithAngle(trp, count - 1);
        FrameTimerWithArg(1, trp, FistTrapCountdown);
    }
}

void TriggeredFistTrap()
{
    int unit;

    if (CurrentHealth(other) && MaxHealth(self))
    {
        if (GetDirection(self))
            return;
        else
        {
            unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(self), GetObjectY(self));
            Delete(unit);
            CastSpellLocationLocation("SPELL_FIST", GetObjectX(self) - 2.0, GetObjectY(self), GetObjectX(self), GetObjectY(self));
            SetOwner(MasterMob(), unit + 1);
            LookWithAngle(self, 180);
            FrameTimerWithArg(1, GetTrigger(), FistTrapCountdown);
        }
    }
}

int PutFistTrap(int location)
{
    int trp = CreateObject("Wizard", location);

    Damage(trp, 0, MaxHealth(trp) + 1, -1);
    LookWithAngle(trp, 0);
    SetCallback(trp, 9, TriggeredFistTrap);
    return trp;
}

void PeaceRoomDecorations()
{
    PlacingGenerator("Skeleton", 295, 323, 0);
    PlacingGenerator("Shade", 260, 324, 0);
    PlacingGenerator("SkeletonLord", 306, 325, 0);
    PlacingGenerator("EvilCherub", 98, 327, 0);
    PlacingGenerator("Zombie", 260, 326, 0);
    PlacingGenerator("EvilCherub", 98, 328, 0);
    PlacingGenerator("VileZombie", 325, 329, 0);
    PlacingGenerator("Scorpion", 275, 330, 0);
    CreateObject("RedOrbKeyOfTheLich", 331);
    CreateObject("RedOrbKeyOfTheLich", 332);
    CreateObject("RedOrbKeyOfTheLich", 333);
    CreateObject("RedOrbKeyOfTheLich", 334);
}

void PeaceKeyPadInit()
{
    int i;

    for (i = 0 ; i < 4 ; i ++)
        LookWithAngle(Object("PeaceKeySw" + IntToString(i + 1)), i);
}

void InitPeaceStatueRoom()
{
    ObjectOff(self);
    PeaceStatueClass();
    CancelTimer(FrameTimerWithArg(10, PeaceStatueClass, PeaceStatueClass));
    FrameTimerWithArg(3, GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c)) + 4, DrawAllPeaceStatue);
    WallGroupOpen(35);
    PeaceKeyPadInit();
    FrameTimer(1, PeaceRoomDecorations);
    UniPrint(other, "바깥쪽 벽을 열려면 8 개 석고상 모두 바깥을 바라보게 해야하며, 안쪽 벽을 열려면 모두 안쪽을 바라보게 하시오");
}

int PeaceStatueDirectionCheck(int varPtr, int dir)
{
    int i, res = 0;

    for (i = 0 ; i < 8 ; i ++)
    {
        if (GetDirection(GetMemory(varPtr + (4 * i))) == dir)
            res ++;
        dir = (dir + 1) % 8;
    }
    return res == 8;
}

void PeaceStatueBeacon()
{
    int becIndex = GetDirection(self);
    int dir = GetDirection(other);
    int index = ((dir - 16) % 256) / 32, varPtr;
    int pUnit;

    CancelTimer(FrameTimerWithArg(10, PeaceStatueClass, PeaceStatueClass));
    varPtr = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c)) + 4;
    pUnit = GetMemory(varPtr + (becIndex * 4));
    LookWithAngle(pUnit, index);
    DrawPeaceStatue(pUnit);
    if (PeaceStatueDirectionCheck(varPtr, 1)) //inner
    {
        WallGroupOpen(35);
        WallGroupClose(36);
    }
    else if (PeaceStatueDirectionCheck(varPtr, 5)) //outer
    {
        WallGroupClose(35);
        WallGroupOpen(36);
    }
    else
    {
        WallGroupClose(35);
        WallGroupClose(36);
    }
}

void PutRedLichKey()
{
    int count;

    if (GetUnitThingID(other) ^ 2182) return;
    ObjectOff(self);
    count ++;
    if (count == 4)
    {
        WallGroupOpen(37);
        SetupDungeonExit(322);
    }
    Delete(other);
    ObjectOn(Object("PeaceKeyPad" + IntToString(GetDirection(self) + 1)));
    MoveWaypoint(1, GetObjectX(self), GetObjectY(self));
    GreenSparkFx(GetWaypointX(1), GetWaypointY(1));
    AudioEvent("SpellPopOffBook", 1);
}

void PlaceFistTraps()
{
    PutFistTrap(345);
    PutFistTrap(346);
    PutFistTrap(347);
    PutFistTrap(348);
    PutFistTrap(349);
    PutFistTrap(350);
    PutFistTrap(351);
    PutFistTrap(352);
    PutFistTrap(353);
}

void DarknessLongWayInit()
{
    int mobMake = SetupSwampMobSummon(343, 25);

    ObjectOff(self);

    Raise(mobMake, MuseumMobBomber);
    Raise(mobMake + 1, MuseumMobAlbinoSpider);
    Raise(mobMake + 2, MuseumMobImp);
    Raise(mobMake + 3, MuseumMobTalkingSkull);
    FrameTimerWithArg(1, mobMake, SwampMobSummonHandler);
    PutFireTrap(335);
    PutFireTrap(336);
    PutFireTrap(337);
    PutFireTrap(338);
    PutFireTrap(339);
    PutFireTrap(340);
    PutFireTrap(341);
    PutFireTrap(342);
    FrameTimer(1, PlaceFistTraps);
}

int LaiserSwordDamageBlock(int owner, int posUnit, int func)
{
    /////////////////////
    int unit = CreateObjectAt("ShopkeeperConjurerRealm", GetObjectX(posUnit), GetObjectY(posUnit));

    Frozen(unit, 1);
    //SetUnitFlags(unit, GetUnitFlags(unit) ^ 0x2000); //NO_PUSH_CHARACTERS
    //SetUnitMass(unit, 99999.0);
    SetOwner(owner, unit);
    SetCallback(unit, 9, LaiserSwordTouch);
    return unit;
}

void LaiserSwordTouch()
{
    int owner = GetOwner(self);

    if (IsObjectOn(self))
    {
        if (CurrentHealth(other) && CurrentHealth(owner) && IsAttackedBy(other, owner))
        {
            Damage(other, owner, 200, 14);
            Enchant(other, "ENCHANT_CHARMING", 0.09);
        }
    }
}

void LaiserSwordFx(int pUnit)
{
    int amount = ToInt(GetObjectZ(pUnit)), owner = GetOwner(pUnit), i, ptr;
    float xVect = UnitAngleCos(pUnit, 25.0), yVect = UnitAngleSin(pUnit, 25.0);
    int func;

    if (IsObjectOn(pUnit) && CurrentHealth(owner))
    {
        CancelTimer(FrameTimerWithArg(10, LaiserSwordTouch, LaiserSwordTouch));
        func = GetMemory(GetMemory(0x83395c) + 8);
        ptr = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(pUnit) + xVect, GetObjectY(pUnit) + yVect);
        for (i = amount ; i ; i --)
        {
            if (IsVisibleTo(pUnit, ptr))
            {
                DeleteObjectTimer(LaiserSwordDamageBlock(owner, ptr, func), 1);
                MoveObject(ptr, GetObjectX(ptr) + xVect, GetObjectY(ptr) + yVect);
            }
            else
                break;
        }
        Effect("SENTRY_RAY", GetObjectX(pUnit), GetObjectY(pUnit), GetObjectX(ptr), GetObjectY(ptr));
        Delete(ptr);
    }
    Delete(pUnit);
}

void ShotLaiserSword(int owner)
{
    int pUnit;

    if (HasEnchant(owner, "ENCHANT_VILLAIN")) return;
    pUnit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(owner), GetObjectY(owner));
    Raise(pUnit, ToFloat(10));
    SetOwner(owner, pUnit);
    LookWithAngle(pUnit, GetDirection(owner));
    FrameTimerWithArg(1, pUnit, LaiserSwordFx);
    Enchant(owner, "ENCHANT_VILLAIN", 1.0);
}

void UnitVisibleSplash()
{
    int parent = GetOwner(self);
    int spIdx = ToInt(GetObjectZ(parent + 1));

    if (CurrentHealth(GetOwner(parent)))
    {
        if (Distance(GetObjectX(self), GetObjectY(self), GetObjectX(other), GetObjectY(other)) <= GetObjectX(parent))
        {
            Damage(other, GetOwner(parent), ToInt(GetObjectZ(parent)), 14);
            Enchant(other, "ENCHANT_CHARMING", 0.08);
        }
    }
}

void SplashDamage(int owner, int dam, float x, float y, float range)
{
    int ptr = CreateObjectAt("InvisibleLightBlueHigh", range, y) + 2, k, SplashIdx;

    SplashIdx ++;
    Raise(CreateObjectAt("InvisibleLightBlueHigh", GetObjectX(ptr), GetObjectY(ptr)), SplashIdx);
    SetOwner(owner, ptr - 2);
    Raise(ptr - 2, ToFloat(dam));
    for (k = 0 ; k < 4 ; k ++)
    {
        DeleteObjectTimer(CreateObjectAt("WeirdlingBeast", x, y), 1);
        UnitNoCollide(ptr + k);
        LookWithAngle(ptr + k, k * 64);
        SetOwner(ptr - 2, ptr + k);
        SetCallback(ptr + k, 3, UnitVisibleSplash);
    }
    DeleteObjectTimer(ptr - 2, 2);
}

void WarpFlashSwordFx(int pUnit)
{
    int owner = GetOwner(pUnit);

    if (CurrentHealth(owner))
    {
        SplashDamage(owner, 125, GetObjectX(pUnit), GetObjectY(pUnit), 160.0);
        MoveWaypoint(1, GetObjectX(pUnit), GetObjectY(pUnit));
        DeleteObjectTimer(CreateObject("ManaBombCharge", 1), 21);
        AudioEvent("HecubahDieFrame194", 1);
        Effect("WHITE_FLASH", GetWaypointX(1), GetWaypointY(1), 0.0, 0.0);
    }
    Delete(pUnit);
}

void ShotWarpSword(int owner)
{
    int pUnit;

    if (HasEnchant(owner, "ENCHANT_VILLAIN")) return;
    pUnit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(owner), GetObjectY(owner));
    SetOwner(owner, pUnit);
    FrameTimerWithArg(1, pUnit, WarpFlashSwordFx);
    Enchant(owner, "ENCHANT_VILLAIN", 1.0);
}

void EnergyParTouch()
{
    int owner = GetOwner(GetTrigger() + 1);

    if (CurrentHealth(other) && IsAttackedBy(other, owner) && CurrentHealth(owner))
    {
        Damage(other, owner, 185, 14);
        Enchant(other, "ENCHANT_CHARMING", 0.2);
    }
}

void EnergyParFx(int pUnit)
{
    int count = GetDirection(pUnit), owner = GetOwner(pUnit), sub;

    while (IsObjectOn(pUnit))
    {
        if (CurrentHealth(owner) && count)
        {
            sub = DummyUnitCreateAt("Demon", GetObjectX(pUnit), GetObjectY(pUnit));
            SetOwner(owner, CreateObjectAt("PlayerWaypoint", GetObjectX(sub), GetObjectY(sub)));
            SetCallback(sub, 9, EnergyParTouch);
            DeleteObjectTimer(sub, 1);
            DeleteObjectTimer(sub + 1, 12);
            DeleteObjectTimer(FxBurnningZombie(GetObjectX(pUnit), GetObjectY(pUnit)), 21);
            MoveObject(pUnit, GetObjectX(pUnit) + GetObjectZ(pUnit), GetObjectY(pUnit) + GetObjectZ(pUnit + 1));
            if (IsVisibleTo(pUnit, pUnit + 1) || IsVisibleTo(pUnit + 1, pUnit))
            {
                LookWithAngle(pUnit, count - 1);
                FrameTimerWithArg(1, pUnit, EnergyParFx);
                break;
            }
        }
        Delete(pUnit);
        Delete(pUnit + 1);
        break;
    }
}

void ShotEnergyParSword(int owner)
{
    int pUnit;
    float xVect = UnitAngleCos(owner, 25.0), yVect = UnitAngleSin(owner, 25.0);

    if (HasEnchant(owner, "ENCHANT_VILLAIN")) return;
    pUnit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(owner) + xVect, GetObjectY(owner) + yVect);
    Raise(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(pUnit), GetObjectY(pUnit)), yVect);
    Raise(pUnit, xVect);
    SetOwner(owner, pUnit);
    LookWithAngle(pUnit, 16);
    FrameTimerWithArg(1, pUnit, EnergyParFx);
    Enchant(owner, "ENCHANT_VILLAIN", 1.0);
}

void RingOfArrowFx(int pUnit)
{
    int i, arr[37], owner = GetOwner(pUnit);

    if (CurrentHealth(owner))
    {
        for (i = 36 ; i ; i --)
        {
            arr[i] = UserDamageArrowCreateThing(owner, GetObjectX(pUnit) + MathSine(i * 10 + 90, 9.0), GetObjectY(pUnit) + MathSine(i * 10, 9.0), 75, 526);
            LookAtObject(arr[i], pUnit);
            LookWithAngle(arr[i], GetDirection(arr[i]) + 128);
            PushObject(arr[i], 22.0, GetObjectX(pUnit), GetObjectY(pUnit));
        }
    }
    Delete(pUnit);
}

void ShotRingOfArrow(int owner)
{
    int pUnit;

    if (HasEnchant(owner, "ENCHANT_VILLAIN")) return;

    pUnit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(owner), GetObjectY(owner));
    SetOwner(owner, pUnit);
    FrameTimerWithArg(1, pUnit, RingOfArrowFx);
    Enchant(owner, "ENCHANT_VILLAIN", 1.0);
}

void AlwaysAllEnchantments(int plr)
{
    if (CheckPlayerAllEncFlag(plr))
    {
        Enchant(player[plr], "ENCHANT_PROTECT_FROM_ELECTRICITY", 0.0);
        Enchant(player[plr], "ENCHANT_PROTECT_FROM_FIRE", 0.0);
        Enchant(player[plr], "ENCHANT_PROTECT_FROM_POISON", 0.0);
        Enchant(player[plr], "ENCHANT_REFLECTIVE_SHIELD", 0.0);
        Enchant(player[plr], "ENCHANT_VAMPIRISM", 0.0);
    }
}

int TrashWarpSummon(int location)
{
    string name = {"GauntletExitA", "GauntletExitB", "GauntletWarpExitA", "GauntletWarpExitB"};
    int exitUnit = CreateObject(ToStr(SToInt(name) + Random(0, 3)), location);

    SetUnitMass(exitUnit, 4.0);
    return exitUnit;
}

void PlacingGarageBlueKeys()
{
    RhombusPut(1, 1093.0, 1688.0, 2795.0, 3277.0);
    CreateObject("BlueOrbKeyOfTheLich", 1);
    RhombusPut(1, 1093.0, 1688.0, 2795.0, 3277.0);
    CreateObject("BlueOrbKeyOfTheLich", 1);
    RhombusPut(1, 1093.0, 1688.0, 2795.0, 3277.0);
    CreateObject("BlueOrbKeyOfTheLich", 1);
}

void PlacingExitTrash(int pUnit)
{
    int count = GetDirection(pUnit);

    if (IsObjectOn(pUnit))
    {
        if (count)
        {
            RhombusPut(1, 1093.0, 1688.0, 2795.0, 3277.0);
            TrashWarpSummon(1);
            LookWithAngle(pUnit, count - 1);
            FrameTimerWithArg(1, pUnit, PlacingExitTrash);
        }
        else
        {
            PlacingGarageBlueKeys();
            Delete(pUnit);
        }
    }
}

void PutBlueKeyGate()
{
    int idx = GetDirection(self);

    if (idx)
    {
        if (GetUnitThingID(other) ^ 2180) return;
        GreenSparkFx(GetObjectX(self), GetObjectY(self));
        Delete(other);
        ObjectOff(self);
        UnlockDoor(Object("BlueKeyGate" + IntToString(idx)));
        UnlockDoor(Object("BlueKeyGate" + IntToString(idx) + "1"));
        ObjectOn(Object("BlueGateBase" + IntToString(idx)));
    }
}

void DescBlueGateNpc()
{
    TellStoryUnitName("SwordsmanHurt", "Wiz05C.scr:BeginMission3", "게이트 키퍼");
    UniChatMessage(self, "이곳에 들어가려면, 당신은 이미 아랫층에서 파란색 리치열쇠 3개를 가져왔어야 한다!", 120);
}

void ResultBlueGateNpc()
{
    return;
}

void InitGarageRoom()
{
    int posU = CreateObject("InvisibleLightBlueLow", 358);
    int npc = DummyUnitCreate("WizardGreen", 362);

    LookWithAngle(posU, 180);
    FrameTimerWithArg(3, posU, PlacingExitTrash);
    LookWithAngle(npc, 96);
    SetDialog(npc, "NORMAL", DescBlueGateNpc, ResultBlueGateNpc);
    LookWithAngle(Object("BumpPad1"), 1);
    LookWithAngle(Object("BumpPad2"), 2);
    LookWithAngle(Object("BumpPad3"), 3);
}

void GarageUpElev()
{
    int mobMake;

    ObjectOff(self);
    mobMake = SetupSwampMobSummon(359, 30);
    Raise(mobMake, MuseumMobBat);
    Raise(mobMake + 1, MuseumMobBomber);
    Raise(mobMake + 2, MuseumMobFlying);
    Raise(mobMake + 3, MuseumMobTalkingSkull);
    FrameTimerWithArg(3, mobMake, SwampMobSummonHandler);
    SetupDungeonExit(361);
}

int ImportUseItemFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x1424748B; arr[3] = 0x18246C8B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUseItemFunc, ImportUseItemFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UseFastCurePotion()
{
    int loc;

    if (CurrentHealth(other))
    {
        loc = HomeLocation;
        if (IsVisibleTo(other, loc))
        {
            UniPrint(other, "이곳에서는 공간이동의 돌을 사용할 수 없습니다, 당신은 이미 피신처로 와 있습니다");
            return;
        }
        Effect("SMOKE_BLAST", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        Effect("COUNTERSPELL_EXPLOSION", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        MoveObject(other, GetObjectX(loc), GetObjectY(loc));
        Effect("TELEPORT", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
        Delete(self);
        UniPrint(other, "공간이동의 돌을 사용하여 안전한 피신처로 공간이동을 했습니다");
    }
}

int FastCurePotionCreate(int posUnit)
{
    int unit = CreateObjectAt("ProtectionEnchantments", GetObjectX(posUnit), GetObjectY(posUnit));
    int ptr = GetMemory(0x750710), func;

    if (!func)
    {
        CancelTimer(FrameTimerWithArg(10, UseFastCurePotion, UseFastCurePotion));
        func = GetMemory(GetMemory(0x83395c) + 8);
    }
    SetMemory(ptr + 0x2fc, func);
    SetMemory(ptr + 0x2dc, ImportUseItemFunc());
    return unit;
}

int ImportUnitCollideFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x14246C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUnitCollideFunc, ImportUnitCollideFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int ImportUnitDieFunc()
{
    int arr[9], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x8B565000; arr[2] = 0x8B102474; arr[3] = 0x0002FC86;
        arr[4] = 0x006A5600; arr[5] = 0x2454FF50; arr[6] = 0x0CC48314; arr[7] = 0xC483585E;
        arr[8] = 0x9090C304; 
        CancelTimer(FrameTimerWithArg(10, ImportUnitDieFunc, ImportUnitDieFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void WallTreeHandler()
{
    int temp = GetMemory(0x880dd4);

    SetMemory(0x880dd4, temp ^ 0x30000);
}

void ResetWallTreeInfo()
{
    SetMemory(0x880dd4, 0x53030100);
}

int GetPlayerAction(int plrUnit)
{
    //0x01- berserker, 0x05- run, 0x1a- laugh, 0x1b- point, 0x19- taunt, 12- Jump
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
    {
        if (GetMemory(ptr + 8) & 0x04)
            return GetMemory(GetMemory(ptr + 0x2ec) + 0x58) & 0xff;
    }
    return 0;
}

void HookAnkhTouched()
{
    if (CurrentHealth(other))
    {
        Damage(other, self, 10, 14);
        Effect("CYAN_SPARKS", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    }
}

int ObstacleAnkh(float xProfile, float yProfile, int func)
{
    int block = CreateObjectAt("Ankh", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 0x2b8, ImportUnitCollideFunc());
    SetMemory(ptr + 0x2fc, func);
    return block;
}

void RingAnkhObstacles(int location)
{
    int func, i;
    float xProfile = GetWaypointX(location), yProfile = GetWaypointY(location);

    CancelTimer(FrameTimerWithArg(10, HookAnkhTouched, HookAnkhTouched));
    func = GetMemory(GetMemory(0x83395c) + 8);
    for (i = 0 ; i < 18 ; i ++)
        ObstacleAnkh(xProfile + MathSine(i * 20 + 90, 98.0), yProfile + MathSine(i * 20, 98.0), func);
}

void ResetHostileCritter()
{
	SetMemory(0x833e64, 0x55b);		//CarnivorousPlant
	SetMemory(0x833e70, 1329);		//FishBig
	SetMemory(0x833e74, 1330);		//FishSmall
	SetMemory(0x833e78, 1359);		//Rat
	SetMemory(0x833e7c, 1313);		//GreenFrog
}

void SetHostileCritter()
{
	SetMemory(0x833e64, 0x540);		//CarnivorousPlant
	SetMemory(0x833e70, 0x540);		//FishBig
	SetMemory(0x833e74, 0x540);		//FishSmall
	SetMemory(0x833e78, 0x540);		//Rat
	SetMemory(0x833e7c, 0x540);		//GreenFrog
}

int MathAbs(int num)
{
    if (num < 0)
        num = -num;
    return num;
}

int CheckSignDelay(int sPtr, int gap)
{
    int cFps = GetMemory(0x84ea04);

    if (MathAbs(cFps - GetMemory(sPtr)) > gap)
    {
        SetMemory(sPtr, cFps);
        return 1;
    }
    return 0;
}

void SignNotification()
{
    int wDest[300];
    int otPtr = GetMemory(0x979720), sePtr = GetMemory(0x979724);
    int link;

    if (otPtr && sePtr)
    {
        if (CheckSignDelay(GetMemory(sePtr + 0x2e0) + 100, 60))
        {
            CancelTimer(FrameTimerWithArg(10, SignNotification, SignNotification));
            if (!link)
                link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
            NoxUtf8ToUnicode(GetMemory(GetMemory(sePtr + 0x2e0)), link);
            UniPrintCore(otPtr, link);
        }
    }
}

void RegistSignMessage(int sUnit, string sMsg)
{
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg);

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        //NoxUtf8ToUnicode(str, GetMemory(ptr + 0x2e0));
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        CancelTimer(FrameTimerWithArg(10, SignNotification, SignNotification));
        SetMemory(ptr + 0x2fc, GetMemory(GetMemory(0x83395c) + 8));
        SetMemory(GetMemory(ptr + 0x2e0), str);
    }
}

int ImportUniBroadcast()
{
    int arr[6], link;

    if (!link)
    {
        arr[0] = 0x4D9FD068; arr[1] = 0x72506800; arr[2] = 0x14FF0050; arr[3] = 0x106A5024;
        arr[4] = 0x0C2454FF; arr[5] = 0xC310C483;
        CancelTimer(FrameTimerWithArg(10, ImportUniBroadcast, ImportUniBroadcast));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniBroadcast(string sMsg)
{
    int wDest[300];
    int temp = GetMemory(0x5c3108), link, str = GetMemory(0x97bb40 + (SToInt(sMsg) * 4));

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, UniBroadcast, UniBroadcast));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    NoxUtf8ToUnicode(str, link + 4);
    SetMemory(0x5c3108, ImportUniBroadcast());
    Unused1f(link + 4);
    SetMemory(0x5c3108, temp);
}

int ImportUniChatCore()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0xC0685657; arr[1] = 0x6800528A; arr[2] = 0x00507250; arr[3] = 0x8B2414FF; arr[4] = 0x2414FFF8;
        arr[5] = 0x14FFF08B; arr[6] = 0x56505724; arr[7] = 0x102454FF; arr[8] = 0x5E14C483; arr[9] = 0x9090C35F;
        CancelTimer(FrameTimerWithArg(10, ImportUniChatCore, ImportUniChatCore));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniChatCore(int plrPtr, int sPtr, int sTime)
{
    int temp = GetMemory(0x5c3320);

    SetMemory(0x5c3320, ImportUniChatCore());
    GroupRunAway(sPtr, plrPtr, sTime);
    SetMemory(0x5c3320, temp);
}

int ImportUniPrintCore()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x9EB06856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x502414FF;
        arr[5] = 0x2454FF56; arr[6] = 0x10C4830C; arr[7] = 0x9090C35E; 
        CancelTimer(FrameTimerWithArg(10, ImportUniPrintCore, ImportUniPrintCore));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniPrintCore(int plrPtr, int sPtr)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportUniPrintCore());
    Unused5a(sPtr, plrPtr);
    SetMemory(0x5c31f4, temp);
}

int GetByteValue(int ptr)
{
    return GetMemory(ptr) & 0xff;
}

void WriteAddressWordValue(int addr, int word)
{
    int temp = GetMemory(addr) & 0xffff0000;
    SetMemory(addr, temp | word);
}

void NoxUtf8ToUnicode(int src, int dest)
{
    int i = 0, byt;

    while (1)
    {
        byt = GetByteValue(src + i);
        if (!byt) break;
        if (!(byt & 0x80))
        {
            WriteAddressWordValue(dest, byt);
            i ++;
        }
        else if ((byt & 0xe0) == 0xc0)
        {
            WriteAddressWordValue(dest, ((byt & 0x1f) <<6) | (GetByteValue(src + i + 1) & 0x3f));
            i += 2;
        }
        else if ((byt & 0xf0) == 0xe0)
        {
            WriteAddressWordValue(dest, ((byt & 0xf) << 12) | ((GetByteValue(src + i + 1) & 0x3f) << 6) | (GetByteValue(src + i + 2) & 0x3f));
            i += 3;
        }
        dest += 2;
    }
    WriteAddressWordValue(dest, 0);
}

void UniPrint(int sUnit, string sMsg)
{
    int wDest[300];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
        {
            CancelTimer(FrameTimerWithArg(10, UniPrint, UniPrint));
            link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        }
        NoxUtf8ToUnicode(str, link + 8);
        UniPrintCore(ptr, link + 8);
    }
}

void UniChatMessage(int sUnit, string sMsg, int duration)
{
    int wDest[300];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
        {
            CancelTimer(FrameTimerWithArg(10, UniChatMessage, UniChatMessage));
            link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        }
        NoxUtf8ToUnicode(str, link + 12);
        UniChatCore(ptr, link + 12, duration);
    }
}

void UniPrintToAll(string sMsg)
{
    int wDest[300];
    int plrPtr = 0x62f9e0, link, str = SToInt(sMsg), i;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, UniPrint, UniPrint));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c)) + 4;
    }
    str = GetMemory(0x97bb40 + (str * 4));
    NoxUtf8ToUnicode(str, link);
    for (i = 0 ; i < 32 ; i ++)
    {
        if (GetMemory(plrPtr))
            UniPrintCore(GetMemory(plrPtr), link);
        plrPtr += 0x12dc;
    }
}

int GetWordValue(int num, int idx)
{
	return (num >> (idx * 16)) & 0xffff;
}

void WriteAddressByteValue(int addr, int byt)
{
	int temp = GetMemory(addr) & 0xffffff00;
	SetMemory(addr, temp | byt);
}

int NoxUnicodeToUtf8(int src, int dest)
{
	int pic = GetMemory(src), i, byt;

	for (i = 0 ; i < 2 ; i ++)
	{
		byt = GetWordValue(pic, i);
		if (byt < 0x80)
		{
			WriteAddressByteValue(dest, byt);
			dest ++;
		}
		else if (byt < 0x800)
		{
			WriteAddressByteValue(dest, ((byt >> 6) & 0x1f) | 0xc0);
			WriteAddressByteValue(dest + 1, (byt & 0x3f) | 0x80);
			dest += 2;
		}
		else
		{
			WriteAddressByteValue(dest, ((byt >> 12) & 0x0f) | 0xe0);
			WriteAddressByteValue(dest + 1, ((byt >> 6) & 0x3f) | 0x80);
			WriteAddressByteValue(dest + 2, (byt & 0x3f) | 0x80);
			dest += 3;
		}
	}
	return dest;
}

void SignObjectPreProcess()
{
    RegistSignMessage(Object("GSign1"), "니코니코니~");
    RegistSignMessage(Object("GSign2"), "통로를 따라 문을 열고 나간 후 중앙에 위치한 전설의 바위로 다가가시오");
    RegistSignMessage(Object("GSign3"), "정신없이 어질러진 이곳 어딘가 파란색 리치열쇠 두개가 있다. 찾아서 엘리베이터를 타고 위로 올라기시오");
    RegistSignMessage(Object("GSign4"), "세개 구역 각각에 스위치가 하나씩 있다. 스위치를 모두 열어야 나가는 벽이 하나씩 열린다");
    RegistSignMessage(Object("GSign5"), "이건 진짜 무모한 도전이다...");
    RegistSignMessage(Object("GSign6"), "소지하고 계신 모든 물건의 내구도를 무적으로 만들어 드려요~ 이용 결제금액: 3천골드~!");
    RegistSignMessage(Object("GSign7"), "여기저기 널린 통 속에 리치열쇠가 들어있어요~ 그것을 찾은 후 이 스위치를 조작해보세요");
    RegistSignMessage(Object("GSign8"), "거미를 꺼진 횃불 주변으로 데려오면 횃불에 불이 붙을 것이다... 모든 횃불을 켜라!");
    RegistSignMessage(Object("GSign9"), "통수 조심...");
    RegistSignMessage(Object("GSign10"), "주의! 이 표지판 뒤쪽 벽을 부수면 큰일날 수도 있음");
    RegistSignMessage(Object("GSign11"), "던전으로 들어가려면 비콘위에 가만히 서서 기다린다");
    RegistSignMessage(Object("GSign12"), "당신의 삶도 이제 얼마남지 않았어!");
}

void ExpandCampainInit()
{
    int mobMake = SetupSwampMobSummon(363, 64);

    Raise(mobMake, MuseumMobLeech);
    Raise(mobMake + 1, MuseumMobGreenFrog);
    Raise(mobMake + 2, MuseumMobImp);
    Raise(mobMake + 3, MuseumMobSmallSpider);
    FrameTimerWithArg(3, mobMake, SwampMobSummonHandler);
    SignObjectPreProcess();
}

int ImportTellStoryUniNamePartB()
{
    int arr[84], link;

    if (!link)
    {
        arr[0] = 0x0424448B; arr[1] = 0x0824548B; arr[2] = 0x008CEC81; arr[3] = 0xC0850000; arr[4] = 0xEC9A8B53; arr[5] = 0x55000002; arr[6] = 0x02ECA88B;
        arr[7] = 0x0F570000; arr[8] = 0x00012184; arr[9] = 0x0840F600; arr[10] = 0x17840F04; arr[11] = 0x8B000001; arr[12] = 0x00A824BC; arr[13] = 0xFF850000;
        arr[14] = 0x0108840F; arr[15] = 0xC9830000; arr[16] = 0x89C033FF; arr[17] = 0x00011C95; arr[18] = 0xAEF25600; arr[19] = 0x748DD1F7; arr[20] = 0xF92B1624;
        arr[21] = 0x7489C18B; arr[22] = 0xF78B1024; arr[23] = 0x10247C8B; arr[24] = 0xC602E9C1; arr[25] = 0xD0142444; arr[26] = 0x152444C6; arr[27] = 0x8BA5F303;
        arr[28] = 0x5CC868C8; arr[29] = 0x1F6A0056; arr[30] = 0xF303E183; arr[31] = 0xC9C8B8A4; arr[32] = 0x4C8D0069; arr[33] = 0x51503E24; arr[34] = 0x0C2454FF;
        arr[35] = 0xB824848B; arr[36] = 0x66000000; arr[37] = 0x842484C7; arr[38] = 0x00000000; arr[39] = 0x38938A00; arr[40] = 0x8D000008; arr[41] = 0x00083ABB;
        arr[42] = 0x24948800; arr[43] = 0x000000AA; arr[44] = 0x86248489; arr[45] = 0x8A000000; arr[46] = 0x10C48307; arr[47] = 0x2374C084; arr[48] = 0x31FFC983;
        arr[49] = 0xF7AEF2C0; arr[50] = 0x8DCF29D1; arr[51] = 0x8B7A2454; arr[52] = 0x8BF78BC1; arr[53] = 0x02E9C1FA; arr[54] = 0xC88BA5F3; arr[55] = 0xF303E183;
        arr[56] = 0x8B2FEBA4; arr[57] = 0x5CD1640D; arr[58] = 0x68158B00; arr[59] = 0xA1005CD1; arr[60] = 0x005CD16C; arr[61] = 0x7A244C89; arr[62] = 0x700D8B66;
        arr[63] = 0x89005CD1; arr[64] = 0x897E2454; arr[65] = 0x00822484; arr[66] = 0x89660000; arr[67] = 0x0086248C; arr[68] = 0x858B0000; arr[69] = 0x00000114;
        arr[70] = 0x4E542068; arr[71] = 0x31016A00; arr[72] = 0x8A006AC9; arr[73] = 0x00081088; arr[74] = 0x24548D00; arr[75] = 0x00876820; arr[76] = 0x51520000;
        arr[77] = 0x142454FF; arr[78] = 0xB424948B; arr[79] = 0x6A000000; arr[80] = 0xC4835200; arr[81] = 0x5D5F5E20; arr[82] = 0x8CC4815B; arr[83] = 0xC3000000;
        CancelTimer(FrameTimerWithArg(10, ImportTellStoryUniNamePartB, ImportTellStoryUniNamePartB));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int ImportTellStoryUniNamePartA()
{
    int arr[19], link;

    if (!link)
    {
        arr[0] = 0x8DE06856; arr[1] = 0x50680054; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x8B2414FF; 
        arr[5] = 0xBB40B50C; arr[6] = 0x148B0097; arr[7] = 0x97BB4085; arr[8] = 0x50685100; arr[9] = 0x520040AF; 
        arr[10] = 0x042454FF; arr[11] = 0x97200D8B; arr[12] = 0xC4830097; arr[13] = 0x24A15008; arr[14] = 0x50009797; 
        arr[15] = 0x2454FF51; arr[16] = 0x10C48314; arr[17] = 0xC483C031; arr[18] = 0x90C35E08;
        CancelTimer(FrameTimerWithArg(10, ImportTellStoryUniNamePartA, ImportTellStoryUniNamePartA));
		link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        SetMemory(link + 2, ImportTellStoryUniNamePartB());
    }
    return link;
}

void TellStoryUnitName(string sAudio, string sDesc, string sUnitName)
{
    int temp = GetMemory(0x5c3290), src = GetMemory(0x97bb40 + (SToInt(sUnitName) * 4));

    SetMemory(0x5c3290, ImportTellStoryUniNamePartA());
    NoxUtf8ToUnicode(src, 0x69C9C8);
    TellStory(sAudio, sDesc);
    SetMemory(0x5c3290, temp);
}

int ImportRemoveSneakDelay()
{
    int arr[7], link;

    if (!link)
    {
        arr[0] = 0x72506850; arr[1] = 0x14FF0050; arr[2] = 0xC3006824; arr[3] = 0x046A004F; arr[4] = 0x2454FF50; arr[5] = 0x10C48308; arr[6] = 0x9090C358;
        CancelTimer(FrameTimerWithArg(10, ImportRemoveSneakDelay, ImportRemoveSneakDelay));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void RemoveTreadLightly(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit), temp = GetMemory(0x5c336c);

    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 0x04)
        {
            SetMemory(0x5c336c, ImportRemoveSneakDelay());
            Unknownb8(ptr);
            SetMemory(0x5c336c, temp);
        }
    }
}

int ImportCheckSelfDamage()
{
    int arr[14], link;

    if (!link)
    {
        arr[0] = 0x4C8B5651; arr[1] = 0xC9850C24; arr[2] = 0x748B2374; arr[3] = 0xF6851024; arr[4] = 0xF1391B74; arr[5] = 0x8B501374; arr[6] = 0x0001FC86;
        arr[7] = 0x74C08500; arr[8] = 0x58F08B05; arr[9] = 0xEB58ECEB; arr[10] = 0xC3595E04; arr[11] = 0x68595E90; arr[12] = 0x004E17B0; arr[13] = 0x909090C3;
        CancelTimer(FrameTimerWithArg(10, ImportCheckSelfDamage, ImportCheckSelfDamage));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void SelfDamageClassEntry(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        SetMemory(ptr + 0x2cc, ImportCheckSelfDamage());
}

void SelfDamageClassMapExit()
{
    int pTable = 0x62f9e0, i;

    for (i = 31 ; i >= 0 ; i --)
    {
        if (GetMemory(pTable))
        {
            SetMemory(GetMemory(pTable) + 0x2cc, 0x4e17b0);
            SetMemory(GetMemory(pTable) + 0x2d4, 0x54d2b0);
        }
        pTable += 0x12dc;
    }
}