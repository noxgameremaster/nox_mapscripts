//@ignore_object_type

int player[20], LastUnitID = 569;
int Gvar_2[10];
int KillScore; //current_kills
int Shutdown; //승패 유무 1일때 게임종료.
int Victim[200]; //몬스터 유닛의 배열입니다.
int EnableMemoryReadWriteFunction(int t) {}


float UnitRatioX(int unit, int target, float size)
{
    return (GetObjectX(unit) - GetObjectX(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float UnitRatioY(int unit, int target, float size)
{
    return (GetObjectY(unit) - GetObjectY(target)) * size / Distance(GetObjectX(unit), GetObjectY(unit), GetObjectX(target), GetObjectY(target));
}

float MathSine(int angle, float size)
{
    float var_0[91];
    int i, k;
 
    if (!ToInt(var_0[90]))
    {
        MoveWaypoint(angle + 1, GetWaypointX(angle), GetWaypointY(angle) - 1.0);
        for (i = 0 ; i <= 90 ; i ++)
        {
            var_0[i] = GetSineValue(angle, size);
            Delete(k + i + 1);
        }
        return var_0[0];
    }
    k = angle / 90;
    i = angle - (k * 90);

    if (k % 2) i = 90 - i;
    if ((angle / 180) % 2) return -var_0[i] * size;
	else return var_0[i] * size;
}

float GetSineValue(int wp, float c)
{
    float x_ratio = WayRatioX(wp, wp + 1), y_ratio = WayRatioY(wp, wp + 1), res;

    res = GetWaypointX(wp) - GetWaypointX(wp + 1);
    MoveWaypoint(wp + 1, GetWaypointX(wp) - (c * y_ratio) - x_ratio, GetWaypointY(wp) + (c * x_ratio) - y_ratio);
    return res;
}

float WayRatioX(int wp1, int wp2)
{
    return (GetWaypointX(wp1) - GetWaypointX(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float WayRatioY(int wp1, int wp2)
{
    return (GetWaypointY(wp1) - GetWaypointY(wp2)) * 1.0 / Distance(GetWaypointX(wp1), GetWaypointY(wp1), GetWaypointX(wp2), GetWaypointY(wp2));
}

float UnitAngleCos(int unit, float size)
{
    return MathSine((GetDirection(unit) * 45 / 32) + 90, size);
}

float UnitAngleSin(int unit, float size)
{
    return MathSine(GetDirection(unit) * 45 / 32, size);
}

int MapWaypointTable(int idx)
{
    int table[255];

    return table[idx - 1];
}

float LocationX(int location)
{
    StopScript(GetMemory(MapWaypointTable(location) + 8));
}

float LocationY(int location)
{
    StopScript(GetMemory(MapWaypointTable(location) + 12));
}

void MapWaypointFill(int wAddr, int tPtr)
{
    int num;

    if (wAddr)
    {
        num = GetMemory(wAddr);
        SetMemory(tPtr + (num * 4), wAddr);
        MapWaypointFill(GetMemory(wAddr + 484), tPtr);
    }
}

void MapWaypointInit()
{
    int tableLink;

    CancelTimer(FrameTimerWithArg(10, MapWaypointTable, MapWaypointTable));
    tableLink = GetMemory(GetMemory(0x75ae28) + ((0x30 * GetMemory(GetMemory(0x83395c) + 8)) + 0x1c));
    MapWaypointFill(GetMemory(0x83c7fc), tableLink);
}

int ImportPlaySoundAround()
{
	int arr[17], link;

	if (!link)
	{
		arr[0] = 0x50196068; arr[1] = 0x72506800; arr[2] = 0x50560050; arr[3] = 0x082454FF;
		arr[4] = 0x54FFF08B; arr[5] = 0x006A0824; arr[6] = 0x5650006A; arr[7] = 0x1C2454FF;
		arr[8] = 0x5810C483; arr[9] = 0x08C4835E; arr[10] = 0x909090C3;
		CancelTimer(FrameTimerWithArg(10, ImportPlaySoundAround, ImportPlaySoundAround));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

void PlaySoundAround(int sUnit, int sNumber)
{
	int unitPtr = UnitToPtr(sUnit), temp = GetMemory(0x5c325c);

	if (unitPtr)
	{
		SetMemory(0x5c325c, ImportPlaySoundAround());
		Unused74(unitPtr, sNumber);
		SetMemory(0x5c325c, temp);
	}
}

void SetUnitFlags(int unit, int flag)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(ptr + 0x10, flag);
}

int GetUnitFlags(int unit)
{
	int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x10);
    return 0;
}

void SetUnitMaxHealth(int unit, int amount)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x22c), amount);
        SetMemory(GetMemory(ptr + 0x22c) + 0x4, amount);
    }
}

void UnitZeroFleeRange(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        SetMemory(GetMemory(ptr + 0x2ec) + 0x54c, 0); //Flee Range set to 0
}

int VoiceList(int num)
{
    int list[75], addr, k;

    if (!list[0])
    {
        addr = GetMemory(0x663eec);
        for (k = 0 ; k < 75 ; k ++)
        {
            list[k] = addr;
            addr = GetMemory(addr + 0x4c);
        }
    }
    return list[num];
}

int ImportCreateAtFunc()
{
    int arr[20], link;

    if (!link)
    {
        arr[0] = 0xAA506856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xFF502414; arr[4] = 0x50042454;
        arr[5] = 0x082454FF; arr[6] = 0x4085048B; arr[7] = 0x680097BB; arr[8] = 0x004E3810; arr[9] = 0x2454FF50;
        arr[10] = 0x08C48304; arr[11] = 0xF685F08B; arr[12] = 0x006A0A74; arr[13] = 0x2454FF56; arr[14] = 0x08C48314;
        arr[15] = 0x50723068; arr[16] = 0x54FF5600; arr[17] = 0xC4830424; arr[18] = 0x5EC03118; arr[19] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportCreateAtFunc, ImportCreateAtFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int CreateObjectAt(string name, float x, float y)
{
    int temp = GetMemory(0x5c3160), res;

    SetMemory(0x5c3160, ImportCreateAtFunc());
    res = CreateMover(SToInt(name), ToInt(x), y);
    SetMemory(0x5c3160, temp);
    if (res) return GetMemory(res + 0x2c);
    else return 0;
}

void CalleeArg(int arg)
{
    CalleeArg(arg);
}

void CallFunctionWithArg(int func, int arg)
{
    int link;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, CalleeArg, CalleeArg));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x20));
    }
    else
    {
        SetMemory(link + 0x10, func);
        CalleeArg(arg);
    }
}

void ChangeColorMaiden(int red, int grn, int blue, int unit)
{
    int ptr1 = UnitToPtr(unit), k, num;

    if (!ptr1) return;
    SetMemory(ptr1 + 4, 1385);  //TODO: Maiden Unit Thing ID
    for (k = 0 ; k < 32 ; k ++)
        SetMemory(ptr1 + 0x230 + (k * 4), 0x400);
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x178, 0xa0);
    // R  G  B  R    G  B  R  G    B  R  G  B    R  G  B  R    G  B 
    // 00 ff 00 00 / ff 00 00 ff / 00 00 ff 00 / 00 ff 00 00 / ff 00 00
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 4, grn | (blue << 8) | (red << 16) | (grn << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 8, blue | (red << 8) | (grn << 16) | (blue << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 12, red | (grn << 8) | (blue << 16) | (red << 24));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x81c + 16, grn | (blue << 8));
    SetMemory(GetMemory(ptr1 + 0x2ec) + 0x1e8, VoiceList(7));
}

int WizardRedBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1635412311; arr[1] = 1699898482; arr[2] = 100; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 100; arr[18] = 30; arr[19] = 50; 
		arr[20] = 1045220557; arr[21] = 1061158912; arr[22] = 0; arr[23] = 32; arr[24] = 1067869798; 
		arr[25] = 0; arr[26] = 4; arr[27] = 0; arr[28] = 0; arr[29] = 0; 
		arr[30] = 0; arr[31] = 0; arr[32] = 0; arr[33] = 0; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 1751607628; arr[38] = 1852403316; arr[39] = 1819230823; 
		arr[40] = 116; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 1073741824; arr[54] = 0; 
		arr[55] = 12; arr[56] = 20; arr[57] = 0; arr[58] = 0; arr[59] = 0; 
		CancelTimer(FrameTimerWithArg(10, WizardRedBinTable, WizardRedBinTable));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int MaidenBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1684627789; arr[1] = 28261;arr[17] = 30; arr[18] = 92; arr[19] = 60; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 32776; arr[24] = 1065688760; 
		arr[25] = 0; arr[26] = 0; arr[27] = 1; arr[28] = 1106247680; arr[29] = 22; 
		arr[30] = 1101004800; arr[31] = 2; arr[32] = 22; arr[33] = 30; arr[58] = 5546320; arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, MaidenBinTable, MaidenBinTable));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int GoonBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1852796743; arr[1] = 0; arr[2] = 0; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 85; arr[18] = 0; arr[19] = 15; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 32776; arr[24] = 1066192077; 
		arr[25] = 0; arr[26] = 0; arr[27] = 1; arr[28] = 1106247680; arr[29] = 15; 
		arr[30] = 1092616192; arr[31] = 4; arr[32] = 20; arr[33] = 28; arr[34] = 1; 
		arr[35] = 2; arr[36] = 20; arr[37] = 0; arr[38] = 0; arr[39] = 0; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 0; arr[54] = 0; 
		arr[55] = 0; arr[56] = 0; arr[57] = 5548176; arr[58] = 5546608; arr[59] = 5543680; 
		CancelTimer(FrameTimerWithArg(10, GoonBinTable, GoonBinTable));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int StrongWizardWhiteBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1869771859; arr[1] = 1767335790; arr[2] = 1685217658; arr[3] = 1953065047; arr[4] = 101; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 80000; arr[17] = 200; arr[18] = 55; arr[19] = 60; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 8; arr[24] = 1069547520; 
		arr[25] = 0; arr[26] = 0; arr[27] = 0; arr[28] = 0; arr[29] = 0; 
		arr[30] = 0; arr[31] = 0; arr[32] = 0; arr[33] = 0; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 1701996870; arr[38] = 1819042146; arr[39] = 0; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 1128792064; arr[54] = 4; 
		arr[55] = 20; arr[56] = 30; arr[57] = 5547984; arr[58] = 0; arr[59] = 0; 
		CancelTimer(FrameTimerWithArg(10, StrongWizardWhiteBinTable, StrongWizardWhiteBinTable));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int WeirdlingBeastBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1919509847; arr[1] = 1852402788; arr[2] = 1634026087; arr[3] = 29811; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 85; arr[18] = 50; arr[19] = 55; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 32776; arr[24] = 1068708659; 
		arr[25] = 0; arr[26] = 4; arr[27] = 0; arr[28] = 1082130432; arr[29] = 20; 
		arr[30] = 0; arr[31] = 2; arr[32] = 8; arr[33] = 16; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 0; arr[38] = 0; arr[39] = 0; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 0; arr[54] = 0; 
		arr[55] = 0; arr[56] = 0; arr[57] = 5548112; arr[58] = 0; arr[59] = 5542784; 
		CancelTimer(FrameTimerWithArg(10, WeirdlingBeastBinTable, WeirdlingBeastBinTable));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int BlackWidowBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1667329090; arr[1] = 1684625259; arr[2] = 30575; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 130; arr[18] = 45; arr[19] = 85; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 4; arr[24] = 1069547520; 
		arr[25] = 0; arr[26] = 4; arr[27] = 3; arr[28] = 1097859072; arr[29] = 25; 
		arr[30] = 0; arr[31] = 8; arr[32] = 13; arr[33] = 21; arr[34] = 50; 
		arr[35] = 3; arr[36] = 6; arr[37] = 1684631635; arr[38] = 1884516965; arr[39] = 29801; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 1128792064; arr[54] = 0; 
		arr[55] = 20; arr[56] = 28; arr[57] = 0; arr[58] = 0; arr[59] = 5544896; 
		arr[60] = 0; arr[61] = 45071360; 
		CancelTimer(FrameTimerWithArg(10, BlackWidowBinTable, BlackWidowBinTable));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int FireSpriteBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1701996870; arr[1] = 1769107539; arr[2] = 25972; arr[3] = 0; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 85; arr[18] = 25; arr[19] = 70; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 65544; arr[24] = 1065353216; 
		arr[25] = 0; arr[26] = 0; arr[27] = 0; arr[28] = 0; arr[29] = 0; 
		arr[30] = 0; arr[31] = 0; arr[32] = 0; arr[33] = 0; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 1801545047; arr[38] = 1701996870; arr[39] = 1819042146; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 1128792064; arr[54] = 0; 
		arr[55] = 15; arr[56] = 21; arr[57] = 0; arr[58] = 5545472; arr[59] = 0; 
		CancelTimer(FrameTimerWithArg(10, FireSpriteBinTable, FireSpriteBinTable));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int AirshipCaptainBinTable()
{
	int arr[62], link;
	if (!link)
	{
		arr[0] = 1936877889; arr[1] = 1131440488; arr[2] = 1635020897; arr[3] = 28265; arr[4] = 0; 
		arr[5] = 0; arr[6] = 0; arr[7] = 0; arr[8] = 0; arr[9] = 0; 
		arr[10] = 0; arr[11] = 0; arr[12] = 0; arr[13] = 0; arr[14] = 0; 
		arr[15] = 0; arr[16] = 0; arr[17] = 130; arr[18] = 100; arr[19] = 60; 
		arr[20] = 0; arr[21] = 1065353216; arr[22] = 0; arr[23] = 32768; arr[24] = 1067869798; 
		arr[25] = 0; arr[26] = 4; arr[27] = 0; arr[28] = 1077936128; arr[29] = 20; 
		arr[30] = 0; arr[31] = 8; arr[32] = 12; arr[33] = 20; arr[34] = 0; 
		arr[35] = 0; arr[36] = 0; arr[37] = 0; arr[38] = 0; arr[39] = 0; 
		arr[40] = 0; arr[41] = 0; arr[42] = 0; arr[43] = 0; arr[44] = 0; 
		arr[45] = 0; arr[46] = 0; arr[47] = 0; arr[48] = 0; arr[49] = 0; 
		arr[50] = 0; arr[51] = 0; arr[52] = 0; arr[53] = 0; arr[54] = 0; 
		arr[55] = 0; arr[56] = 0; arr[57] = 5547984; arr[58] = 5546320; arr[59] = 5542432; 
		CancelTimer(FrameTimerWithArg(10, AirshipCaptainBinTable, AirshipCaptainBinTable));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int GetUnitThingID(int unit)
{
    int ptr = UnitToPtr(unit);

    if (ptr)
        return GetMemory(ptr + 0x4);
    return 0;
}

void SetUnitStatus(int unit, int stat)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            SetMemory(temp + 0x5a0, stat);
    }
}

int GetUnitStatus(int unit)
{
    int temp, ptr = UnitToPtr(unit);

    if (ptr)
    {
        temp = GetMemory(ptr + 0x2ec);
        if (temp)
            return GetMemory(temp + 0x5a0);
    }
    return 0;
}

void CheckMonsterThing(int unit)
{
    int arr[97], init;
    int thingID = GetUnitThingID(unit);
    int key = thingID % 97;

    if (!init)
    {
        init = 1;
        arr[5] = 1; arr[72] = 2; arr[30] = 3; arr[34] = 4; arr[6] = 5; arr[12] = 6;
        arr[73] = 7; arr[29] = 8;
    }
    if (thingID)
    {
        CallFunctionWithArg(MonsterProcessFunction() + arr[key], unit);
    }
}

int MonsterProcessFunction()
{
    StopScript(DefaultMonsterProcess);
}

void DefaultMonsterProcess(int unit)
{
    return;
}

void MonsterGoonProcess(int unit)
{
    //TODO: Index. 1, ThingName= Goon
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(63));       //MimicVoice
        SetUnitMaxHealth(unit, 130);
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, GoonBinTable());
    }
}

void MonsterStrongWhiteWizProcess(int unit)
{
    //TODO: Index. 2, ThingName= StrongWizardWhite
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(34));       //HorvathVoice
        SetUnitMaxHealth(unit, 200);
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, StrongWizardWhiteBinTable());
    }
}

void MonsterWeirdlingBeastProcess(int unit)
{
    //TODO: Index. 3, ThingName= WeirdlingBeast
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        UnitZeroFleeRange(unit);
        //SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(34));       //HorvathVoice
        SetUnitMaxHealth(unit, 150);
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, WeirdlingBeastBinTable());
    }
}

void MonsterBlackWidowProcess(int unit)
{
    //TODO: Index. 4, ThingName= BlackWidow
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e8, VoiceList(19));       //HorvathVoice
        SetUnitMaxHealth(unit, 225);
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, BlackWidowBinTable());
    }
}

void MonsterBear2Process(int unit)
{
    //TODO: Index. 5, ThingName= Bear2 -> Maiden
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        ChangeColorMaiden(Random(0, 255), Random(0, 255), Random(0, 255), unit);
        SetUnitMaxHealth(unit, 325);
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, MaidenBinTable());
    }
}

void MonsterFireSpriteProcess(int unit)
{
    //TODO: Index. 6, ThingName= FireSprite
    int ptr = UnitToPtr(unit);

    if (ptr)
    {
        SetUnitMaxHealth(unit, 135);
        SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x10000);
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, FireSpriteBinTable());
    }
}

void MonsterWizardRedProcess(int unit)
{
    //TODO: Index. 7, ThingName= WizardRed
    int ptr = UnitToPtr(unit), uec;

    if (ptr)
    {
        UnitZeroFleeRange(unit);
        SetUnitMaxHealth(unit, 225);
        uec = GetMemory(ptr + 0x2ec);
        if (uec)
        {
            SetUnitStatus(unit, GetUnitStatus(unit) ^ 0x20);
            SetMemory(uec + 0x528, ToInt(1.0));
            SetMemory(uec + 0x520, ToInt(300.0));
            uec += 0x5d0;
            SetMemory(uec + GetSpellNumber("SPELL_MAGIC_MISSILE"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_SHIELD"), 0x10000000);
            SetMemory(uec + GetSpellNumber("SPELL_STUN"), 0x20000000);
            SetMemory(uec + GetSpellNumber("SPELL_SHOCK"), 0x10000000);
            SetMemory(uec + GetSpellNumber("SPELL_FIREBALL"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_DEATH_RAY"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_BURN"), 0x40000000);
            SetMemory(uec + GetSpellNumber("SPELL_INVERSION"), 0x08000000);
            SetMemory(uec + GetSpellNumber("SPELL_COUNTERSPELL"), 0x08000000);
        }
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, WizardRedBinTable());
    }
}

void MonsterAirshipCaptainProcess(int unit)
{
    //TODO: Index. 8, ThingName= AirshipCaptain
    int ptr = UnitToPtr(unit), uec;

    if (ptr)
    {
        SetUnitMaxHealth(unit, 250);
        RetreatLevel(unit, 0.0);
        ResumeLevel(unit, 1.0);
        SetMemory(GetMemory(ptr + 0x2ec) + 0x1e4, AirshipCaptainBinTable());
    }
}

int ImportGetSpellNumber()
{
	int arr[11], link;
	if (!link)
	{
		arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x4085048B; arr[3] = 0x680097BB; arr[4] = 0x004243F0; arr[5] = 0x2454FF50;
		arr[6] = 0x08C48304; arr[7] = 0x50723068; arr[8] = 0x54FF5000; arr[9] = 0xC4830424; arr[10] = 0xC3C0310C;
        CancelTimer(FrameTimerWithArg(10, ImportGetSpellNumber, ImportGetSpellNumber));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
	}
	return link;
}

int GetSpellNumber(string spell)
{
	int temp = GetMemory(0x5c3204), res;

	SetMemory(0x5c3204, ImportGetSpellNumber());
	res = Unused5e(spell);
	SetMemory(0x5c3204, temp);
	return res * 4;
}

int ImportUnitToPtrFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50725068; arr[1] = 0x2414FF00; arr[2] = 0x511B6068; arr[3] = 0x54FF5000; arr[4] = 0xC4830424;
        arr[5] = 0x7230680C; arr[6] = 0xFF500050; arr[7] = 0x83042454; arr[8] = 0xC03108C4; arr[9] = 0x909090C3; 
        CancelTimer(FrameTimerWithArg(10, ImportUnitToPtrFunc, ImportUnitToPtrFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int UnitToPtr(int unit)
{
    int temp = GetMemory(0x5c336c), res;
    SetMemory(0x5c336c, ImportUnitToPtrFunc());
    res = Unknownb8(unit);
    SetMemory(0x5c336c, temp);
	return res;
}

int GetOwner(int unit)
{
    int ptr = UnitToPtr(unit), res;

    if (ptr)
    {
        res = GetMemory(ptr + 0x1fc);
        if (res)
            return GetMemory(res + 0x2c);
    }
    return 0;
}

int CreateMoverFix(int targetUnit, int destLocation, float speed)
{
    int unitMover = CreateMover(targetUnit, destLocation, speed), unitPtr = UnitToPtr(targetUnit);
    int movPtr;

    if (unitMover)
    {
        movPtr = UnitToPtr(unitMover);
        if (movPtr && unitPtr)
        {
            SetMemory(unitPtr + 0x28, LastUnitID);
            movPtr = GetMemory(movPtr + 0x2ec);
            SetMemory(movPtr + 0x20, LastUnitID);
        }
    }
    LastUnitID ++;

    return unitMover;
}

int GetMemory(int addr)
{
    return Unknownb9(addr);
}

void SetMemory(int addr, int value)
{
    Unused59(addr, value);
}

void ImportBinTable()
{
    BlackWidowBinTable();
    AirshipCaptainBinTable();
    FireSpriteBinTable();
    GoonBinTable();
    MaidenBinTable();
    StrongWizardWhiteBinTable();
    WeirdlingBeastBinTable();
    WizardRedBinTable();
}

void MapInitialize()
{
    int t = EnableMemoryReadWriteFunction(0);

    MusicEvent();
    ImportBinTable();
    ImportCreateAtFunc();
    ImportUnitToPtrFunc();
    ImportUniChatCore();
    ImportUniPrintCore();
    MapWaypointInit();
    VoiceList(0);
    CheckMonsterThing(getMaster());
    MathSine(1, 1.0 / 57.3);
    MoveWaypoint(40, GetWaypointX(20), GetWaypointY(20));
    PlacedPotions();
    mobHp(-1);
    unitName(-1);
    FrameTimerWithArg(1, Object("StartLocation"), StartLocationOn);
    FrameTimer(1, InitMapSign);
    FrameTimerWithArg(100, GetHost(), SelectRoomToHostPlayer);
}

int ImportPlayerAutoTeamSign()
{
    int arr[17], link;

    if (!link)
    {
        arr[0] = 0x4191D068; arr[1] = 0x50515600; arr[2] = 0x000020B9; arr[3] = 0xF9E0B800; arr[4] = 0xC9850062;
        arr[5] = 0x8B492774; arr[6] = 0x12DC0530; arr[7] = 0xF6850000; arr[8] = 0x5150F074; arr[9] = 0x8D24468B;
        arr[10] = 0x016A304E; arr[11] = 0x51016A50; arr[12] = 0x54FF016A; arr[13] = 0xC4832824; arr[14] = 0xEB585914;
        arr[15] = 0x5E5958D5; arr[16] = 0xC304C483;
        CancelTimer(FrameTimerWithArg(10, ImportPlayerAutoTeamSign, ImportPlayerAutoTeamSign));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void PlayerAutoTeamSign()
{
    int temp = GetMemory(0x5c3178);

    SetMemory(0x5c3178, ImportPlayerAutoTeamSign());
    GetHost();
    SetMemory(0x5c3178, temp);
}

void MakeCoopTeam()
{
    int arr[3];
    int teamCount = GetMemory(0x654D5C), temp, link;

    if (!teamCount && !link)
    {
        arr[0] = 0x417E1068; arr[1] = 0x2414FF00; arr[2] = 0xC304C483;
        CancelTimer(FrameTimerWithArg(10, MakeCoopTeam, MakeCoopTeam));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        temp = GetMemory(0x5c3178);
        SetMemory(0x5c3178, link);
        GetHost();
        SetMemory(0x5c3178, temp);
        SetMemory(0x5d53a4, 268640519);
    }
}

void RemoveCoopTeamMode()
{
    int arr[6], link, temp;

    if (!link && GetMemory(0x654d5c) == 1)
    {
        arr[0] = 0x4DB8BE56; arr[1] = 0x20680065; arr[2] = 0x6A00418F; arr[3] = 0x54FF5600; arr[4] = 0xC4830824; arr[5] = 0x90C35E0C;
        CancelTimer(FrameTimerWithArg(10, RemoveCoopTeamMode, RemoveCoopTeamMode));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        temp = GetMemory(0x5c3178);
        SetMemory(0x5c3178, link);
        GetHost();
        SetMemory(0x5c3178, temp);
    }
}

void SetGameTypeCoopMode()
{
    MakeCoopTeam();
    PlayerAutoTeamSign();
}

int GetWordValue(int num)
{
	return num & 0xffff;
}

void WriteAddressByteValue(int addr, int byt)
{
	int temp = GetMemory(addr) & 0xffffff00;
	SetMemory(addr, temp | byt);
}

int NoxUnicodeToUtf8(int src, int destPtr)
{
	int i, byt, dest = destPtr;

	for (i = 0 ; i < 20 ; i ++)
	{
		byt = GetWordValue(GetMemory(src));
        if (!byt) break;
		if (byt < 0x80)
		{
			WriteAddressByteValue(dest, byt);
			dest ++;
		}
		else if (byt < 0x800)
		{
			WriteAddressByteValue(dest, ((byt >> 6) & 0x1f) | 0xc0);
			WriteAddressByteValue(dest + 1, (byt & 0x3f) | 0x80);
			dest += 2;
		}
		else
		{
			WriteAddressByteValue(dest, ((byt >> 12) & 0x0f) | 0xe0);
			WriteAddressByteValue(dest + 1, ((byt >> 6) & 0x3f) | 0x80);
			WriteAddressByteValue(dest + 2, (byt & 0x3f) | 0x80);
			dest += 3;
		}
        src += 2;
	}
    WriteAddressByteValue(dest, 0);
	return dest - destPtr;
}

string PlayerIngameNick(int sUnit)
{
    string emptyName = {
        "00:01234567890123456789abcd0123456789abxyz", "01:01234567890123456789abcd0123456789abxyz",
        "02:01234567890123456789abcd0123456789abxyz", "03:01234567890123456789abcd0123456789abxyz",
        "04:01234567890123456789abcd0123456789abxyz", "05:01234567890123456789abcd0123456789abxyz",
        "06:01234567890123456789abcd0123456789abxyz", "07:01234567890123456789abcd0123456789abxyz",
        "08:01234567890123456789abcd0123456789abxyz", "09:01234567890123456789abcd0123456789abxyz",
        "10:01234567890123456789abcd0123456789abxyz", "11:01234567890123456789abcd0123456789abxyz",
        "12:01234567890123456789abcd0123456789abxyz", "13:01234567890123456789abcd0123456789abxyz",
        "14:01234567890123456789abcd0123456789abxyz", "15:01234567890123456789abcd0123456789abxyz",
        "16:01234567890123456789abcd0123456789abxyz", "17:01234567890123456789abcd0123456789abxyz",
        "18:01234567890123456789abcd0123456789abxyz", "19:01234567890123456789abcd0123456789abxyz",
        "20:01234567890123456789abcd0123456789abxyz", "21:01234567890123456789abcd0123456789abxyz",
        "22:01234567890123456789abcd0123456789abxyz", "23:01234567890123456789abcd0123456789abxyz",
        "24:01234567890123456789abcd0123456789abxyz", "25:01234567890123456789abcd0123456789abxyz",
        "26:01234567890123456789abcd0123456789abxyz", "27:01234567890123456789abcd0123456789abxyz",
        "28:01234567890123456789abcd0123456789abxyz", "29:01234567890123456789abcd0123456789abxyz",
        "30:01234567890123456789abcd0123456789abxyz", "31:01234567890123456789abcd0123456789abxyz"};
    int ptr = UnitToPtr(sUnit), plrIndex, destPtr, srcPtr;
    
    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 4)
        {
            plrIndex = GetMemory(GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x810);
            destPtr = GetMemory(0x97bb40 + ((SToInt(emptyName) + plrIndex) * 4));
            srcPtr = GetMemory(GetMemory(ptr + 0x2ec) + 0x114) + 0x889;
            NoxUnicodeToUtf8(srcPtr, destPtr);
            return ToStr(SToInt(emptyName) + plrIndex);
        }
    }
    return "NULL";
}

string StringOverflow(int t)
{
	return ToStr((t - 0x97bb40) / 4);
}

string EnchantList(int sNumber)
{
	return StringOverflow(0x596f24 + (sNumber * 4));
}

int UnitCheckEnchant(int sUnit, int sMagicFlag)
{
    int ptr = UnitToPtr(sUnit);

    if (ptr)
        return GetMemory(ptr + 0x154) & sMagicFlag;
    return 0;
}

int GetLShift(int sCount)
{
    return (1 << sCount);
}

void SetUnitEnchantCopy(int sUnit, int sMagicFlag)
{
	int ptr = UnitToPtr(sUnit);

	if (ptr)
	{
		Enchant(sUnit, EnchantList(6), 0.0);
		SetMemory(ptr + 0x154, GetMemory(ptr + 0x154) | sMagicFlag);
	}
}

void UnitSetEnchantTime(int unit, int enchantNumber, int durateTime)
{
	int ptr = UnitToPtr(unit), temp, tempPtr;

	if (ptr)
	{
		SetUnitEnchantCopy(unit, GetLShift(enchantNumber));
		tempPtr = ptr + 0x158 + ((enchantNumber / 2) * 4);
		temp = GetMemory(tempPtr);
		if (enchantNumber % 2)
		{
			SetMemory(tempPtr, (GetMemory(tempPtr) & 0xffff) | (durateTime << 0x10));
		}
		else
			SetMemory(tempPtr, ((GetMemory(tempPtr) >> 0x10) << 0x10) | durateTime);
	}
}

int PlayerClassItemIndexTable(int arg0)
{
    int plr = arg0 & 0xff, isSave = (arg0 >> 0x8) & 0xff, table[10];

    if (isSave)
        table[plr] = arg0 >> 0x10;
    return table[plr];
}

int PlayerClassPickAll(int pUnit, int tablePtr4, int startIndex)
{
    int count = GetMemory(tablePtr4 + (startIndex * 4)), i;

    if (count > GetHost()) return 0;
    for (i = count ; i ; i --)
        Pickup(pUnit, GetMemory(tablePtr4 + (((startIndex + i) % 1300) * 4)));
    return 1;
}

int PlayerClassDropAll(int pUnit, int tablePtr)
{
    int cntPtr = tablePtr, inv = GetLastItem(pUnit), headIndex = GetMemory(tablePtr), count = 0;

    tablePtr += 4;
    while (inv)
    {
        count ++;
        SetMemory(cntPtr, (GetMemory(cntPtr) + 1) % 1300);
        SetMemory(tablePtr + (GetMemory(cntPtr) * 4), inv);
        Drop(pUnit, inv);
        inv = GetLastItem(pUnit);
    }
    SetMemory(tablePtr + (headIndex * 4), count);
    return headIndex;
}

void EmptyAll(int unit)
{
    while (GetLastItem(unit))
        Delete(GetLastItem(unit));
}

int PlayerClassItemTable()
{
    int picker;
    int itemTable[1300];
}

int PlayerClassDeathFlagCheck(int plr)
{
    return player[plr + 10] & 0x80;
}

void PlayerClassDeathFlagSet(int plr)
{
    player[plr + 10] = player[plr + 10] ^ 0x80;
}

void PlayerClassOnInit(int plr, int pUnit)
{
    SelfDamageClassEntry(pUnit);
    DiePlayerHandlerEntry(pUnit);
    player[plr] = pUnit;
    player[plr + 10] = 1;
}

void getPlayers()
{
    int i, plr;

    if (CurrentHealth(other))
    {
        plr = CheckPlayer();
        for (i = 9 ; i >= 0 && plr < 0 ; i --)
        {
            if (!MaxHealth(player[i]))
            {
                PlayerClassOnInit(i, GetCaller());
                plr = i;
                break;
            }
        }
        if (plr >= 0)
            PlayerClassOnJoin(plr);
        else
            PlayerClassFailedJoin();
    }
}

void PlayerClassOnJoin(int plr)
{
    int ptr;

    EmptyAll(other);
    if (PlayerClassDeathFlagCheck(plr))
    {
        CancelTimer(FrameTimerWithArg(10, PlayerClassItemTable, PlayerClassItemTable));
        ptr = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        PlayerClassPickAll(other, ptr + 4, PlayerClassItemIndexTable(plr));
        PlayerClassDeathFlagSet(plr);
    }
    Enchant(other, EnchantList(14), 0.0);
    MoveObject(other, LocationX(5), LocationY(5));
    DeleteObjectTimer(CreateObjectAt("BlueRain", GetObjectX(other), GetObjectY(other)), 10);
    PlaySoundAround(other, 1008);
}

void PlayerClassFailedJoin()
{
    MoveObject(other, 3263.0, 1437.0);
    UnitSetEnchantTime(other, 25, 0);
    UnitSetEnchantTime(other, 29, 0);
    UniPrint(other, "이 맵이 수용할 수 있는 플레이어 허용치를 초과했기 때문에 더 이상 입장을 할 수 없습니다");
}

void PlayerClassOnDeath(int plr)
{
    int ptr;

    CancelTimer(FrameTimerWithArg(10, PlayerClassItemTable, PlayerClassItemTable));
    ptr = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    PlayerClassItemIndexTable((PlayerClassDropAll(player[plr], ptr) << 0x10) | (1 << 0x08) | plr);
    UniPrintToAll(PlayerIngameNick(player[plr]) + " 님께서 적에게 격추되었습니다");
}

void PlayerClassUseSkillCheck(int plr)
{
    int pUnit = player[plr];

    if (UnitCheckEnchant(pUnit, GetLShift(31)))
    {
        EnchantOff(pUnit, EnchantList(31));
        RemoveTreadLightly(pUnit);
        warriorSkillR(plr);
    }
}

void PlayerClassOnFree(int plr)
{
    CancelPlayerDialog(player[plr]);
    player[plr] = 0;
    player[plr + 10] = 0;
}

void PreservePlayersLoop()
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        while (1)
        {
            if (MaxHealth(player[i]))
            {
                if (GetUnitFlags(player[i]) & 0x40)
                    1;
                else if (CurrentHealth(player[i]))
                {
                    PlayerClassUseSkillCheck(i);
                    break;
                }
                else
                {
                    if (PlayerClassDeathFlagCheck(i)) break;
                    else
                    {
                        PlayerClassDeathFlagSet(i);
                        PlayerClassOnDeath(i);
                    }
                    break;
                }
            }
            if (player[i + 10])
                PlayerClassOnFree(i);
            break;
        }
    }
    FrameTimer(1, PreservePlayersLoop);
}

int DummyUnitCreate(string name, float locX, float locY)
{
    int unit = CreateObjectAt(name, locX, locY);

    Damage(unit, 0, MaxHealth(unit) + 1, -1);
    ObjectOff(unit);
    Frozen(unit, 1);
    return unit;
}

void DemonFireWalking(int sUnit)
{
    int durate = GetDirection(sUnit), owner = GetOwner(sUnit);

    while (1)
    {
        if (CurrentHealth(owner) && durate)
        {
            if (IsVisibleTo(sUnit, sUnit + 2))
            {
                MoveObject(sUnit + 2, GetObjectX(sUnit + 2) + GetObjectZ(sUnit), GetObjectY(sUnit + 2) + GetObjectZ(sUnit + 1));
                LookWithAngle(sUnit, durate - 1);
                FrameTimerWithArg(1, sUnit, DemonFireWalking);
                PlaySoundAround(sUnit + 2, 375);
                DeleteObjectTimer(CreateObjectAt("MeteorExplode", GetObjectX(sUnit + 2), GetObjectY(sUnit + 2)), 6);
                break;
            }
        }
        Delete(sUnit);
        Delete(sUnit + 1);
        Delete(sUnit + 2);
        break;
    }
}

void DemonFireWalkTouch()
{
    int owner = GetOwner(GetTrigger() - 2);

    if (CurrentHealth(other) && IsAttackedBy(other, owner))
    {
        if (UnitCheckEnchant(other, GetLShift(25)))
            return;
        Damage(other, owner, 135, 14);
        UnitSetEnchantTime(other, 25, 36);
    }
}

void FONClass(int curId)
{
    int owner = GetOwner(curId), unit;
    float xVect, yVect;

    if (CurrentHealth(owner))
    {
        xVect = UnitRatioX(curId, owner, 17.0);
        yVect = UnitRatioY(curId, owner, 17.0);
        unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(owner), GetObjectY(owner));
        Raise(CreateObjectAt("InvisibleLightBlueLow", GetObjectX(unit), GetObjectY(unit)), yVect);
        Raise(unit, xVect);
        SetOwner(owner, DummyUnitCreate("Demon", GetObjectX(owner) + xVect, GetObjectY(owner) + yVect) - 2);
        LookWithAngle(unit + 2, GetDirection(owner));
        LookWithAngle(unit, 30);
        SetCallback(unit + 2, 9, DemonFireWalkTouch);
        FrameTimerWithArg(1, unit, DemonFireWalking);
    }
    Delete(curId);
}

int TripleArrowClassCreate(int sOwner, float sX, float sY)
{
    int mis = CreateObjectAt("ArcherArrow", sX, sY);

    SetOwner(sOwner, mis);
    LookAtObject(mis, sOwner);
    LookWithAngle(mis, GetDirection(mis) + 128);
    UnitSetEnchantTime(mis, 25, 0);
    return mis;
}

void CastAbilityTripleArrow(int sOwner, float sForce)
{
    float xVect = UnitAngleCos(sOwner, - 7.0), yVect = UnitAngleSin(sOwner, -7.0);
    float gap = 0.1, xProfile = GetObjectX(sOwner), yProfile = GetObjectY(sOwner);
    
    if (CurrentHealth(sOwner))
    {
        xVect = UnitAngleCos(sOwner, -7.0);
        yVect = UnitAngleSin(sOwner, -7.0);
        PlaySoundAround(sOwner, 592);
        PushObject(
            TripleArrowClassCreate(sOwner, xProfile - xVect, yProfile - yVect), sForce, xProfile, yProfile);
        while (gap < 0.4)
        {
            PushObject(
                TripleArrowClassCreate(sOwner, (gap * yVect) + GetObjectX(sOwner) - xVect, (-gap * xVect) + GetObjectY(sOwner) - yVect), sForce, xProfile, yProfile);
            PushObject(
                TripleArrowClassCreate(sOwner, (-gap * yVect) + GetObjectX(sOwner) - xVect, (gap * xVect) + GetObjectY(sOwner) - yVect), sForce, xProfile, yProfile);
            gap += 0.1;
        }
        UniChatMessage(sOwner, "트리플 에로우 샷!", 150);
    }
}

void RemoveCoreUnits(int ptr)
{
    Delete(ptr);
    Delete(ptr + 1);
}

void BerserkerNoDelayCore(int plr)
{
    int arr[10];

    if (!MaxHealth(arr[plr]))
    {
        arr[plr] = CreateObjectAt("Bear2", LocationX(9 + plr), LocationY(9 + plr));
        CheckMonsterThing(CreateObjectAt("Rat", GetObjectX(arr[plr]), GetObjectY(arr[plr]) + 23.0) - 1);
        SetOwner(player[plr], arr[plr]);
        LookAtObject(arr[plr], arr[plr] + 1);
        HitLocation(arr[plr], GetObjectX(arr[plr] + 1), GetObjectY(arr[plr] + 1));
        FrameTimerWithArg(3, arr[plr], RemoveCoreUnits);
    }
}

void warriorSkillR(int plr)
{
    int trap[10], pUnit = player[plr];

    if (IsObjectOn(trap[plr]))
        MoveObject(trap[plr], GetObjectX(pUnit), GetObjectY(pUnit));
    else
        trap[plr] = CreateObjectAt("PoisonGasTrap", GetObjectX(pUnit), GetObjectY(pUnit));
    SetOwner(pUnit, trap[plr]);
    PlaySoundAround(pUnit, 39);
    BerserkerNoDelayCore(plr);
}

void DetectedSpecficIndex(int curId)
{
    int owner = GetOwner(curId), thingID;

    thingID = GetUnitThingID(curId);
    if (thingID == 526)
    {
        CastAbilityTripleArrow(owner, 22.0);
        Delete(curId);
    }
    else if (thingID == 706)
    {
        FONClass(curId);
    }
}

void LoopSearchIndex()
{
    int curId, tempId;

    if (GetMemory(0x750710))
    {
        tempId = GetMemory(GetMemory(0x750710) + 0x2c);
        if (curId)
        {
            curId;
            while (curId < tempId)
            {
                curId ++;
                DetectedSpecficIndex(curId);
            }
        }
        else
            curId = tempId;
    }
    FrameTimer(1, LoopSearchIndex);
}

void ItemUseClassTeleportAmulet()
{
    FrameTimerWithArg(150, GetTrigger() + 1, AmuletClassRespawn);
    Effect("SMOKE_BLAST", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    MoveObject(other, GetWaypointX(5), GetWaypointY(5));
    Effect("TELEPORT", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    PlaySoundAround(other, 594);
    Delete(self);
    UniPrint(other, "시작 위치로 공간이동 되었습니다");
}

int AmuletClassCreate(int sUnit)
{
    int amlet = CreateObjectAt("AmuletofManipulation", GetObjectX(sUnit), GetObjectY(sUnit));
    int ptr = GetMemory(0x750710);

    CreateObjectAt("ImaginaryCaster", GetObjectX(amlet), GetObjectY(amlet));
    SetMemory(ptr + 0x2dc, ImportUseItemFunc());
    CancelTimer(FrameTimerWithArg(10, ItemUseClassTeleportAmulet, ItemUseClassTeleportAmulet));
    SetMemory(ptr + 0x2fc, GetMemory(GetMemory(0x83395c) + 8));
    return amlet;
}

void AmuletClassRespawn(int sUnit)
{
    if (IsObjectOn(sUnit))
    {
        AmuletClassCreate(sUnit);
        Delete(sUnit);
    }
}

void AmuletClassPlacing(int sUnit)
{
    if (IsObjectOn(sUnit))
    {
        AmuletClassCreate(sUnit);
        if (!GetDirection(sUnit))
            FrameTimerWithArg(1, sUnit + 1, AmuletClassPlacing);
        Delete(sUnit);
    }
}

void AmuletClassInit()
{
    int unit = CreateObject("InvisibleLightBlueLow", 23);
    FrameTimerWithArg(1, CreateObject("InvisibleLightBlueLow", 24) - 1, AmuletClassPlacing);
    CreateObject("InvisibleLightBlueLow", 25);
    CreateObject("InvisibleLightBlueLow", 26);
    CreateObject("InvisibleLightBlueLow", 28);
    CreateObject("InvisibleLightBlueLow", 29);
    CreateObject("InvisibleLightBlueLow", 30);
    CreateObject("InvisibleLightBlueLow", 31);
    CreateObject("InvisibleLightBlueLow", 32);
    CreateObject("InvisibleLightBlueLow", 33);
    CreateObject("InvisibleLightBlueLow", 34);
    CreateObject("InvisibleLightBlueLow", 35);
    CreateObject("InvisibleLightBlueLow", 36);
    CreateObject("InvisibleLightBlueLow", 37);
    CreateObject("InvisibleLightBlueLow", 38);
    CreateObject("InvisibleLightBlueLow", 39);
    CreateObject("InvisibleLightBlueLow", 41);
    CreateObject("InvisibleLightBlueLow", 42);
    CreateObject("InvisibleLightBlueLow", 43);
    CreateObject("InvisibleLightBlueLow", 44);
    CreateObject("InvisibleLightBlueLow", 45);
    CreateObject("InvisibleLightBlueLow", 46);
    CreateObject("InvisibleLightBlueLow", 47);
    CreateObject("InvisibleLightBlueLow", 48);
    CreateObject("InvisibleLightBlueLow", 49);
    CreateObject("InvisibleLightBlueLow", 50);
    CreateObject("InvisibleLightBlueLow", 51);
    CreateObject("InvisibleLightBlueLow", 52);
    CreateObject("InvisibleLightBlueLow", 53);
    CreateObject("InvisibleLightBlueLow", 54);
    CreateObject("InvisibleLightBlueLow", 55);
    CreateObject("InvisibleLightBlueLow", 56);
    LookWithAngle(CreateObject("InvisibleLightBlueLow", 57), 1);
}

void UnitDropItem(int unit)
{
    if (!Random(0, 2))
    {
        MoveWaypoint(2, GetObjectX(unit), GetObjectY(unit));
        DeleteObjectTimer(CreatePotion(2, Random(0, 13)), 900);
    }
}

void SetDeaths()
{   
    UnitDropItem(self);
    FrameTimerWithArg(900, ToInt(GetObjectZ(GetTrigger() + 1)), SpawnMonsters);
    Delete(GetTrigger() + 1);
    KillScore ++;
    if (KillScore >= setLessons(0))
        victoryEvent();
}

void victoryEvent() {
    UniPrintToAll("승리__!! 제한시간 내로 목표킬수에 달성했습니다. 축하드려요~");
    Shutdown = 1;
    RemoveAllMonsters();
    teleportAllPlayers(90);
    PlayWav(593);
    PlayWav(589);
    Effect("WHITE_FLASH", LocationX(90), LocationY(90), 0.0, 0.0);

    FrameTimerWithArg(30, 90, DrawVictoryText);
}

void DrawVictoryText(int location)
{
    MoveWaypoint(1, LocationX(location), LocationY(location));
    StrYourWinner();
}

void DisplayLadderBoard()
{
    int time;

    if (IsCaller(GetTrigger() + 1))
    {
        if (GetDirection(self))
            LookWithAngle(self, GetDirection(self) - 1);
        else
        {
            LookWithAngle(self, 30);
            time = ToInt(GetObjectZ(GetTrigger() + 2));
            if (time)
            {
                UniChatMessage(self, "남은시간 " + IntToString(time) + "초\n킬 스코어: " + IntToString(KillScore) + " / " + IntToString(setLessons(0)), 60);
                Raise(GetTrigger() + 2, time - 1);
            }
            else
            {
                Delete(self);
                Delete(GetTrigger() + 1);
                timeOver();
            }
        }
    }
}

void StartCountdown(int time)
{
    int counter = getMaster();

    Raise(counter + 2, time);
    LookWithAngle(counter, 0);
    SetCallback(counter, 9, DisplayLadderBoard);
}

void timeOver()
{
    Shutdown = 1;
    UniPrintToAll("패배__!! 제한시간이 초과 되었습니다...");
    ObjectOff(Object("StartLocation"));
    RemoveAllMonsters();
    teleportAllPlayers(3);
    PlayWav(589);
    MoveWaypoint(1, LocationX(3), LocationY(3));
    StrFailMission();
}

void RemoveAllMonsters()
{
    int i;

    for (i = 0 ; i < 200 ; i ++)
    {
        if (CurrentHealth(Victim[i]))
        {
            Delete(Victim[i] + 1);
            Delete(Victim[i]);
        }
    }
}

int getMaster()
{
    int unit;

    if (!unit)
    {
        unit = CreateObject("Hecubah", 27);
        CreateObject("BlackPowder", 27);
        CreateObject("ImaginaryCaster", 27);
        Frozen(unit, 1);
    }
    return unit;
}

int setLessons(int arg0)
{
    int dump;

    if (arg0 > 0)
        dump = arg0;
    return dump;
}

void SelectRoomToHostPlayer(int pUnit)
{
    if (CurrentHealth(pUnit))
    {
        UnitSetEnchantTime(pUnit, 25, 60);
        MoveObject(pUnit, GetWaypointX(22), GetWaypointY(22));
        UniPrint(pUnit, "목표 킬 수치를 선택해주세요");
        UniPrintToAll(PlayerIngameNick(pUnit) + "님께서 목표킬수를 정하고 있습니다");
    }
}

void KillPointChooseComplete(int pUnit)
{
    int killPoint = setLessons(0);

    MoveObject(pUnit, GetWaypointX(5), GetWaypointY(5));
    UniPrint(pUnit, IntToString(killPoint) + "킬을 선택하셨습니다");
}

void getLessons400()
{
    setLessons(400);
    KillPointChooseComplete(other);
    FrameTimerWithArg(100, 300, noticeKills);
}

void getLessons550()
{
    setLessons(550);
    KillPointChooseComplete(other);
    FrameTimerWithArg(100, 360, noticeKills);
}

void getLessons700()
{
    setLessons(700);
    KillPointChooseComplete(other);
    FrameTimerWithArg(100, 420, noticeKills);
}

void getLessons900()
{
    setLessons(900);
    KillPointChooseComplete(other);
    FrameTimerWithArg(100, 450, noticeKills);
}

void fieldOut() {
    Effect("TELEPORT", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    Effect("SMOKE_BLAST", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    MoveObject(other, GetWaypointX(91), GetWaypointY(91));
    Effect("TELEPORT", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    Effect("SMOKE_BLAST", GetObjectX(other), GetObjectY(other), 0.0, 0.0);
    AudioEvent("BlindOff", 91);
}

void teleportAllPlayers(int wp)
{
    int i;

    for (i = 0 ; i < 10 ; i ++)
    {
        if (CurrentHealth(player[i]))
            MoveObject(player[i], LocationX(wp), LocationY(wp));
    }
}

void noticeKills(int time)
{
    UniPrintToAll("목표킬수가 " + IntToString(setLessons(0)) + "킬(제한시간 " + IntToString(time) + "초) 으로 정해졌습니다");
    UniPrintToAll("잠시 후 게임시작과 동시에 전장에 몬스터가 출현됩니다");
    UniPrintToAll("게임 룰: 정해진 시간 내에 목표킬수에 달성하지 못하면 패배처리가 됩니다");
    PlayWav(38);
    FrameTimer(10, LoopSearchIndex);
    FrameTimerWithArg(200, time, StartCountdown);
    FrameTimer(200, initSpawnMonsters);
    FrameTimer(400, NoticeGameInfo);
}

void NoticeGameInfo()
{
    UniPrintToAll("제한시간내로 괴수들을 잡아 목표킬수를 채우세요...!");
    UniPrintToAll("전사 스킬설명: 작살-트리플 에로우 샷, 조심스럽게 걷기-버저커 차지의 딜레이를 없앱니다.");
    UniPrintToAll("자세한 사항은 콘솔 키(F1)를 눌러서 확인하세요.");
    PlayWav(913);
}

void initSpawnMonsters()
{
    int i;

    if (i < 200) {
        SpawnMonsters(i);
        i ++;
        FrameTimer(1, initSpawnMonsters);
    }
}

void CollisionEvent()
{
    if (HasClass(other, "MISSILE"))
    {
        if (HasSubclass(other, "CHAKRAM"))
            MoveObject(other, GetObjectX(self), GetObjectY(self));
    }
}

void SpawnMonsters(int unitIndex)
{
    int pic, unit;

    if (!Shutdown)
    {
        if (!CurrentHealth(Victim[unitIndex]))
        {
            Delete(Victim[unitIndex]);
            pic = Random(0, 21);
            unit = CreateObject(mobType(pic), (unitIndex % 10) + 101);
            InsertSpecialValue(pic, unitIndex, unit);
            CheckMonsterThing(unit);
            SetUnitMaxHealth(unit, mobHp(pic));
            SetCallback(unit, 3, LookEnemy);
            SetCallback(unit, 5, SetDeaths);
            SetCallback(unit, 7, CollisionEvent);
            SetOwner(getMaster(), unit);
            SpecialUnitAbility(unit, pic);
            Victim[unitIndex] = unit;
        }
        else
            UniPrintToAll("인덱스 충돌!_ 인덱스 " + IntToString(unitIndex) + " 에서 에러가 발생했습니다.");
    }
}

void LoopMonsterStatus()
{
    int index, i;

    for (i = 0 ; i < 5 ; i ++)
    {
        if (CurrentHealth(Victim[index]))
        {
            if (UnitCheckEnchant(Victim[index], GetLShift(28)))
            {
                MoveObject(reventCharm(), GetObjectX(Victim[index]), GetObjectY(Victim[index]));
                CastSpellObjectObject("SPELL_COUNTERSPELL", reventCharm(), reventCharm());
                UniChatMessage(Victim[index], "인간적으로 참크리쳐는 개오바지... ㅡㅡ.", 150);
            }
        }
    }
    index = (index + 5) % 200;
}

void InsertSpecialValue(int pic, int unitIndex, int targetUnit)
{
    int unit = CreateObjectAt("InvisibleLightBlueLow", GetObjectX(targetUnit), GetObjectY(targetUnit));

    Raise(unit, unitIndex);
    LookWithAngle(unit, pic);
}

void LookEnemy()
{
    if (CurrentHealth(other))
        UniChatMessage(self, unitName(GetDirection(GetTrigger() + 1)), 150);
}

void SpecialUnitAbility(int unit, int num)
{
    if (GetUnitStatus(unit) & 0x20)
        Enchant(unit, "ENCHANT_ANCHORED", 0.0);
}

void PlacedPotions()
{
    int idx, i;

    if (idx < 11)
    {
        MoveWaypoint(4, GetWaypointX(21), GetWaypointY(21));
        for (i = 0 ; i < 14 ; i ++)
        {
            CreatePotion(4, idx);
            CreatePotion(4, idx);
            CreatePotion(4, idx);
            MoveWaypoint(4, GetWaypointX(4) - 23.0, GetWaypointY(4) + 23.0);
        }
        MoveWaypoint(21, GetWaypointX(21) + 23.0, GetWaypointY(21) + 23.0);
        idx ++;
        FrameTimer(1, PlacedPotions);
    }
}

int CreatePotion(int location, int idx)
{
    return CheckPotionThingID(CreateObject(potionList(idx), location));
}

int SToInt(string x)
{
    StopScript(x);
}

string ToStr(int x)
{
    StopScript(x);
}

int ToInt(float x)
{
    StopScript(x);
}

float ToFloat(int x)
{
    StopScript(x);
}

string mobType(int num)
{
    string name = {"Swordsman", "Archer", "Skeleton", "SkeletonLord", "WillOWisp", "WizardGreen", "BlackWolf", "OgreBrute",
    "GruntAxe", "Scorpion", "Shade", "AlbinoSpider", "BlackWidow", "Troll", "Bear", "OgreWarlord", "MeleeDemon",
    "FireSprite", "FlyingGolem", "EvilCherub", "GiantLeech", "Bat"};

    return ToStr(SToInt(name) + num);
}

int mobHp(int arg_0) {
    int var_0[22];

    if (arg_0 == -1) {
        var_0[0] = 306;
        var_0[1] = 128;
        var_0[2] = 250;
        var_0[3] = 290;
        var_0[4] = 250;
        var_0[5] = 225;
        var_0[6] = 225;
        var_0[7] = 295;
        var_0[8] = 225;
        var_0[9] = 240;
        var_0[10] = 180;
        var_0[11] = 180;
        var_0[12] = 200;
        var_0[13] = 285;
        var_0[14] = 325;
        var_0[15] = 350;
        var_0[16] = 225;
        var_0[17] = 96;
        var_0[18] = 96;
        var_0[19] = 128;
        var_0[20] = 180;
        var_0[21] = 96;
        return var_0[0];
    }
    return var_0[arg_0];
}

string unitName(int arg_0) {
    string var_0[22];

    if (arg_0 == -1) {
        var_0[0] = "만취자";
        var_0[1] = "아베신조";
        var_0[2] = "허세남";
        var_0[3] = "고교 패거리";
        var_0[4] = "위스프";
        var_0[5] = "최순실(비선실세)";
        var_0[6] = "거리에 똥싸는 개";
        var_0[7] = "불륜남";
        var_0[8] = "불륜녀";
        var_0[9] = "음식가지고 장난치는 사람";
        var_0[10] = "묻지마 살인범";
        var_0[11] = "성폭행범";
        var_0[12] = "(히든)대왕거미";
        var_0[13] = "일베충";
        var_0[14] = "폭주족";
        var_0[15] = "난폭운전자";
        var_0[16] = "방화범";
        var_0[17] = "불의 정령";
        var_0[18] = "무선조종드론";
        var_0[19] = "까마귀";
        var_0[20] = "자이언트 거머리";
        var_0[21] = "닭둘기";
        return var_0[0];
    }
    return var_0[arg_0];
}

int CheckPlayer()
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        if (IsCaller(player[i]))
            return i;
    }
    return -1;
}

void PlayWav(int soundId)
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        if (CurrentHealth(player[i]))
            PlaySoundAround(player[i], soundId);
    }
}

void setUnitHealth(int arg_0, int arg_1)
{
    Damage(arg_0, 0, CurrentHealth(arg_0) - 1, -1);
    Pickup(arg_0, CreateObject("rottenMeat", 100));
    Damage(arg_0, 0, CurrentHealth(arg_0) - arg_1, -1);
}

float IntToFloat(int x) {
	int i;
	int pos = x;
	float result = 0.0;

	if (pos < 0)
		pos = -pos;
	for (i = 0; i < 32; i ++)
	{
		if (pos & 0x80000000)
			result += 1.0;
		pos = pos << 1;
		if (i != 31)
			result *= 2.0;
	}
	if (x < 0)
		return -result;
	else
		return result;
}

int reventCharm() {
    int var_0;

    if (!var_0)
        var_0 = CreateObject("InvisibleLightBlueHigh", 20);
    return var_0;
}

int CreateYellowPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 639); //YellowPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateBlackPotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 641); //BlackPotion
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CreateWhitePotion(int restoreAmount, float xProfile, float yProfile)
{
    int unit = CreateObjectAt("RedPotion", xProfile, yProfile);
    int ptr = GetMemory(0x750710);

    SetMemory(ptr + 4, 640); //WhitePotion
    SetMemory(ptr + 12, GetMemory(ptr + 12) ^ 0x20);
    SetMemory(GetMemory(ptr + 0x2e0), restoreAmount);

    return unit;
}

int CheckPotionThingID(int unit)
{
    int thingID = GetUnitThingID(unit), x = unit;

    if (thingID == 639)
        x = CreateYellowPotion(125, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 640)
        x = CreateWhitePotion(100, GetObjectX(unit), GetObjectY(unit));
    else if (thingID == 641)
        x = CreateBlackPotion(85, GetObjectX(unit), GetObjectY(unit));
    if (x ^ unit) Delete(unit);
    return x;
}

string potionList(int numbering)
{
    string potionTable = {"RedPotion", "BluePotion", "CurePoisonPotion", "VampirismPotion", "ShieldPotion", "HastePotion",
        "WhitePotion", "YellowPotion", "BlackPotion", "RedPotion", "RedPotion", "PoisonProtectPotion", "FireProtectPotion",
        "ShockProtectPotion"};

    return ToStr(SToInt(potionTable) + numbering);
}

void MakePermanentItem()
{
    int inv = GetLastItem(other), res = 0;

    while (inv)
    {
        if (UnitCheckEnchant(inv, GetLShift(23)))
            1;
        else
        {
            UnitSetEnchantTime(inv, 23, 0);
            res ++;
        }
        inv = GetPreviousItem(inv);
    }
    if (res)
    {
        UnitSetEnchantTime(other, 25, 30);
        UniPrint(other, "[!!] " + IntToString(res) + " 개의 아이템을 무적화 했습니다");
    }
}

int CheckOwner(int unit)
{
    int i;

    for (i = 9 ; i >= 0 ; i --)
    {
        if (IsOwnedBy(unit, player[i]))
            return i;
    }
    return -1;
}

void StrYourWinner()
{
	int arr[26], i, count = 0;
	string name = "HealOrb";
	float pos_x = GetWaypointX(1), pos_y = GetWaypointY(1);

	arr[0] = 1008796286; arr[1] = 1338015748; arr[2] = 270541312; arr[3] = 134236228; arr[4] = 35653888; arr[5] = 75776516; arr[6] = 9438912; arr[7] = 1146208324; 
	arr[8] = 25362576; arr[9] = 100417554; arr[10] = 585874; arr[11] = 67190528; arr[12] = 659584; arr[13] = 269745921; arr[14] = 8388798; arr[15] = 4097; 
	arr[16] = 2114454018; arr[17] = 16781312; arr[18] = 2105848; arr[19] = 1879183392; arr[20] = 35668031; arr[21] = 553783300; arr[22] = 67239936; arr[23] = 1090543556; 
	arr[24] = 537132063; arr[25] = 67124992; 
	for (i = 0 ; i < 26 ; i ++)
		count = DrawStrYourWinner(arr[i], name, count);
	MoveWaypoint(1, pos_x, pos_y);
}

int DrawStrYourWinner(int arg, string name, int count)
{
	int i;

	for (i = 1 ; i > 0 && count < 806 ; i <<= 1)
	{
		if (i & arg)
			CreateObject(name, 1);
		if (count % 74 == 73)
			MoveWaypoint(1, GetWaypointX(1) - 146.0, GetWaypointY(1) + 2.0);
		else
			MoveWaypoint(1, GetWaypointX(1) + 2.0, GetWaypointY(1));
		count ++;
	}
	return count;
}

void StrFailMission()
{
	int arr[22], i, count = 0;
	string name = "HealOrb";
	float pos_x = GetWaypointX(1), pos_y = GetWaypointY(1);

	arr[0] = 270598782; arr[1] = 285235140; arr[2] = 272171586; arr[3] = 285233156; arr[4] = 673251906; arr[5] = 285233796; arr[6] = 1210221122; arr[7] = 285233796; 
	arr[8] = 71074370; arr[9] = 285233797; arr[10] = 36192834; arr[11] = 285241984; arr[12] = 2082480706; arr[13] = 285233799; arr[14] = 2097730; arr[15] = 21124; 
	arr[16] = 2080391746; arr[17] = 285233799; arr[18] = 67125886; arr[19] = 293361600; arr[20] = 2084553216; arr[21] = 20487; 
	for (i = 0 ; i < 22 ; i ++)
		count = DrawStrFailMission(arr[i], name, count);
	MoveWaypoint(1, pos_x, pos_y);
}

int DrawStrFailMission(int arg, string name, int count)
{
	int i;

	for (i = 1 ; i > 0 && count < 682 ; i <<= 1)
	{
		if (i & arg)
			CreateObject(name, 1);
		if (count % 62 == 61)
			MoveWaypoint(1, GetWaypointX(1) - 122.0, GetWaypointY(1) + 2.0);
		else
			MoveWaypoint(1, GetWaypointX(1) + 2.0, GetWaypointY(1));
		count ++;
	}
	return count;
}

int ImportUniChatCore()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0xC0685657; arr[1] = 0x6800528A; arr[2] = 0x00507250; arr[3] = 0x8B2414FF; arr[4] = 0x2414FFF8;
        arr[5] = 0x14FFF08B; arr[6] = 0x56505724; arr[7] = 0x102454FF; arr[8] = 0x5E14C483; arr[9] = 0x9090C35F;
        CancelTimer(FrameTimerWithArg(10, ImportUniChatCore, ImportUniChatCore));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniChatCore(int plrPtr, int sPtr, int sTime)
{
    int temp = GetMemory(0x5c3320);

    SetMemory(0x5c3320, ImportUniChatCore());
    GroupRunAway(sPtr, plrPtr, sTime);
    SetMemory(0x5c3320, temp);
}

int ImportUniPrintCore()
{
    int arr[8], link;

    if (!link)
    {
        arr[0] = 0x9EB06856; arr[1] = 0x5068004D; arr[2] = 0xFF005072; arr[3] = 0xF08B2414; arr[4] = 0x502414FF;
        arr[5] = 0x2454FF56; arr[6] = 0x10C4830C; arr[7] = 0x9090C35E; 
        CancelTimer(FrameTimerWithArg(10, ImportUniPrintCore, ImportUniPrintCore));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniPrintCore(int plrPtr, int sPtr)
{
    int temp = GetMemory(0x5c31f4);

    SetMemory(0x5c31f4, ImportUniPrintCore());
    Unused5a(sPtr, plrPtr);
    SetMemory(0x5c31f4, temp);
}

int GetByteValue(int ptr)
{
    return GetMemory(ptr) & 0xff;
}

void WriteAddressWordValue(int addr, int word)
{
    int temp = GetMemory(addr) & 0xffff0000;
    SetMemory(addr, temp | word);
}

void NoxUtf8ToUnicode(int src, int dest)
{
    int i = 0, byt;

    while (1)
    {
        byt = GetByteValue(src + i);
        if (!byt) break;
        if (!(byt & 0x80))
        {
            WriteAddressWordValue(dest, byt);
            i ++;
        }
        else if ((byt & 0xe0) == 0xc0)
        {
            WriteAddressWordValue(dest, ((byt & 0x1f) <<6) | (GetByteValue(src + i + 1) & 0x3f));
            i += 2;
        }
        else if ((byt & 0xf0) == 0xe0)
        {
            WriteAddressWordValue(dest, ((byt & 0xf) << 12) | ((GetByteValue(src + i + 1) & 0x3f) << 6) | (GetByteValue(src + i + 2) & 0x3f));
            i += 3;
        }
        dest += 2;
    }
    WriteAddressWordValue(dest, 0);
}

void UniPrint(int sUnit, string sMsg)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
        {
            CancelTimer(FrameTimerWithArg(10, UniPrint, UniPrint));
            link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        }
        NoxUtf8ToUnicode(str, link + 8);
        UniPrintCore(ptr, link + 8);
    }
}

void UniChatMessage(int sUnit, string sMsg, int duration)
{
    int wDest[200];
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg), link;

    if (ptr)
    {
        str = GetMemory(0x97bb40 + (str * 4));
        if (!link)
        {
            CancelTimer(FrameTimerWithArg(10, UniChatMessage, UniChatMessage));
            link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        }
        NoxUtf8ToUnicode(str, link + 12);
        UniChatCore(ptr, link + 12, duration);
    }
}

void UniPrintToAll(string sMsg)
{
    int wDest[200];
    int plrPtr = 0x62f9e0, link, str = SToInt(sMsg), i;

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, UniPrint, UniPrint));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c)) + 4;
    }
    str = GetMemory(0x97bb40 + (str * 4));
    NoxUtf8ToUnicode(str, link);
    for (i = 0 ; i < 32 ; i ++)
    {
        if (GetMemory(plrPtr))
            UniPrintCore(GetMemory(plrPtr), link);
        plrPtr += 0x12dc;
    }
}

int MathAbs(int num)
{
    if (num < 0)
        num = -num;
    return num;
}

int CheckSignDelay(int sPtr, int gap)
{
    int cFps = GetMemory(0x84ea04);

    if (MathAbs(cFps - GetMemory(sPtr)) > gap)
    {
        SetMemory(sPtr, cFps);
        return 1;
    }
    return 0;
}

void SignNotification()
{
    int otPtr = GetMemory(0x979720), sePtr = GetMemory(0x979724);

    if (otPtr && sePtr)
    {
        if (CheckSignDelay(GetMemory(sePtr + 0x2e0) + 100, 60))
        {
            UniPrint(other, ToStr(GetMemory(sePtr + 0x2f0)));
            //UniPrintCore(otPtr, GetMemory(sePtr + 0x2e0));
        }
    }
}

void RegistSignMessage(int sUnit, string sMsg)
{
    int ptr = UnitToPtr(sUnit), str = SToInt(sMsg);

    if (ptr)
    {
        SetMemory(ptr + 0x2f0, str);
        //str = GetMemory(0x97bb40 + (str * 4));
        //NoxUtf8ToUnicode(str, GetMemory(ptr + 0x2e0));
        SetMemory(ptr + 0x2dc, ImportUseItemFunc());
        CancelTimer(FrameTimerWithArg(10, SignNotification, SignNotification));
        SetMemory(ptr + 0x2fc, GetMemory(GetMemory(0x83395c) + 8));
    }
}

int ImportUniBroadcast()
{
    int arr[6], link;

    if (!link)
    {
        arr[0] = 0x4D9FD068; arr[1] = 0x72506800; arr[2] = 0x14FF0050; arr[3] = 0x106A5024;
        arr[4] = 0x0C2454FF; arr[5] = 0xC310C483;
        CancelTimer(FrameTimerWithArg(10, ImportUniBroadcast, ImportUniBroadcast));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void UniBroadcast(string sMsg)
{
    int wDest[100];
    int temp = GetMemory(0x5c3108), link, str = GetMemory(0x97bb40 + (SToInt(sMsg) * 4));

    if (!link)
    {
        CancelTimer(FrameTimerWithArg(10, UniBroadcast, UniBroadcast));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    NoxUtf8ToUnicode(str, link + 4);
    SetMemory(0x5c3108, ImportUniBroadcast());
    Unused1f(link + 4);
    SetMemory(0x5c3108, temp);
}

int ImportUseItemFunc()
{
    int arr[10], link;
    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x1424748B; arr[3] = 0x18246C8B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUseItemFunc, ImportUseItemFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

int ImportUnitCollideFunc()
{
    int arr[10], link;

    if (!link)
    {
        arr[0] = 0x50731068; arr[1] = 0x50565500; arr[2] = 0x14246C8B; arr[3] = 0x1824748B;
        arr[4] = 0x02FC858B; arr[5] = 0x56550000; arr[6] = 0x2454FF50; arr[7] = 0x0CC48318;
        arr[8] = 0x835D5E58; arr[9] = 0x90C304C4;
        CancelTimer(FrameTimerWithArg(10, ImportUnitCollideFunc, ImportUnitCollideFunc));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void InitMapSign()
{
    RegistSignMessage(Object("SignKill400"), "목표킬수 400 킬로 설정합니다");
    RegistSignMessage(Object("SignKill500"), "목표킬수 550 킬로 설정합니다");
    RegistSignMessage(Object("SignKill600"), "목표킬수 700 킬로 설정합니다");
    RegistSignMessage(Object("TestPicket1"), "인벤토리 내 모든 아이템을 파괴불능 상태로 설정해주는 비콘입니다. 3개 모두 같은 역할을 합니다");
    RegistSignMessage(Object("TestPicket2"), "우리에겐 시간이 없어요! 우측 상단에 표시된 시간내에 목표킬수에 달성해야 합니다");
}

void ChangePlayerDeathSound(int handle, int soundNumber)
{
    SetMemory(handle + 0x258, soundNumber);
}

int OpcodeGetTargetAddr(int curAddr)
{
    return GetMemory(curAddr + 1) + curAddr + 5;
}

void OpcodeLoadEffectiveAddr(int loadAddr, int codeAddr, int offset)
{
    int targetAddr = OpcodeGetTargetAddr(codeAddr + offset);

    SetMemory(loadAddr + offset + 1, targetAddr - (loadAddr + offset) - 5);
}

void OpcodeCopies(int destPtr, int callNodePtr, int startAddr, int endAddr)
{
    int destBase = destPtr;
    int curAddr = startAddr;

    while (curAddr <= endAddr)
    {
        SetMemory(destPtr, GetMemory(curAddr));
        if (GetMemory(callNodePtr))
        {
            if (GetMemory(callNodePtr) + 1 <= curAddr)
            {
                OpcodeLoadEffectiveAddr(destBase, startAddr, GetMemory(callNodePtr) - startAddr);
                callNodePtr += 4;
            }
        }
        curAddr += 4;
        destPtr += 4;
    }
}

int DiePlayerHandlerCopiedCode()
{
    int arr[314], link, callNode;

    if (!link)
    {
        CallNode54d2b0();
        CancelTimer(FrameTimerWithArg(10, DiePlayerHandlerCopiedCode, DiePlayerHandlerCopiedCode));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        CancelTimer(FrameTimerWithArg(10, CallNode54d2b0, CallNode54d2b0));
        callNode = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
        OpcodeCopies(link, callNode, 0x54d2b0, 0x54d794);
    }
    return link;
}

void DiePlayerHandlerEntry(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        SetMemory(ptr + 0x2d4, DiePlayerHandlerCopiedCode());
}

void CallNode54d2b0()
{
    int arr[40];

    if (!arr[0])
    {
        arr[0] = 0x54d2d1;
        arr[1] = 0x54d2e3;
        arr[2] = 0x54d2f3;
        arr[3] = 0x54d30a;
        arr[4] = 0x54d348;
        arr[5] = 0x54d375;
        arr[6] = 0x54d3aa;
        arr[7] = 0x54d45c;
        arr[8] = 0x54d47b;
        arr[9] = 0x54d513;
        arr[10] = 0x54d527;
        arr[11] = 0x54d566;
        arr[12] = 0x54d574;
        arr[13] = 0x54d588;
        arr[14] = 0x54d594;
        arr[15] = 0x54d5a6;
        arr[16] = 0x54d5b2;
        arr[17] = 0x54d5c4;
        arr[18] = 0x54d5d1;
        arr[19] = 0x54d5e2;
        arr[20] = 0x54d5f4;
        arr[21] = 0x54d610;
        arr[22] = 0x54d622;
        arr[23] = 0x54d62c;
        arr[24] = 0x54d639;
        arr[25] = 0x54d642;
        arr[26] = 0x54d65b;
        arr[27] = 0x54d662;
        arr[28] = 0x54d668;
        arr[29] = 0x54d67a;
        arr[30] = 0x54d680;
        arr[31] = 0x54d693;
        arr[32] = 0x54d6a6;
        arr[33] = 0x54d727;
        arr[34] = 0x54d72d;
        arr[35] = 0x54d733;
        arr[36] = 0x54d73d;
        arr[37] = 0x54d749;
        arr[38] = 0x54d782;
    }
}

int ImportCheckSelfDamage()
{
    int arr[14], link;

    if (!link)
    {
        arr[0] = 0x4C8B5651; arr[1] = 0xC9850C24; arr[2] = 0x748B2374; arr[3] = 0xF6851024; arr[4] = 0xF1391B74; arr[5] = 0x8B501374; arr[6] = 0x0001FC86;
        arr[7] = 0x74C08500; arr[8] = 0x58F08B05; arr[9] = 0xEB58ECEB; arr[10] = 0xC3595E04; arr[11] = 0x68595E90; arr[12] = 0x004E17B0; arr[13] = 0x909090C3;
        CancelTimer(FrameTimerWithArg(10, ImportCheckSelfDamage, ImportCheckSelfDamage));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void SelfDamageClassEntry(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit);

    if (ptr)
        SetMemory(ptr + 0x2cc, ImportCheckSelfDamage());
}

void CancelPlayerDialogWithPTR(int plrPtr)
{
    if (GetMemory(GetMemory(plrPtr + 0x2ec)) + 0x11c)
    {
        SetMemory(GetMemory(plrPtr + 0x2ec) + 0x11c, 0);
        SetMemory(GetMemory(GetMemory(plrPtr + 0x2ec) + 0x114) + 0xe60, 0x10);
    }
}

void CancelPlayerDialog(int plrUnit)
{
    int temp = UnitToPtr(plrUnit);

    if (temp)
        CancelPlayerDialogWithPTR(temp);
}

void SelfDamageClassMapExit()
{
    int pTable = 0x62f9e0, i;

    for (i = 31 ; i >= 0 ; i --)
    {
        if (GetMemory(pTable))
        {
            SetMemory(GetMemory(pTable) + 0x2cc, 0x4e17b0);
            SetMemory(GetMemory(pTable) + 0x2d4, 0x54d2b0);
            CancelPlayerDialogWithPTR(GetMemory(pTable));
        }
        pTable += 0x12dc;
    }
}

int ImportRemoveSneakDelay()
{
    int arr[7], link;

    if (!link)
    {
        arr[0] = 0x72506850; arr[1] = 0x14FF0050; arr[2] = 0xC3006824; arr[3] = 0x046A004F; arr[4] = 0x2454FF50; arr[5] = 0x10C48308; arr[6] = 0x9090C358;
        CancelTimer(FrameTimerWithArg(10, ImportRemoveSneakDelay, ImportRemoveSneakDelay));
        link = GetMemory(GetMemory(0x75ae28) + (0x30 * GetMemory(GetMemory(0x83395c) + 8) + 0x1c));
    }
    return link;
}

void RemoveTreadLightly(int plrUnit)
{
    int ptr = UnitToPtr(plrUnit), temp = GetMemory(0x5c336c);

    if (ptr)
    {
        if (GetMemory(ptr + 0x08) & 0x04)
        {
            SetMemory(0x5c336c, ImportRemoveSneakDelay());
            Unknownb8(ptr);
            SetMemory(0x5c336c, temp);
        }
    }
}

void MapExit()
{
    SelfDamageClassMapExit();
    RemoveCoopTeamMode();
}

void UserMapSetting()
{
    SetMemory(0x5d5330, 0x2000);
    SetMemory(0x5d5394, 1);
}

void StartLocationOn(int startLocationName)
{
    int ptr;

    if (ToInt(GetObjectX(startLocationName)))
    {
        SetGameTypeCoopMode();
        ImportCheckSelfDamage();
        ImportRemoveSneakDelay();
        ptr = DiePlayerHandlerCopiedCode();
        ChangePlayerDeathSound(ptr, 913);
        SetMemory(ptr + 0x386, (GetMemory(ptr + 0x386) & 0xffff0000) | 0x9eb);
        ObjectOn(startLocationName);
        FrameTimer(10, PreservePlayersLoop);
        UserMapSetting();
        FrameTimer(1, AmuletClassInit);
        LoopMonsterStatus();
    }
}